;;; -*- mode: lisp -*-

(in-package :cl-user)

(load-all-patches)

;;; loading slime and packages
(eval-when (:load-toplevel :execute)
  (load (merge-pathnames "cl/startup-common.lisp" (user-homedir-pathname))))

;; (setq swank:*communication-style* nil)
;; (setf swank:*globally-redirect-io* t)
;; (defun start-swank-server ()
;;   (swank:create-server :dont-close t :port 4007))

;; (push '("swank-server init" nil start-swank-server) mp:*initial-processes*)


;; (setf *inspect-through-gui* t
;;       system:*stack-overflow-behaviour* :warn)

;; (set-default-character-element-type 'simple-char)

;; (require "dynamic-complete")

;; (defun load-cl-http ()
;;   ;; Compile CL-HTTP (binghe: change this pathname to your own)
;;   (load #p"LISP:CL-HTTP;LW;START.LISP")
;;   #-console-image
;;   (progn ;; gui control panel
;;     (compile-file "LISP:CL-HTTP;LW;CONTRIB;RJOSWIG;CL-HTTP-CAPI.LISP" :load t)
;;     (funcall (symbol-function (find-symbol "CONTROL-PANEL" :cl-http-capi))))
;;   ;; remote-listener, on port 25001
;;   (compile-file "LISP:CL-HTTP;LW;CONTRIB;JCMA;REMOTE-LISTENER.LISP" :load t)
;;   (funcall (symbol-function (find-symbol "ENABLE-RREP-SERVICE" :rrep))))


;;; editor configurations
;; (in-package :editor)

;; (bind-key "Compile and Load Buffer File"
;;           #(#\control-\c #\control-\k) :mode "Lisp")

;; (bind-key "Beginning of Line" #\Home)
;; (bind-key "End of Line" #\End)

;; ;;; Insert TAB
;; (defcommand "Insert Tab" (p)
;;   "Insert a Tab"
;;   (self-insert-command p #\Tab))

;; (bind-key "Insert Tab"
;;           #\meta-\i :mode "Lisp")


;;; 
;; (in-package :system)

;; (defun latin-1-file-encoding (pathname ef-spec buffer length)
;;   (declare (ignore pathname buffer length))
;;   (merge-ef-specs ef-spec :latin-1))

;; (setf *file-encoding-detection-algorithm*
;;       (substitute 'latin-1-file-encoding
;;                   'locale-file-encoding
;; 		  *file-encoding-detection-algorithm*))

