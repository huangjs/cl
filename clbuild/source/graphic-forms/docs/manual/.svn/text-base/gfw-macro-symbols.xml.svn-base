<?xml version="1.0"?>
<!--
    gfw-macro-symbols.xml

    Copyright (c) 2006-2007, Jack D. Unrue
-->

<symbols name="gfw">

  <macro name="with-cursor">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="widget">
          <description>
            The <reftopic>gfw:widget</reftopic> object for which a cursor
            will be set.
          </description>
        </argument>
        <notarg name="&amp;key"/>
        <argument name=":file">
          <description>
            See <reftopic>gfg:cursor</reftopic>.
          </description>
        </argument>
        <notarg name="pathname"/>
        <argument name=":hotspot">
          <description>
            See <reftopic>gfg:cursor</reftopic>.
          </description>
        </argument>
        <notarg name="point"/>
        <argument name=":image">
          <description>
            See <reftopic>gfg:cursor</reftopic>.
          </description>
        </argument>
        <notarg name="gfg:image"/>
        <argument name=":system">
          <description>
            See <reftopic>gfg:cursor</reftopic>.
          </description>
        </argument>
        <notarg name="integer"/>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro temporarily sets a cursor in <arg0/>
      for the duration of <arg2/>. The previous cursor set in
      <arg0/> is restored afterwards.
    </description>
    <seealso>
      <reftopic>system cursors</reftopic>
      <reftopic>gfw:with-wait-cursor</reftopic>
      <reftopic>gfw:show-cursor</reftopic>
      <reftopic>gfw:cursor-of</reftopic>
      <reftopic>gfg:cursor</reftopic>
    </seealso>
  </macro>

  <macro name="with-wait-cursor">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="widget">
          <description>
            The <reftopic>gfw:widget</reftopic> object for which the wait
            cursor will be set.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      <para role="normal">
        This macro temporarily sets the standard wait cursor in <arg0/>
        for the duration of <arg1/>. The previous cursor set in
        <arg0/> is restored afterwards. Use of this macro is equivalent
        to:
      </para>
      <para role="normal">
        (gfw:with-cursor (widget :system gfg:+wait-cursor+) body...)
      </para>
    </description>
    <seealso>
      <reftopic>system cursors</reftopic>
      <reftopic>gfw:with-cursor</reftopic>
      <reftopic>gfw:show-cursor</reftopic>
      <reftopic>gfw:cursor-of</reftopic>
      <reftopic>gfg:cursor</reftopic>
    </seealso>
  </macro>

  <macro name="with-color-dialog">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="owner">
          <description>
            A <reftopic>gfw:top-level</reftopic> or <reftopic>gfw:dialog</reftopic>
            that will own the color dialog.
          </description>
        </argument>
        <argument name="style">
          <description>
            See :style for <reftopic>gfw:color-dialog</reftopic>
          </description>
        </argument>
        <argument name="color">
          <description>
            The selected <reftopic>gfg:color</reftopic> will be bound to
            this argument.
          </description>
        </argument>
        <argument name="custom-colors">
          <description>
            A <refclhs>list</refclhs> of any custom <reftopic>gfg:color</reftopic>s
            will be bound to this argument.
          </description>
        </argument>
        <notarg name="&amp;key"/>
        <argument name=":initial-color">
          <description>
            See <reftopic>gfw:color-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":initial-custom-colors">
          <description>
            See <reftopic>gfw:color-dialog</reftopic>.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code to make use of <arg2/> and <arg3/>.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro wraps the instantiation of a standard color dialog and the subsequent
      retrieval of the user's color selection. 
    </description>
    <seealso>
      <reftopic>gfw:obtain-chosen-color</reftopic>
    </seealso>
  </macro>

  <macro name="with-drawing-disabled">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="widget">
          <description>
            A <reftopic>gfw:widget</reftopic> to modify.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code to make use of <arg0/>.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro executes <arg1/> while updates of <arg0/> are disabled.
      Drawing operations attempted in the scope of the macro will be
      queued so that when the lock is lifted, <arg0/> will be repainted.
    </description>
    <seealso>
      <reftopic>gfw:redraw</reftopic>
      <reftopic>gfw:update</reftopic>
      <reftopic>gfw:enable-redraw</reftopic>
    </seealso>
  </macro>

  <macro name="with-file-dialog">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="owner">
          <description>
            The <reftopic>gfw:top-level</reftopic> or <reftopic>gfw:dialog</reftopic>
            that will own the file dialog.
          </description>
        </argument>
        <argument name="style">
          <description>
            See :style for <reftopic>gfw:file-dialog</reftopic>.
          </description>
        </argument>
        <argument name="paths">
          <description>
            Any file <refclhs>namestring</refclhs>s chosen by the user will provided
            as a <refclhs>list</refclhs> bound to this argument.
          </description>
        </argument>
        <notarg name="&amp;key"/>
        <argument name=":default-extension">
          <description>
            See <reftopic>gfw:file-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":filters">
          <description>
            See <reftopic>gfw:file-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":initial-directory">
          <description>
            See <reftopic>gfw:file-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":initial-filename">
          <description>
            See <reftopic>gfw:file-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":text">
          <description>
            See <reftopic>gfw:file-dialog</reftopic>.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code to make use of <arg2/>.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro wraps the instantiation of a standard file open/save dialog
      and the subsequent retrieval of the user's file selections.
    </description>
    <seealso>
      <reftopic>gfw:obtain-chosen-files</reftopic>
    </seealso>
  </macro>

  <macro name="with-font-dialog">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="owner">
          <description>
            The <reftopic>gfw:top-level</reftopic> or <reftopic>gfw:dialog</reftopic>
            that will own the font dialog.
          </description>
        </argument>
        <argument name="style">
          <description>
            See :style for <reftopic>gfw:font-dialog</reftopic>.
          </description>
        </argument>
        <argument name="font">
          <description>
            Any <reftopic>gfg:font</reftopic> chosen by the user will be
            bound to this argument.
          </description>
        </argument>
        <argument name="color">
          <description>
            Any <reftopic>gfg:color</reftopic> chosen by the user will be
            bound to this argument; will be NIL if the :no-effects style
            was specified.
          </description>
        </argument>
        <notarg name="&amp;key"/>
        <argument name=":gc">
          <description>
            See <reftopic>gfw:font-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":initial-color">
          <description>
            See <reftopic>gfw:font-dialog</reftopic>.
          </description>
        </argument>
        <argument name=":initial-font">
          <description>
            See <reftopic>gfw:font-dialog</reftopic>.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code to make use of <arg2/> and <arg3/>.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro wraps the instantiation of a standard font dialog
      and the subsequent retrieval of the user's font selection.
    </description>
    <seealso>
      <reftopic>gfw:obtain-chosen-font</reftopic>
    </seealso>
  </macro>

  <macro name="with-root-window">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="window">
          <description>
            A <reftopic>gfw:root-window</reftopic> to query.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code to make use of <arg0/>.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro executes <arg1/> with <arg0/> bound to an instance of
      <reftopic>gfw:root-window</reftopic>.
    </description>
  </macro>

  <macro name="with-graphics-context">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="graphics-context">
          <description>
            A <refclhs>symbol</refclhs> naming the <reftopic>gfg:graphics-context</reftopic>
            to be created.
          </description>
        </argument>
        <notarg name="&amp;optional"/>
        <argument name="thing">
          <description>
            A <reftopic>gfg:image</reftopic> or <reftopic>gfw:widget</reftopic>.
          </description>
        </argument>
        <notarg name=")"/>
        <notarg name="&amp;body"/>
        <argument name="body">
          <description>
            Application code to make use of <arg0/>.
          </description>
        </argument>
      </arguments>
      <return>
        <emphasis>results</emphasis>
      </return>
    </syntax>
    <description>
      This macro manages the lifetime of a <reftopic>gfg:graphics-context</reftopic>
      for use within <arg2/>. The context will be created using <arg1/> if that
      argument is specified. Otherwise, this macro creates a context compatible with
      the <reftopic>gfw:display</reftopic>.
    </description>
  </macro>

  <macro name="defmenu2">
    <syntax>
      <arguments>
        <argument name=":name">
          <description>
            A <refclhs>symbol</refclhs> identifying the new menu factory.
          </description>
        </argument>
        <notarg name="symbol"/>
        <argument name=":menu">
          <description>
            Menu definition forms.
          </description>
        </argument>
        <notarg name="("/>
        <notarg name="forms"/>
        <notarg name=")"/>
      </arguments>
      <return>
        <refclhs>function</refclhs>
      </return>
    </syntax>
    <description>
      This macro defines a language for constructing menu hierarchies. For example:
      <programlisting language="lisp">
(gfw:defmenu2
  :name 'test-menu
  :menu ((:item "&amp;File"  :submenu ((:item "&amp;Open...")
                                   (:item "&amp;Save..." :disabled)
                                   (:item :separator)
                                   (:item "E&amp;xit" :callback #'some-fn)))
         (:item "&amp;Tools" :submenu ((:item "&amp;Fonts" :disabled)
                                   (:item "&amp;Colors" :checked)))
         (:item "&amp;Help"  :submenu ((:item "&amp;About" :image some-image)))))
      </programlisting>
    </description>
    <seealso>
      <reftopic>gfw:menu-bar</reftopic>
      <reftopic>gfw:make-menu</reftopic>
      <reftopic>gfw:defmenu</reftopic>
    </seealso>
  </macro>

  <macro name="defmenu">
    <syntax>
      <arguments>
        <notarg name="("/>
        <argument name="forms">
          <description>
            Menu definition forms.
          </description>
        </argument>
        <notarg name=")"/>
      </arguments>
      <return>
        <reftopic>gfw:menu</reftopic>
      </return>
    </syntax>
    <description>
      This macro defines a language for constructing menu hierarchies. For example:
      <programlisting language="lisp">
(gfw:defmenu
  ((:item "&amp;File"  :submenu ((:item "&amp;Open...")
                             (:item "&amp;Save..." :disabled)
                             (:item :separator)
                             (:item "E&amp;xit" :callback #'some-fn)))
   (:item "&amp;Tools" :submenu ((:item "&amp;Fonts" :disabled)
                             (:item "&amp;Colors" :checked)))
   (:item "&amp;Help"  :submenu ((:item "&amp;About" :image some-image)))))
      </programlisting>
      Unlike <reftopic>gfw:defmenu2</reftopic>, this macro creates an anonymous
      menu factory and then immediately invokes it, thus allowing the direct
      construction of a menu hierarchy that can be immediately set on a window.
      The factory function is then discarded.
    </description>
    <seealso>
      <reftopic>gfw:menu-bar</reftopic>
      <reftopic>gfw:make-menu</reftopic>
      <reftopic>gfw:defmenu2</reftopic>
    </seealso>
  </macro>

</symbols>
