#!/bin/csh

#################################

if ($#argv != 2) then
    echo "Need 2 args: 1. an operation: prove, disprove, refute, or model;"
    echo "             2. a file containing a formula (wff or sweet-wff)."
    exit(1)
endif

set operation=$1
set filename=$2

set ivy_source=ivy-sources
set saved_ivy=$ivy_source/saved_ivy
set otter_binary=otter
set mace_binary=mace-loop

#################################

cat <<end_of_input | $saved_ivy

:q                                         ;; go to raw LISP

(load "$ivy_source/util/otter-mace.lisp")  ;; Otter and MACE interfaces
(load "$ivy_source/util/ivy.lisp")         ;; simple driver (ivy defun)

;; The following global variables are used in otter-mace.lisp.

(setq problem-name "$filename")
(setq mace-binary  "$mace_binary")
(setq otter-binary "$otter_binary")

;; Ivy reads the formula, performs the operation, outputs messages.

(setq operation '$operation)

(setq answer (ivy operation problem-name))

(cond ((not answer)
       (format nil "The Otter or MACE input is in ~a.in" problem-name))
      ((or (equal operation 'prove) (equal operation 'refute))
       (format nil "The proof is in ~a.proof-obj." problem-name))
      (t
       (format nil "The MACE model or countermodel is above.")))

end_of_input
