
(DEFINPUT X NIL NIL)

(DEFINPUT Y NIL NIL)

(DEFINPUT RC NIL NIL)

(DEFINPUT PC NIL NIL)

(DEFWIRE SGNX NIL (BITN (X) 79))

(DEFWIRE SGNY NIL (BITN (Y) 79))

(DEFWIRE EXPX NIL (BITS (X) 78 64))

(DEFWIRE EXPY NIL (BITS (Y) 78 64))

(DEFWIRE RCONST_SING_OF NIL
         (COND ((EQUAL (RC_C2) 0) (CAT 1 0 103))
               ((EQUAL (RC_C2) 1)
                (IF (EQUAL (SGNZ) 0)
                    0 (MULCAT 104 1 1)))
               ((EQUAL (RC_C2) 2)
                (IF (EQUAL (SGNZ) 0)
                    (MULCAT 104 1 1)
                    0))
               ((EQUAL (RC_C2) 3) 0)))


(DEFWIRE RCONST_DOUB_OF NIL
         (COND ((EQUAL (RC_C2) 0) (CAT 1 0 74))
               ((EQUAL (RC_C2) 1)
                (IF (EQUAL (SGNZ) 0) 0 (MULCAT 75 1 1)))
               ((EQUAL (RC_C2) 2)
                (IF (EQUAL (SGNZ) 0) (MULCAT 75 1 1) 0))
               ((EQUAL (RC_C2) 3) 0)))


(DEFWIRE PROD NIL (BITS (* (SIGX_C3) (SIGY_C3)) 127 0))

(DEFWIRE RCONST_NOF NIL (BITS (RCONST_OF) 127 1))

(DEFWIRE MASK_OF NIL
         (COND ((EQUAL (PC_C4) 0)
                (IF (EQUAL (LOGAND (LOGAND (LOG= (RC_C4) 0)
                                           (COMP1 (STICKY_OF) 1))
                                   (COMP1 (BITN (ADD_OF) 103) 1))
                           0)
                    (CAT (MULCAT 24 1 1) 0 104)
                    (CAT (MULCAT 23 1 1) 0 105)))
               ((EQUAL (PC_C4) 1)
                (IF (EQUAL (LOGAND (LOGAND (LOG= (RC_C4) 0)
                                           (COMP1 (STICKY_OF) 1))
                                   (COMP1 (BITN (ADD_OF) 74) 1))
                           0)
                    (CAT (MULCAT 53 1 1) 0 75)
                    (CAT (MULCAT 52 1 1) 0 76)))))


(DEFWIRE MASK_NOF NIL
         (COND ((EQUAL (PC_C4) 0)
                (IF (EQUAL (LOGAND (LOGAND (LOG= (RC_C4) 0)
                                           (COMP1 (STICKY_NOF) 1))
                                   (COMP1 (BITN (ADD_NOF) 102) 1))
                           0)
                    (CAT (MULCAT 24 1 1) 0 103)
                    (CAT (MULCAT 23 1 1) 0 104)))
               ((EQUAL (PC_C4) 1)
                (IF (EQUAL (LOGAND (LOGAND (LOG= (RC_C4) 0)
                                           (COMP1 (STICKY_NOF) 1))
                                   (COMP1 (BITN (ADD_NOF) 73) 1))
                           0)
                    (CAT (MULCAT 53 1 1) 0 74)
                    (CAT (MULCAT 52 1 1) 0 75)))))


(DEFWIRE CARRY_OF NIL (BITN (ADD_OF) 128))

(DEFWIRE CARRY_NOF NIL (BITN (ADD_NOF) 127))

(DEFWIRE SIG_OF NIL
         (LOGIOR (CAT (CARRY_OF) 0 127)
                 (LOGAND (ADD_OF) (MASK_OF))))


(DEFWIRE SIG_NOF NIL
         (LOGIOR (CAT (CARRY_NOF) 0 126)
                 (LOGAND (ADD_NOF) (MASK_NOF))))


(DEFWIRE SIGZ NIL
         (IF (EQUAL (OVERFLOW) 0)
             (BITS (SIG_NOF) 126 63)
             (BITS (SIG_OF) 127 64)))


(DEFWIRE EXP_OF NIL
         (BITS (+ (BITS (+ (EXP_SUM_C4) (CARRY_OF)) 14 0)
                  1)
               14 0))


(DEFWIRE EXP_NOF NIL (BITS (+ (EXP_SUM_C4) (CARRY_NOF)) 14 0))

(DEFWIRE EXPZ NIL (IF (EQUAL (OVERFLOW) 0) (EXP_NOF) (EXP_OF)))

(DEFWIRE Z NIL (CAT (CAT (SGNZ_C4) (EXPZ) 15) (SIGZ) 64))

(DEFREG EXP_SUM_C4 NIL (EXP_SUM_C3))

(DEFREG SGNZ_C4 NIL (SGNZ_C3))

(DEFREG PC_C4 NIL (PC_C3))

(DEFREG RC_C4 NIL (RC_C3))

(DEFREG STICKY_NOF NIL
        (COND ((EQUAL (PC_C3) 0)
               (IF (EQUAL (BITS (PROD) 101 0) 0) 0 1))
              ((EQUAL (PC_C3) 1)
               (IF (EQUAL (BITS (PROD) 72 0) 0) 0 1))))


(DEFREG STICKY_OF NIL
        (COND ((EQUAL (PC_C3) 0)
               (IF (EQUAL (BITS (PROD) 102 0) 0) 0 1))
              ((EQUAL (PC_C3) 1)
               (IF (EQUAL (BITS (PROD) 73 0) 0) 0 1))))


(DEFREG OVERFLOW NIL (BITN (PROD) 127))

(DEFREG ADD_NOF NIL (BITS (+ (PROD) (RCONST_NOF)) 127 0))

(DEFREG ADD_OF NIL (BITS (+ (PROD) (RCONST_OF)) 128 0))

(DEFREG PC_C3 NIL (PC_C2))

(DEFREG RC_C3 NIL (RC_C2))

(DEFREG SIGY_C3 NIL (SIGY))

(DEFREG SIGX_C3 NIL (SIGX))

(DEFREG EXP_SUM_C3 NIL (EXP_SUM))

(DEFREG SGNZ_C3 NIL (SGNZ))

(DEFREG RCONST_OF NIL
        (COND ((EQUAL (PC_C2) 0) (RCONST_SING_OF))
              ((EQUAL (PC_C2) 1) (RCONST_DOUB_OF))))


(DEFREG PC_C2 NIL (PC))

(DEFREG RC_C2 NIL (RC))

(DEFREG EXP_SUM NIL (BITS (+ (BITS (+ (EXPX) (EXPY)) 14 0) 16385) 14 0))

(DEFREG SGNZ NIL (LOGXOR (SGNX) (SGNY)))

(DEFREG SIGY NIL (BITS (Y) 63 0))

(DEFREG SIGX NIL (BITS (X) 63 0))
