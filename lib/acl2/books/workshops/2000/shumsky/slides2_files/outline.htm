<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../slides2.htm">
<link rel=Preview href=preview.wmf>
<meta name=Robots content=NoIndex>
<script src=script.js></script><script><!--

if( !(IsWin("PPTOtl")||IsWin("PPTNav")||IsWin("PPTOtlNav")) )
{
	obj = document.all.item("Main-File")
	parent.location.href=obj.href
}

var gOtlHiliteClr="#3333CC",gOtlNormalClr="#FFFFFF",gOtlActiveClr="#CCCCFF",gSelected="",gTxtState=false,gChildEntryTable=new Array()

function Load()
{
	if( IsWin("PPTOtl" ) ){ LoadOtl(); parent.gOtlLoaded=true; return }
	if( IsWin("PPTNav" ) ){ LoadNav("NavObj",UpdNav); parent.gNavLoaded=true; return }
	if( IsWin("PPTOtlNav" ) ){ LoadNav("OtlNavObj",UpdOtlNav); parent.gOtlNavLoaded=true; return }
}
function Upd(){ if( IsWin("PPTNav") ) LoadNav("NavObj",UpdNav) }
function LoadNav( oId,UpdFunc )
{
	document.ondragstart=CancelDrag
	document.onselectstart=CancelDrag
	document.body.style.margin=2
	UpdFunc()
	obj=document.all.item(oId)
	obj.style.display="block"
	obj.style.visibility="visible"
	document.bgColor="threedface"
}
function LoadOtl()
{
	document.ondragstart=CancelDrag
	document.onselectstart=CancelDrag
	OtlObj.style.display="block"
	OtlObj.style.visibility="visible"
	if( gOtlActiveClr == "" ) gOtlActiveClr=document.linkColor
	if( gOtlHiliteClr == "" ) gOtlHiliteClr=document.fgColor
	if( gOtlNormalClr == "" )
		gOtlNormalClr=document.bgColor
	else
		document.bgColor=gOtlNormalClr  

	InitArray()

	if( ObjExists( parent.gCurSld ) ) {
		ChangeState( parent.gCurSld,gOtlNormalClr,gOtlHiliteClr )
		gSelected=parent.gCurSld
	}
	else gSelected = -1

	UpdOtl()
}
function UpdOtl(){ UpdIdx(parent.gCurSld) }
function UpdIdx( idx )
{
	if( gSelected != idx ) {
		if( gSelected > 0 )
			ChangeState( gSelected,gOtlHiliteClr,gOtlNormalClr )

		if( ObjExists( idx ) ) {
			gSelected = idx
			ChangeState( gSelected,gOtlNormalClr,gOtlHiliteClr )
		}
		else gSelected = -1
	}

	if( gTxtState != parent.gOtlTxtExp ) {
		state = "block"
		if( !parent.gOtlTxtExp )
			state="none"

		for(ii=0; ii<gChildEntryTable.length; ii++) {
			obj=gChildEntryTable[ii];
			if( obj.id == null ) continue;

			if( obj.id.indexOf("PPTC") >= 0 )
				obj.style.display=state;
		} 
		gTxtState=parent.gOtlTxtExp
		if( ObjExists( gSelected ) )
			ChangeState( gSelected,gOtlNormalClr,gOtlHiliteClr )
	}
}
function InitArray()
{
	count=0
	for(ii=0; ii<document.all.tags("DIV").length; ii++) {
		obj=document.all.tags("DIV").item(ii)
		if( obj.id == null ) continue

		if( obj.id.indexOf("PPTC") >= 0 ) {   
			gChildEntryTable[count++]=obj
			obj.children.tags("TABLE").item(0).style.borderColor=gOtlNormalClr
		}
	}
}
function ChangeState( idx,fgColor,bgColor )
{
	obj=document.all.item("PPTL"+idx)
	obj.style.color=fgColor

	obj=document.all.item("PPTP"+idx)
	obj.style.backgroundColor=bgColor

	obj=document.all.item("PPTB"+idx)
	if( obj )
		obj.style.borderLeftColor=obj.style.borderBottomColor=bgColor
}
function ChgClr( o,clr ){ if( o.id != "PPTL"+gSelected ) o.style.color=clr }
function Over( obj ){ ChgClr(obj,gOtlActiveClr) }
function Out( obj ){ ChgClr(obj,gOtlHiliteClr) }
function ObjExists( ii ) { obj=document.all("PPTP"+ii ); return( obj ) }
function GoToSld( href ){ UpdIdx(parent.GetSldNum(href)); parent.GoToSld( href ) }
function CancelDrag(){ window.event.cancelBubble=true;window.event.returnValue=false}

function UpdNav()
{
	txt = "<center>";
	if( parent.GetHrefObj( parent.gCurSld ).mOrigVis == 1 )
		txt += "Slide " + parent.GetCurSldNum() + " of " + parent.GetNumSlds()
	else
		txt += "Hidden Slide"
	txt += "</center>";
	nav_text.innerHTML = txt;

	if( !parent.HasPrevSld() )
		gBtnArr["nb_prev"].Enabled(0)
	else
		gBtnArr["nb_prev"].Enabled(1)

	if( !parent.HasNextSld() )
		gBtnArr["nb_next"].Enabled(0)
	else
		gBtnArr["nb_next"].Enabled(1)
	gBtnArr["nb_nts"].SetEnabled()
	gBtnArr["nb_nts"].SetFlag( parent.gHasNts )

	gBtnArr["nb_sldshw"].Enabled(1)
	gBtnArr["nb_voice"].Enabled(1)
}

function UpdOtlNav()
{
	gBtnArr["nb_otl"].SetEnabled();

	if( parent.gOtlOpen )
		gBtnArr["nb_otlTxt"].Enabled( true );
	else
		document.all.item("nb_otlTxtBorder").style.visibility = "hidden";
}



//-->
</script>
<style>
<!--.PTxt
	{position:relative;
	width:100%;
	margin-top:5px;
	padding-left:5px;
	font-weight:bold;}
.CTxt
	{position:relative;
	width:100%;
	padding-left:10px;}
.CBorder
	{position:relative;
	width:100%;
	border-style:solid;
	border-width:1px;
	border-color:white;
	padding-bottom:5px;}
a
	{color:#3333CC;
	text-decoration:none;}
.button
	{position:absolute;
	width:32px;
	height:20px;
	border-style:solid;
	border-width:1px;
	border-color:threedface;}
-->
</style>
</head>

<body onload="Load()">

<div id=NavObj onload="Load()" onmouseover="BtnOnOver()"
onmousedown="BtnOnDown()" onmouseout="BtnOnOut()" onmouseup="BtnOnUp()"
onkeypress="_KPH()" style='display:none;visibility:hidden'>

<table style='position:absolute;width:70px;visibility:hidden' align=left
 cellpadding=0 cellspacing=0>
 <td nowrap>
 <div id="nb_ntsElem" align=center style='position:relative;padding:3px;
 font-family:Arial;color:buttontext;font-size:9pt'><img src="notes_flag.gif"
 border=0 id="notes_flag" style='display:none'><span style="mso-spacerun:
 yes">  </span>Notes</div>
 <div title="Show/Hide Notes" id="nb_nts" style='position:absolute;top:0%;
 left:0%;width:100%;height:100%'></div>
 </td>
</table>

<table style='position:relative' align=right cellpadding=0 cellspacing=0>
 <td>
 <div id="nb_sldshwBorder" style='position:absolute;left:-20px;width:20px;
 height:20px'>
 <div style='position:absolute;clip:rect(0px, 18px, 18px, 0px)'><img
 src=buttons.gif id="nb_sldshw" title="Full Screen Slide Show"
 style='position:relative;left:-254px'></div>
 </div>
 </td>
 <td>
 <div id="nb_voiceBorder" style='display:none;position:absolute;left:-40px;
 width:20px;height:20px'>
 <div style='position:absolute;clip:rect(0px, 18px, 18px, 0px)'><img
 src=buttons.gif id="nb_voice" title="Pause/Play Narration" style='position:
 relative;left:-290px'></div>
 </div>
 </td>
</table>

<table style='position:relative' align=center cellpadding=0 cellspacing=0>
 <td nowrap>
 <div id="nb_prevBorder" class=button style='left:-30px'>
 <div style='position:absolute;clip:rect(0px, 30px, 18px, 0px)'><img
 src=buttons.gif id="nb_prev" title="Previous Slide" style='position:relative;
 left:0px'></div>
 </div>
 <span id="nav_text" style='position:relative;top:3px;width:100px;font-family:
 Arial;color:buttontext;font-size:9pt'></span>
 <div id="nb_nextBorder" class=button>
 <div style='position:absolute;clip:rect(0px, 30px, 18px, 0px)'><img
 src=buttons.gif id="nb_next" title="Next Slide" style='position:relative;
 left:-90px'></div>
 </div>
 </td>
</table>

</div>

<div id=OtlNavObj onload="Load()" onmouseover="BtnOnOver()"
onmousedown="BtnOnDown()" onmouseout="BtnOnOut()" onmouseup="BtnOnUp()"
onkeypress="_KPH()" style='display:none;visibility:hidden'>

<table style='position:relative;width:70px' align=left cellpadding=0
 cellspacing=0>
 <td nowrap>
 <div id="nb_otlElem" align=center style='position:relative;padding:3px;
 font-family:Arial;color:buttontext;font-size:9pt'>Outline</div>
 <div title="Show/Hide Outline" id="nb_otl" style='position:absolute;
 top:0%;left:0%;width:100%;height:100%'></div>
 </td>
</table>

<table style='position:relative' align=center cellpadding=0 cellspacing=0>
 <td>
 <div style='position:absolute;left:-18px;width:24px;height:20px;border-style:
 solid;border-width:1px;border-color:threedface' id="nb_otlTxtBorder">
 <div style='position:absolute;clip:rect(0px, 22px, 18px, 0px)'><img
 src=buttons.gif id="nb_otlTxt" title="Expand/Collapse Outline"
 style='position:relative;left:-157px'></div>
 </div>
 </td>
</table>

</div>

<div id=OtlObj style='display:none;visibility:hidden'>

<table width="100%" style='font-family:Arial;font-size:9pt'>
 <tr>
  <td>
  <div id=PPTP1 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0001.htm');" onmouseover="Over(this)"
  id=PPTL1 onmouseout="Out(this)">Developing a Framework for Simulation,
  Verification and Testing of SDL Specifications</a></font></div>
  <div id=PPTC1 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB1 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Olga Shumsky</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Lawrence Henschen</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Northwestern University</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>[shumsky,henschen]@ece.nwu.edu</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP2 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0003.htm');" onmouseover="Over(this)"
  id=PPTL2 onmouseout="Out(this)">Introduction</a></font></div>
  <div id=PPTC2 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB2 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Formal verification is widely used in hardware
    verification</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Errors found late in the production cycle are
    more expensive to correct in hardware than in software</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>In safety-critical software systems correctness
    requirements warrant formal verification</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Emphasis on design processes that already employ
    formal methods</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP3 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0004.htm');" onmouseover="Over(this)"
  id=PPTL3 onmouseout="Out(this)">Specification and Description Language SDL</a></font></div>
  <div id=PPTC3 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB3 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A formal description technique standardized in
    1988 by International Telecommunication Union</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Intended for description of communication
    protocols</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Used on a variety of distributed, concurrent,
    communicating, asynchronous systems</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Many support tools exists, but no framework for
    theorem-proving based verification</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Main building blocks are processes represented
    by extended finite-state machines and delaying and instantaneous
    communication links</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP4 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0020.htm');" onmouseover="Over(this)"
  id=PPTL4 onmouseout="Out(this)">Example of Modeling with SDL: <br>
  a simple communication protocol</a></font></div>
  <div id=PPTC4 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB4 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A sender and a receiver communicate</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Buffer size is 1: each message must be
    acknowledged before next is sent</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If acknowledgement does not arrive in a
    reasonable time, message is resent</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The communication network may lose but not
    corrupt messages</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP5 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0005.htm');" onmouseover="Over(this)"
  id=PPTL5 onmouseout="Out(this)">Protocol Modeling in SDL: Part 1</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP6 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0021.htm');" onmouseover="Over(this)"
  id=PPTL6 onmouseout="Out(this)">Protocol Modeling in SDL: Part 2</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP7 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0032.htm');" onmouseover="Over(this)"
  id=PPTL7 onmouseout="Out(this)">Simulator vs. Specification Verification</a></font></div>
  <div id=PPTC7 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB7 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We are building a verified simulator for SDL
    specifications  one-time effort</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Design engineers can use the simulator<span
    style="mso-spacerun: yes">  </span>to verify SDL specifications  multiple
    verification efforts on multiple designs</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>ACL2 used in both cases</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP8 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0033.htm');" onmouseover="Over(this)"
  id=PPTL8 onmouseout="Out(this)">SDL Specifications Simulator Architecture</a></font></div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP9 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0026.htm');" onmouseover="Over(this)"
  id=PPTL9 onmouseout="Out(this)">Process Translation</a></font></div>
  <div id=PPTC9 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB9 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Superficial, stores entities as lists</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Receiver process translated:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(receiver (1 . 1)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">         
    </span>(ackid frameid)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">         
    </span>(start (() (task ackid -1)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                     </span>(label 1)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                     </span>(output ack (ackid) () ())</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                     </span>(nextstate waiting)))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">         
    </span>(waiting ((frameid (frameid))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                    </span>(decision ((= frameid (+ ackid 1))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                               </span>(task ackid (+ ackid 1))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                               </span>(join 1))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                              </span>((&lt;&gt; frameid (+ ack 1))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun:
    yes">                               </span>(join 1))))))</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP10 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0027.htm');" onmouseover="Over(this)"
  id=PPTL10 onmouseout="Out(this)">Communication Network <br>
  Translation</a></font></div>
  <div id=PPTC10 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB10 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Paths consisting of several links are collapsed
    into multi-component single entities</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Instantaneous paths:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(source destination route-name)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Delaying paths:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(source destination (member routes) queue)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Network from example:</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(sender receiver (out1 link in2) nil)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(receiver sender (out2 link in1) nil)</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP11 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0028.htm');" onmouseover="Over(this)"
  id=PPTL11 onmouseout="Out(this)">Translator Correctness</a></font></div>
  <div id=PPTC11 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB11 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Defined an inverse function untranslate, and
    prove that no information is lost w.r.t. to a specialized equivalence
    relation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(equal* (untranslate (translate S)) S)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Trivial for process translation</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Tricky for network translation</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP12 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0009.htm');" onmouseover="Over(this)"
  id=PPTL12 onmouseout="Out(this)">Activator</a></font></div>
  <div id=PPTC12 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB12 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>SDL differentiates between process definition
    and process instance</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Defined process activation mechanism</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Receiver process instance</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;(1 receiverprocess start</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;<span style="mso-spacerun: yes"> 
    </span>((ackid . nil) (frameid . nil) (self . 1)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes"> 
    </span>&#9;<span style="mso-spacerun: yes">   </span>(sender . nil) (parent
    . 0) (offspring . nil)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">   
    </span>((start )) nil)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Correctness property: defined a recognizer for
    valid instances of a system</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;(defthm activate-makes-instance</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;<span style="mso-spacerun: yes"> 
    </span>(implies (wf-type S)</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">            
    </span>(wf-instance (activate S) S)))</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP13 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0010.htm');" onmouseover="Over(this)"
  id=PPTL13 onmouseout="Out(this)">Process Simulator</a></font></div>
  <div id=PPTC13 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB13 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Receiver Process Simulation</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP14 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0013.htm');" onmouseover="Over(this)"
  id=PPTL14 onmouseout="Out(this)">Concurrency Simulation</a></font></div>
  <div id=PPTC14 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB14 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>An oracle indicates to the top-level simulator
    function the id of the next instance to simulate</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>How fine-grained should a simulation be?</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Transitions are considered atomic: the
    simulation might miss some possible real-life process interleaving
    scenarios</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>Actions are considered atomic: some actions,
    such as procedure calls, are more time consuming than simple actions, such
    as goto and nextstate</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>We are implementing mechanisms to handle both
    cases, so that appropriate process interleaving can be selected for each
    application</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP15 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0029.htm');" onmouseover="Over(this)"
  id=PPTL15 onmouseout="Out(this)">Network Handling</a></font></div>
  <div id=PPTC15 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB15 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>A signal traveling through an instantaneous path
    is immediately delivered to the destination</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>An oracle is supplied to delaying paths to
    determine whether the path forwards the signal</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>If there is an inconsistency in the address of
    the signal, a warning is generated, and the signal is discarded</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP16 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0030.htm');" onmouseover="Over(this)"
  id=PPTL16 onmouseout="Out(this)">SDL Specifications Verification</a></font></div>
  <div id=PPTC16 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB16 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Once the simulator is proved correct, we can
    prove properties of specifications w.r.t. the simulator</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Our protocol is correct if sender and receiver
    agree on the id of the last successfully transmitted frame</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(defthm sender-receiver-agree-1</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">  </span>(&lt;=
    (variable-value 'ackid</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;&#9;&#9;&#9;<span style="mso-spacerun:
    yes">  </span>(instance 'receiver (simulate S O)))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">     
    </span>(variable-value 'frameid</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;&#9;<span style="mso-spacerun:
    yes">               </span>(instance 'sender (simulate S O)))))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>(defthm sender-receiver-agree-2</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;(let ((v1 (variable-value</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;&#9;&#9;'ackid (instance 'receiver (simulate
    S O))))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">        
    </span>(v2 (variable-value</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>&#9;&#9;&#9; 'frameid (instance 'sender
    (simulate S O)))))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2><span style="mso-spacerun: yes">   
    </span>(implies (&lt; v1 v2) (= (+ 1 v1) v2))))</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Defined access functions to extract variables
    and instances</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP17 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0015.htm');" onmouseover="Over(this)"
  id=PPTL17 onmouseout="Out(this)">Testing of implementations</a></font></div>
  <div id=PPTC17 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB17 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>Simulator can be used for testing: implemented
    units are substituted in place of simulations</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP18 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0016.htm');" onmouseover="Over(this)"
  id=PPTL18 onmouseout="Out(this)">Related Work</a></font></div>
  <div id=PPTC18 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB18 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width=20 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=2><font size=2>Other approaches to verification of SDL
    specifications are based on model checkers.<span style="mso-spacerun:
    yes">  </span>A couple of examples</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>IF system from Verimag converts SDL to PROMELA
    and uses SPIN model checker</font></td>
   </tr>
   <tr>
    <td colspan=2></td>
    <td colspan=1><font size=2>A proprietary verification system at Siemens
    relies on a BDD-based symbolic checker</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
 <tr>
  <td>
  <div id=PPTP19 class=PTxt><font size=2><a
  href="javascript:GoToSld('slide0017.htm');" onmouseover="Over(this)"
  id=PPTL19 onmouseout="Out(this)">Summary</a></font></div>
  <div id=PPTC19 class=CTxt style='display:none'>
  <table style='color:#3333CC' id=PPTB19 class=CBorder>
   <tr>
    <td width=5 nowrap></td>
    <td width="100%"></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We are developing a simulator for SDL
    specifications</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>We are using ACL2 for the development and
    verification of the simulator</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The goal is to provide a framework for
    verification of SDL specifications using a theorem prover</font></td>
   </tr>
   <tr>
    <td colspan=1></td>
    <td colspan=1><font size=2>The simulator also helps in testing of
    implementations: acts as a test driver and helps compute expected results
    for test cases</font></td>
   </tr>
  </table>
  </div>
  </td>
 </tr>
</table>

</div>

</body>

</html>
