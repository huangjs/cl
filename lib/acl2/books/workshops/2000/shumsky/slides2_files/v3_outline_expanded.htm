<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=PowerPoint.Slide>
<meta name=Generator content="Microsoft PowerPoint 9">
<link id=Main-File rel=Main-File href="../slides2.htm">
<link rel=Preview href=preview.wmf>

<script>
<!--
if( window.name != "PPTOtl" )
  parent.location.href = "../slides2.htm";
//-->
</script>
<meta name=Robots content=NoIndex>
</head>

<body bgcolor=white text="#3333cc" link="#3333cc" vlink="#3333cc"
alink="#3333cc">

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0001.htm');">Developing a Framework
for Simulation, Verification and Testing of SDL Specifications</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Olga Shumsky</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Lawrence Henschen</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Northwestern University</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>[shumsky,henschen]@ece.nwu.edu</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0003.htm');">Introduction</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Formal verification is widely used in
  hardware verification</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Errors found late in the production
  cycle are more expensive to correct in hardware than in software</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>In safety-critical software systems
  correctness requirements warrant formal verification</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Emphasis on design processes that
  already employ formal methods</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0004.htm');">Specification and
Description Language SDL</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A formal description technique
  standardized in 1988 by International Telecommunication Union</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Intended for description of
  communication protocols</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Used on a variety of distributed,
  concurrent, communicating, asynchronous systems</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Many support tools exists, but no
  framework for theorem-proving based verification</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Main building blocks are processes
  represented by extended finite-state machines and delaying and instantaneous
  communication links</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0020.htm');">Example of Modeling with
SDL: <br>
a simple communication protocol</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A sender and a receiver communicate</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Buffer size is 1: each message must be
  acknowledged before next is sent</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>If acknowledgement does not arrive in a
  reasonable time, message is resent</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The communication network may lose but
  not corrupt messages</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0005.htm');">Protocol Modeling in SDL:
Part 1</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0021.htm');">Protocol Modeling in SDL:
Part 2</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0032.htm');">Simulator vs.
Specification Verification</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We are building a verified simulator
  for SDL specifications – one-time effort</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Design engineers can use the
  simulator<span style="mso-spacerun: yes">  </span>to verify SDL
  specifications – multiple verification efforts on multiple designs</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>ACL2 used in both cases</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0033.htm');">SDL Specifications
Simulator Architecture</a></b></font></p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0026.htm');">Process Translation</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Superficial, stores entities as lists</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Receiver process translated:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(receiver (1 . 1)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">          </span>(ackid frameid)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">          </span>(start (() (task ackid -1)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                     </span>(label 1)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                     </span>(output ack (ackid) () ())</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                     </span>(nextstate waiting)))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">          </span>(waiting ((frameid (frameid))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                    </span>(decision ((= frameid (+ ackid 1))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                               </span>(task ackid (+ ackid 1))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                               </span>(join 1))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                              </span>((&lt;&gt; frameid (+ ack 1))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">                               </span>(join 1))))))</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0027.htm');">Communication Network
<br>
Translation</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Paths consisting of several links are
  collapsed into multi-component single entities</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Instantaneous paths:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(source destination route-name)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Delaying paths:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(source destination (member routes)
  queue)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Network from example:</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(sender receiver (out1 link in2) nil)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(receiver sender (out2 link in1) nil)</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0028.htm');">Translator Correctness</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Defined an inverse function
  untranslate, and prove that no information is lost w.r.t. to a specialized
  equivalence relation</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(equal* (untranslate (translate S)) S)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Trivial for process translation</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Tricky for network translation</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0009.htm');">Activator</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>SDL differentiates between process
  definition and process instance</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Defined process activation mechanism</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Receiver process instance</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;(1 receiverprocess start</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;<span style="mso-spacerun: yes"> 
  </span>((ackid . nil) (frameid . nil) (self . 1)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>&#9;<span style="mso-spacerun: yes">   </span>(sender . nil) (parent .
  0) (offspring . nil)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes">   
  </span>((start …)) nil)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Correctness property: defined a
  recognizer for valid instances of a system</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;(defthm activate-makes-instance</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;<span style="mso-spacerun: yes"> 
  </span>(implies (wf-type S)</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">             </span>(wf-instance (activate S) S)))</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0010.htm');">Process Simulator</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Receiver Process Simulation</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0013.htm');">Concurrency Simulation</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>An oracle indicates to the top-level
  simulator function the id of the next instance to simulate</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>How fine-grained should a simulation
  be?</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Transitions are considered atomic: the
  simulation might miss some possible real-life process interleaving scenarios</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>Actions are considered atomic: some
  actions, such as procedure calls, are more time consuming than simple
  actions, such as goto and nextstate</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>We are implementing mechanisms to
  handle both cases, so that appropriate process interleaving can be selected
  for each application</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0029.htm');">Network Handling</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>A signal traveling through an
  instantaneous path is immediately delivered to the destination</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>An oracle is supplied to delaying paths
  to determine whether the path forwards the signal</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>If there is an inconsistency in the
  address of the signal, a warning is generated, and the signal is discarded</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0030.htm');">SDL Specifications
Verification</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Once the simulator is proved correct,
  we can prove properties of specifications w.r.t. the simulator</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Our protocol is correct if sender and
  receiver agree on the id of the last successfully transmitted frame</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(defthm sender-receiver-agree-1</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes"> 
  </span>(&lt;= (variable-value 'ackid</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;&#9;&#9;&#9;<span
  style="mso-spacerun: yes">  </span>(instance 'receiver (simulate S O)))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes">     
  </span>(variable-value 'frameid</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;&#9;<span style="mso-spacerun:
  yes">               </span>(instance 'sender (simulate S O)))))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>(defthm sender-receiver-agree-2</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;(let ((v1 (variable-value</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;&#9;&#9;'ackid (instance 'receiver
  (simulate S O))))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun:
  yes">         </span>(v2 (variable-value</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>&#9;&#9;&#9; 'frameid (instance 'sender
  (simulate S O)))))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2><span style="mso-spacerun: yes">   
  </span>(implies (&lt; v1 v2) (= (+ 1 v1) v2))))</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Defined access functions to extract
  variables and instances</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0015.htm');">Testing of
implementations</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>Simulator can be used for testing: implemented
  units are substituted in place of simulations</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0016.htm');">Related Work</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width=20 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=2><font face=Arial size=2>Other approaches to verification of SDL
  specifications are based on model checkers.<span style="mso-spacerun: yes"> 
  </span>A couple of examples</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>IF system from Verimag converts SDL to
  PROMELA and uses SPIN model checker</font></td>
 </tr>
 <tr>
  <td colspan=2></td>
  <td colspan=1><font face=Arial size=2>A proprietary verification system at
  Siemens relies on a BDD-based symbolic checker</font></td>
 </tr>
</table>

</p>

<p><font face=Arial size=2><b><a
href="javascript:parent.GoToSld('v3_slide0017.htm');">Summary</a></b></font>

<table>
 <tr>
  <td width=5 nowrap></td>
  <td width="100%"></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We are developing a simulator for SDL
  specifications</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>We are using ACL2 for the development
  and verification of the simulator</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The goal is to provide a framework for
  verification of SDL specifications using a theorem prover</font></td>
 </tr>
 <tr>
  <td colspan=1></td>
  <td colspan=1><font face=Arial size=2>The simulator also helps in testing of
  implementations: acts as a test driver and helps compute expected results for
  test cases</font></td>
 </tr>
</table>

</p>

</body>

</html>
