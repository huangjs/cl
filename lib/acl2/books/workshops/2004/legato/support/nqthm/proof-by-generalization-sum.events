;;; This file demonstrates proof by generalization on the following 6502 program
;;; that sums the integers from 1 to N.

;;;        {N=nsave ^ (N*(N+1))/2 < 256}

;;;         LDA #0     load the A register immediate with the value 0
;;;         CLC        clear the carry flag
;;; LOOP    ADC N      add with carry N to the contents of A
;;;         DEC N      decrement N by 1
;;;         BNE LOOP   branch on non-zero to LOOP

;;;        {A=(nsave*(nsave+1))/2}

;;; Provide semantics for the Mostek 6502 DEC instruction.  The remaining
;;; instructions have semantics built into the weakest precondition generation
;;; program.

(note-lib "modularithmetic-98")

(defn dec (x)
  (if (zerop x)
      255
    (sub1 x)))

;;; Mechanically generated weakest precondition at location LOOP

(DEFN WP-LOOP (N A C NSAVE)
  (IF (EQUAL (DEC N) 0)
      (EQUAL (REMAINDER (PLUS C (PLUS A N)) 256)
	     (QUOTIENT (TIMES NSAVE (PLUS 1 NSAVE)) 2))
      (WP-LOOP (DEC N)
	       (REMAINDER (PLUS C (PLUS A N)) 256)
	       (QUOTIENT (PLUS C (PLUS A N)) 256)
	       NSAVE))
  ((lessp (if (zerop n) 256 n))))

;;; Weakest precondition at start of program

(DEFN WP-1 (N NSAVE) (WP-LOOP N 0 0 NSAVE))

;;; Proof by generalization

(prove-lemma wp-loop-closed (rewrite)
	     (implies (and (not (zerop n))
			   (lessp (plus c a (quotient (times n (add1 n)) 2))
				  256))
		      (equal (wp-loop n a c nsave)
			       (equal (plus c a (quotient (times n (add1 n)) 2))
				      (quotient (times nsave (add1 nsave)) 2))))
	     ((disable-theory if-normalization)
	      (induct (wp-loop n a c nsave))
	      (hands-off difference)
	      (expand (times n (add1 n)))
	      (disable quotient-add1-arg2
		       remainder-add1-arg2
		       remainder-plus-arg1
		       remainder-plus-arg1-simple
		       quotient-plus-arg1
		       equal-add1
		       quotient-times-arg1
		       quotient-add1-arg1
		       lessp-quotient
		       lessp-quotient-arg2-linear
		       times-add1
		       sub1-plus
		       )))

;;; Final correctness result

(prove-lemma wp-loop-is-correct (rewrite)
	     (implies (and (not (zerop n))
			   (lessp (quotient (times n (add1 n)) 2) 256)
			   (equal nsave n))
		      (wp-1 n nsave))
	     ((hands-off quotient)))

