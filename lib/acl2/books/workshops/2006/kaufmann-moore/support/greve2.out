This is SBCL 1.0.1.34, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

 ACL2 Version 3.1 built January 26, 2007  15:12:42.
 Copyright (C) 2006  University of Texas at Austin
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the GNU General Public License.

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-3-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

 NOTE!!  Proof trees are disabled in ACL2.  To enable them in emacs,
 look under the ACL2 source directory in interface/emacs/README.doc; 
 and, to turn on proof trees, execute :START-PROOF-TREE in the ACL2 
 command loop.   Look in the ACL2 documentation under PROOF-TREE.

ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 
#<PACKAGE "ACL2">
* 
ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !> (PROVE PROOF-TREE OBSERVATION EVENT SUMMARY)
ACL2 !>T
T
KEYS
POINTERS
KEY-EQUAL
FOO
KEY-EQUAL-IS-AN-EQUIVALENCE

ACL2 Warning [Double-rewrite] in ( DEFTHM POINTERS-TRACE-KEY-EQUIV
...):  In a :REWRITE rule generated from POINTERS-TRACE-KEY-EQUIV,
equivalence relation KEY-EQUAL is maintained at one problematic occurrence
of variable RES in the right-hand side, but not at any binding occurrence
of RES.  Consider replacing that occurrence of RES in the right-hand
side with (DOUBLE-REWRITE RES).  See :doc double-rewrite for more information
on this issue.


ACL2 Warning [Non-rec] in ( DEFTHM POINTERS-TRACE-KEY-EQUIV ...): 
A :REWRITE rule generated from POINTERS-TRACE-KEY-EQUIV will be triggered
only by terms containing the non-recursive function symbol POINTERS.
Unless this function is disabled, this rule is unlikely ever to be
used.


ACL2 Warning [Subsume] in ( DEFTHM POINTERS-TRACE-KEY-EQUIV ...): 
The previously added rule POINTERS subsumes a newly proposed :REWRITE
rule generated from POINTERS-TRACE-KEY-EQUIV, in the sense that the
old rule rewrites a more general target.  Because the new rule will
be tried first, it may nonetheless find application.

POINTERS-TRACE-KEY-EQUIV

ACL2 Warning [Double-rewrite] in ( DEFTHM FOO_RES_EQUIV-ORIGINAL ...):
In a :REWRITE rule generated from FOO_RES_EQUIV-ORIGINAL, equivalence
relation KEY-EQUAL is maintained at one problematic occurrence of variable
RES1 in the third hypothesis, but not at any binding occurrence of
RES1.  Consider replacing that occurrence of RES1 in the third hypothesis
with (DOUBLE-REWRITE RES1).  See :doc double-rewrite for more information
on this issue.


ACL2 Warning [Double-rewrite] in ( DEFTHM FOO_RES_EQUIV-ORIGINAL ...):
In a :REWRITE rule generated from FOO_RES_EQUIV-ORIGINAL, equivalence
relation KEY-EQUAL is maintained at one problematic occurrence of variable
RES2 in the third hypothesis, but not at any binding occurrence of
RES2.  Consider replacing that occurrence of RES2 in the third hypothesis
with (DOUBLE-REWRITE RES2).  See :doc double-rewrite for more information
on this issue.


ACL2 Warning [Non-rec] in ( DEFTHM FOO_RES_EQUIV-ORIGINAL ...):  A
:REWRITE rule generated from FOO_RES_EQUIV-ORIGINAL will be triggered
only by terms containing the non-recursive function symbol FOO.  Unless
this function is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Free] in ( DEFTHM FOO_RES_EQUIV-ORIGINAL ...):  A :REWRITE
rule generated from FOO_RES_EQUIV-ORIGINAL contains the free variable
RES1.  This variable will be chosen by searching for an instance of
(FOO LIST ARGS RES1 ST) among the hypotheses of the conjecture being
rewritten.  This is generally a severe restriction on the applicability
of a :REWRITE rule.  See :DOC free-variables.


ACL2 Warning [Non-rec] in ( DEFTHM FOO_RES_EQUIV-ORIGINAL ...):  As
noted, we will instantiate the free variable, RES1, of a :REWRITE rule
generated from FOO_RES_EQUIV-ORIGINAL, by searching for the hypothesis
shown above.  However, this hypothesis mentions the function symbol
FOO, which is defun'd non-recursively.  Unless disabled, this function
symbol is unlikely to occur in the conjecture being proved and hence
the search for the required hypothesis will likely fail.


ACL2 Warning [Subsume] in ( DEFTHM FOO_RES_EQUIV-ORIGINAL ...):  The
previously added rule FOO subsumes a newly proposed :REWRITE rule generated
from FOO_RES_EQUIV-ORIGINAL, in the sense that the old rule rewrites
a more general target.  Because the new rule will be tried first, it
may nonetheless find application.

FOO_RES_EQUIV-ORIGINAL
ACL2-DEFAULTS-TABLE
T

ACL2 Warning [Double-rewrite] in ( DEFTHM FOO_RES_EQUIV ...):  In a
:REWRITE rule generated from FOO_RES_EQUIV, equivalence relation KEY-
EQUAL is maintained at one problematic occurrence of variable RES2
in the third hypothesis, but not at any binding occurrence of RES2.
Consider replacing that occurrence of RES2 in the third hypothesis
with (DOUBLE-REWRITE RES2).  See :doc double-rewrite for more information
on this issue.


ACL2 Warning [Free] in ( DEFTHM FOO_RES_EQUIV ...):  A :REWRITE rule
generated from FOO_RES_EQUIV contains the free variable RES1.  This
variable will be chosen by searching for an instance of 
(FOO LIST ARGS RES1 ST) among the hypotheses of the conjecture being
rewritten.  This is generally a severe restriction on the applicability
of a :REWRITE rule.  See :DOC free-variables.

Hi RES1 RES2FOO_RES_EQUIV
1794

ACL2 Warning [Free] in ( DEFTHM FOO_OVER_RECORD_KEEPER-POINTERS_2 ...):
A :REWRITE rule generated from FOO_OVER_RECORD_KEEPER-POINTERS_2 contains
the free variable MLIST.  This variable will be chosen by searching
for an instance of (FOO LIST ARGS (POINTERS MLIST RES) ST) among the
hypotheses of the conjecture being rewritten.  This is generally a
severe restriction on the applicability of a :REWRITE rule.  See :DOC
free-variables.

Hi (POINTERS MLIST RES) RESFOO_OVER_RECORD_KEEPER-POINTERS_2

"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/greve2.fasl"

 "/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/greve2.lisp"
ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 