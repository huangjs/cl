This is SBCL 1.0.1.34, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

 ACL2 Version 3.1 built January 26, 2007  15:12:42.
 Copyright (C) 2006  University of Texas at Austin
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the GNU General Public License.

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-3-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

 NOTE!!  Proof trees are disabled in ACL2.  To enable them in emacs,
 look under the ACL2 source directory in interface/emacs/README.doc; 
 and, to turn on proof trees, execute :START-PROOF-TREE in the ACL2 
 command loop.   Look in the ACL2 documentation under PROOF-TREE.

ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 
#<PACKAGE "ACL2">
* 
ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !> (PROVE PROOF-TREE OBSERVATION EVENT SUMMARY)
ACL2 !>T
T
PERM
UNIQUE
DISJOINT
FLAT
GOO
HOO
BOO
RED
PERM-IS-AN-EQUIVALENCE
PERM-IMPLIES-IFF-UNIQUE-1
PERM-IMPLIES-EQUAL-DISJOINT-2
:REDUNDANT
PERM-IMPLIES-EQUAL-DISJOINT-1
PERM-IMPLIES-PERM-APPEND-1
PERM-IMPLIES-PERM-APPEND-2
PERM-IMPLIES-PERM-FLAT-1

ACL2 Warning [Non-rec] in ( DEFTHM FLAT-APPEND ...):  A :REWRITE rule
generated from FLAT-APPEND will be triggered only by terms containing
the non-recursive function symbol FLAT.  Unless this function is disabled,
this rule is unlikely ever to be used.


ACL2 Warning [Subsume] in ( DEFTHM FLAT-APPEND ...):  The previously
added rule FLAT subsumes a newly proposed :REWRITE rule generated from
FLAT-APPEND, in the sense that the old rule rewrites a more general
target.  Because the new rule will be tried first, it may nonetheless
find application.

FLAT-APPEND

ACL2 Warning [Non-rec] in ( DEFTHM UNIQUE-DISJOINT ...):  A :REWRITE
rule generated from UNIQUE-DISJOINT will be triggered only by terms
containing the non-recursive function symbol DISJOINT.  Unless this
function is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Subsume] in ( DEFTHM UNIQUE-DISJOINT ...):  The previously
added rule DISJOINT subsumes a newly proposed :REWRITE rule generated
from UNIQUE-DISJOINT, in the sense that the old rule rewrites a more
general target.  Because the new rule will be tried first, it may nonetheless
find application.


ACL2 Warning [Non-rec] in ( DEFTHM UNIQUE-DISJOINT ...):  A :REWRITE
rule generated from UNIQUE-DISJOINT will be triggered only by terms
containing the non-recursive function symbol DISJOINT.  Unless this
function is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Subsume] in ( DEFTHM UNIQUE-DISJOINT ...):  The previously
added rule DISJOINT subsumes a newly proposed :REWRITE rule generated
from UNIQUE-DISJOINT, in the sense that the old rule rewrites a more
general target.  Because the new rule will be tried first, it may nonetheless
find application.

UNIQUE-DISJOINT

ACL2 Warning [Non-rec] in ( DEFTHM GOO-PERM ...):  A :REWRITE rule
generated from GOO-PERM will be triggered only by terms containing
the non-recursive function symbol GOO.  Unless this function is disabled,
this rule is unlikely ever to be used.


ACL2 Warning [Subsume] in ( DEFTHM GOO-PERM ...):  The previously added
rule GOO subsumes a newly proposed :REWRITE rule generated from GOO-
PERM, in the sense that the old rule rewrites a more general target.
Because the new rule will be tried first, it may nonetheless find application.

GOO-PERM

ACL2 Warning [Non-rec] in ( DEFTHM RED-DISJOINT ...):  A :REWRITE rule
generated from RED-DISJOINT will be triggered only by terms containing
the non-recursive function symbol RED.  Unless this function is disabled,
this rule is unlikely ever to be used.


ACL2 Warning [Subsume] in ( DEFTHM RED-DISJOINT ...):  The previously
added rule RED subsumes a newly proposed :REWRITE rule generated from
RED-DISJOINT, in the sense that the old rule rewrites a more general
target.  Because the new rule will be tried first, it may nonetheless
find application.

RED-DISJOINT
ACL2-DEFAULTS-TABLE
T
UNIQUE-DISJOINT-TEST

Entering the proof-checker....

->: :PRO
->: (:REWRITE RED-DISJOINT)
Rewriting with RED-DISJOINT.

Creating one new goal:  (MAIN . 1).

The proof of the current goal, MAIN, has been completed.  However,
the following subgoals remain to be proved:
  (MAIN . 1).
Now proving (MAIN . 1).
->: :PROVE
***** Now entering the theorem prover *****

*!*!*!*!*!*!* All goals have been proved! *!*!*!*!*!*!*
TIS-SO
WHYNOT

ACL2 Warning [Double-rewrite] in ( DEFTHM RED-DISJOINT-BAD ...):  In
a :REWRITE rule generated from RED-DISJOINT-BAD, equivalence relation
PERM is maintained at one problematic occurrence of variable X in the
first hypothesis, but not at any binding occurrence of X.  Consider
replacing that occurrence of X in the first hypothesis with 
(DOUBLE-REWRITE X).  See :doc double-rewrite for more information on
this issue.


ACL2 Warning [Double-rewrite] in ( DEFTHM RED-DISJOINT-BAD ...):  In
a :REWRITE rule generated from RED-DISJOINT-BAD, equivalence relation
PERM is maintained at one problematic occurrence of variable Y in the
first hypothesis, but not at any binding occurrence of Y.  Consider
replacing that occurrence of Y in the first hypothesis with 
(DOUBLE-REWRITE Y).  See :doc double-rewrite for more information on
this issue.

RED-DISJOINT-BAD
1802

"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/greve3.fasl"

 "/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/greve3.lisp"
ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 