This is SBCL 1.0.1.34, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

 ACL2 Version 3.1 built January 26, 2007  15:12:42.
 Copyright (C) 2006  University of Texas at Austin
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the GNU General Public License.

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-3-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

 NOTE!!  Proof trees are disabled in ACL2.  To enable them in emacs,
 look under the ACL2 source directory in interface/emacs/README.doc; 
 and, to turn on proof trees, execute :START-PROOF-TREE in the ACL2 
 command loop.   Look in the ACL2 documentation under PROOF-TREE.

ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 
#<PACKAGE "ACL2">
* 
ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !> (PROVE PROOF-TREE OBSERVATION EVENT SUMMARY)
ACL2 !>"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall.lisp"

ACL2 Warning [Double-rewrite] in ( DEFTHM INSERT-IS-CONS[AGAIN] ...):
In a :REWRITE rule generated from INSERT-IS-CONS[AGAIN], equivalence
relation PERM is maintained at one problematic occurrence of variable
X in the right-hand side, but not at any binding occurrence of X. 
Consider replacing that occurrence of X in the right-hand side with
(DOUBLE-REWRITE X).  See :doc double-rewrite for more information on
this issue.


ACL2 Warning [Subsume] in ( DEFTHM INSERT-IS-CONS[AGAIN] ...):  A newly
proposed :REWRITE rule generated from INSERT-IS-CONS[AGAIN] probably
subsumes the previously added :REWRITE rule INSERT-IS-CONS, in the
sense that the new rule will now probably be applied whenever the old
rule would have been.


ACL2 Warning [Subsume] in ( DEFTHM INSERT-IS-CONS[AGAIN] ...):  The
previously added rule INSERT-IS-CONS subsumes a newly proposed :REWRITE
rule generated from INSERT-IS-CONS[AGAIN], in the sense that the old
rule rewrites a more general target.  Because the new rule will be
tried first, it may nonetheless find application.

INSERT-IS-CONS[AGAIN]
PERM-IMPLIES-PERM-INSERT-2

ACL2 Warning [Subsume] in ( DEFTHM INSERT-IS-CONS[AGAIN-NO-WARN] ...):
A newly proposed :REWRITE rule generated from INSERT-IS-CONS[AGAIN-
NO-WARN] probably subsumes the previously added :REWRITE rules INSERT-
IS-CONS[AGAIN] and INSERT-IS-CONS, in the sense that the new rule will
now probably be applied whenever the old rules would have been.


ACL2 Warning [Subsume] in ( DEFTHM INSERT-IS-CONS[AGAIN-NO-WARN] ...):
The previously added rules INSERT-IS-CONS[AGAIN] and INSERT-IS-CONS
subsume a newly proposed :REWRITE rule generated from INSERT-IS-CONS[AGAIN-
NO-WARN], in the sense that the old rules rewrite more general targets.
Because the new rule will be tried first, it may nonetheless find application.

INSERT-IS-CONS[AGAIN-NO-WARN]

ACL2 Warning [Double-rewrite] in ( DEFTHM INSERT-SORT-IS-ID[AGAIN]
...):  In a :REWRITE rule generated from INSERT-SORT-IS-ID[AGAIN],
equivalence relation PERM is maintained at one problematic occurrence
of variable X in the right-hand side, but not at any binding occurrence
of X.  Consider replacing that occurrence of X in the right-hand side
with (DOUBLE-REWRITE X).  See :doc double-rewrite for more information
on this issue.


ACL2 Warning [Subsume] in ( DEFTHM INSERT-SORT-IS-ID[AGAIN] ...): 
A newly proposed :REWRITE rule generated from INSERT-SORT-IS-ID[AGAIN]
probably subsumes the previously added :REWRITE rule INSERT-SORT-IS-
ID, in the sense that the new rule will now probably be applied whenever
the old rule would have been.


ACL2 Warning [Subsume] in ( DEFTHM INSERT-SORT-IS-ID[AGAIN] ...): 
The previously added rule INSERT-SORT-IS-ID subsumes a newly proposed
:REWRITE rule generated from INSERT-SORT-IS-ID[AGAIN], in the sense
that the old rule rewrites a more general target.  Because the new
rule will be tried first, it may nonetheless find application.

INSERT-SORT-IS-ID[AGAIN]
PERM-IMPLIES-PERM-INSERT-SORT-1

ACL2 Warning [Subsume] in ( DEFTHM INSERT-SORT-IS-ID[AGAIN-NO-WARN]
...):  A newly proposed :REWRITE rule generated from INSERT-SORT-IS-
ID[AGAIN-NO-WARN] probably subsumes the previously added :REWRITE rules
INSERT-SORT-IS-ID[AGAIN] and INSERT-SORT-IS-ID, in the sense that the
new rule will now probably be applied whenever the old rules would
have been.


ACL2 Warning [Subsume] in ( DEFTHM INSERT-SORT-IS-ID[AGAIN-NO-WARN]
...):  The previously added rules INSERT-SORT-IS-ID[AGAIN] and INSERT-
SORT-IS-ID subsume a newly proposed :REWRITE rule generated from INSERT-
SORT-IS-ID[AGAIN-NO-WARN], in the sense that the old rules rewrite
more general targets.  Because the new rule will be tried first, it
may nonetheless find application.

INSERT-SORT-IS-ID[AGAIN-NO-WARN]

ACL2 Warning [Subsume] in ( DEFTHM APP-COMMUTES[AGAIN] ...):  A newly
proposed :REWRITE rule generated from APP-COMMUTES[AGAIN] probably
subsumes the previously added :REWRITE rules APP-COMMUTES and APP-CONS,
in the sense that the new rule will now probably be applied whenever
the old rules would have been.


ACL2 Warning [Subsume] in ( DEFTHM APP-COMMUTES[AGAIN] ...):  The previously
added rule APP-COMMUTES subsumes a newly proposed :REWRITE rule generated
from APP-COMMUTES[AGAIN], in the sense that the old rule rewrites a
more general target.  Because the new rule will be tried first, it
may nonetheless find application.

APP-COMMUTES[AGAIN]

ACL2 Warning [Double-rewrite] in ( DEFTHM REV-IS-ID[AGAIN] ...):  In
a :REWRITE rule generated from REV-IS-ID[AGAIN], equivalence relation
PERM is maintained at one problematic occurrence of variable X in the
right-hand side, but not at any binding occurrence of X.  Consider
replacing that occurrence of X in the right-hand side with 
(DOUBLE-REWRITE X).  See :doc double-rewrite for more information on
this issue.


ACL2 Warning [Subsume] in ( DEFTHM REV-IS-ID[AGAIN] ...):  A newly
proposed :REWRITE rule generated from REV-IS-ID[AGAIN] probably subsumes
the previously added :REWRITE rule REV-IS-ID, in the sense that the
new rule will now probably be applied whenever the old rule would have
been.


ACL2 Warning [Subsume] in ( DEFTHM REV-IS-ID[AGAIN] ...):  The previously
added rule REV-IS-ID subsumes a newly proposed :REWRITE rule generated
from REV-IS-ID[AGAIN], in the sense that the old rule rewrites a more
general target.  Because the new rule will be tried first, it may nonetheless
find application.

REV-IS-ID[AGAIN]
PERM-IMPLIES-PERM-REV-1

ACL2 Warning [Subsume] in ( DEFTHM REV-IS-ID[AGAIN-NO-WARN] ...): 
A newly proposed :REWRITE rule generated from REV-IS-ID[AGAIN-NO-WARN]
probably subsumes the previously added :REWRITE rules REV-IS-ID[AGAIN]
and REV-IS-ID, in the sense that the new rule will now probably be
applied whenever the old rules would have been.


ACL2 Warning [Subsume] in ( DEFTHM REV-IS-ID[AGAIN-NO-WARN] ...): 
The previously added rules REV-IS-ID[AGAIN] and REV-IS-ID subsume a
newly proposed :REWRITE rule generated from REV-IS-ID[AGAIN-NO-WARN],
in the sense that the old rules rewrite more general targets.  Because
the new rule will be tried first, it may nonetheless find application.

REV-IS-ID[AGAIN-NO-WARN]

ACL2 Warning [Double-rewrite] in ( DEFTHM REV-REV-AGAIN[AGAIN] ...):
In a :REWRITE rule generated from REV-REV-AGAIN[AGAIN], equivalence
relation == is maintained at one problematic occurrence of variable
X in the right-hand side, but not at any binding occurrence of X. 
Consider replacing that occurrence of X in the right-hand side with
(DOUBLE-REWRITE X).  See :doc double-rewrite for more information on
this issue.


ACL2 Warning [Subsume] in ( DEFTHM REV-REV-AGAIN[AGAIN] ...):  A newly
proposed :REWRITE rule generated from REV-REV-AGAIN[AGAIN] probably
subsumes the previously added :REWRITE rule REV-REV-AGAIN, in the sense
that the new rule will now probably be applied whenever the old rule
would have been.


ACL2 Warning [Subsume] in ( DEFTHM REV-REV-AGAIN[AGAIN] ...):  The
previously added rule REV-REV-AGAIN subsumes a newly proposed :REWRITE
rule generated from REV-REV-AGAIN[AGAIN], in the sense that the old
rule rewrites a more general target.  Because the new rule will be
tried first, it may nonetheless find application.

REV-REV-AGAIN[AGAIN]
==-IMPLIES-==-REV-1

ACL2 Warning [Subsume] in ( DEFTHM REV-REV-AGAIN[AGAIN-NO-WARN] ...):
A newly proposed :REWRITE rule generated from REV-REV-AGAIN[AGAIN-NO-
WARN] probably subsumes the previously added :REWRITE rules REV-REV-
AGAIN[AGAIN] and REV-REV-AGAIN, in the sense that the new rule will
now probably be applied whenever the old rules would have been.


ACL2 Warning [Subsume] in ( DEFTHM REV-REV-AGAIN[AGAIN-NO-WARN] ...):
The previously added rules REV-REV-AGAIN[AGAIN] and REV-REV-AGAIN subsume
a newly proposed :REWRITE rule generated from REV-REV-AGAIN[AGAIN-NO-
WARN], in the sense that the old rules rewrite more general targets.
Because the new rule will be tried first, it may nonetheless find application.

REV-REV-AGAIN[AGAIN-NO-WARN]

ACL2 Warning [Guards] in (CERTIFY-BOOK "mini-proveall-plus" ...): 
For the book 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall-plus.lisp",
its included sub-books define functions ==, APP, DEL, ENDS-IN-A-ZERO,
INSERT, INSERT-SORT, MEM, PERM and REV, which have not had their guards
verified.  See :DOC guards.


"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall-plus.fasl"

 "/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall-plus.lisp"
ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 