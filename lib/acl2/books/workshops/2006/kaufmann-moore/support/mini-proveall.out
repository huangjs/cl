This is SBCL 1.0.1.34, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

 ACL2 Version 3.1 built January 26, 2007  15:12:42.
 Copyright (C) 2006  University of Texas at Austin
 ACL2 comes with ABSOLUTELY NO WARRANTY.  This is free software and you
 are welcome to redistribute it under certain conditions.  For details,
 see the GNU General Public License.

 Initialized with (INITIALIZE-ACL2 'INCLUDE-BOOK *ACL2-PASS-2-FILES*).
 See the documentation topic note-3-1 for recent changes.
 Note: We have modified the prompt in some underlying Lisps to further
 distinguish it from the ACL2 prompt.

 NOTE!!  Proof trees are disabled in ACL2.  To enable them in emacs,
 look under the ACL2 source directory in interface/emacs/README.doc; 
 and, to turn on proof trees, execute :START-PROOF-TREE in the ACL2 
 command loop.   Look in the ACL2 documentation under PROOF-TREE.

ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 
#<PACKAGE "ACL2">
* 
ACL2 Version 3.1.  Level 1.  Cbd 
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/".

Type :help for help.
Type (good-bye) to quit completely out of ACL2.

ACL2 !> (PROVE PROOF-TREE OBSERVATION EVENT SUMMARY)
ACL2 !>APP
ASSOC-OF-APP
REV
TRUE-LISTP-REV

Entering the proof-checker....

->: :INDUCT
***** Now entering the theorem prover *****


Creating two new goals:  (MAIN . 1) and (MAIN . 2).

The proof of the current goal, MAIN, has been completed.  However,
the following subgoals remain to be proved:
  (MAIN . 1) and (MAIN . 2).
Now proving (MAIN . 1).
->: :BASH
***** Now entering the theorem prover *****


Creating one new goal:  ((MAIN . 1) . 1).

The proof of the current goal, (MAIN . 1), has been completed.  However,
the following subgoals remain to be proved:
  ((MAIN . 1) . 1).
Now proving ((MAIN . 1) . 1).
->: :INDUCT
***** Now entering the theorem prover *****


Creating two new goals:  (((MAIN . 1) . 1) . 1) and (((MAIN . 1) . 1) . 2).

The proof of the current goal, ((MAIN . 1) . 1), has been completed.
However, the following subgoals remain to be proved:
  (((MAIN . 1) . 1) . 1) and (((MAIN . 1) . 1) . 2).
Now proving (((MAIN . 1) . 1) . 1).
->: :BASH
***** Now entering the theorem prover *****


The proof of the current goal, (((MAIN . 1) . 1) . 1), has been completed,
as have all of its subgoals.
Now proving (((MAIN . 1) . 1) . 2).
->: :SPLIT
***** Now entering the theorem prover *****


Creating one new goal:  ((((MAIN . 1) . 1) . 2) . 1).

The proof of the current goal, (((MAIN . 1) . 1) . 2), has been completed.
However, the following subgoals remain to be proved:
  ((((MAIN . 1) . 1) . 2) . 1).
Now proving ((((MAIN . 1) . 1) . 2) . 1).
->: (:DV 1)
->: :X
#->: (EXPAND T)
#->: (SUCCEED (S))
##->: (S)
->: :NX
#->: UP
#->: 2
->: (:DV 1)
->: :X
#->: (EXPAND T)
#->: (SUCCEED (S))
##->: (S)
->: :TOP
->: :S

The proof of the current goal, ((((MAIN . 1) . 1) . 2) . 1), has been
completed, as have all of its subgoals.
Now proving (MAIN . 2).
->: :BASH
***** Now entering the theorem prover *****


Creating one new goal:  ((MAIN . 2) . 1).

The proof of the current goal, (MAIN . 2), has been completed.  However,
the following subgoals remain to be proved:
  ((MAIN . 2) . 1).
Now proving ((MAIN . 2) . 1).
->: (:DIVE 1 1)
->: :=
Using hypothesis #2.
->: (:DROP 2)
->: :TOP
->: :BASH
***** Now entering the theorem prover *****

*!*!*!*!*!*!* All goals have been proved! *!*!*!*!*!*!*
REV-APP-PROOF-CHECKER
REV-APP
REV-REV
LT

ACL2 Warning [Non-rec] in ( DEFTHM LT-NON-SYMMETRIC ...):  A :REWRITE
rule generated from LT-NON-SYMMETRIC will be triggered only by terms
containing the non-recursive function symbol LT.  Unless this function
is disabled, this rule is unlikely ever to be used.


ACL2 Warning [Subsume] in ( DEFTHM LT-NON-SYMMETRIC ...):  The previously
added rule LT subsumes a newly proposed :REWRITE rule generated from
LT-NON-SYMMETRIC, in the sense that the old rule rewrites a more general
target.  Because the new rule will be tried first, it may nonetheless
find application.

LT-NON-SYMMETRIC
T
INSERT
INSERT-SORT
DEL
MEM
PERM
PERM-REFLEXIVE
PERM-CONS
PERM-SYMMETRIC
MEM-DEL
PERM-MEM
MEM-DEL2
COMM-DEL
PERM-DEL
PERM-TRANSITIVE

ACL2 Warning [Equiv] in ( DEFTHM PERM-IS-AN-EQUIVALENCE ...):  Any
lemma about (PERM X Y), proved before PERM is marked as an equivalence
relation, is stored so as to rewrite (PERM X Y) to T.  After PERM is
known to be an equivalence relation, such a rule would rewrite the
left-hand side to the right-hand side, preserving PERM.  You have previously
proved one possibly problematic rule about PERM, namely PERM-DEL. 
After PERM is marked as an equivalence relation you should reconsider
this problematic rule.  If the rule is merely in support of establishing
that PERM is an equivalence relation, it may be appropriate to disable
it permanently hereafter.  If the rule is now intended to rewrite left
to right, you must prove the lemma again after PERM is known to be
an equivalence relation.

PERM-IS-AN-EQUIVALENCE
1830
PERM-IMPLIES-PERM-CONS-2
PERM-IMPLIES-IFF-MEM-2
ATOM-PERM

ACL2 Warning [Double-rewrite] in ( DEFTHM INSERT-IS-CONS ...):  In
a :REWRITE rule generated from INSERT-IS-CONS, equivalence relation
PERM is maintained at one problematic occurrence of variable X in the
right-hand side, but not at any binding occurrence of X.  Consider
replacing that occurrence of X in the right-hand side with 
(DOUBLE-REWRITE X).  See :doc double-rewrite for more information on
this issue.

INSERT-IS-CONS

ACL2 Warning [Double-rewrite] in ( DEFTHM INSERT-SORT-IS-ID ...): 
In a :REWRITE rule generated from INSERT-SORT-IS-ID, equivalence relation
PERM is maintained at one problematic occurrence of variable X in the
right-hand side, but not at any binding occurrence of X.  Consider
replacing that occurrence of X in the right-hand side with 
(DOUBLE-REWRITE X).  See :doc double-rewrite for more information on
this issue.

INSERT-SORT-IS-ID
PERM-IMPLIES-PERM-APP-2
APP-CONS

ACL2 Warning [Double-rewrite] in ( DEFTHM APP-COMMUTES ...):  In a
:REWRITE rule generated from APP-COMMUTES, equivalence relation PERM is
maintained at one problematic occurrence of variable A in the right-
hand side, but not at any binding occurrence of A.  Consider replacing
that occurrence of A in the right-hand side with (DOUBLE-REWRITE A).
See :doc double-rewrite for more information on this issue.


ACL2 Warning [Subsume] in ( DEFTHM APP-COMMUTES ...):  A newly proposed
:REWRITE rule generated from APP-COMMUTES probably subsumes the previously
added :REWRITE rule APP-CONS, in the sense that the new rule will now
probably be applied whenever the old rule would have been.

APP-COMMUTES
PERM-IMPLIES-PERM-APP-1

ACL2 Warning [Double-rewrite] in ( DEFTHM REV-IS-ID ...):  In a :REWRITE
rule generated from REV-IS-ID, equivalence relation PERM is maintained
at one problematic occurrence of variable X in the right-hand side,
but not at any binding occurrence of X.  Consider replacing that occurrence
of X in the right-hand side with (DOUBLE-REWRITE X).  See :doc double-
rewrite for more information on this issue.

REV-IS-ID
==
==-SYMMETRIC
==-REFLEXIVE
==-IS-AN-EQUIVALENCE
1845
==-IMPLIES-==-CONS-2
==-IMPLIES-IFF-CONSP-1
==-IMPLIES-==-APP-2
==-IMPLIES-==-APP-1

ACL2 Warning [Double-rewrite] in ( DEFTHM REV-REV-AGAIN ...):  In a
:REWRITE rule generated from REV-REV-AGAIN, equivalence relation == is
maintained at one problematic occurrence of variable X in the right-
hand side, but not at any binding occurrence of X.  Consider replacing
that occurrence of X in the right-hand side with (DOUBLE-REWRITE X).
See :doc double-rewrite for more information on this issue.

REV-REV-AGAIN
ENDS-IN-A-0
APP0
REV0
APP0-RIGHT-ID
ENDS-IN-A-ZERO
ENDS-IN-A-ZERO-APP0
1866
FORCE-TEST
PROPER-CONS-NEST-P

ACL2 Warning [Subsume] in ( DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE-FIRST-
PAIR-TEST ...):  A newly proposed :REWRITE rule generated from ORDERED-
SYMBOL-ALISTP-REMOVE-FIRST-PAIR-TEST probably subsumes the previously
added :REWRITE rule ORDERED-SYMBOL-ALISTP-REMOVE-FIRST-PAIR, in the
sense that the new rule will now probably be applied whenever the old
rule would have been.


ACL2 Warning [Subsume] in ( DEFTHM ORDERED-SYMBOL-ALISTP-REMOVE-FIRST-
PAIR-TEST ...):  The previously added rule ORDERED-SYMBOL-ALISTP-REMOVE-
FIRST-PAIR subsumes a newly proposed :REWRITE rule generated from ORDERED-
SYMBOL-ALISTP-REMOVE-FIRST-PAIR-TEST, in the sense that the old rule
rewrites a more general target.  Because the new rule will be tried
first, it may nonetheless find application.

ORDERED-SYMBOL-ALISTP-REMOVE-FIRST-PAIR-TEST

ACL2 Warning [Guards] in (CERTIFY-BOOK "mini-proveall" ...):  The book
"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall.lisp"
defines the functions ==, APP, DEL, ENDS-IN-A-ZERO, INSERT, INSERT-
SORT, MEM, PERM and REV, which have not had their guards verified.
See :DOC guards.


"/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall.fasl"

 "/Users/huangjianshi/src/acl2-sources/books/workshops/2006/kaufmann-moore/support/mini-proveall.lisp"
ACL2 !>
Exiting the ACL2 read-eval-print loop.  To re-enter, execute (LP).
* 