CLM


This is CLM, a sound synthesis package documented in clm.html.
The mailing list for clm news is cmdist@ccrma.stanford.edu.
To subscribe, visit

http://ccrma-mail.stanford.edu/mailman/listinfo/cmdist

This software is available to anyone who is interested, free gratis
for nothing, without warranties of any kind.  Send bug reports or
suggestions to bil@ccrma.stanford.edu.


I think CLM works in ACL, openMCL, CMUCL, SBCL, and CLISP
on SGI, Sun, Linux, netBSD, freeBSD, and Mac machines.
For current status of a given port, see the end of this file.


Users of CLM may be interested in snd-8.tar.gz at ccrma-ftp.
It is a sound editor that includes two-way communication
with CLM.


Contents: How to build CLM
             Linux notes
             Windows notes
             SGI notes
             Mac OSX notes
          Benchmarks
          URLS
          Foreign Function Interface Troubles
          Clisp troubles
          Current status


------------------------------------------------------------------------
How To Build CLM

In general start lisp and (load "all.lisp").

To build an executable image, or to build clm in some other directory,
optionally writing the binary files somewhere else, see "make-clm.cl".

If your system isn't supported yet, load "all.lisp" anyway, and send
me the errors you hit.  


----------------
Linux notes:

CLM's RIFF ('wave') output includes the non-standard chunk name "clm "
(it holds the CLM comment string).  If some dumb play program refuses
to deal with this, set the output header comment to nil, and try
again.

OSS is the default sound system; to use ALSA, rather than OSS, push :alsa
on *features* before loading CLM.  That is, start lisp,

(pushnew :alsa *features*)
(load "all.lisp")


And here's a note from Fernando:

    > When running the command (compile-file "xyz.ins").  I get a warning that
    > tells me that make can't find the command cc.
    
    I assume you do have gcc installed (just to check do a "rpm -q -a | grep
    gcc" to make sure it is there - if it is not then you need to install the
    gcc rpms). In my system the gcc package includes a link in /usr/bin that
    points from cc to gcc. I don't know how to change the default in clm but
    you could try to set up a link to point cc to gcc, for example:
      cd /usr/bin; ln -s gcc cc
    -- Fernando


If "sndplay" (via the "dac" function) can't be found, you need
to either add the clm directory to your PATH environment
variable, or put the full pathname for sndplay in *clm-player*.


----------------
Windows notes:

First, copy config.windoze to mus-config.h and sndlib.windoze to sndlib.h in the clm directory.
On other systems, these files are created by the configure script, but that doesn't seem
to work in Windows.

If you use the Windows delimiter "\", remember that it is
the Lisp quote-the-next-character symbol, so you need to
repeat it:

(load "c:\\bil\\clm\\all.lisp")

Or use the ACL command :cd:

> :cd /bil/clm
> :ld all.lisp

If you're running ACL 5.0 (not ACL Lite) with Microsoft C,
first copy the ACL file acl503.lib to the current (CLM) directory.
If it is named something else, fixup the name in all.lisp.
(In ACL 6, it's apparently named acl601.lib).
CLM does work with ACL Lite in Windoze -- load all.lisp as
usual (it will build libclm.dll), then to use an instrument,
load its code (i.e. skip the compile-file step).

I've assumed in all.lisp that you've used tar to unpack
clm-3.tar.gz, and that full-length file names are available.

If ACL 5.0 (with the FFI) has trouble finding the C compiler:

USER(1): :ld /clm/all.lisp
; Loading C:\clm\all.lisp
;   Loading C:\clm\acl.cl
; Compiling "C:\\clm\\io.c"
Error: "starting shell command" resulted in error
       "No such file or directory"
  [condition type: SIMPLE-ERROR]

Michael Edwards figured out how to fix this:

    "All that needed to be changed was the autoexec.bat file.  A few environment
    variables needed to be added or added to, that's all.  Basically, if you can get
    your autoexec.bat file set up so that you can run the silly bloody MS compiler,
    then you're laughing.  So, my path was changed so:
    
    set PATH=%PATH%;c:\progra~1\devstu~1\vc\bin;c:\progra~1\devstu~1\shared~1\bin;
    
    Note that I had to use the DOS file names rather than c:\program files\...
    otherwise the system complains.
    
    The first dir is where cl.exe lives, the second is where MSPDB50.DLL lives (I
    guess this could be MSPDB60.DLL if you have a newer version of Visual C++).  
    
    Then, according to the compiler documentation, you have to set two other
    environment variables, LIB and INCLUDE, to point to the correct places:
    
    set LIB=c:\program files\devstudio\vc\lib
    set INCLUDE=c:\program files\devstudio\vc\include
    
    Note that there are no double quotes around these paths, and here, the full
    32-bit files names are OK....sigh...
    
    Anyway, once you've changed the autoexec.bat file, I would suggest running it in
    a command prompt window so that you can see if there are any errors (they don't
    show up so easily when you start up your system).  If your path is too long, or
    if you have too many environment variables, then you might get the error "out of
    environment space" as you try and set your new variables.  If this doesn't
    happen, you should be set to restart your system (full restart, not just windows
    restart), fire up lisp and :ld /clm/all.lisp".


Bill sez: when MSVC installs itself, it prints out the name of a file that
    has the necessary commands to fixup the variables mentioned above.  On my
    system, it was named C:\Program Files\Microsoft Visual Studio\VC98\Bin\VCVARS32.BAT.
    I copied all that gobbledy-gook into c:AUTOEXEC.BAT, rebooted, and ACL was happy.
    Cygwin has a similar setup file named something like C:cygnus\cygwin-b20\cygnus.bat.
    If you want to use gcc et al, this apparently needs to be executed.  Currently
    all.lisp assumes cl is the C compiler name in Windoze.


Kenny Tilton supplies this ACL-related info:

    I am playing with one of the drum.ins instruments I found on the CCRMA site,
    so I had a problem with ACL under windows: once a DLL was loaded it was apparently
    held open or something, so a subsequent compile of the (definstrument...)
    (or compile-file of the same .ins) would fail on "unable to write file" or
    something. After that, using the instrument complained about the function
    no longer being loaded. Anyway, here's the fix I use:

      (defun unload-instrument (ins-name)
        (dolist (dll (ff:list-all-foreign-libraries))
          (when (search (symbol-name ins-name) (pathname-name dll))
            (print `(Unloading foreign library ,dll))
            (ff:unload-foreign-library dll))))

    Then:

      (unload-instrument 'djembe)

    where the finstrument name was actually fm-djembe (SEARCH looks for subsequences)
    Big warning: since the unloading goes by matching any substring, if I had three or
    four (the way developers often do) I'd zap them all with the above. So if I do start
    doing djembesoft and djembezzz and djembe123, I need to "unload" with enough of the
    name to nail the one I am after.


In ACL 7.0, The MS compiler has changed again; here's some info from Michael Edwards:

    It seems the MS compiler has separated its includes and libraries out into two
    separate directories now: in the compiler's directory: Vc7/include (or lib) and
    Vc7/PlatformSDK/inlude (or lib) and whereas one directory each in the environment
    variables for lib and include would suffice before, now you have to have two.

    So on WinXP with the compiler installed into the default directory (c:/program files)
    my environment variables look like this:

        INCLUDE: C:\Program Files\Microsoft Visual Studio .NET\Vc7\include;C:\Program Files\Microsoft Visual Studio .NET\Vc7\PlatformSDK\Include
        LIB C:\Program Files\Microsoft Visual Studio .NET\Vc7\lib;C:\Program Files\Microsoft Visual Studio .NET\Vc7\PlatformSDK\lib

    You set these by going to the Control Panel->System Properties, selecting the Advanced
    tab then clicking Environment Variables at the bottom of the window (instead of editing
    the autoexec.bat file on older windows systems).


----------------
SGI notes:

When you build a shared library on the SGI, the file
so_locations is written.  When the library is subsequently
loaded, the SGI apparently searches every directory for
any so_locations file!  This means old versions lying
around on completely un-unsed directories can cause the
loader to fail with the message:

ld: FATAL 11: Object file format error (libclm.so): 
  No .dynamic and/or .dynsym section(s) in this shared object

or 

ld: FATAL 11: Object file format error (libclm.so): 
  invalid section name index

The "fix" is to delete the unrelated so_locations files!  (Check
especially the clm source directory).


----------------
Mac OSX notes:

openmcl version 0.13 or later is needed (CLM needs open-shared-library).
The dac function seems to be getting interruptions from lisp in openmcl --
you may need to use sndplay (from a terminal) or some other program like
QuickTime to play CLM output.  sl-dac doesn't work at all.  The Motu card
probably doesn't work (with dac/sndplay), and I don't know how to fix it.


Bret Battey says:
"To use CLM, you will need OSX Xcode Tools in order to provide the C compiler
and other resources. New Macintoshes are generally not delivered with Xcode
Tools already installed, but in this case you may find the Xcode Tools installer
in an "Installers" folder in the computer's "Applications" folder. An Xcode Tools
CD may be included if you purchased OSX as an upgrade in a box. You can also
download the installer package directly from the Apple Developer Connection
Member Site. IMPORTANT: the default Xcode Tools install does not install all
components necessary to run CLM. When running the Xcode Tools installer,
customize the install and make sure ALL components of Xcode Tools are
selected for installation."



------------------------------------------------------------------------
BENCHMARKS

I tried out the following tests on various systems:

   [in CLM]:
1. (time (with-sound (:play nil) (expsrc 0 1 "oboe.snd" 3 .5 2)))
2. (time (with-sound (:reverb jc-reverb :play nil) (fm-violin 0 2 440 .1)))
3. (time (with-sound (:play nil) (fm-violin 0 2 440 .1)))
4. CLM-2: (time (with-sound (:play nil) (loop for i from 0 to 9 do (mix "oboe.snd" :frames 22050 :amplitude .1))))
   CLM-1: (time (with-sound (:play nil) (loop for i from 0 to 9 do (fasmix "oboe.snd" :duration 1 :amplitude .1))))
5. (time (with-sound (:play nil) (loop for i from 0 to 99 do (fm-violin (* i .1) 1 440 .01))))
6. (time (load "i.clm"))
7. (time (with-sound (:play nil) (pins 0 1 "oboe.snd" 1.0 :max-peaks 8)))
8. (time (with-sound (:play nil) (loop for i from 0 to 999 do (fm-violin (* i .01) .01 440 .01))))
9. (time (load "col5.clm"))

   [in English]:
1. sample rate conversion and "granular synthesis"
2. reverberated fm note
3. just the single fm note
4. a few short sound file fragments mixed
5. a bunch of fm notes
6. a portion of the piece "idyll" (fm+reverb)
7. spectral analysis followed by additive synthesis
8. 1000 short notes (to test instrument setup and so on)
9. fifth movement of "Colony" (added May-96 -- needed a longer test!)


    ----------------    
    CLM-1:

        machine                      1.   2.    3.    4.     5.     6.        7.      8.     9. 

68040 NeXT Clisp no-ffi:             5.7  17     3     5     131    350       10.1
68040 NeXT 56k gens:                 4.9   9.5   2.4   1.3   116    482       10.3
68040 NeXT with Ariel QP (2 QPs):    4.6   6.9   2.4   1.3    29    199 (117)  9.5 
R4600 SGI Indy ACL (133 Mhz) 32M:    1.4    .7    .3    .3    13     38        1.1     6.4   2328
PPC 7300/200 32 MB MacOS 7.5.5:       .35  1.13   .2    .57    9.8   48         .88   24.4
R5000 SGI O2sc ACL (180 MHz) 64M:     .26   .49   .22   .19    7.9   24         .63    4.7   1526
266 MHz PPC G3 MacOS MCL 96M:         .22   .38   .20   .44    8.1   22 (16.6)  .44    5.1   1465 (1052)
450 MHz Pentium II, ACL, Linux 64M:   .14   .19   .08   .13    4.0   13.9       .23    1.3   1125 (711)

    ----------------
    CLM-2:

R4600 SGI Indy ACL (133 Mhz) 32M:     .29   1.0    .45   .3   21.4   60        1.7     6.0   3726
266 MHz PPC G3 MacOS MCL 96M:         .13   .5     .38        16.3   52       <dies>   8.7   2572
266 MHz PPC G3 LinuxPPC Clisp 96M:    .2    .9     .18   .14   7.1   16         .29   20     1053
270 MHz Sun Ultra5 CMU-CL:           1.2   2.0    1.2   1.2    7.5   25        1.2    15     1348
450 MHz Pentium ACL Linux 256M:       .08   .16    .08   .13   3.7   12.0       .20    1.3    842 (761)
1.7 GHz Pentium IV, ACL, Linux 1GM:   .031  .064   .033  .073  1.63   5.2       .12     .84   321 (300)
3.2 GHz Pentium IV, ACL, Linux 2GM:   .013  .028   .014  .036  0.59   1.9 (1.4) .062    .48   120 (89.5)

    ----------------
    CLM-3:

3.2 GHz PIV, ACL, Linux 2GM:          .010  .08    .02   .01   0.99   3.1       .060    .46   200 (179)
same using Snd/Scheme (opt=6):        .02   .09    .03   .001  1.65   4.0       .17     .32   290


Any numbers below about .1 here are highly dubious.
(in parens -- using very large file buffers (*clm-file-buffer-size*) and lots of RAM)


------------------------------------------------------------------------
URLS:

  http://ccrma.stanford.edu/ (ccrma home page)
  http://ccrma.stanford.edu/planetccrma/software/ (CLM RPM images)
  http://ccrma-mail.stanford.edu/mailman/listinfo/planetccrma
  http://ccrma.stanford.edu/~jos/ (Julius Smith's home page)
  http://ccrma.stanford.edu/~juan/ATS.html
  http://sourceforge.net/projects/commonmusic

------------------------------------------------------------------------
Foreign Function Interface Troubles

CMU-CL:
After compiling an instrument, load the file <ins>.cmucl, not the x86f
compiler output.  For example:

(compile-file "v.ins")
(load "v.cmucl")

Also, cmucl only supports one definstrument per file -- this is due
to a long-standing bug in cmucl's load function.


If you get the error: ld: internal error ldlang.c 3088
from all.lisp when it is trying to build libclm.so, 
comment out line 490 of all.lisp:

#-(or windoze (and linux (or cmu acl-new-ffi))) " -lm -lc"

If that doesn't work, try without -lc or -lm (i.e some combination
of libraries should work).


------------------------------------------------------------------------
Clisp troubles

Several functions don't work in Clisp: basic-convolve, clm-fft, clm-swap-doubles,
run* -- anything that requires that C return an array of values to Lisp
and that isn't handled specially.  Also, "loop" within the run loop
doesn't work because Clisp's expansion of the loop macro requires handling
local "loop-finish" macro definitions -- use "do" instead.


------------------------------------------------------------------------
current status of both CLM and CMN (so I can keep track of these things):

ACL 8.0: clm Linux: [clm-test ok 27-Oct-05]
         cmn Linux: [cmntest ok 23-Oct-05]

         clm Linux 64: [clm-test ok 21-Nov-05]
         cmn Linux 64: [cmntest ok 23-Oct-05]

         clm freeBSD: [clm-test ok 25-Oct-05]
         cmn freeBSD: [cmntest ok 25-Oct-05]

         cmn solaris 64: [cmntest ok 26-Oct-05]
         clm solaris 64: 
            ld  -G -o /home/bil/clm/libclm.so /home/bil/clm/headers.o /home/bil/clm/audio.o /home/bil/clm/io.o /home/bil/clm/sound.o 
                      /home/bil/clm/clm.o /home/bil/clm/cmus.o /home/bil/test/acl/acl80b.64/libacli80b6.so  -lm -lc
            ld: fatal: file /home/bil/test/acl/acl80b.64/libacli80b6.so: wrong ELF class: ELFCLASS64
            
            but if I include -m64 I get:
              gcc -o io.o -c io.c -m64 -fPIC -I.
              io.c:1: sorry, unimplemented: 64-bit mode not compiled in
            and -march=opteron has no effect

         cmn solaris: [cmntest ok 26-Oct-05]
         clm solaris: 
            Error: Loading /export/home/bil/clm/clm_ARITH1.so failed with error:
              ld.so.1: ../test/acl/acl80b/alisp: fatal: relocation error: file /export/home/bil/clm/clm_ARITH1.so: symbol __ashldi3: 
                referenced symbol not found. 
            [__ashldi3 is in libgcc.a, but defins.lisp change didn't seem to take effect]

         clm mac: loader problems
         cmn mac: [cmntest ok 25-Oct-05]


SBCL 0.9.4 and later:
  using sbcl-fix.lisp from R Mattes

         cmn netBSD: [cmntest ok 30-Nov-05]

 0.9.9:  cmn freeBSD: [cmntest ok 2-Feb-06]
         clm freeBSD:
            ;;gcc  -o /usr/home/bil/clm/libclm.so [...]  -L/usr/X11R6/lib -lX11  -lm -lc
            /usr/lib/crt1.o(.text+0x81): In function `_start':
            : undefined reference to `main'

 0.9.11: cmn solaris: [cmntest ok 3-Apr-06]
         clm solaris:
           Error opening shared object "/export/home/bil/clm/libclm.so":
           ld.so.1: ../test/sbcl-0.9.4-sparc-sunos/src/runtime/sbcl: fatal: 
             relocation error: file /export/home/bil/clm/libclm.so: symbol main: referenced symbol not found.
           but I'm using the same flags as in sndlib
           (I also tried 9.14, but it won't run on my Suns)

  1.0:   cmn mac: [cmntest ok 4-Dec-06]
         clm mac: [clm-test ok 4-Dec-06]

  1.0.1: cmn Linux: [cmntest ok 19-Jan-07]
         clm Linux: [clm-test ok 19-Jan-07]

         cmn Linux 64: [cmntest ok 19-Jan-07]
         clm Linux 64: 
           can't open : No such file or directory chans: -1can't open : No such file or directory frames: -1
           debugger invoked on a SB-KERNEL::MEMORY-FAULT-ERROR in thread #<THREAD "initial thread" {1002311A31}>:
             memory fault


CMUCL 19b:  cmn mac: [cmntest 25-Oct-05]

            cmn netBSD: [cmntest 25-Oct-05]
            clm netBSD:
              can't get past loader problems:
               ;;; Opening shared library /home/bil/clm/libclm.so ...
               Error in function SYSTEM::ENSURE-LISP-TABLE-OPENED:
                 Can't open global symbol table: "Service unavailable"
        
      19c:  clm Linux: ok 
              ffi-test but not clm-test -- *.cmucl causes confusion
            cmn Linux: [cmntest 24-Oct-05]

            cmn freeBSD: [cmntest 25-Oct-05]
            clm freeBSD: ok
              not clm-test due to *.cmucl confusion

            cmn mac: 
              Error in function UNIX::SIGILL-HANDLER:  Illegal Instruction at #x40339BC4.
            clm mac:
              builds ok, but FFI problem:
                Error in KERNEL::UNDEFINED-SYMBOL-ERROR-HANDLER:  the function |clm_fm_violin2| is undefined

      19d:  cmn compilation dies in transpose.lisp with an error that makes no sense -- is the name C1 causing confusion?
              so it's commented out via #-cmu19d
              given that change, cmn test seems to be ok in Linux
            clm Linux: ok 
              ffi-test but not clm-test -- *.cmucl causes confusion


OPENMCL 0.14.3: cmn mac: [cmntest 24-Oct-05]
                clm mac: [clm-test 24-Oct-05]

        1.0.0:  cmn mac: [cmntest 24-Oct-05]
                clm mac: 13-Nov-05: loads ok, clm-test ok except "\." in filenames causes trouble,
                  clm-seek-floats|ints are no-ops, and run* appears to be broken.


CLISP 2.35: cmn freeBSD: [cmntest ok 29-Oct-05]

      2.38: cmn solaris 9 sparc:  
               fatal: relocation error: file /export/home/bil/test/clisp-2.38/base/lisp.run: 
               symbol rl_readline_version: referenced symbol not found

      2.39: cmn macIntel: [cmntest ok 19-Jul-06]

      2.41: cmn linux: [cmntest ok 15-Oct-06]
            clm linux: [clm-test ok 15-Oct-06]

            cmn linux 64: [cmntest ok 15-Oct-06]
            clm linux 64: [clm-test ok 19-Jul-06]

            cmn solaris 86-64: [cmntest ok 15-Oct-06]
            clm solaris 86-64: [clm-test ok 15-Oct-06]

            cmn netBSD: [cmntest ok 15-Oct-06]
            clm netBSD: [clm-test ok 15-Oct-06]


---------------- CMN ONLY --------------------------------

GCL 2.6.7: cmn linux: Cannot build with randomized sbrk
           cmn netBSD: confused about machine type, then dies with
             make: exec(../unixport/saved_pre_gcl) failed (No such file or directory)

ECL 0.9H:  cmn linux: GC Warning: Out of Memory!  Returning NIL!

ECL 0.9I:  cmn linux:
             In file included from /home/bil/test/ecl-0.9i/build/ecl/ecl-cmp.h:35,
             /home/bil/test/ecl-0.9i/build/ecl/config.h:303:26: error: arch/fpe_x86.c: No such file or directory
             Broken at COMPILE-FILE.

