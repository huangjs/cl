;;; **********************************************************************
;;; Copyright (C) 2007 Heinrich Taube, <taube (at) uiuc (dot) edu>
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the Lisp Lesser Gnu Public License.
;;; See http://www.cliki.net/LLGPL for the text of this agreement.
;;; **********************************************************************

;;; generated by scheme->cltl from gnuplot.scm on 30-Jan-2007 07:38:58

(in-package :cm)

(defparameter *gnuplot* "gnuplot -persist")

(defparameter *gnuplot-default-settings*
  (list :view t :style :linespoints :points nil :terminal
        (if (member (os-name) '(darwin osx macosx)) "aqua" nil)))

(defparameter gnuplot-data-styles
  '(:lines :points :linespoints :impulses :dots :steps :fsteps
    :histeps :errorbars :xerrorbars :yerrorbars :xyerrorbars
    :errorlines :xerrorlines :yerrorlines :boxes :filledboxes
    :filledcurves :boxederrorbars :boxxyerrorbars :financebars
    :candlesticks :vector))

(defparameter gnuplot-non-gnu-settings '(:view :points :comment))

(defun thing->string (x)
  (cond ((stringp x) x)
        ((keyword? x) (string-downcase (keyword->string x)))
        ((and x (symbolp x)) (string-downcase (symbol-name x)))
        (t (string-downcase (format nil "~a" x)))))

(defparameter gnuplot-special-settings
  (list
   (list ':title (lambda (f v) (format f " ~s" (thing->string v))))
   (list '(:origin :size)
         (lambda (f v)
           (format f " ~a,~a" (thing->string (car v))
                   (thing->string (cadr v)))))
   (list '(:xrange :yrange :zrange)
         (lambda (f v)
           (format f " [~a:~a]" (thing->string (car v))
                   (thing->string (cadr v)))))
   (list ':style
         (lambda (f v)
           (if (member v gnuplot-data-styles)
               (format f " data ~a" (thing->string v))
               (format f " ~a" (thing->string v)))))))

(defun find-gnuplot-setting (k)
  (do ((tail gnuplot-special-settings (cdr tail))
       (spec nil))
      ((or (null tail) spec) spec)
    (if
     (or (and (consp (caar tail)) (member k (caar tail)))
         (eq k (caar tail)))
     (setf spec (car tail)))))

(defun print-gnuplot-setting (f k v &rest p)
  (if (or (not v) (null v) (member k gnuplot-non-gnu-settings)) nil
      (let ((s (find-gnuplot-setting k)))
        (if (null p) (format f "set"))
        (format f " ~a" (thing->string k))
        (cond (s (funcall (cadr s) f v)) ((eq v t) nil)
              ((stringp v) (format f " ~a" v))
              ((consp v)
               (do ((tail v (cdr tail)))
                   ((null tail) nil)
                 (format f " ~a" (thing->string (car tail)))))
              (t (format f " ~a" (thing->string v))))
        (if (null p) (format f "~%"))
        nil)))

(defun guess-data-format (dat)
  (let ((a (car dat)))
    (cond
     ((numberp a)
      (do ((l dat (cdr l))
           (i 0 (+ i 1))
           (x most-negative-fixnum)
           (f nil))
          ((or (null l) f) (if (not f) (if (evenp i) ':xy) f))
        (if (evenp i)
            (if (>= (car l) x) (setf x (car l)) (setf f ':y)))))
     ((typep a <object>)
      (let ((xslot nil)
            (yslot nil)
            (xtest
             '(time
               beg
               start
               startime
               begin
               begin-time
               start-time
               onset
               off
               x))
            (ytest '(keynum frequency freq pitch frq note y)))
        (do ((l xtest (cdr l)))
            ((or (null l) xslot) nil)
          (if (slot-exists-p a (car l)) (setf xslot (car l))))
        (do ((l ytest (cdr l)))
            ((or (null l) yslot) nil)
          (if (slot-exists-p a (car l)) (setf yslot (car l))))
        (if xslot (if yslot (list xslot yslot) xslot) yslot)))
     (t nil))))

(defun slot-data? (x sl)
  (cond ((null sl) t)
        ((consp sl)
         (and (slot-data? x (car sl)) (slot-data? x (cdr sl))))
        (t
         (and (slot-exists-p x sl) (slot-boundp x sl)
              (numberp (slot-value x sl))))))

(defun slot-data (x sl)
  (cond ((null sl) '())
        ((consp sl)
         (cons (slot-data x (car sl)) (slot-data x (cdr sl))))
        (t (slot-value x sl))))

(defun print-gnuplot-plot (file data fmat)
  (cond ((not fmat) (error "Missing :points format for ~s." data))
        ((eq fmat t)
         (do ((tail data (cdr tail)))
             ((null tail) nil)
           (do ((e (car tail) (cdr e)))
               ((null e) nil)
             (format file " ~s" (car e)))
           (format file "~%")))
        ((numberp fmat)
         (do ()
             ((null data) nil)
           (do ((i 0 (+ i 1)))
               ((or (not (< i fmat)) (null data)))
             (format file "~%"))
           (format file " ~s" (car data))
           (setf data (cdr data))))
        ((eq fmat ':y)
         (do ((tail data (cdr tail)))
             ((null tail) nil)
           (format file " ~s~%" (car tail))))
        ((eq fmat ':xy)
         (do ((tail data (cddr tail)))
             ((null tail) nil)
           (format file " ~s ~s~%" (car tail) (cadr tail))))
        ((typep (car data) <object>)
         (if (slot-data? (car data) fmat)
             (labels ((slotdata (f x sl)
                        (cond ((null sl) nil)
                              ((consp sl) (slotdata f x (car sl))
                               (slotdata f x (cdr sl)))
                              (t
                               (format f " ~s" (slot-value x sl))))))
               (do ((tail data (cdr tail)))
                   ((null tail) nil)
                 (slotdata file (car tail) fmat)
                 (format file "~%")))
             (error "Missing slot data for ~s in  ~s." fmat
                    (car data))))
        (t (error "Unknown :points format ~s." fmat)))
  (format file "e~%"))

(defun gnuplot (path &rest args)
  (let ((plots (list)) (infos (copy-list *gnuplot-default-settings*)))
    (with-open-file
        (file path :direction :output :if-exists :supersede)
      (let ((str (member ':comment args)))
        (if str (format file "#~A~%" (caddr str))))
      (do ((tail args (cddr tail)))
          ((or (null tail) (not (keyword? (car tail))))
           (if (null tail) (error "Missing plot data in: ~s" args)
               (setf args tail)))
        (cond
         ((null (cdr tail))
          (error "Missing value for keyword ~s." (car tail)))
         ((member (car tail) *gnuplot-default-settings*)
          (rplaca (cdr (member (car tail) infos)) (cadr tail)))
         (t (print-gnuplot-setting file (car tail) (cadr tail)))))
      (do ((tail infos (cddr tail)))
          ((null tail) nil)
        (if (not (member (car tail) gnuplot-non-gnu-settings))
            (print-gnuplot-setting file (car tail) (cadr tail))))
      (do ((plotd nil))
          ((null args) (setf plots (nreverse plots)))
        (setf plotd
                (if (typep (car args) <seq>) (subobjects (car args))
                    (car args)))
        (unless
            (and (consp plotd)
                 (or (numberp (car plotd))
                     (and (consp (car plotd)) (numberp (caar plotd)))
                     (typep (car plotd) <object>)))
          (error "Not a list or seq containing plot data: ~s"
                 (car args)))
        (setf plotd
                (list plotd (getf infos ':points)
                      (list :trange nil :xrange nil :yrange nil)))
        (do ((tail (cdr args) (cddr tail)))
            ((or (null tail) (not (keyword? (car tail))))
             (setf args tail))
          (cond
           ((null (cdr tail))
            (error "Missing value for keyword ~s." (car tail)))
           ((eq (car tail) ':points)
            (setf (elt plotd 1) (cadr tail)))
           (t
            (let ((rng (member (car tail) (caddr plotd))))
              (if (not rng)
                  (nconc plotd (list (car tail) (cadr tail)))
                  (rplaca (cdr rng) (cadr tail)))))))
        (cond ((consp (caar plotd)) (setf (elt plotd 1) t))
              ((not (cadr plotd))
               (setf (elt plotd 1) (guess-data-format (car plotd)))))
        (push plotd plots))
      (format file "plot")
      (do ((tail plots (cdr tail)))
          ((null tail) (format file "~%"))
        (let* ((plotd (car tail)) (range (elt plotd 2)))
          (unless (eq tail plots) (format file ","))
          (do ((tail range (cddr tail))
               (func (find-gnuplot-setting ':xrange)))
              ((null tail) nil)
            (if (cadr tail) (funcall func file (cadr tail))))
          (format file " '-'")
          (do ((tail (nthcdr 3 plotd) (cddr tail)))
              ((null tail) nil)
            (print-gnuplot-setting file (car tail) (cadr tail) t))))
      (do ((tail plots (cdr tail)))
          ((null tail) nil)
        (let* ((plotd (car tail))
               (pdata (car plotd))
               (dataf (cadr plotd)))
          (print-gnuplot-plot file pdata dataf)))
      t)
    (if (getf infos ':view)
        (shell (format nil "~a ~a" *gnuplot* path)))
    path))
