;;; ****************************************************************
;;; Copyright (C) 2005 Heinrich Taube, <taube (at) uiuc (dot) edu>
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the Lisp Lesser Gnu Public License.
;;; See http://www.cliki.net/LLGPL for the text of this agreement.
;;; ****************************************************************

;;; $Name:  $
;;; $Revision: 1.6 $
;;; $Date: 2006/03/12 20:15:43 $
		      
(define-module midishare
    (use c-wrapper)
    (export ms:typeNote ms:typeKeyOn ms:typeKeyOff ms:typeKeyPress ms:typeCtrlChange ms:typeProgChange ms:typeChanPress ms:typePitchWheel ms:typePitchBend ms:typeSongPos ms:typeSongSel ms:typeClock ms:typeStart ms:typeContinue ms:typeStop ms:typeTune ms:typeActiveSens ms:typeReset ms:typeSysEx ms:typeStream ms:typePrivate ms:typeProcess ms:typeDProcess ms:typeQFrame ms:typeCtrl14b ms:typeNonRegParam ms:typeRegParam ms:typeSeqNum ms:typeTextual ms:typeCopyright ms:typeSeqName ms:typeInstrName ms:typeLyric ms:typeMarker ms:typeCuePoint ms:typeChanPrefix ms:typeEndTrack ms:typeTempo ms:typeSMPTEOffset ms:typeTimeSign ms:typeKeySign ms:typeSpecific ms:typePortPrefix ms:typeRcvAlarm ms:typeApplAlarm ms:typeReserved ms:typedead ms:link ms:date ms:evType ms:ref ms:port ms:chan ms:field ms:fieldsList ms:pitch ms:vel ms:dur ms:linkSE ms:linkST ms:kpress ms:ctrl ms:param ms:num ms:prefix ms:tempo ms:seconds ms:subframes ms:val ms:pgm ms:bend ms:clk ms:song ms:fields ms:text ms:fmsg ms:fcount ms:tsnum ms:tsdenom ms:tsclick ms:tsquarter ms:alteration ms:minor-scale ms:firstEv ms:lastEv ms:MidiShare ms:MidiGetVersion ms:MidiCountAppls ms:MidiGetIndAppl ms:MidiGetNamedAppl ms:MidiOpen ms:MidiClose ms:MidiGetName ms:MidiSetName ms:MidiGetInfo ms:MidiSetInfo ms:MidiNewFilter ms:MidiFreeFilter ms:MidiAcceptType ms:MidiAcceptChan ms:MidiAcceptPort ms:MidiIsAcceptedType ms:MidiIsAcceptedChan ms:MidiIsAcceptedPort ms:MidiGetFilter ms:MidiSetFilter ms:MidiGetRcvAlarm ms:MidiSetRcvAlarm ms:MidiGetApplAlarm ms:MidiSetApplAlarm ms:MidiConnect ms:MidiIsConnected ms:MidiCountDrivers ms:MidiGetPortState ms:MidiSetPortState ms:MidiFreeSpace ms:MidiNewEv ms:MidiCopyEv ms:MidiFreeEv ms:MidiSetField ms:MidiGetField ms:MidiAddField ms:MidiCountFields ms:MidiNewSeq ms:MidiAddSeq ms:MidiFreeSeq ms:MidiClearSeq ms:MidiApplySeq ms:MidiGetTime ms:MidiSendIm ms:MidiSend ms:MidiSendAt ms:MidiCountEvs ms:MidiGetEv ms:MidiAvailEv ms:MidiFlushEvs ms:MidiReadSync ms:MidiWriteSync ms:MidiCall ms:MidiTask ms:MidiDTask ms:MidiForgetTask ms:MidiCountDTasks ms:MidiFlushDTasks ms:MidiExec1DTask ms:MidiNewCell ms:MidiFreeCell ms:MidiTotalSpace ms:MidiGrowSpace ms:MidiGetSyncInfo ms:MidiSetSyncMode ms:MidiGetExtTime ms:MidiInt2ExtTime ms:MidiExt2IntTime ms:MidiTime2Smpte ms:MidiSmpte2Time ms:MidiCountDrivers ms:MidiGetIndDriver ms:MidiGetDriverInfos ms:MidiGetIndSlot ms:MidiGetSlotInfos ms:MidiConnectSlot ms:MidiIsSlotConnected ms:MidiNewMidiDriverInfos ms:MidiFreeMidiDriverInfos ms:md-name ms:md-version ms:md-slots)
    )

(select-module midishare)

(define libmidishare
  (if (equal? (car (sys-uname )) "Darwin")
      "/System/Library/Frameworks/MidiShare.framework/MidiShare"
      "/usr/lib/libMidiShare.so"))

(if (not (file-exists? libmidishare))
    (errorf "Midishare library ~S does not exit. Fix pathname in midishare.scm" libmidishare))

(c-load-library libmidishare)

;; genwrapper instead of parsing
;; genwrapper gauche-midishare -D__Types__ /System/Library/Frameworks/MidiShare.framework/Headers/MidiShare.h /System/Library/Frameworks/MidiShare.framework/MidiShare  > gauche-midishare.scm

;(c-include "/System/Library/Frameworks/MidiShare.framework/Headers/MidiShare.h" :option "-D__Types__")

;; generated by c-wrapper


(define __GXX_ABI_VERSION 102)
(define __SCHAR_MAX__ 127)
(define __SHRT_MAX__ 32767)
(define __INT_MAX__ 2147483647)
(define __LONG_MAX__ 2147483647)
(define __LONG_LONG_MAX__ 9223372036854775807)
(define __WCHAR_MAX__ 2147483647)
(define __CHAR_BIT__ 8)
(define __FLT_EVAL_METHOD__ 0)
(define __FLT_RADIX__ 2)
(define __FLT_MANT_DIG__ 24)
(define __FLT_DIG__ 6)
(define __FLT_MIN_EXP__ (- 125))
(define __FLT_MIN_10_EXP__ (- 37))
(define __FLT_MAX_EXP__ 128)
(define __FLT_MAX_10_EXP__ 38)
(define __FLT_MAX__ 3.40282347e38)
(define __FLT_MIN__ 1.17549435e-38)
(define __FLT_EPSILON__ 1.1920929e-7)
(define __FLT_DENORM_MIN__ 1.40129846e-45)
(define __DBL_MANT_DIG__ 53)
(define __DBL_DIG__ 15)
(define __DBL_MIN_EXP__ (- 1021))
(define __DBL_MIN_10_EXP__ (- 307))
(define __DBL_MAX_EXP__ 1024)
(define __DBL_MAX_10_EXP__ 308)
(define __DBL_MAX__ 1.7976931348623157e308)
(define __DBL_MIN__ 2.2250738585072014e-308)
(define __DBL_EPSILON__ 2.220446049250313e-16)
(define __DBL_DENORM_MIN__ 5.0e-324)
(define __LDBL_MANT_DIG__ 53)
(define __LDBL_DIG__ 15)
(define __LDBL_MIN_EXP__ (- 1021))
(define __LDBL_MIN_10_EXP__ (- 307))
(define __LDBL_MAX_EXP__ 1024)
(define __LDBL_MAX_10_EXP__ 308)
(define __DECIMAL_DIG__ 17)
(define __VERSION__ "3.3 20030304 (Apple Computer, Inc. build 1666)")
(define __STDC_HOSTED__ 1)
(define __NO_INLINE__ 1)
(define __FINITE_MATH_ONLY__ 0)
(define _ARCH_PPC 1)
(define __BIG_ENDIAN__ 1)
(define _BIG_ENDIAN 1)
(define __ppc__ 1)
(define __POWERPC__ 1)
(define __NATURAL_ALIGNMENT__ 1)
(define __MACH__ 1)
(define __APPLE__ 1)
(define __GNUC__ 3)
(define __GNUC_MINOR__ 3)
(define __GNUC_PATCHLEVEL__ 0)
(define __APPLE_CC__ 1666)
(define __DYNAMIC__ 1)
(define __Types__ 1)
(define typeNote 0)
(define typeKeyOn 1)
(define typeKeyOff 2)
(define typeKeyPress 3)
(define typeCtrlChange 4)
(define typeProgChange 5)
(define typeChanPress 6)
(define typePitchWheel 7)
(define typeSongPos 8)
(define typeSongSel 9)
(define typeClock 10)
(define typeStart 11)
(define typeContinue 12)
(define typeStop 13)
(define typeTune 14)
(define typeActiveSens 15)
(define typeReset 16)
(define typeSysEx 17)
(define typeStream 18)
(define typePrivate 19)
(define typeProcess 128)
(define typeDProcess 129)
(define typeQuarterFrame 130)
(define typeCtrl14b 131)
(define typeNonRegParam 132)
(define typeRegParam 133)
(define typeSeqNum 134)
(define typeTextual 135)
(define typeCopyright 136)
(define typeSeqName 137)
(define typeInstrName 138)
(define typeLyric 139)
(define typeMarker 140)
(define typeCuePoint 141)
(define typeChanPrefix 142)
(define typeEndTrack 143)
(define typeTempo 144)
(define typeSMPTEOffset 145)
(define typeTimeSign 146)
(define typeKeySign 147)
(define typeSpecific 148)
(define typePortPrefix 149)
(define typeRcvAlarm 150)
(define typeApplAlarm 151)
(define typeReserved 152)
(define typeLastReserved 254)
(define typeDead 255)
(define true 1)
(define false 0)
(define NoteOff 128)
(define NoteOn 144)
(define PolyTouch 160)
(define ControlChg 176)
(define ProgramChg 192)
(define AfterTouch 208)
(define PitchBend 224)
(define SysRealTime 240)
(define SysEx 240)
(define QFrame 241)
(define SongPos 242)
(define SongSel 243)
(define UnDef2 244)
(define UnDef3 245)
(define Tune 246)
(define EndSysX 247)
(define MClock 248)
(define UnDef4 249)
(define MStart 250)
(define MCont 251)
(define MStop 252)
(define UnDef5 253)
(define ActSense 254)
(define MReset 255)
(define ModemPort 0)
(define PrinterPort 1)
(define MIDIerrSpace (- 1))
(define MIDIerrRefNum (- 2))
(define MIDIerrBadType (- 3))
(define MIDIerrIndex (- 4))
(define MIDIerrEv (- 5))
(define MIDIerrUndef (- 6))
(define MIDISyncExternal 32768)
(define MIDISyncAnyPort 16384)
(define MIDIOpenAppl 1)
(define MIDICloseAppl 2)
(define MIDIChgName 3)
(define MIDIChgConnect 4)
(define MIDIOpenModem 5)
(define MIDICloseModem 6)
(define MIDIOpenPrinter 7)
(define MIDIClosePrinter 8)
(define MIDISyncStart 9)
(define MIDISyncStop 10)
(define MIDIChangeSync 11)
(define MIDIOpenDriver 12)
(define MIDICloseDriver 13)
(define MIDIAddSlot 14)
(define MIDIRemoveSlot 15)
(define MIDIChgSlotConnect 16)
(define MIDIChgSlotName 17)
(define <Byte> <c-uchar>)
(define <Ptr> (ptr <c-char>))
(define <Boolean> <c-uchar>)
(define <c-struct:TMidiSEX> (alloc-c-struct 'TMidiSEX))
(define <MidiSEXPtr> (ptr <c-struct:TMidiSEX>))
(init-c-struct! <c-struct:TMidiSEX> `((link unquote <MidiSEXPtr>) (data unquote (make-c-array <Byte> 12))))
(define <TMidiSEX> <c-struct:TMidiSEX>)
(define <c-struct:TMidiST> (alloc-c-struct 'TMidiST))
(define <MidiSTPtr> (ptr <c-struct:TMidiST>))
(init-c-struct! <c-struct:TMidiST> `((val unquote (make-c-array <c-long> 4))))
(define <TMidiST> <c-struct:TMidiST>)
(define <c-struct:TMidiEv> (alloc-c-struct 'TMidiEv))
(define <MidiEvPtr> (ptr <c-struct:TMidiEv>))
(define <c-union:G381> (alloc-c-union 'G381))
(define <c-struct:G376> (alloc-c-struct 'G376))
(init-c-struct! <c-struct:G376> `((pitch unquote <Byte>) (vel unquote <Byte>) (dur unquote <c-ushort>)))
(define <c-struct:G377> (alloc-c-struct 'G377))
(init-c-struct! <c-struct:G377> `((numerator unquote <Byte>) (denominator unquote <Byte>) (nClocks unquote <Byte>) (n32nd unquote <Byte>)))
(define <c-struct:G378> (alloc-c-struct 'G378))
(init-c-struct! <c-struct:G378> `((ton unquote <c-char>) (mode unquote <Byte>) (unused unquote (make-c-array <Byte> 2))))
(define <c-struct:G379> (alloc-c-struct 'G379))
(init-c-struct! <c-struct:G379> `((num unquote <c-short>) (val unquote <c-short>)))
(define <c-struct:G380> (alloc-c-struct 'G380))
(init-c-struct! <c-struct:G380> `((number unquote <c-ushort>) (unused unquote <c-short>)))
(init-c-union! <c-union:G381> `((note unquote <c-struct:G376>) (timeSign unquote <c-struct:G377>) (keySign unquote <c-struct:G378>) (param unquote <c-struct:G379>) (seqNum unquote <c-struct:G380>) (shortFields unquote (make-c-array <c-short> 2)) (longField unquote <c-long>) (tempo unquote <c-long>) (data unquote (make-c-array <Byte> 4)) (linkSE unquote <MidiSEXPtr>) (linkST unquote <MidiSTPtr>)))
(init-c-struct! <c-struct:TMidiEv> `((link unquote <MidiEvPtr>) (date unquote <c-ulong>) (evType unquote <Byte>) (refNum unquote <Byte>) (port unquote <Byte>) (chan unquote <Byte>) (info unquote <c-union:G381>)))
(define <TMidiEv> <c-struct:TMidiEv>)
(define <c-struct:TMidiSeq> (alloc-c-struct 'TMidiSeq))
(define <MidiSeqPtr> (ptr <c-struct:TMidiSeq>))
(init-c-struct! <c-struct:TMidiSeq> `((first unquote <MidiEvPtr>) (last unquote <MidiEvPtr>) (undef1 unquote <Ptr>) (undef2 unquote <Ptr>)))
(define <TMidiSeq> <c-struct:TMidiSeq>)
(define <c-struct:TFilter> (alloc-c-struct 'TFilter))
(define <MidiFilterPtr> (ptr <c-struct:TFilter>))
(init-c-struct! <c-struct:TFilter> `((port unquote (make-c-array <c-char> 32)) (evType unquote (make-c-array <c-char> 32)) (channel unquote (make-c-array <c-char> 2)) (unused unquote (make-c-array <c-char> 2))))
(define <TFilter> <c-struct:TFilter>)
(define DrvNameLen 32)
(define <MidiName> (ptr <c-char>))
(define <DriverName> (make-c-array <c-char> 32))
(define <SlotName> <DriverName>)
(define <c-struct:G382> (alloc-c-struct 'G382))
(init-c-struct! <c-struct:G382> `((drvRef unquote <c-short>) (slotRef unquote <c-short>)))
(define <SlotRefNum> <c-struct:G382>)
(define MidiInputSlot 1)
(define MidiOutputSlot 2)
(define MidiInputOutputSlot 3)
(define <SlotDirection> <c-int>)
(define <c-struct:TSlotInfos> (alloc-c-struct 'TSlotInfos))
(init-c-struct! <c-struct:TSlotInfos> `((name unquote <SlotName>) (direction unquote <SlotDirection>) (cnx unquote (make-c-array <c-char> 32)) (reserved unquote (make-c-array <c-long> 2))))
(define <TSlotInfos> <c-struct:TSlotInfos>)
(define <WakeupPtr> (make-c-func-ptr <c-void> (list <c-short>)))
(define <SleepPtr> (make-c-func-ptr <c-void> (list <c-short>)))
(define <c-struct:TDriverOperation> (alloc-c-struct 'TDriverOperation))
(init-c-struct! <c-struct:TDriverOperation> `((wakeup unquote <WakeupPtr>) (sleep unquote <SleepPtr>) (reserved unquote (make-c-array <c-long> 3))))
(define <TDriverOperation> <c-struct:TDriverOperation>)
(define <c-struct:TDriverInfos> (alloc-c-struct 'TDriverInfos))
(init-c-struct! <c-struct:TDriverInfos> `((name unquote <DriverName>) (version unquote <c-short>) (slots unquote <c-short>) (reserved unquote (make-c-array <c-long> 2))))
(define <TDriverInfos> <c-struct:TDriverInfos>)
(define <c-struct:TSyncInfo> (alloc-c-struct 'TSyncInfo))
(define <SyncInfoPtr> (ptr <c-struct:TSyncInfo>))
(init-c-struct! <c-struct:TSyncInfo> `((time unquote <c-long>) (reenter unquote <c-long>) (syncMode unquote <c-ushort>) (syncLocked unquote <Byte>) (syncPort unquote <Byte>) (syncStart unquote <c-long>) (syncStop unquote <c-long>) (syncOffset unquote <c-long>) (syncSpeed unquote <c-long>) (syncBreaks unquote <c-long>) (syncFormat unquote <c-short>)))
(define <TSyncInfo> <c-struct:TSyncInfo>)
(define <c-struct:TSmpteLocation> (alloc-c-struct 'TSmpteLocation))
(define <SmpteLocPtr> (ptr <c-struct:TSmpteLocation>))
(init-c-struct! <c-struct:TSmpteLocation> `((format unquote <c-short>) (hours unquote <c-short>) (minutes unquote <c-short>) (seconds unquote <c-short>) (frames unquote <c-short>) (fracs unquote <c-short>)))
(define <TSmpteLocation> <c-struct:TSmpteLocation>)
(define <TaskPtr> (make-c-func-ptr <c-void> (list <c-long> <c-short> <c-long> <c-long> <c-long>)))
(define <RcvAlarmPtr> (make-c-func-ptr <c-void> (list <c-short>)))
(define <ApplAlarmPtr> (make-c-func-ptr <c-void> (list <c-short> <c-long>)))
(define <ApplyProcPtr> (make-c-func-ptr <c-void> (list <MidiEvPtr>)))
(define MidiShare (make-c-func 'MidiShare <c-int> (list)))
(define MidiGetVersion (make-c-func 'MidiGetVersion <c-short> (list)))
(define MidiCountAppls (make-c-func 'MidiCountAppls <c-short> (list)))
(define MidiGetIndAppl (make-c-func 'MidiGetIndAppl <c-short> (list <c-short>)))
(define MidiGetNamedAppl (make-c-func 'MidiGetNamedAppl <c-short> (list <MidiName>)))
(define MidiGetSyncInfo (make-c-func 'MidiGetSyncInfo <c-void> (list <SyncInfoPtr>)))
(define MidiSetSyncMode (make-c-func 'MidiSetSyncMode <c-void> (list <c-ushort>)))
(define MidiGetExtTime (make-c-func 'MidiGetExtTime <c-long> (list)))
(define MidiInt2ExtTime (make-c-func 'MidiInt2ExtTime <c-long> (list <c-long>)))
(define MidiExt2IntTime (make-c-func 'MidiExt2IntTime <c-long> (list <c-long>)))
(define MidiTime2Smpte (make-c-func 'MidiTime2Smpte <c-void> (list <c-long> <c-short> <SmpteLocPtr>)))
(define MidiSmpte2Time (make-c-func 'MidiSmpte2Time <c-long> (list <SmpteLocPtr>)))
(define MidiOpen (make-c-func 'MidiOpen <c-short> (list <MidiName>)))
(define MidiClose (make-c-func 'MidiClose <c-void> (list <c-short>)))
(define MidiGetName (make-c-func 'MidiGetName <MidiName> (list <c-short>)))
(define MidiSetName (make-c-func 'MidiSetName <c-void> (list <c-short> <MidiName>)))
(define MidiGetInfo (make-c-func 'MidiGetInfo (ptr <c-void>) (list <c-short>)))
(define MidiSetInfo (make-c-func 'MidiSetInfo <c-void> (list <c-short> (ptr <c-void>))))
(define MidiGetFilter (make-c-func 'MidiGetFilter <MidiFilterPtr> (list <c-short>)))
(define MidiSetFilter (make-c-func 'MidiSetFilter <c-void> (list <c-short> <MidiFilterPtr>)))
(define MidiGetRcvAlarm (make-c-func 'MidiGetRcvAlarm <RcvAlarmPtr> (list <c-short>)))
(define MidiSetRcvAlarm (make-c-func 'MidiSetRcvAlarm <c-void> (list <c-short> <RcvAlarmPtr>)))
(define MidiGetApplAlarm (make-c-func 'MidiGetApplAlarm <ApplAlarmPtr> (list <c-short>)))
(define MidiSetApplAlarm (make-c-func 'MidiSetApplAlarm <c-void> (list <c-short> <ApplAlarmPtr>)))
(define MidiRegisterDriver (make-c-func 'MidiRegisterDriver <c-short> (list (ptr <TDriverInfos>) (ptr <TDriverOperation>))))
(define MidiUnregisterDriver (make-c-func 'MidiUnregisterDriver <c-void> (list <c-short>)))
(define MidiCountDrivers (make-c-func 'MidiCountDrivers <c-short> (list)))
(define MidiGetIndDriver (make-c-func 'MidiGetIndDriver <c-short> (list <c-short>)))
(define MidiGetDriverInfos (make-c-func 'MidiGetDriverInfos <Boolean> (list <c-short> (ptr <TDriverInfos>))))
(define MidiAddSlot (make-c-func 'MidiAddSlot <SlotRefNum> (list <c-short> <MidiName> <SlotDirection>)))
(define MidiGetIndSlot (make-c-func 'MidiGetIndSlot <SlotRefNum> (list <c-short> <c-short>)))
(define MidiRemoveSlot (make-c-func 'MidiRemoveSlot <c-void> (list <SlotRefNum>)))
(define MidiSetSlotName (make-c-func 'MidiSetSlotName <c-void> (list <SlotRefNum> <MidiName>)))
(define MidiGetSlotInfos (make-c-func 'MidiGetSlotInfos <Boolean> (list <SlotRefNum> (ptr <TSlotInfos>))))
(define MidiConnectSlot (make-c-func 'MidiConnectSlot <c-void> (list <c-short> <SlotRefNum> <Boolean>)))
(define MidiIsSlotConnected (make-c-func 'MidiIsSlotConnected <Boolean> (list <c-short> <SlotRefNum>)))
(define MidiConnect (make-c-func 'MidiConnect <c-void> (list <c-short> <c-short> <Boolean>)))
(define MidiIsConnected (make-c-func 'MidiIsConnected <Boolean> (list <c-short> <c-short>)))
(define MidiGetPortState (make-c-func 'MidiGetPortState <Boolean> (list <c-short>)))
(define MidiSetPortState (make-c-func 'MidiSetPortState <c-void> (list <c-short> <Boolean>)))
(define MidiFreeSpace (make-c-func 'MidiFreeSpace <c-long> (list)))
(define MidiNewCell (make-c-func 'MidiNewCell <MidiEvPtr> (list)))
(define MidiFreeCell (make-c-func 'MidiFreeCell <c-void> (list <MidiEvPtr>)))
(define MidiTotalSpace (make-c-func 'MidiTotalSpace <c-long> (list)))
(define MidiGrowSpace (make-c-func 'MidiGrowSpace <c-long> (list <c-long>)))
(define MidiNewEv (make-c-func 'MidiNewEv <MidiEvPtr> (list <c-short>)))
(define MidiCopyEv (make-c-func 'MidiCopyEv <MidiEvPtr> (list <MidiEvPtr>)))
(define MidiFreeEv (make-c-func 'MidiFreeEv <c-void> (list <MidiEvPtr>)))
(define MidiSetField (make-c-func 'MidiSetField <c-void> (list <MidiEvPtr> <c-long> <c-long>)))
(define MidiGetField (make-c-func 'MidiGetField <c-long> (list <MidiEvPtr> <c-long>)))
(define MidiAddField (make-c-func 'MidiAddField <c-void> (list <MidiEvPtr> <c-long>)))
(define MidiCountFields (make-c-func 'MidiCountFields <c-long> (list <MidiEvPtr>)))
(define MidiNewSeq (make-c-func 'MidiNewSeq <MidiSeqPtr> (list)))
(define MidiAddSeq (make-c-func 'MidiAddSeq <c-void> (list <MidiSeqPtr> <MidiEvPtr>)))
(define MidiFreeSeq (make-c-func 'MidiFreeSeq <c-void> (list <MidiSeqPtr>)))
(define MidiClearSeq (make-c-func 'MidiClearSeq <c-void> (list <MidiSeqPtr>)))
(define MidiApplySeq (make-c-func 'MidiApplySeq <c-void> (list <MidiSeqPtr> <ApplyProcPtr>)))
(define MidiGetTime (make-c-func 'MidiGetTime <c-long> (list)))
(define MidiSendIm (make-c-func 'MidiSendIm <c-void> (list <c-short> <MidiEvPtr>)))
(define MidiSend (make-c-func 'MidiSend <c-void> (list <c-short> <MidiEvPtr>)))
(define MidiSendAt (make-c-func 'MidiSendAt <c-void> (list <c-short> <MidiEvPtr> <c-long>)))
(define MidiCountEvs (make-c-func 'MidiCountEvs <c-long> (list <c-short>)))
(define MidiGetEv (make-c-func 'MidiGetEv <MidiEvPtr> (list <c-short>)))
(define MidiAvailEv (make-c-func 'MidiAvailEv <MidiEvPtr> (list <c-short>)))
(define MidiFlushEvs (make-c-func 'MidiFlushEvs <c-void> (list <c-short>)))
(define MidiReadSync (make-c-func 'MidiReadSync (ptr <c-void>) (list (ptr <c-void>))))
(define MidiWriteSync (make-c-func 'MidiWriteSync (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>))))
(define MidiCall (make-c-func 'MidiCall <c-void> (list <TaskPtr> <c-long> <c-short> <c-long> <c-long> <c-long>)))
(define MidiTask (make-c-func 'MidiTask <MidiEvPtr> (list <TaskPtr> <c-long> <c-short> <c-long> <c-long> <c-long>)))
(define MidiDTask (make-c-func 'MidiDTask <MidiEvPtr> (list <TaskPtr> <c-long> <c-short> <c-long> <c-long> <c-long>)))
(define MidiForgetTask (make-c-func 'MidiForgetTask <c-void> (list (ptr <MidiEvPtr>))))
(define MidiCountDTasks (make-c-func 'MidiCountDTasks <c-long> (list <c-short>)))
(define MidiFlushDTasks (make-c-func 'MidiFlushDTasks <c-void> (list <c-short>)))
(define MidiExec1DTask (make-c-func 'MidiExec1DTask <c-void> (list <c-short>)))
(define MidiNewFilter (make-c-func 'MidiNewFilter <MidiFilterPtr> (list)))
(define MidiFreeFilter (make-c-func 'MidiFreeFilter <c-void> (list <MidiFilterPtr>)))
(define MidiAcceptPort (make-c-func 'MidiAcceptPort <c-void> (list <MidiFilterPtr> <c-short> <Boolean>)))
(define MidiAcceptChan (make-c-func 'MidiAcceptChan <c-void> (list <MidiFilterPtr> <c-short> <Boolean>)))
(define MidiAcceptType (make-c-func 'MidiAcceptType <c-void> (list <MidiFilterPtr> <c-short> <Boolean>)))
(define MidiIsAcceptedPort (make-c-func 'MidiIsAcceptedPort <Boolean> (list <MidiFilterPtr> <c-short>)))
(define MidiIsAcceptedChan (make-c-func 'MidiIsAcceptedChan <Boolean> (list <MidiFilterPtr> <c-short>)))
(define MidiIsAcceptedType (make-c-func 'MidiIsAcceptedType <Boolean> (list <MidiFilterPtr> <c-short>)))

;;;
;;; Midishare FFI for Gauche Scheme 
;;;

;;; Constant definitions for every type of MidiShare event

(define ms:typeNote          0) ; note with pitch, velocity and duration
(define ms:typeKeyOn         1) ; key on with pitch and velocity
(define ms:typeKeyOff        2) ; key off with pitch and velocity
(define ms:typeKeyPress      3) ; key pressure with pitch and pressure value
(define ms:typeCtrlChange    4) ; control change with control number and control value
(define ms:typeProgChange    5) ; program change with program number
(define ms:typeChanPress     6) ; channel pressure with pressure value
(define ms:typePitchWheel    7) ; pitch bend with lsb and msb of the 14-bit value
(define ms:typePitchBend     7) ; pitch bender with lsb and msb of the 14-bit value
(define ms:typeSongPos       8) ; song position with lsb and msb of the 14-bit position
(define ms:typeSongSel       9) ; song selection with a song number
(define ms:typeClock        10) ; clock request (no argument)
(define ms:typeStart        11) ; start request (no argument)
(define ms:typeContinue     12) ; continue request (no argument)
(define ms:typeStop         13) ; stop request (no argument)
(define ms:typeTune         14) ; tune request (no argument)
(define ms:typeActiveSens   15) ; active sensing code (no argument)
(define ms:typeReset        16) ; reset request (no argument)
(define ms:typeSysEx        17) ; system exclusive with number of data bytes. Leading $F0 and tailing $F7 are automatically supplied by MidiShare and MUST NOT be included by the user
(define ms:typeStream       18) ; special event with any number of unprocessed data/status bytes
(define ms:typePrivate      19) ; private event for internal use with 4 32-bits arguments
(define ms:typeProcess     128) ; interrupt level task with a function adress and 3 32-bits args
(define ms:typeDProcess    129) ; foreground task with a function address and 3 32-bits arguments
(define ms:typeQFrame      130) ; quarter frame message with a type from 0 to 7 and a value
(define ms:typeCtrl14b     131)
(define ms:typeNonRegParam 132)
(define ms:typeRegParam    133)
(define ms:typeSeqNum	134)
(define ms:typeTextual     135)
(define ms:typeCopyright   136)
(define ms:typeSeqName     137)
(define ms:typeInstrName   138)
(define ms:typeLyric	139)
(define ms:typeMarker	140)
(define ms:typeCuePoint    141)
(define ms:typeChanPrefix  142)
(define ms:typeEndTrack    143)
(define ms:typeTempo	144)
(define ms:typeSMPTEOffset 145)
(define ms:typeTimeSign    146)
(define ms:typeKeySign     147)
(define ms:typeSpecific    148)
(define ms:typePortPrefix  149)
(define ms:typeRcvAlarm    150)
(define ms:typeApplAlarm   151)
(define ms:typeReserved    152)
(define ms:typedead        255)

;;; Constant definition for every MidiShare error code
(define MIDIerrSpace   -1) ; too many applications
(define MIDIerrRefNu   -2) ; bad reference number
(define MIDIerrBadType -3) ; bad event type
(define MIDIerrIndex   -4) ; bad index

;;; Constant definition for the Macintosh serial ports
(define ModemPort   0) ; Macintosh modem port
(define PrinterPort 1) ; Macintosh printer port

;;; Constant definition for the synchronisation modes
(define MidiExternalSync #x8000) ; Bit-15 set for external synchronisation
(define MidiSyncAnyPort  #x4000) ; Bit-14 set for synchronisation on any port

;;; Constant definition for SMPTE frame format
(define smpte24fr 0) ; 24 frame/sec
(define smpte25fr 1) ; 25 frame/sec
(define smpte29fr 2) ; 29 frame/sec (30 drop frame)
(define smpte30fr 3) ; 30 frame/sec

;;; Constant definition for MidiShare world changes
(define MIDIOpenAppl     1) ; application was opened
(define MIDICloseAppl    2) ; application was closed
(define MIDIChgName      3) ; application name was changed
(define MIDIChgConnect   4) ; connection was changed
(define MIDIOpenModem    5) ; obsolete
(define MIDICloseModem   6) ; obsolete
(define MIDIOpenPrinter  7) ; Printer port was opened
(define MIDIClosePrinter 8) ; Printer port was closed
(define MIDISyncStart    9) ; SMPTE synchronisation just start
(define MIDISyncStop    10) ; SMPTE synchronisation just stop
(define MIDIChangeSync  10)
(define MIDIOpenDriver  11)
(define MIDICloseDriver 12)
(define MIDIAddSlot     13)
(define MIDIRemoveSlot  14)
(define MIDIChgSlotConnect 15)
(define MIDIChgSlotName 16)

;; (define (ms:date e . v)
;;  ;; read or set the date of an event
;;  (if (null? v)
;;      (ref (deref e) 'date)
;;      (begin (set! (ref (deref e) 'date) (car v))
;;	     (car v))))

(define (expand-ev-accessor name slots)
  ;; (expand-ev-accessor 'ms:pitch '(info note pitch))
  (letrec ((slotref
	    (lambda (ptr slots)
	      (if (null? slots)
		  `(deref ,ptr)
		  `(ref ,(slotref ptr (cdr slots)) ',(car slots))))))
    (let ((sref (slotref 'e (reverse slots))))
      `(define (,name e . v)
	 (if (null? v)
	     ,sref
	     (begin (set! ,sref (car v))
		    (car v)))))))

(define-macro (define-ev-accessor name . slots)
  (expand-ev-accessor name slots))


;;; Functions common to every type of event

(define-ev-accessor ms:link link)
(define-ev-accessor ms:date date)
(define-ev-accessor ms:evType evType)
(define-ev-accessor ms:ref ref)
(define-ev-accessor ms:port port)
(define-ev-accessor ms:chan chan)

(define (ms:field e . args)
  ;; (field ev &optional field val)
  (if (not (null? args))
      (if (not (null? (cdr args)))
	  (MidiSetField e (car args) (cadr args))
	  (MidiGetField e (car args)))
      (MidiCountFields e)))

(define (ms:fieldsList e . num)
  (let* ((l (list #f))
	 (m (MidiCountFields e))
	 (n (if (null? num) m (car num))))
    (do ((tail l)
	 (i 0 (+ i 1)))
	((or (not (< i m)) (not (< i n)))
	 (cdr l))
    (set-cdr! tail (list (MidiGetField e i)))
    (set! tail (cdr tail)))))

; (define foo (ms:MidiNewEv 0))
; (ref (deref foo ) 'info)
; (ref (ref (deref foo) 'info) 'note) 
; (ref (ref (ref (deref foo) 'info) 'note) 'pitch)

;;; Specific to typeNote events

(define-ev-accessor ms:pitch info note pitch)
(define-ev-accessor ms:vel info note vel)
(define-ev-accessor ms:dur info note dur)

;;; Specific to other types of events

(define-ev-accessor ms:linkSE info linkSE)
(define-ev-accessor ms:linkST info linkST)
(define-ev-accessor ms:kpress info note vel)

(define (ms:ctrl e . v)
  (if (null? v)
      (MidiGetField e 0)
      (MidiSetField e 0 (car v))))

(define (ms:param e . v)
  (if (null? v)
      (MidiGetField e 0)
      (MidiSetField e 0 (car v))))

(define (ms:num e . v)
  (if (null? v)
      (MidiGetField e 0)
      (MidiSetField e 0 (car v))))

(define (ms:prefix e . v)
  (if (null? v)
      (MidiGetField e 0)
      (MidiSetField e 0 (car v))))

(define (ms:tempo e . v)
  (if (null? v)
      (MidiGetField e 0)
      (MidiSetField e 0 (car v))))

(define (ms:seconds e . v)
  (if (null? v)
      (MidiGetField e 0)
      (MidiSetField e 0 (car v))))

(define (ms:subframes e . v)
  (if (null? v)
    (MidiGetField e 1)
    (MidiSetField e 1 (car v))))

(define (ms:val e . v)
  (if (null? v)
    (MidiGetField e 1)
    (MidiSetField e 1 (car v))))

(define-ev-accessor ms:pgm info note pitch)

(define (ms:bend e . v)
  ;; read or set the bend value of an event
  (if (null? v)
      (- (+ (ms:pitch e) (* 128 (ms:vel e)))
	 8192)
      (begin
	(ms:pitch e (remainder (car v) 128))
	(ms:vel e (quotient (car v) 128))
	(car v))))

(define (ms:clk e . v)
  (if (null? v)
      (* 6 (+ (ms:pitch e) (* 128 (ms:vel e))))
      (let ((val (inexact->exact (round (/ (car v) 6)))))
	(ms:pitch e (remainder val 128))
	(ms:vel e (quotient val 128))
	(car v))))

(define-ev-accessor ms:song info note pitch)

(define (ms:fields e . v)
  (if (null? v)
    (let ((z (MidiCountFields e))
	  (l (list #f)))
      (do ((i 0 (+ i 1))
	   (tail l))
	  ((= i z) (cdr tail))
	(set-cdr! tail (list (MidiGetField e i)))
	(set! tail (cdr tail))))
    (begin (for-each (lambda (f) (MidiAddField e f)) 
		     (car v)) 
	   (car v))))

(define (ms:text e . s)
  (if (null? s)
      (list->string (map integer->char (ms:fields e)))
      (ms:fields e (map char->integer (string->list (car s))))))

(define-ev-accessor ms:fmsg info note dur)
(define-ev-accessor ms:fcount info note vel)

(define (ms:tsnum e . v)
  (if (null? v)
    (MidiGetField e 0)
    (MidiSetField e 0 (car v))))

(define (ms:tsdenom e . v)
  (if (null? v)
    (MidiGetField e 1)
    (MidiSetField e 1 (car v))))

(define (ms:tsclick e . v)
  (if (null? v)
    (MidiGetField e 2)
    (MidiSetField e 2 (car v))))

(define (ms:tsquarter e . v)
  (if (null? v)
    (MidiGetField e 3)
    (MidiSetField e 3 (car v))))

(define (ms:alteration e . v)
  (if (null? v)
    (MidiGetField e 0)
    (MidiSetField e 0 (car v))))

(define (ms:minor-scale e . v)
  (if (null? v)
      (= 1 (MidiGetField e 1))
      (MidiSetField e 1 (if (car v) 1 0))))

(define (info e . d)
  (error "info: Attempt to get or set an aggregate slot (midiEv.info)"))

;;;  Macros for accessing MidiShare Sequences data structures

(define (ms:firstEv e . v)
  (error "fixme"))

(define (ms:lastEv e . v)
  (error "fixme"))

;;;
;;; libMidiShare Entry points
;;;

;; (MidiAcceptType :void (f midi-filter-ptr) (type :short) (state boolean))
;; (MidiAcceptChan :void (f midi-filter-ptr) (chan :short) (state boolean))
;; (MidiAcceptPort :void (f midi-filter-ptr) (port :short) (state boolean))
;; (MidiAddField :void (e midi-ev-ptr) (v :long))
;; (MidiAddSeq :void (s midi-seq-ptr) (e midi-ev-ptr))
;; (MidiAddSlot slot-ref-num (refnum :short) (name midi-name) (direction :short )) ;slot-direction
;; (MidiApplySeq :void (s midi-seq-ptr) (proc apply-proc-ptr))
;; (MidiAvailEv midi-ev-ptr (ref-num :short))
;; (MidiCall :void (routine task-ptr) (date :long) (ref-num :short) (a1 :long) (a2 :long) (a3 :long))
;; (MidiClearSeq :void (s midi-seq-ptr))
;; (MidiClose :void (ref-num :short))
;; (MidiConnect :void (src :short) (dest :short) (state boolean))
;; (MidiConnectSlot :void (port :short) (slot :pointer) (state boolean))
;; (MidiCopyEv midi-ev-ptr (e midi-ev-ptr))
;; (MidiCountAppls :short)
;; (MidiCountDrivers :short)
;; (MidiCountDTasks :long (refnum :short))
;; (MidiCountEvs :long (ref-num :short))
;; (MidiCountFields :long (e midi-ev-ptr))
;; (MidiDTask midi-ev-ptr (routine task-ptr) (date :long) (ref-num :short) (a1 :long)  (a2 :long) (a3 :long))
;; (MidiExec1DTask :void (refnum :short))
;; (MidiExt2IntTime :long (anonymous1613 :long))
;; (MidiFlushDTasks :void (refnum :short))
;; (MidiFlushEvs :void (ref-num :short))
;; (MidiForgetTask :void (e :pointer))
;; (MidiFreeCell :void (e midi-ev-ptr))
;; (MidiFreeEv :void (e midi-ev-ptr))
;; (MidiFreeFilter :void (filter midi-filter-ptr))
;; (MidiFreeSeq :void (s midi-seq-ptr))
;; (MidiFreeSpace :long)
;; (MidiGetApplAlarm appl-alarm-ptr (ref-num :short))
;; (MidiGetDriverInfos boolean (refnum :short) (infos :pointer))
;; (MidiGetEv midi-ev-ptr (ref-num :short))
;; (MidiGetExtTime :long)
;; (MidiGetField :long (e midi-ev-ptr) (f :long))
;; (MidiGetFilter midi-filter-ptr (ref-num :short))
;; (MidiGetIndSlot slot-ref-num (refnum :short) (index :short))
;; (MidiGetInfo :pointer (ref-num :short))
;; (MidiGetIndAppl :short (index :short))
;; (MidiGetIndDriver :short (index :short))
;; (MidiGetName midi-name (ref-num :short))
;; (MidiGetNamedAppl :short (name midi-name))
;; (MidiGetPortState boolean (port :short))
;; (MidiGetRcvAlarm rcv-alarm-ptr (ref-num :short))
;; (MidiGetSlotInfos boolean (slot :pointer) (infos :pointer))
;; (MidiGetSyncInfo :void (p sync-info-ptr))
;; (MidiGetTime :long)
;; (MidiGetVersion :short)
;; (MidiGrowSpace :long (n :long))
;; (MidiInt2ExtTime :long (anonymous1614 :long))
;; (MidiIsAcceptedType boolean (f midi-filter-ptr) (type :short))
;; (MidiIsAcceptedChan boolean (f midi-filter-ptr) (chan :short))
;; (MidiIsAcceptedPort boolean (f midi-filter-ptr) (port :short))
;; (MidiIsConnected boolean (src :short) (dest :short))
;; (MidiIsSlotConnected boolean (port :short) (slot :pointer))
;; (MidiNewCell midi-ev-ptr)
;; (MidiNewEv midi-ev-ptr (type-num :short))
;; (MidiNewFilter midi-filter-ptr)
;; (MidiNewSeq midi-seq-ptr)
;; (MidiOpen :short (appl-name midi-name))
;; (MidiReadSync :pointer (adr-mem :pointer))
;; (MidiRegisterDriver :short (infos :pointer) (op :pointer))
;; (MidiRemoveSlot :void (slot :pointer))
;; (MidiSend :void (ref-num :short) (e midi-ev-ptr))
;; (MidiSendAt :void (ref-num :short) (e midi-ev-ptr) (d :long))
;; (MidiSendIm :void (ref-num :short) (e midi-ev-ptr))
;; (MidiSetApplAlarm :void (ref-num :short) (alarm appl-alarm-ptr))
;; (MidiSetField :void (e midi-ev-ptr) (f :long) (v :long))
;; (MidiSetFilter :void (ref-num :short) (f midi-filter-ptr))
;; (MidiSetInfo :void (ref-num :short) (info-zone :pointer))
;; (MidiSetName :void (ref-num :short) (appl-name midi-name))
;; (MidiSetPortState :void (port :short) (state boolean))
;; (MidiSetRcvAlarm :void (ref-num :short) (alarm rcv-alarm-ptr))
;; (MidiSetSlotName :void (slot :pointer) (name midi-name))
;; (MidiSetSyncMode :void (mode :short))
;; (MidiShare :int)
;; (MidiSmpte2Time :long (loc smpte-loc-ptr))
;; (MidiTotalSpace :long)
;; (MidiTask midi-ev-ptr (routine task-ptr) (date :long) (ref-num :short) (a1 :long) (a2 :long) (a3 :long))
;; (MidiTime2Smpte :void (time :long) (format :short) (loc smpte-loc-ptr))
;; (MidiWriteSync :pointer (adr-mem :pointer) (val :pointer))
;; (MidiUnregisterDriver :void (refnum :short))

;;; To Know about MidiShare and Active Sessions

(define ms:MidiShare MidiShare)
(define ms:MidiGetVersion MidiGetVersion)
(define ms:MidiCountAppls MidiCountAppls)
(define ms:MidiGetIndAppl MidiGetIndAppl)
(define ms:MidiGetNamedAppl MidiGetNamedAppl)

;;; To Open and Close a MidiShare session

(define ms:MidiOpen MidiOpen)
(define ms:MidiClose MidiClose)

;;; To Configure a MidiShare session

(define (ms:MidiGetName ref) (x->string (MidiGetName ref)))
(define ms:MidiSetName MidiSetName)
(define ms:MidiGetInfo MidiGetInfo)
(define ms:MidiSetInfo MidiSetInfo)
(define ms:MidiNewFilter MidiNewFilter)
(define ms:MidiFreeFilter MidiFreeFilter)
(define ms:MidiAcceptType MidiAcceptType)
(define ms:MidiAcceptChan MidiAcceptChan)
(define ms:MidiAcceptPort MidiAcceptPort)
(define ms:MidiIsAcceptedType MidiIsAcceptedType)
(define ms:MidiIsAcceptedChan MidiIsAcceptedChan)
(define ms:MidiIsAcceptedPort MidiIsAcceptedPort)
(define ms:MidiGetFilter MidiGetFilter)
(define ms:MidiSetFilter MidiSetFilter)
(define ms:MidiGetRcvAlarm MidiGetRcvAlarm)
(define ms:MidiSetRcvAlarm MidiSetRcvAlarm)
(define ms:MidiGetApplAlarm MidiGetApplAlarm)
(define ms:MidiSetApplAlarm MidiSetApplAlarm)

;;; To Manage MidiShare IAC and Midi Ports

(define (ms:MidiConnect src dest bool) 
  ;; uses -1 as true, illegal as c-wrapper bool
  (MidiConnect src dest (if (= bool 0) 0 1)))
(define ms:MidiIsConnected MidiIsConnected)
(define ms:MidiCountDrivers MidiCountDrivers)
(define ms:MidiGetPortState MidiGetPortState)
(define ms:MidiSetPortState MidiSetPortState)

;;; To Manage MidiShare events

(define ms:MidiFreeSpace MidiFreeSpace)
(define ms:MidiNewEv MidiNewEv)
(define ms:MidiCopyEv MidiCopyEv)
(define ms:MidiFreeEv MidiFreeEv)
(define ms:MidiSetField MidiSetField)
(define ms:MidiGetField MidiGetField)
(define ms:MidiAddField MidiAddField)
(define ms:MidiCountFields MidiCountFields)

;;; To Manage MidiShare Sequences

(define ms:MidiNewSeq MidiNewSeq)
(define ms:MidiAddSeq MidiAddSeq)
(define ms:MidiFreeSeq MidiFreeSeq)
(define ms:MidiClearSeq MidiClearSeq)
(define ms:MidiApplySeq MidiApplySeq)

;;; MidiShare Time

(define ms:MidiGetTime MidiGetTime)

;;; To Send MidiShare events

(define ms:MidiSendIm MidiSendIm)
(define ms:MidiSend MidiSend)
(define ms:MidiSendAt MidiSendAt)

;;;  To Receive MidiShare Events

(define ms:MidiCountEvs MidiCountEvs)
(define ms:MidiGetEv MidiGetEv)
(define ms:MidiAvailEv MidiAvailEv)
(define ms:MidiFlushEvs MidiFlushEvs)

;;; To access shared data

(define ms:MidiReadSync MidiReadSync)
(define ms:MidiWriteSync MidiWriteSync)

;;; Realtime Tasks

(define ms:MidiCall MidiCall)
(define ms:MidiTask MidiTask)
(define ms:MidiDTask MidiDTask)
(define (ms:MidiForgetTask ev) (error "ms:MidiForgetTask: fix me"))
(define ms:MidiCountDTasks MidiCountDTasks)
(define ms:MidiFlushDTasks MidiFlushDTasks)
(define ms:MidiExec1DTask MidiExec1DTask)

;;; Low Level MidiShare Memory Management

(define ms:MidiNewCell MidiNewCell)
(define ms:MidiFreeCell MidiFreeCell)
(define ms:MidiTotalSpace MidiTotalSpace)
(define ms:MidiGrowSpace MidiGrowSpace)

;;; SMPTE Synchronisation functions

(define ms:MidiGetSyncInfo MidiGetSyncInfo)
(define ms:MidiSetSyncMode MidiSetSyncMode)
(define ms:MidiGetExtTime MidiGetExtTime)
(define ms:MidiInt2ExtTime MidiInt2ExtTime)
(define ms:MidiExt2IntTime MidiExt2IntTime)
(define ms:MidiTime2Smpte MidiTime2Smpte)
(define ms:MidiSmpte2Time MidiSmpte2Time)

;;; Drivers functions

(define ms:MidiCountDrivers MidiCountDrivers)
(define ms:MidiGetIndDriver MidiGetIndDriver)
(define ms:MidiGetDriverInfos MidiGetDriverInfos)
(define ms:MidiGetIndSlot MidiGetIndSlot)
(define ms:MidiGetSlotInfos MidiGetSlotInfos)
(define ms:MidiConnectSlot MidiConnectSlot)
(define ms:MidiIsSlotConnected MidiIsSlotConnected)

;;; HKT: added these to api

(define (ms:MidiNewMidiDriverInfos )
  ;; WARNING! This returns a struct not a pointer to a struct. 
  (make <TDriverInfos>))

(define (ms:MidiFreeMidiDriverInfos i)
  (values))

(define (ms:md-name info)
  (x->string (ref info 'name)))

(define (ms:md-version info)
  (ref info 'version))

(define (ms:md-slots info)
  (ref info 'slots))

;;;
;;; Midishare receiving via async alarm callback
;;;

(define (midishare-receive-stop refnum)
  (error "midishare-receive-stop not implemented in Gauche."))

(define (midishare-receive refnum hook)
  (error "midishare-receive-hook not implemented in Gauche."))

(provide "midishare")


;;; eof
