;;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: sds-api-apispec -*-

;;; This file is autogenerated by the SDS API Generator.

(in-package :sds-api-apispec)
(define-sds-module apispec)

(def-sds-const API "api")
(def-sds-const CONSTANT "constant")
(def-sds-const CLASS "class")
(def-sds-const VAR "var")
(def-sds-const ATTR "attr")
(def-sds-const SUBELEM "subelem")
(def-sds-const DOC "doc")
(def-sds-const INFODOC "infodoc")
(def-sds-const EXPL "expl")


(def-sds-class toplevel
   (name constants classes )
  api)

(def-sds-class constant
   (name val )
  constant)

(def-sds-class class
   (name elmname doc vars attrs subelems infodoc )
  class)

(def-sds-class var
   (name type doc )
  var)

(def-sds-class attr
   (name type var doc )
  attr)

(def-sds-class subelem
   (name type var doc )
  subelem)

(def-sds-class infodoc
   (type value info expl )
  infodoc)

(defmethod initialize-instance :after ((obj apispec-toplevel) &key)
  (add-attributes obj
     (STRING "name" name)
  )
  (add-subelements obj
     (PTRLIST "constant" constants)
     (PTRLIST "class" classes)
  )
)

(defmethod initialize-instance :after ((obj apispec-constant) &key)
  (add-attributes obj
     (STRING "name" name)
     (STRING "val" val)
  )
)

(defmethod initialize-instance :after ((obj apispec-class) &key)
  (add-attributes obj
     (STRING "name" name)
     (STRING "elmname" elmname)
  )
  (add-subelements obj
     (STRING "doc" doc)
     (PTRLIST "var" vars)
     (PTRLIST "attr" attrs)
     (PTRLIST "subelem" subelems)
     (PTRLIST "infodoc" infodoc)
  )
)

(defmethod initialize-instance :after ((obj apispec-var) &key)
  (add-attributes obj
     (STRING "name" name)
     (STRING "type" type)
     (STRING "doc" doc)
  )
)

(defmethod initialize-instance :after ((obj apispec-attr) &key)
  (add-attributes obj
     (STRING "name" name)
     (STRING "type" type)
     (STRING "var" var)
     (STRING "doc" doc)
  )
)

(defmethod initialize-instance :after ((obj apispec-subelem) &key)
  (add-attributes obj
     (STRING "name" name)
     (STRING "type" type)
     (STRING "var" var)
     (STRING "doc" doc)
  )
)

(defmethod initialize-instance :after ((obj apispec-infodoc) &key)
  (add-attributes obj
     (STRING "type" type)
     (STRING "value" value)
     (STRING "doc" info)
  )
  (add-subelements obj
     (STRING "expl" expl)
  )
)


(create-obj-constructors (toplevel api)
                         (constant constant)
                         (class class)
                         (var var)
                         (attr attr)
                         (subelem subelem)
                         (infodoc infodoc))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defclass apispec-factory (xml-factory) ()))
(defun make-apispec-factory ()  (make-instance 'apispec-factory :name "apispec factory"))

(defmethod produce-xml-object ((factory apispec-factory) classname)
  (let ((fn (get-constructor classname))
        (retval nil))
    (if fn 
        (setf retval (apply fn '())) 
      (warn "No good value from ~a, asked for: ~a" (factory.name factory) classname))
    retval
    ))
