(defpackage #:glut
  (:use #:cffi #:cl)
  (:shadow get)
  (:export init-posix-argv
           wm-close-func        display-func         reshape-func
           keyboard-func        mouse-func           motion-func
           passive-motion-func  entry-func           visibility-func
           idle-func            timer-func           menu-state-func
           special-func         spaceball-motion-func spaceball-rotate-func
           spaceball-button-func button-box-func      dials-func
           tablet-motion-func   tablet-button-func   menu-status-func
           overlay-display-func window-status-func   keyboard-up-func
           special-up-func      joystick-func        
           +action-exit+ +action-glutmainloop-returns+ +action-continue-execution+ +create-new-context+ +use-current-context+ +force-indirect-context+ +allow-direct-context+ +try-direct-context+ +force-direct-context+ +action-on-window-close+ +window-border-width+ +window-header-height+ +version+ +rendering-context+ +direct-rendering+ +aux-1+ +aux-2+ +aux-3+ +aux-4+ main-loop-event leave-main-loop set-option get-window-data set-window-data get-menu-data set-menu-data bitmap-height stroke-height bitmap-string stroke-string wire-rhombic-dodecahedron solid-rhombic-dodecahedron wire-sierpinski-sponge solid-sierpinski-sponge wire-cylinder solid-cylinder
           init init-window-position init-window-size init-display-mode init-display-string main-loop create-window create-sub-window destroy-window set-window get-window set-window-title set-icon-title reshape-window position-window show-window hide-window iconify-window push-window pop-window full-screen post-window-redisplay post-redisplay swap-buffers warp-pointer set-cursor establish-overlay remove-overlay use-layer post-overlay-redisplay post-window-overlay-redisplay show-overlay hide-overlay create-menu destroy-menu get-menu set-menu add-menu-entry add-sub-menu change-to-menu-entry change-to-sub-menu remove-menu-item attach-menu detach-menu get device-get get-modifiers layer-get bitmap-character bitmap-width stroke-character stroke-width bitmap-length stroke-length wire-cube solid-cube wire-sphere solid-sphere wire-cone solid-cone wire-torus solid-torus wire-dodecahedron solid-dodecahedron wire-octahedron solid-octahedron wire-tetrahedron solid-tetrahedron wire-icosahedron solid-icosahedron wire-teapot solid-teapot game-mode-string enter-game-mode leave-game-mode game-mode-get video-resize-get setup-video-resizing stop-video-resizing video-resize video-pan set-color get-color copy-colormap ignore-key-repeat set-key-repeat extension-supported report-errors +api-version+ +xlib-implementation+ +key-f1+ +key-f2+ +key-f3+ +key-f4+ +key-f5+ +key-f6+ +key-f7+ +key-f8+ +key-f9+ +key-f10+ +key-f11+ +key-f12+ +key-left+ +key-up+ +key-right+ +key-down+ +key-page-up+ +key-page-down+ +key-home+ +key-end+ +key-insert+ +left-button+ +middle-button+ +right-button+ +down+ +up+ +left+ +entered+ +rgb+ +rgba+ +index+ +single+ +double+ +accum+ +alpha+ +depth+ +stencil+ +multisample+ +stereo+ +luminance+ +menu-not-in-use+ +menu-in-use+ +not-visible+ +visible+ +hidden+ +fully-retained+ +partially-retained+ +fully-covered+ +stroke-roman+ +stroke-mono-roman+ +bitmap-9-by-15+ +bitmap-8-by-13+ +bitmap-times-roman-10+ +bitmap-times-roman-24+ +bitmap-helvetica-10+ +bitmap-helvetica-12+ +bitmap-helvetica-18+ +stroke-roman+ +stroke-mono-roman+ +bitmap-9-by-15+ +bitmap-8-by-13+ +bitmap-times-roman-10+ +bitmap-times-roman-24+ +bitmap-helvetica-10+ +bitmap-helvetica-12+ +bitmap-helvetica-18+ +window-x+ +window-y+ +window-width+ +window-height+ +window-buffer-size+ +window-stencil-size+ +window-depth-size+ +window-red-size+ +window-green-size+ +window-blue-size+ +window-alpha-size+ +window-accum-red-size+ +window-accum-green-size+ +window-accum-blue-size+ +window-accum-alpha-size+ +window-doublebuffer+ +window-rgba+ +window-parent+ +window-num-children+ +window-colormap-size+ +window-num-samples+ +window-stereo+ +window-cursor+ +screen-width+ +screen-height+ +screen-width-mm+ +screen-height-mm+ +menu-num-items+ +display-mode-possible+ +init-window-x+ +init-window-y+ +init-window-width+ +init-window-height+ +init-display-mode+ +elapsed-time+ +window-format-id+ +init-state+ +has-keyboard+ +has-mouse+ +has-spaceball+ +has-dial-and-button-box+ +has-tablet+ +num-mouse-buttons+ +num-spaceball-buttons+ +num-button-box-buttons+ +num-dials+ +num-tablet-buttons+ +device-ignore-key-repeat+ +device-key-repeat+ +has-joystick+ +owns-joystick+ +joystick-buttons+ +joystick-axes+ +joystick-poll-rate+ +overlay-possible+ +layer-in-use+ +has-overlay+ +transparent-index+ +normal-damaged+ +overlay-damaged+ +video-resize-possible+ +video-resize-in-use+ +video-resize-x-delta+ +video-resize-y-delta+ +video-resize-width-delta+ +video-resize-height-delta+ +video-resize-x+ +video-resize-y+ +video-resize-width+ +video-resize-height+ +normal+ +overlay+ +active-shift+ +active-ctrl+ +active-alt+ +cursor-right-arrow+ +cursor-left-arrow+ +cursor-info+ +cursor-destroy+ +cursor-help+ +cursor-cycle+ +cursor-spray+ +cursor-wait+ +cursor-text+ +cursor-crosshair+ +cursor-up-down+ +cursor-left-right+ +cursor-top-side+ +cursor-bottom-side+ +cursor-left-side+ +cursor-right-side+ +cursor-top-left-corner+ +cursor-top-right-corner+ +cursor-bottom-right-corner+ +cursor-bottom-left-corner+ +cursor-inherit+ +cursor-none+ +cursor-full-crosshair+ +red+ +green+ +blue+ +key-repeat-off+ +key-repeat-on+ +key-repeat-default+ +joystick-button-a+ +joystick-button-b+ +joystick-button-c+ +joystick-button-d+ +game-mode-active+ +game-mode-possible+ +game-mode-width+ +game-mode-height+ +game-mode-pixel-depth+ +game-mode-refresh-rate+ +game-mode-display-changed+ *stroke-roman* *stroke-mono-roman* *bitmap-9-by-15* *bitmap-8-by-13* *bitmap-times-roman-10* *bitmap-times-roman-24* *bitmap-helvetica-10* *bitmap-helvetica-12* *bitmap-helvetica-18*))

(in-package #:glut)

(cffi:load-foreign-library '(:or (:framework "GLUT")
			     "glut32.dll"
			     (:default "glut.so.3")
			     (:default "libglut.so.3")
			     (:default "glut")
			     (:default "libglut")))

;; Mac OS X specific API
(defcfun ("glutWMCloseFunc"         wm-close-func          ) :void (callback :pointer))

(defcfun ("glutCloseFunc"           close-func             ) :void (callback :pointer))
(defcfun ("glutMouseWheelFunc"      mouse-wheel-func       ) :void (callback :pointer))
(defcfun ("glutMenuDestroyFunc"     menu-destroy-func      ) :void (callback :pointer))
                                    
(defcfun ("glutDisplayFunc"         display-func           ) :void (callback :pointer))
(defcfun ("glutReshapeFunc"         reshape-func           ) :void (callback :pointer))
(defcfun ("glutKeyboardFunc"        keyboard-func          ) :void (callback :pointer))
(defcfun ("glutMouseFunc"           mouse-func             ) :void (callback :pointer))
(defcfun ("glutMotionFunc"          motion-func            ) :void (callback :pointer))
(defcfun ("glutPassiveMotionFunc"   passive-motion-func    ) :void (callback :pointer))
(defcfun ("glutEntryFunc"           entry-func             ) :void (callback :pointer))
(defcfun ("glutVisibilityFunc"      visibility-func        ) :void (callback :pointer))
(defcfun ("glutIdleFunc"            idle-func              ) :void (callback :pointer))
(defcfun ("glutTimerFunc"           timer-func             ) :void (callback :pointer))
(defcfun ("glutMenuStateFunc"       menu-state-func        ) :void (callback :pointer))
(defcfun ("glutSpecialFunc"         special-func           ) :void (callback :pointer))
(defcfun ("glutSpaceballMotionFunc" spaceball-motion-func  ) :void (callback :pointer))
(defcfun ("glutSpaceballRotateFunc" spaceball-rotate-func  ) :void (callback :pointer))
(defcfun ("glutSpaceballButtonFunc" spaceball-button-func  ) :void (callback :pointer))
(defcfun ("glutButtonBoxFunc"       button-box-func        ) :void (callback :pointer))
(defcfun ("glutDialsFunc"           dials-func             ) :void (callback :pointer))
(defcfun ("glutTabletMotionFunc"    tablet-motion-func     ) :void (callback :pointer))
(defcfun ("glutTabletButtonFunc"    tablet-button-func     ) :void (callback :pointer))
(defcfun ("glutMenuStatusFunc"      menu-status-func       ) :void (callback :pointer))
(defcfun ("glutOverlayDisplayFunc"  overlay-display-func   ) :void (callback :pointer))
(defcfun ("glutWindowStatusFunc"    window-status-func     ) :void (callback :pointer))
(defcfun ("glutKeyboardUpFunc"      keyboard-up-func       ) :void (callback :pointer))
(defcfun ("glutSpecialUpFunc"       special-up-func        ) :void (callback :pointer))
(defcfun ("glutJoystickFunc"        joystick-func          ) :void (callback :pointer))

(defun init-posix-argv1 (in-argv)
  (with-foreign-objects ((argv :pointer (length in-argv))
                         (argc :int))
    (setf (mem-aref argc :int 0) (length in-argv))
    (do* ((i 0 (1+ i))
	  (a (first in-argv) (elt in-argv i)))
	 ((>= i (length in-argv)))
      (setf (mem-aref argv :pointer i) (foreign-string-alloc a))
      (format t "Added ~a to array at point ~a~%" a (mem-aref argv :pointer i)))
    (init argc argv)
    (do* ((i 0 (1+ i))
	  (a (first in-argv) (elt in-argv i)))
	 ((>= i (length in-argv)))
      (foreign-string-free (mem-aref argv :pointer i)))))

(defun init-posix-argv (in-argv)
  (with-foreign-object
      (argc :int)
    (setf (mem-aref argc :int 0) (length in-argv))
    (let ((argv (foreign-alloc :string :initial-contents in-argv)))
      (init argc argv)
      (foreign-free argv))))

(defcfun ("glutInit" init) :void (pargc :pointer) (argv :pointer))
(defcfun ("glutInitWindowPosition" init-window-position) :void (x :int) (y :int))
(defcfun ("glutInitWindowSize" init-window-size) :void (width :int) (height :int))
(defcfun ("glutInitDisplayMode" init-display-mode) :void (displayMode :unsigned-int))
(defcfun ("glutInitDisplayString" init-display-string) :void (displayMode :string))
(defcfun ("glutMainLoop" main-loop) :void )
(defcfun ("glutCreateWindow" create-window) :int (title :string))
(defcfun ("glutCreateSubWindow" create-sub-window) :int (window :int) (x :int) (y :int) (width :int) (height :int))
(defcfun ("glutDestroyWindow" destroy-window) :void (window :int))
(defcfun ("glutSetWindow" set-window) :void (window :int))
(defcfun ("glutGetWindow" get-window) :int )
(defcfun ("glutSetWindowTitle" set-window-title) :void (title :string))
(defcfun ("glutSetIconTitle" set-icon-title) :void (title :string))
(defcfun ("glutReshapeWindow" reshape-window) :void (width :int) (height :int))
(defcfun ("glutPositionWindow" position-window) :void (x :int) (y :int))
(defcfun ("glutShowWindow" show-window) :void )
(defcfun ("glutHideWindow" hide-window) :void )
(defcfun ("glutIconifyWindow" iconify-window) :void )
(defcfun ("glutPushWindow" push-window) :void )
(defcfun ("glutPopWindow" pop-window) :void )
(defcfun ("glutFullScreen" full-screen) :void )
(defcfun ("glutPostWindowRedisplay" post-window-redisplay) :void (window :int))
(defcfun ("glutPostRedisplay" post-redisplay) :void )
(defcfun ("glutSwapBuffers" swap-buffers) :void )
(defcfun ("glutWarpPointer" warp-pointer) :void (x :int) (y :int))
(defcfun ("glutSetCursor" set-cursor) :void (cursor :int))
(defcfun ("glutEstablishOverlay" establish-overlay) :void )
(defcfun ("glutRemoveOverlay" remove-overlay) :void )
(defcfun ("glutUseLayer" use-layer) :void (layer gl:enum))
(defcfun ("glutPostOverlayRedisplay" post-overlay-redisplay) :void )
(defcfun ("glutPostWindowOverlayRedisplay" post-window-overlay-redisplay) :void (window :int))
(defcfun ("glutShowOverlay" show-overlay) :void )
(defcfun ("glutHideOverlay" hide-overlay) :void )
(defcfun ("glutCreateMenu" create-menu) :int (menu :pointer))
(defcfun ("glutDestroyMenu" destroy-menu) :void (menu :int))
(defcfun ("glutGetMenu" get-menu) :int )
(defcfun ("glutSetMenu" set-menu) :void (menu :int))
(defcfun ("glutAddMenuEntry" add-menu-entry) :void (label :string) (value :int))
(defcfun ("glutAddSubMenu" add-sub-menu) :void (label :string) (subMenu :int))
(defcfun ("glutChangeToMenuEntry" change-to-menu-entry) :void (item :int) (label :string) (value :int))
(defcfun ("glutChangeToSubMenu" change-to-sub-menu) :void (item :int) (label :string) (value :int))
(defcfun ("glutRemoveMenuItem" remove-menu-item) :void (item :int))
(defcfun ("glutAttachMenu" attach-menu) :void (button :int))
(defcfun ("glutDetachMenu" detach-menu) :void (button :int))
(defcfun ("glutGet" get) :int (query gl:enum))
(defcfun ("glutDeviceGet" device-get) :int (query gl:enum))
(defcfun ("glutGetModifiers" get-modifiers) :int )
(defcfun ("glutLayerGet" layer-get) :int (query gl:enum))
(defcfun ("glutBitmapCharacter" bitmap-character) :void (font :pointer) (character :int))
(defcfun ("glutBitmapWidth" bitmap-width) :int (font :pointer) (character :int))
(defcfun ("glutStrokeCharacter" stroke-character) :void (font :pointer) (character :int))
(defcfun ("glutStrokeWidth" stroke-width) :int (font :pointer) (character :int))
(defcfun ("glutBitmapLength" bitmap-length) :int (font :pointer) (string :string))
(defcfun ("glutStrokeLength" stroke-length) :int (font :pointer) (string :string))
(defcfun ("glutWireCube" wire-cube) :void (size gl:double))
(defcfun ("glutSolidCube" solid-cube) :void (size gl:double))
(defcfun ("glutWireSphere" wire-sphere) :void (radius gl:double) (slices gl:int) (stacks gl:int))
(defcfun ("glutSolidSphere" solid-sphere) :void (radius gl:double) (slices gl:int) (stacks gl:int))
(defcfun ("glutWireCone" wire-cone) :void (base gl:double) (height gl:double) (slices gl:int) (stacks gl:int))
(defcfun ("glutSolidCone" solid-cone) :void (base gl:double) (height gl:double) (slices gl:int) (stacks gl:int))
(defcfun ("glutWireTorus" wire-torus) :void (innerRadius gl:double) (outerRadius gl:double) (sides gl:int) (rings gl:int))
(defcfun ("glutSolidTorus" solid-torus) :void (innerRadius gl:double) (outerRadius gl:double) (sides gl:int) (rings gl:int))
(defcfun ("glutWireDodecahedron" wire-dodecahedron) :void )
(defcfun ("glutSolidDodecahedron" solid-dodecahedron) :void )
(defcfun ("glutWireOctahedron" wire-octahedron) :void )
(defcfun ("glutSolidOctahedron" solid-octahedron) :void )
(defcfun ("glutWireTetrahedron" wire-tetrahedron) :void )
(defcfun ("glutSolidTetrahedron" solid-tetrahedron) :void )
(defcfun ("glutWireIcosahedron" wire-icosahedron) :void )
(defcfun ("glutSolidIcosahedron" solid-icosahedron) :void )
(defcfun ("glutWireTeapot" wire-teapot) :void (size gl:double))
(defcfun ("glutSolidTeapot" solid-teapot) :void (size gl:double))
(defcfun ("glutGameModeString" game-mode-string) :void (string :string))
(defcfun ("glutEnterGameMode" enter-game-mode) :int )
(defcfun ("glutLeaveGameMode" leave-game-mode) :void )
(defcfun ("glutGameModeGet" game-mode-get) :int (query gl:enum))
(defcfun ("glutVideoResizeGet" video-resize-get) :int (query gl:enum))
(defcfun ("glutSetupVideoResizing" setup-video-resizing) :void )
(defcfun ("glutStopVideoResizing" stop-video-resizing) :void )
(defcfun ("glutVideoResize" video-resize) :void (x :int) (y :int) (width :int) (height :int))
(defcfun ("glutVideoPan" video-pan) :void (x :int) (y :int) (width :int) (height :int))
(defcfun ("glutSetColor" set-color) :void (color :int) (red gl:float) (green gl:float) (blue gl:float))
(defcfun ("glutGetColor" get-color) gl:float (color :int) (component :int))
(defcfun ("glutCopyColormap" copy-colormap) :void (window :int))
(defcfun ("glutIgnoreKeyRepeat" ignore-key-repeat) :void (ignore :int))
(defcfun ("glutSetKeyRepeat" set-key-repeat) :void (repeatMode :int))
(defcfun ("glutExtensionSupported" extension-supported) :int (extension :string))
(defcfun ("glutReportErrors" report-errors) :void )
(defcfun ("glutMainLoopEvent" main-loop-event) :void )
(defcfun ("glutLeaveMainLoop" leave-main-loop) :void )
(defcfun ("glutSetOption" set-option) :void (option_flag gl:enum) (value :int))
(defcfun ("glutGetWindowData" get-window-data) :pointer )
(defcfun ("glutSetWindowData" set-window-data) :void (data :pointer))
(defcfun ("glutGetMenuData" get-menu-data) :pointer )
(defcfun ("glutSetMenuData" set-menu-data) :void (data :pointer))
(defcfun ("glutBitmapHeight" bitmap-height) :int (font :pointer))
(defcfun ("glutStrokeHeight" stroke-height) gl:float (font :pointer))
(defcfun ("glutBitmapString" bitmap-string) :void (font :pointer) (string :string))
(defcfun ("glutStrokeString" stroke-string) :void (font :pointer) (string :string))
(defcfun ("glutWireRhombicDodecahedron" wire-rhombic-dodecahedron) :void )
(defcfun ("glutSolidRhombicDodecahedron" solid-rhombic-dodecahedron) :void )
(defcfun ("glutWireSierpinskiSponge" wire-sierpinski-sponge) :void (num_levels :int) (offset gl:double) (scale gl:double))
(defcfun ("glutSolidSierpinskiSponge" solid-sierpinski-sponge) :void (num_levels :int) (offset gl:double) (scale gl:double))
(defcfun ("glutWireCylinder" wire-cylinder) :void (radius gl:double) (height gl:double) (slices gl:int) (stacks gl:int))
(defcfun ("glutSolidCylinder" solid-cylinder) :void (radius gl:double) (height gl:double) (slices gl:int) (stacks gl:int))
(defconstant +api-version+ 4)
(defconstant +xlib-implementation+ 13)
(defconstant +key-f1+ #x0001)
(defconstant +key-f2+ #x0002)
(defconstant +key-f3+ #x0003)
(defconstant +key-f4+ #x0004)
(defconstant +key-f5+ #x0005)
(defconstant +key-f6+ #x0006)
(defconstant +key-f7+ #x0007)
(defconstant +key-f8+ #x0008)
(defconstant +key-f9+ #x0009)
(defconstant +key-f10+ #x000A)
(defconstant +key-f11+ #x000B)
(defconstant +key-f12+ #x000C)
(defconstant +key-left+ #x0064)
(defconstant +key-up+ #x0065)
(defconstant +key-right+ #x0066)
(defconstant +key-down+ #x0067)
(defconstant +key-page-up+ #x0068)
(defconstant +key-page-down+ #x0069)
(defconstant +key-home+ #x006A)
(defconstant +key-end+ #x006B)
(defconstant +key-insert+ #x006C)
(defconstant +left-button+ #x0000)
(defconstant +middle-button+ #x0001)
(defconstant +right-button+ #x0002)
(defconstant +down+ #x0000)
(defconstant +up+ #x0001)
(defconstant +left+ #x0000)
(defconstant +entered+ #x0001)
(defconstant +rgb+ #x0000)
(defconstant +rgba+ #x0000)
(defconstant +index+ #x0001)
(defconstant +single+ #x0000)
(defconstant +double+ #x0002)
(defconstant +accum+ #x0004)
(defconstant +alpha+ #x0008)
(defconstant +depth+ #x0010)
(defconstant +stencil+ #x0020)
(defconstant +multisample+ #x0080)
(defconstant +stereo+ #x0100)
(defconstant +luminance+ #x0200)
(defconstant +menu-not-in-use+ #x0000)
(defconstant +menu-in-use+ #x0001)
(defconstant +not-visible+ #x0000)
(defconstant +visible+ #x0001)
(defconstant +hidden+ #x0000)
(defconstant +fully-retained+ #x0001)
(defconstant +partially-retained+ #x0002)
(defconstant +fully-covered+ #x0003)

;;(defcvar ("glutStrokeRoman" *stroke-roman*) :pointer)
;;(defcvar ("glutStrokeMonoRoman" *stroke-mono-roman*) :pointer)
;;(defcvar ("glutBitmap9By15" *bitmap-9-by-15*) :pointer)
;;(defcvar ("glutBitmap8By13" *bitmap-8-by-13*) :pointer)
;;(defcvar ("glutBitmapTimesRoman10" *bitmap-times-roman-10*) :pointer)
;;(defcvar ("glutBitmapTimesRoman24" *bitmap-times-roman-24*) :pointer)
;;(defcvar ("glutBitmapHelvetica10" *bitmap-helvetica-10*) :pointer)
;;(defcvar ("glutBitmapHelvetica12" *bitmap-helvetica-12*) :pointer)
;;(defcvar ("glutBitmapHelvetica18" *bitmap-helvetica-18*) :pointer)

(defconstant +stroke-roman+ #x0000)
(defconstant +stroke-mono-roman+ #x0001)
(defconstant +bitmap-9-by-15+ #x0002)
(defconstant +bitmap-8-by-13+ #x0003)
(defconstant +bitmap-times-roman-10+ #x0004)
(defconstant +bitmap-times-roman-24+ #x0005)
(defconstant +bitmap-helvetica-10+ #x0006)
(defconstant +bitmap-helvetica-12+ #x0007)
(defconstant +bitmap-helvetica-18+ #x0008)
(defconstant +window-x+ #x0064)
(defconstant +window-y+ #x0065)
(defconstant +window-width+ #x0066)
(defconstant +window-height+ #x0067)
(defconstant +window-buffer-size+ #x0068)
(defconstant +window-stencil-size+ #x0069)
(defconstant +window-depth-size+ #x006A)
(defconstant +window-red-size+ #x006B)
(defconstant +window-green-size+ #x006C)
(defconstant +window-blue-size+ #x006D)
(defconstant +window-alpha-size+ #x006E)
(defconstant +window-accum-red-size+ #x006F)
(defconstant +window-accum-green-size+ #x0070)
(defconstant +window-accum-blue-size+ #x0071)
(defconstant +window-accum-alpha-size+ #x0072)
(defconstant +window-doublebuffer+ #x0073)
(defconstant +window-rgba+ #x0074)
(defconstant +window-parent+ #x0075)
(defconstant +window-num-children+ #x0076)
(defconstant +window-colormap-size+ #x0077)
(defconstant +window-num-samples+ #x0078)
(defconstant +window-stereo+ #x0079)
(defconstant +window-cursor+ #x007A)
(defconstant +screen-width+ #x00C8)
(defconstant +screen-height+ #x00C9)
(defconstant +screen-width-mm+ #x00CA)
(defconstant +screen-height-mm+ #x00CB)
(defconstant +menu-num-items+ #x012C)
(defconstant +display-mode-possible+ #x0190)
(defconstant +init-window-x+ #x01F4)
(defconstant +init-window-y+ #x01F5)
(defconstant +init-window-width+ #x01F6)
(defconstant +init-window-height+ #x01F7)
(defconstant +init-display-mode+ #x01F8)
(defconstant +elapsed-time+ #x02BC)
(defconstant +window-format-id+ #x007B)
(defconstant +init-state+ #x007C)
(defconstant +has-keyboard+ #x0258)
(defconstant +has-mouse+ #x0259)
(defconstant +has-spaceball+ #x025A)
(defconstant +has-dial-and-button-box+ #x025B)
(defconstant +has-tablet+ #x025C)
(defconstant +num-mouse-buttons+ #x025D)
(defconstant +num-spaceball-buttons+ #x025E)
(defconstant +num-button-box-buttons+ #x025F)
(defconstant +num-dials+ #x0260)
(defconstant +num-tablet-buttons+ #x0261)
(defconstant +device-ignore-key-repeat+ #x0262)
(defconstant +device-key-repeat+ #x0263)
(defconstant +has-joystick+ #x0264)
(defconstant +owns-joystick+ #x0265)
(defconstant +joystick-buttons+ #x0266)
(defconstant +joystick-axes+ #x0267)
(defconstant +joystick-poll-rate+ #x0268)
(defconstant +overlay-possible+ #x0320)
(defconstant +layer-in-use+ #x0321)
(defconstant +has-overlay+ #x0322)
(defconstant +transparent-index+ #x0323)
(defconstant +normal-damaged+ #x0324)
(defconstant +overlay-damaged+ #x0325)
(defconstant +video-resize-possible+ #x0384)
(defconstant +video-resize-in-use+ #x0385)
(defconstant +video-resize-x-delta+ #x0386)
(defconstant +video-resize-y-delta+ #x0387)
(defconstant +video-resize-width-delta+ #x0388)
(defconstant +video-resize-height-delta+ #x0389)
(defconstant +video-resize-x+ #x038A)
(defconstant +video-resize-y+ #x038B)
(defconstant +video-resize-width+ #x038C)
(defconstant +video-resize-height+ #x038D)
(defconstant +normal+ #x0000)
(defconstant +overlay+ #x0001)
(defconstant +active-shift+ #x0001)
(defconstant +active-ctrl+ #x0002)
(defconstant +active-alt+ #x0004)
(defconstant +cursor-right-arrow+ #x0000)
(defconstant +cursor-left-arrow+ #x0001)
(defconstant +cursor-info+ #x0002)
(defconstant +cursor-destroy+ #x0003)
(defconstant +cursor-help+ #x0004)
(defconstant +cursor-cycle+ #x0005)
(defconstant +cursor-spray+ #x0006)
(defconstant +cursor-wait+ #x0007)
(defconstant +cursor-text+ #x0008)
(defconstant +cursor-crosshair+ #x0009)
(defconstant +cursor-up-down+ #x000A)
(defconstant +cursor-left-right+ #x000B)
(defconstant +cursor-top-side+ #x000C)
(defconstant +cursor-bottom-side+ #x000D)
(defconstant +cursor-left-side+ #x000E)
(defconstant +cursor-right-side+ #x000F)
(defconstant +cursor-top-left-corner+ #x0010)
(defconstant +cursor-top-right-corner+ #x0011)
(defconstant +cursor-bottom-right-corner+ #x0012)
(defconstant +cursor-bottom-left-corner+ #x0013)
(defconstant +cursor-inherit+ #x0064)
(defconstant +cursor-none+ #x0065)
(defconstant +cursor-full-crosshair+ #x0066)
(defconstant +red+ #x0000)
(defconstant +green+ #x0001)
(defconstant +blue+ #x0002)
(defconstant +key-repeat-off+ #x0000)
(defconstant +key-repeat-on+ #x0001)
(defconstant +key-repeat-default+ #x0002)
(defconstant +joystick-button-a+ #x0001)
(defconstant +joystick-button-b+ #x0002)
(defconstant +joystick-button-c+ #x0004)
(defconstant +joystick-button-d+ #x0008)
(defconstant +game-mode-active+ #x0000)
(defconstant +game-mode-possible+ #x0001)
(defconstant +game-mode-width+ #x0002)
(defconstant +game-mode-height+ #x0003)
(defconstant +game-mode-pixel-depth+ #x0004)
(defconstant +game-mode-refresh-rate+ #x0005)
(defconstant +game-mode-display-changed+ #x0006)
(defconstant +action-exit+ 0)
(defconstant +action-glutmainloop-returns+ 1)
(defconstant +action-continue-execution+ 2)
(defconstant +create-new-context+ 0)
(defconstant +use-current-context+ 1)
(defconstant +force-indirect-context+ 0)
(defconstant +allow-direct-context+ 1)
(defconstant +try-direct-context+ 2)
(defconstant +force-direct-context+ 3)
(defconstant +action-on-window-close+ #x01F9)
(defconstant +window-border-width+ #x01FA)
(defconstant +window-header-height+ #x01FB)
(defconstant +version+ #x01FC)
(defconstant +rendering-context+ #x01FD)
(defconstant +direct-rendering+ #x01FE)
(defconstant +aux-1+ #x1000)
(defconstant +aux-2+ #x2000)
(defconstant +aux-3+ #x4000)
(defconstant +aux-4+ #x8000)
