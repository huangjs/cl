;; Object src/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "src/"
  :tables (list 
   (semanticdb-table "fft.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [3469 3491]) ("use-package" code nil nil [3499 3523]) ("use-package" code nil nil [3530 3550]) ("use-package" code nil nil [3557 3579]) ("use-package" code nil nil [3586 3623]) ("export" code nil nil [3631 3651]) ("fft" function (:arguments ("&optional" "n")) nil [3653 4676]) ("ifft" function (:arguments ("&optional" "n")) nil [4678 5743]) ("ffti" function (:arguments ("n")) nil [5745 6507]) ("eval-when" code nil nil [6603 7178]) ("or" code nil nil [7182 7197]) ("fft" function (:parent "standard-matrix" :arguments ("x" "&optional" "n")) nil [7200 8097]) ("fft" function (:parent "standard-matrix" :arguments ("x" "&optional" "n")) nil [8111 8935]) ("or" code nil nil [8940 8955]) ("ifft" function (:parent "standard-matrix" :arguments ("x" "&optional" "n")) nil [8956 9888]) ("ifft" function (:parent "standard-matrix" :arguments ("x" "&optional" "n")) nil [9901 10873]) ("fft!" function nil nil [11098 11275]) ("ifft!" function nil nil [11277 11457]) ("or" code nil nil [11461 11476]) ("fft!" function (:parent "complex-matrix" :arguments ("x")) nil [11479 11958]) ("or" code nil nil [11963 11978]) ("ifft!" function (:parent "complex-matrix" :arguments ("x")) nil [11979 12570]))
    :file "fft.lisp"
    :pointmax 12572
    :unmatched-syntax 'nil
    )
   (semanticdb-table "matrix.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [4311 4333]) ("eval-when" code nil nil [4857 5451]) ("declaim" code nil nil [5453 5829]) ("store-size" function nil nil [6318 6552]) ("store" function nil nil [6554 6951]) ("and" code nil nil [6955 6984]) ("declaim" code nil nil [6985 7105]) ("standard-matrix" type (:typemodifiers (":documentation") :members (("number-of-rows" variable (:documentation "Number of rows in the matrix" :type "fixnum") nil nil) ("number-of-cols" variable (:documentation "Number of columns in the matrix" :type "fixnum") nil nil) ("number-of-elements" variable (:documentation "Total number of elements in the matrix (nrows * ncols)" :type "fixnum") nil nil) ("store-size" variable (:documentation "Total number of elements needed to store the matrix.  (Usually
the same as nels, but not necessarily so!" :type "fixnum") nil nil) ("store" variable (:documentation "The actual storage for the matrix.  It is typically a one dimensional
array but not necessarily so.  The float and complex matrices do use
1-D arrays.  The complex matrix actually stores the real and imaginary
parts in successive elements of the matrix because Fortran stores them
that way.") nil nil)) :type "class") nil [7107 8240]) ("and" code nil nil [8245 8263]) ("standard-matrix" type (:typemodifiers (":documentation") :members (("number-of-rows" variable (:documentation "Number of rows in the matrix") nil nil) ("number-of-cols" variable (:documentation "Number of columns in the matrix") nil nil) ("number-of-elements" variable (:documentation "Total number of elements in the matrix (nrows * ncols)") nil nil) ("store-size" variable (:documentation "Total number of elements needed to store the matrix.  (Usually
the same as nels, but not necessarily so!") nil nil) ("store" variable (:documentation "The actual storage for the matrix.  It is typically a one dimensional
array but not necessarily so.  The float and complex matrices do use
1-D arrays.  The complex matrix actually stores the real and imaginary
parts in successive elements of the matrix because Fortran stores them
that way.") nil nil)) :type "class") nil [8264 9329]) ("real-matrix" type (:typemodifiers (":documentation") :superclasses "standard-matrix" :members (("store" variable (:type "(simple-array real-matrix-element-type (*))") nil nil)) :type "class") nil [9331 9498]) ("complex-matrix" type (:typemodifiers (":documentation") :superclasses "standard-matrix" :members (("store" variable (:type "(simple-array complex-matrix-element-type (*))") nil nil)) :type "class") nil [9500 9676]) ("initialize-instance" function (:parent "standard-matrix" :arguments ("matrix" "&rest" "initargs")) nil [9678 9969]) ("make-load-form" function (:parent "standard-matrix" :arguments ("matrix" "&optional" "env")) nil [9971 10203]) ("row-vector-p" function nil nil [10205 10376]) ("col-vector-p" function nil nil [10378 10550]) ("row-or-col-vector-p" function nil nil [10552 10731]) ("square-matrix-p" function nil nil [10733 10886]) ("size" function nil nil [10888 11052]) ("declaim" code nil nil [11054 11085]) ("row-vector-p" function (:parent "standard-matrix" :arguments ("matrix")) nil [11086 11160]) ("declaim" code nil nil [11162 11193]) ("col-vector-p" function (:parent "standard-matrix" :arguments ("matrix")) nil [11194 11268]) ("declaim" code nil nil [11270 11308]) ("row-or-col-vector-p" function (:parent "standard-matrix" :arguments ("matrix")) nil [11309 11418]) ("declaim" code nil nil [11420 11454]) ("square-matrix-p" function (:parent "standard-matrix" :arguments ("matrix")) nil [11455 11545]) ("size" function (:parent "standard-matrix" :arguments ("matrix")) nil [11547 11629]) ("fortran-matrix-indexing" function (:arguments ("i" "j" "l")) nil [12069 12308]) ("declaim" code nil nil [12310 12352]) ("fortran-matrix-indexing" function (:arguments ("row" "col" "nrows")) nil [12353 12508]) ("fortran-complex-matrix-indexing" function (:arguments ("i" "j" "l")) nil [12740 13006]) ("declaim" code nil nil [13008 13058]) ("fortran-complex-matrix-indexing" function (:arguments ("row" "col" "nrows")) nil [13059 13241]) ("declaim" code nil nil [13353 13472]) ("complex-coerce" function (:arguments ("val")) nil [13474 13903]) ("fill-matrix" function (:arguments ("fill-element")) nil [13905 14094]) ("fill-matrix" function (:parent "real-matrix" :arguments ("matrix" "fill")) nil [14096 14176]) ("fill-matrix" function (:parent "real-matrix" :arguments ("matrix" "fill")) nil [14178 14341]) ("fill-matrix" function (:parent "complex-matrix" :arguments ("matrix" "fill")) nil [14343 14428]) ("fill-matrix" function (:parent "t" :arguments ("matrix" "fill")) nil [14430 14558]) ("declaim" code nil nil [14628 14670]) ("allocate-integer4-store" function (:arguments ("size" "&optional" "initial-element")) nil [14671 14961]) ("declaim" code nil nil [14963 15001]) ("allocate-real-store" function (:arguments ("size" "&optional" "initial-element")) nil [15002 15201]) ("declaim" code nil nil [15203 15244]) ("allocate-complex-store" function (:arguments ("size")) nil [15245 15415]) ("make-real-matrix-dim" function (:arguments ("n" "m" "&optional" "fill")) nil [15417 16076]) ("make-real-matrix-array" function (:arguments ("array")) nil [16119 16782]) ("make-real-matrix-seq-of-seq" function (:arguments ("seq")) nil [16784 17436]) ("make-real-matrix-seq" function (:arguments ("seq")) nil [17438 17755]) ("make-real-matrix-sequence" function (:arguments ("seq")) nil [17759 18099]) ("make-real-matrix" function (:arguments ("&rest" "args")) nil [18101 19627]) ("make-complex-matrix-array" function (:arguments ("array")) nil [20137 21117]) ("make-complex-matrix-seq-of-seq" function (:arguments ("seq")) nil [21120 22068]) ("make-complex-matrix-seq" function (:arguments ("seq")) nil [22071 22735]) ("make-complex-matrix-sequence" function (:arguments ("seq")) nil [22738 23090]) ("make-complex-matrix" function (:arguments ("&rest" "args")) nil [23093 24455]))
    :file "matrix.lisp"
    :pointmax 24457
    )
   (semanticdb-table "ffi-sbcl.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [6279 6315]) ("parse-doc-&-parameters" function (:arguments ("body" "&optional" "header" "footer")) nil [6317 6559]) ("cast-as-array-p" function (:arguments ("type")) nil [6705 6831]) ("get-read-in-type" function (:arguments ("type")) nil [6891 7415]) ("get-read-out-type" function (:arguments ("type")) nil [7486 7680]) ("get-read-in-style" function (:arguments ("style" "type")) nil [7771 8057]) ("get-read-out-style" function (:arguments ("style")) nil [8130 8279]) ("parse-fortran-parameters" function (:arguments ("body")) nil [8409 9058]) ("def-fortran-interface" function (:arguments ("name" "return-type" "body" "hidden-var-name")) nil [9174 12845]) ("def-fortran-routine" function (:arguments ("name" "return-type" "&rest" "body")) nil [20461 24697]) ("incf-sap" function (:arguments ("type" "sap" "&optional" "n")) nil [24881 25209]) ("deftype" code nil nil [26091 26610]) ("declaim" code nil nil [26787 26825]) ("vector-data-address" function (:arguments ("vec")) nil [26826 30095]) ("with-fortran-float-modes" function (:arguments ("&body" "body")) nil [30601 30827]) ("with-vector-data-addresses" function (:arguments ("vlist" "&body" "body")) nil [30830 31841]) ("with-gensyms" function (:arguments ("symlist" "&body" "body")) nil [31843 31990]))
    :file "ffi-sbcl.lisp"
    :pointmax 39340
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
