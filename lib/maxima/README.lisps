Notes on Lisp implementations for Maxima:

Clisp, CMUCL, Scieneer Common Lisp (SCL), GCL (ANSI-enabled only)
and SBCL can compile and execute Maxima.
Allegro Common Lisp and OpenMCL might also work, but have not
been fully tested.

Ports to other ANSI Common Lisps should be straightforward
and are welcome; please post a message on the Maxima mailing list
if you are interested in working on a port.

For specific Maxima and Lisp version number combinations,
see the ports page at the Maxima wiki:
http://maxima.sourceforge.net/wiki/index.php?Maxima%20ports

When Maxima is recompiled, the Lisp implementation is selected by
an argument of the form `--enable-foolisp' for the configure script.
`./configure --help' shows a list of the Lisp types recognized by
configure (among other options). Always specify the Lisp type;
configure tries to autodetect the Lisp type if it is not specified,
but it has been reported that autodetection can fail.

--------------------------------------------------------------------
Comparison of execution times for the run_testsuite function
All times are in elapsed seconds

Maxima      System                  GCL     SBCL    CMUCL   Clisp

pre-5.9.3   P2 450 MHz, Linux        75      91              301


--------------------------------------------------------------------
Clisp <http://clisp.cons.org>, <http://clisp.sourceforge.net>

	Clisp includes GNU readline support, so Maxima has
advanced command-line editing facilities when built with it.

Clisp is compiled to bytecodes, so Maxima running on Clisp is
substantially slower than on Lisps compiled to machine instructions.
Clisp computes floating-point operations in software,
so floating-point operations in Clisp are much slower than in Lisps
which make use of hardware instructions for floating-point operations.
On the other hand, Clisp makes use of the GMP library for arbitrary-
precision integer computations.

There are Clisp implementations for many platforms
including MS Windows and Unix-like systems.

--------------------------------------------------------------------
CMUCL <http://cmucl.cons.org>

	CMUCL is a fast option for Maxima on platforms where it is
available. The rmaxima front-end provides advanced line-editing
facilities for Maxima when compiled with CMUCL. rlwrap is available
from <http://utopia.knoware.nl/~hlub/uck/rlwrap/> .

CMUCL versions: 18e and 19a and later are known to work.

There are CMUCL implementations only for Unix-like systems
(not MS Windows).

--------------------------------------------------------------------
Scieneer Common Lisp (SCL) <http://www.scieneer.com/scl/>

	Scieneer Common Lisp (SCL) is a fast option for Maxima for a
range of Linux and Unix platforms.  The SCL 1.2.8 release and later
are supported.  SCL offers a lower case, case sensitive, version which
avoids the Maxima case inversion issues with symbol names.  Tested
front end options are: maxima emacs mode available in the
interfaces/emacs/ directory, the emacs imaxima mode available from
http://members3.jcom.home.ne.jp/imaxima/, and TeXmacs available from
http://www.texmacs.org/

--------------------------------------------------------------------
GCL <http://savannah.gnu.org/projects/gcl>

	GCL versions starting with 2.4.3 can be built with readline
support, so Maxima has advanced command-line editing facilities
when built with it. GCL produces a fast Maxima exectuable.

Only the ANSI-enabled version of GCL works with Maxima, i.e.,
when GCL is built, it must be configured with the --enable-ansi flag,
i.e., execute ``./configure --enable-ansi'' in the build directory
before executing make.

Whether GCL is ANSI-enabled or not can be determined by 
inspecting the banner which is printed when GCL is executed;
if ANSI-enabled, the banner should say "ANSI".
Also, the special variable *FEATURES* should include the keyword :ANSI-CL.

There are GCL implementations for many platforms
including MS Windows and Unix-like systems.

--------------------------------------------------------------------
SBCL <http://sbcl.sourceforge.net>

    SBCL is a fork of CMUCL which differs in some minor details,
but most notably, it is simpler to rebuild SBCL than CMUCL.

rmaxima is recommended for use with SBCL. See CMUCL above.

There are SBCL implementations only for Unix-like systems
(not MS Windows).

--------------------------------------------------------------------
Allegro Common Lisp and OpenMCL:

	Maxima should work with Allegro Common Lisp and OpenMCL, but
only limited testing has been done with these Lisp
implementations. User feedback would be welcome.
