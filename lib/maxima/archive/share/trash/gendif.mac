/* general differentiation simplification: diff(e,x,n), for
n symbolic  */
gendiff(e,x,n):= if numberp(n)then if integerp(n) then diff(e,x,n) else (print ("fractional derivatives not supported"),'diff(e,x,n)) 
else if freeof(x,e) then 0
 else if atom(e) then 'diff(e,x,n)
 else if inpart(e,0)="+" then map(lambda([u],gendiff(u,x,n)),e)
 else if inpart(e,0)="*" then gendiffprod(inpart(e,1),e/inpart(e,1),x,n)
 else if inpart(e,0)="^" then gendiffpow(inpart(e,1),inpart(e,2),x,n)
 else 'diff(e,x,n)$

/* diff of x1^x2 wrt x n times */
gendiffpow(x1,x2,x,n):=
if x1=x then genfact(x2,n,1)*x^(x2-n)
else 
 if (x1=%e)and freeof(x,diff(x2,x)) then diff(x2,x)^n*%e^x2 
 else 
 if integerp(x2) and x2>1 then gendiff(ratexpand(x2),x,n) else 
 'diff(x1^x2,x,n)$

/* replaced by 3-arg version
GENDIFF1(Q):=GENDIFF(Q,X,N)$
*/

/* a first approach */
gendiffprod(a,b,x,n):=if freeof(x,a)then a*gendiff(b,x,n) else
 if freeof(x,b) then b*gendiff(a,x,n) else
(block([q,r,i],
q:gendiff(a,x,i),
r:gendiff(b,x,n-i),
return(sum(binomial(n,i)*q*r,i,0,n))))$
