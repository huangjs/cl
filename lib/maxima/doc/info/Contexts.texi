@c end concepts Contexts
@menu
* Functions and Variables for Contexts::
@end menu

@node Functions and Variables for Contexts,  , Contexts, Contexts
@section Functions and Variables for Contexts

@deffn {Function} activate (@var{context_1}, ..., @var{context_n})
Activates the contexts @var{context_1}, ..., @var{context_n}.
The facts in these contexts are then available to
make deductions and retrieve information.
The facts in these contexts are not listed by @code{facts ()}.

The variable @code{activecontexts} is the list
of contexts which are active by way of the @code{activate} function.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@defvr {System variable} activecontexts
Default value: @code{[]}

@code{activecontexts} is a list of the contexts which are active
by way of the @code{activate} function, as opposed to being active because
they are subcontexts of the current context.

@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr


@deffn {Function} assume (@var{pred_1}, ..., @var{pred_n})
Adds predicates @var{pred_1}, ..., @var{pred_n} to the current context.
If a predicate is inconsistent or redundant 
with the predicates in the current context,
it is not added to the context.
The context accumulates predicates from each call to @code{assume}.

@code{assume} returns a list whose elements are the predicates added to the context
or the atoms @code{redundant} or @code{inconsistent} where applicable.

The predicates @var{pred_1}, ..., @var{pred_n} can only be expressions
with the relational operators @code{< <= equal notequal >=} and @code{>}.
Predicates cannot be literal equality @code{=} or literal inequality @code{#} expressions,
nor can they be predicate functions such as @code{integerp}.

Compound predicates of the form @code{@var{pred_1} and ... and @var{pred_n}}
are recognized,
but not @code{@var{pred_1} or ... or @var{pred_n}}.
@code{not @var{pred_k}} is recognized if @var{pred_k} is a relational predicate.
Expressions of the form @code{not (@var{pred_1} and @var{pred_2})}
and @code{not (@var{pred_1} or @var{pred_2})}
are not recognized.

Maxima's deduction mechanism is not very strong;
there are many obvious consequences which cannot be determined by @code{is}.
This is a known weakness.

@code{assume} evaluates its arguments.

See also @code{is}, @code{facts}, @code{forget}, @code{context}, and @code{declare}.

Examples:

@c ===beg===
@c assume (xx > 0, yy < -1, zz >= 0);
@c assume (aa < bb and bb < cc);
@c facts ();
@c is (xx > yy);
@c is (yy < -yy);
@c is (sinh (bb - aa) > 0);
@c forget (bb > aa);
@c prederror : false;
@c is (sinh (bb - aa) > 0);
@c is (bb^2 < cc^2);
@c ===end===

@example
(%i1) assume (xx > 0, yy < -1, zz >= 0);
(%o1)              [xx > 0, yy < - 1, zz >= 0]
(%i2) assume (aa < bb and bb < cc);
(%o2)                  [bb > aa, cc > bb]
(%i3) facts ();
(%o3)     [xx > 0, - 1 > yy, zz >= 0, bb > aa, cc > bb]
(%i4) is (xx > yy);
(%o4)                         true
(%i5) is (yy < -yy);
(%o5)                         true
(%i6) is (sinh (bb - aa) > 0);
(%o6)                         true
(%i7) forget (bb > aa);
(%o7)                       [bb > aa]
(%i8) prederror : false;
(%o8)                         false
(%i9) is (sinh (bb - aa) > 0);
(%o9)                        unknown
(%i10) is (bb^2 < cc^2);
(%o10)                       unknown
@end example

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@defvr {Option variable} assumescalar
Default value: @code{true}

@code{assumescalar} helps govern whether expressions @code{expr}
for which @code{nonscalarp (expr)} is @code{false}
are assumed to behave like scalars
for certain transformations.

Let @code{expr} represent any expression other than a list or a matrix,
and let @code{[1, 2, 3]} represent any list or matrix.
Then @code{expr . [1, 2, 3]} yields @code{[expr, 2 expr, 3 expr]}
if @code{assumescalar} is @code{true}, or @code{scalarp (expr)} is
@code{true}, or @code{constantp (expr)} is @code{true}.

If @code{assumescalar} is @code{true}, such
expressions will behave like scalars only for commutative
operators, but not for noncommutative multiplication @code{.}.

When @code{assumescalar} is @code{false}, such
expressions will behave like non-scalars.

When @code{assumescalar} is @code{all},
such expressions will behave like scalars for all the operators listed
above.

@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr


@defvr {Option variable} assume_pos
Default value: @code{false}

When @code{assume_pos} is @code{true}
and the sign of a parameter @var{x} cannot be determined from the current context
@c WHAT ARE THOSE OTHER CONSIDERATIONS ??
or other considerations,
@code{sign} and @code{asksign (@var{x})} return @code{true}.
This may forestall some automatically-generated @code{asksign} queries,
such as may arise from @code{integrate} or other computations.

By default, a parameter is @var{x} such that @code{symbolp (@var{x})}
or @code{subvarp (@var{x})}.
The class of expressions considered parameters can be modified to some extent
via the variable @code{assume_pos_pred}.

@code{sign} and @code{asksign} attempt to deduce the sign of expressions
from the sign of operands within the expression.
For example, if @code{a} and @code{b} are both positive,
then @code{a + b} is also positive.

However, there is no way to bypass all @code{asksign} queries.
In particular, when the @code{asksign} argument is a
difference @code{@var{x} - @var{y}} or a logarithm @code{log(@var{x})},
@code{asksign} always requests an input from the user,
even when @code{assume_pos} is @code{true} and @code{assume_pos_pred} is
a function which returns @code{true} for all arguments.

@c NEED EXAMPLES HERE
@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr


@defvr {Option variable} assume_pos_pred
Default value: @code{false}

When @code{assume_pos_pred} is assigned the name of a function
or a lambda expression of one argument @var{x},
that function is called to determine
whether @var{x} is considered a parameter for the purpose of @code{assume_pos}.
@code{assume_pos_pred} is ignored when @code{assume_pos} is @code{false}.

The @code{assume_pos_pred} function is called by @code{sign} and @code{asksign}
with an argument @var{x}
which is either an atom, a subscripted variable, or a function call expression.
If the @code{assume_pos_pred} function returns @code{true},
@var{x} is considered a parameter for the purpose of @code{assume_pos}.

By default, a parameter is @var{x} such that @code{symbolp (@var{x})}
or @code{subvarp (@var{x})}.

See also @code{assume} and @code{assume_pos}.

Examples:
@c EXAMPLE OUTPUT GENERATED FROM:
@c assume_pos: true$
@c assume_pos_pred: symbolp$
@c sign (a);
@c sign (a[1]);
@c assume_pos_pred: lambda ([x], display (x), true)$
@c asksign (a);
@c asksign (a[1]);
@c asksign (foo (a));
@c asksign (foo (a) + bar (b));
@c asksign (log (a));
@c asksign (a - b);

@example
(%i1) assume_pos: true$
(%i2) assume_pos_pred: symbolp$
(%i3) sign (a);
(%o3)                          pos
(%i4) sign (a[1]);
(%o4)                          pnz
(%i5) assume_pos_pred: lambda ([x], display (x), true)$
(%i6) asksign (a);
                              x = a

(%o6)                          pos
(%i7) asksign (a[1]);
                             x = a
                                  1

(%o7)                          pos
(%i8) asksign (foo (a));
                           x = foo(a)

(%o8)                          pos
(%i9) asksign (foo (a) + bar (b));
                           x = foo(a)

                           x = bar(b)

(%o9)                          pos
(%i10) asksign (log (a));
                              x = a

Is  a - 1  positive, negative, or zero?

p;
(%o10)                         pos
(%i11) asksign (a - b);
                              x = a

                              x = b

                              x = a

                              x = b

Is  b - a  positive, negative, or zero?

p;
(%o11)                         neg
@end example

@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr


@defvr {Option variable} context
Default value: @code{initial}

@code{context} names the collection of facts maintained by @code{assume} and @code{forget}.
@code{assume} adds facts to the collection named by @code{context},
while @code{forget} removes facts.

Binding @code{context} to a name @var{foo} changes the current context to @var{foo}.
If the specified context @var{foo} does not yet exist,
it is created automatically by a call to @code{newcontext}.
@c ISN'T THIS NEXT BIT EQUIVALENT TO THE FIRST ??
The specified context is activated automatically.

See @code{contexts} for a general description of the context mechanism.

@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr

@c UMM, I'M HAVING TROUBLE GETTING THE CONTEXT-SWITCHING STUFF TO BEHAVE AS EXPECTED
@c SOME EXAMPLES WILL HELP A LOT HERE
@defvr {Option variable} contexts
Default value: @code{[initial, global]}

@code{contexts} is a list of the contexts which
currently exist, including the currently active context.

The context mechanism makes it possible for a user to bind together
and name a collection of facts, called a context.
Once this is done, the user can have Maxima assume or forget large numbers
of facts merely by activating or deactivating their context.

Any symbolic atom can be a context, and the facts contained in that
context will be retained in storage until destroyed one by one
by calling @code{forget} or destroyed as a whole by calling @code{kill}
to destroy the context to which they belong.

Contexts exist in a hierarchy, with the root always being
the context @code{global}, which contains information about Maxima that some
functions need.  When in a given context, all the facts in that
context are "active" (meaning that they are used in deductions and
retrievals) as are all the facts in any context which is a subcontext
of the active context.

When a fresh Maxima is started up, the user is in a
context called @code{initial}, which has @code{global} as a subcontext.

See also @code{facts}, @code{newcontext},
@code{supcontext}, @code{killcontext}, @code{activate}, @code{deactivate}, @code{assume}, and @code{forget}.

@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr

@deffn {Function} deactivate (@var{context_1}, ..., @var{context_n})
Deactivates the specified contexts @var{context_1}, ..., @var{context_n}.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@deffn {Function} facts (@var{item})
@deffnx {Function} facts ()
If @var{item} is the name of a context,
@code{facts (@var{item})} returns a list
of the facts in the specified context.

If @var{item} is not the name of a context,
@code{facts (@var{item})} returns a list of the facts known about @var{item} in the current
context.  Facts that are active, but in a different context, are not listed.

@code{facts ()} (i.e., without an argument) lists the current context.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@defvr {Declaration} features
Maxima recognizes certain mathematical properties of functions and variables.
These are called "features".

@code{declare (@var{x}, @var{foo})} gives the property @var{foo}
to the function or variable @var{x}.

@code{declare (@var{foo}, feature)} declares a new feature @var{foo}.
For example,
@code{declare ([red, green, blue], feature)}
declares three new features, @code{red}, @code{green}, and @code{blue}.

The predicate @code{featurep (@var{x}, @var{foo})}
returns @code{true} if @var{x} has the @var{foo} property,
and @code{false} otherwise.

The infolist @code{features} is a list of known features.
These are
@code{integer}, @code{noninteger}, @code{even}, @code{odd}, @code{rational},
@code{irrational}, @code{real}, @code{imaginary}, @code{complex},
@code{analytic}, @code{increasing}, @code{decreasing}, @code{oddfun},
@code{evenfun}, @code{posfun}, @code{commutative}, @code{lassociative},
@code{rassociative}, @code{symmetric}, and @code{antisymmetric},
plus any user-defined features.

@code{features} is a list of mathematical features.
There is also a list of non-mathematical, system-dependent features. See @code{status}.

@opencatbox
@category{Declarations and inferences}
@closecatbox

@end defvr

@deffn {Function} forget (@var{pred_1}, ..., @var{pred_n})
@deffnx {Function} forget (@var{L})
Removes predicates established by @code{assume}.
The predicates may be expressions equivalent to (but not necessarily identical to)
those previously assumed.

@code{forget (@var{L})}, where @var{L} is a list of predicates,
forgets each item on the list.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@deffn {Function} killcontext (@var{context_1}, ..., @var{context_n})
Kills the contexts @var{context_1}, ..., @var{context_n}.

If one of the contexts is the current context, the new current
context will become the first available subcontext of the current
context which has not been killed.  If the first available unkilled
context is @code{global} then @code{initial} is used instead.  If the @code{initial}
context is killed, a new, empty @code{initial} context is created.

@code{killcontext} refuses to kill a context which is
currently active, either because it is a subcontext of the current
context, or by use of the function @code{activate}.

@code{killcontext} evaluates its arguments.
@code{killcontext} returns @code{done}.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@deffn {Function} newcontext (@var{name})
Creates a new, empty context, called @var{name}, which
has @code{global} as its only subcontext.  The newly-created context
becomes the currently active context.

@code{newcontext} evaluates its argument.
@code{newcontext} returns @var{name}.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@deffn {Function} supcontext (@var{name}, @var{context})
@deffnx {Function} supcontext (@var{name})
Creates a new context, called @var{name},
which has @var{context} as a subcontext.
@var{context} must exist.

If @var{context} is not specified, the current context is assumed.

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn
