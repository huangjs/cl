@menu
* Introduction to Expressions::  
* Complex::                     
* Nouns and Verbs::
* Identifiers::
* Strings::
* Inequality::                  
* Syntax::                      
* Functions and Variables for Expressions::  
@end menu

@node Introduction to Expressions, Complex, Expressions, Expressions
@section Introduction to Expressions

There are a number of reserved words which should not be used as variable names.
Their use would cause a possibly cryptic syntax error.

@example
integrate            next           from                 diff            
in                   at             limit                sum             
for                  and            elseif               then            
else                 do             or                   if              
unless               product        while                thru            
step                                                                     
@end example

Most things in Maxima are expressions.   A sequence of expressions
can be made into an expression by separating them by commas and
putting parentheses around them.   This is similar to the @b{C}
@i{comma expression}.

@example
(%i1) x: 3$
(%i2) (x: x+1, x: x^2);
(%o2)                          16
(%i3) (if (x > 17) then 2 else 4);
(%o3)                           4
(%i4) (if (x > 17) then x: 2 else y: 4, y+x);
(%o4)                          20
@end example

Even loops in Maxima are expressions, although the value they
return is the not too useful @code{done}.

@example
(%i1) y: (x: 1, for i from 1 thru 10 do (x: x*i))$
(%i2) y;
(%o2)                         done
@end example

whereas what you really want is probably to include a third
term in the @i{comma expression} which actually gives back the value.

@example
(%i3) y: (x: 1, for i from 1 thru 10 do (x: x*i), x)$
(%i4) y;
(%o4)                        3628800
@end example



@c THIS REALLY NEEDS EXPANSION
@node Complex, Nouns and Verbs, Introduction to Expressions, Expressions
@section Complex
A complex expression is specified in Maxima by adding the
real part of the expression to @code{%i} times the imaginary part.  Thus the
roots of the equation @code{x^2 - 4*x + 13 = 0} are @code{2 + 3*%i} and @code{2 - 3*%i}.  Note that
simplification of products of complex expressions can be effected by
expanding the product.  Simplification of quotients, roots, and other
functions of complex expressions can usually be accomplished by using
the @code{realpart}, @code{imagpart}, @code{rectform}, @code{polarform}, @code{abs}, @code{carg} functions.

@opencatbox
@category{Complex variables}
@closecatbox

@node Nouns and Verbs, Identifiers, Complex, Expressions
@section Nouns and Verbs
Maxima distinguishes between operators which are "nouns" and operators which are "verbs".
A verb is an operator which can be executed.
A noun is an operator which appears as a symbol in an expression, without being executed.
By default, function names are verbs.
A verb can be changed into a noun by quoting the function name
or applying the @code{nounify} function.
A noun can be changed into a verb by applying the @code{verbify} function.
The evaluation flag @code{nouns} causes @code{ev} to evaluate nouns in an expression.

The verb form is distinguished by 
a leading dollar sign @code{$} on the corresponding Lisp symbol.
In contrast,
the noun form is distinguished by 
a leading percent sign @code{%} on the corresponding Lisp symbol.
Some nouns have special display properties, such as @code{'integrate} and @code{'derivative}
(returned by @code{diff}), but most do not.
By default, the noun and verb forms of a function are identical when displayed.
The global flag @code{noundisp} causes Maxima to display nouns with a leading quote mark @code{'}.

See also @code{noun}, @code{nouns}, @code{nounify}, and @code{verbify}.

Examples:

@c ===beg===
@c foo (x) := x^2;
@c foo (42);
@c 'foo (42);
@c 'foo (42), nouns;
@c declare (bar, noun);
@c bar (x) := x/17;
@c bar (52);
@c bar (52), nouns;
@c integrate (1/x, x, 1, 42);
@c 'integrate (1/x, x, 1, 42);
@c ev (%, nouns);
@c ===end===
@example
(%i1) foo (x) := x^2;
                                     2
(%o1)                     foo(x) := x
(%i2) foo (42);
(%o2)                         1764
(%i3) 'foo (42);
(%o3)                        foo(42)
(%i4) 'foo (42), nouns;
(%o4)                         1764
(%i5) declare (bar, noun);
(%o5)                         done
(%i6) bar (x) := x/17;
                                     x
(%o6)                    ''bar(x) := --
                                     17
(%i7) bar (52);
(%o7)                        bar(52)
(%i8) bar (52), nouns;
                               52
(%o8)                          --
                               17
(%i9) integrate (1/x, x, 1, 42);
(%o9)                        log(42)
(%i10) 'integrate (1/x, x, 1, 42);
                             42
                            /
                            [   1
(%o10)                      I   - dx
                            ]   x
                            /
                             1
(%i11) ev (%, nouns);
(%o11)                       log(42)
@end example

@opencatbox
@category{Evaluation} @category{Nouns and verbs}
@closecatbox

@node Identifiers, Strings, Nouns and Verbs, Expressions
@section Identifiers
Maxima identifiers may comprise alphabetic characters,
plus the numerals 0 through 9,
plus any special character preceded by the backslash @code{\} character.

A numeral may be the first character of an identifier
if it is preceded by a backslash.
Numerals which are the second or later characters need not be preceded by a backslash.

Characters may be declared alphabetic by the @code{declare} function.
If so declared, they need not be preceded by a backslash in an identifier.
The alphabetic characters are initially 
@code{A} through @code{Z}, @code{a} through @code{z}, @code{%}, and @code{_}.

Maxima is case-sensitive. The identifiers @code{foo}, @code{FOO}, and @code{Foo} are distinct.
See @ref{Lisp and Maxima} for more on this point.

A Maxima identifier is a Lisp symbol which begins with a dollar sign @code{$}.
Any other Lisp symbol is preceded by a question mark @code{?} when it appears in Maxima.
See @ref{Lisp and Maxima} for more on this point.

Examples:

@c ===beg===
@c %an_ordinary_identifier42;
@c embedded\ spaces\ in\ an\ identifier;
@c symbolp (%);
@c [foo+bar, foo\+bar];
@c [1729, \1729];
@c [symbolp (foo\+bar), symbolp (\1729)];
@c [is (foo\+bar = foo+bar), is (\1729 = 1729)];
@c baz\~quux;
@c declare ("~", alphabetic);
@c baz~quux;
@c [is (foo = FOO), is (FOO = Foo), is (Foo = foo)];
@c :lisp (defvar *my-lisp-variable* '$foo)
@c ?\*my\-lisp\-variable\*;
@c ===end===

@example
(%i1) %an_ordinary_identifier42;
(%o1)               %an_ordinary_identifier42
(%i2) embedded\ spaces\ in\ an\ identifier;
(%o2)           embedded spaces in an identifier
(%i3) symbolp (%);
(%o3)                         true
(%i4) [foo+bar, foo\+bar];
(%o4)                 [foo + bar, foo+bar]
(%i5) [1729, \1729];
(%o5)                     [1729, 1729]
(%i6) [symbolp (foo\+bar), symbolp (\1729)];
(%o6)                     [true, true]
(%i7) [is (foo\+bar = foo+bar), is (\1729 = 1729)];
(%o7)                    [false, false]
(%i8) baz\~quux;
(%o8)                       baz~quux
(%i9) declare ("~", alphabetic);
(%o9)                         done
(%i10) baz~quux;
(%o10)                      baz~quux
(%i11) [is (foo = FOO), is (FOO = Foo), is (Foo = foo)];
(%o11)                [false, false, false]
(%i12) :lisp (defvar *my-lisp-variable* '$foo)
*MY-LISP-VARIABLE*
(%i12) ?\*my\-lisp\-variable\*;
(%o12)                         foo
@end example

@opencatbox
@category{Syntax}
@closecatbox

@node Strings, Inequality, Identifiers, Expressions
@section Strings

Strings (quoted character sequences) are enclosed in double quote marks @code{"} for input,
and displayed with or without the quote marks, 
depending on the global variable @code{stringdisp}.

Strings may contain any characters,
including embedded tab, newline, and carriage return characters.
The sequence @code{\"} is recognized as a literal double quote,
and @code{\\} as a literal backslash.
When backslash appears at the end of a line,
the backslash and the line termination
(either newline or carriage return and newline)
are ignored,
so that the string continues with the next line.
No other special combinations of backslash with another character are recognized;
when backslash appears before any character other than @code{"}, @code{\},
or a line termination, the backslash is ignored.
There is no way to represent a special character
(such as tab, newline, or carriage return)
except by embedding the literal character in the string.

There is no character type in Maxima;
a single character is represented as a one-character string.

The @code{stringproc} add-on package contains many functions for working with strings.

Examples:

@c ===beg===
@c s_1 : "This is a string.";
@c s_2 : "Embedded \"double quotes\" and backslash \\ characters.";
@c s_3 : "Embedded line termination
@c in this string.";
@c s_4 : "Ignore the \
@c line termination \
@c characters in \
@c this string.";
@c stringdisp : false;
@c s_1;
@c stringdisp : true;
@c s_1;
@c ===end===
@example
(%i1) s_1 : "This is a string.";
(%o1)               This is a string.
(%i2) s_2 : "Embedded \"double quotes\" and backslash \\ characters.";
(%o2) Embedded "double quotes" and backslash \ characters.
(%i3) s_3 : "Embedded line termination
in this string.";
(%o3) Embedded line termination
in this string.
(%i4) s_4 : "Ignore the \
line termination \
characters in \
this string.";
(%o4) Ignore the line termination characters in this string.
(%i5) stringdisp : false;
(%o5)                         false
(%i6) s_1;
(%o6)                   This is a string.
(%i7) stringdisp : true;
(%o7)                         true
(%i8) s_1;
(%o8)                  "This is a string."
@end example

@opencatbox
@category{Syntax}
@closecatbox

@node Inequality, Syntax, Strings, Expressions
@section Inequality
Maxima has the inequality operators @code{<}, @code{<=}, @code{>=}, @code{>}, @code{#}, and @code{notequal}.
See @code{if} for a description of conditional expressions.

@node Syntax, Functions and Variables for Expressions, Inequality, Expressions
@section Syntax
It is possible to define new operators with specified precedence,
to undefine existing operators,
or to redefine the precedence of existing operators.  
An operator may be unary prefix or unary postfix, binary infix, n-ary infix, matchfix, or nofix.
"Matchfix" means a pair of symbols which enclose their argument or arguments,
and "nofix" means an operator which takes no arguments.
As examples of the different types of operators, there are the following.

@table @asis
@item unary prefix
negation @code{- a}
@item unary postfix
factorial @code{a!}
@item binary infix
exponentiation @code{a^b}
@item n-ary infix
addition @code{a + b}
@item matchfix
list construction @code{[a, b]}
@end table

(There are no built-in nofix operators;
for an example of such an operator, see @code{nofix}.)

The mechanism to define a new operator is straightforward.
It is only necessary to declare a function as an operator;
the operator function might or might not be defined.

An example of user-defined operators is the following.
Note that the explicit function call @code{"dd" (a)} is equivalent to @code{dd a},
likewise @code{"<-" (a, b)} is equivalent to @code{a <- b}.
Note also that the functions @code{"dd"} and @code{"<-"} are undefined in this example.

@c ===beg===
@c prefix ("dd");
@c dd a;
@c "dd" (a);
@c infix ("<-");
@c a <- dd b;
@c "<-" (a, "dd" (b));
@c ===end===
@example
(%i1) prefix ("dd");
(%o1)                          dd
(%i2) dd a;
(%o2)                         dd a
(%i3) "dd" (a);
(%o3)                         dd a
(%i4) infix ("<-");
(%o4)                          <-
(%i5) a <- dd b;
(%o5)                      a <- dd b
(%i6) "<-" (a, "dd" (b));
(%o6)                      a <- dd b
@end example

The Maxima functions which define new operators are summarized in this table,
stating the default left and right binding powers (lbp and rbp, respectively).
@c REWORK FOLLOWING COMMENT. IT'S NOT CLEAR ENOUGH, GIVEN THAT IT'S FAIRLY IMPORTANT
(Binding power determines operator precedence. However, since left and right
binding powers can differ, binding power is somewhat more complicated than precedence.)
Some of the operation definition functions take additional arguments;
see the function descriptions for details.

@c MAKE ANCHORS FOR ALL 6 FUNCTIONS AND CHANGE @code TO @ref ACCORDINGLY
@table @code
@item prefix
rbp=180
@item postfix
lbp=180
@item infix
lbp=180, rbp=180
@item nary
lbp=180, rbp=180
@item matchfix
(binding power not applicable)
@item nofix
(binding power not applicable)
@end table

For comparison,
here are some built-in operators and their left and right binding powers.

@example
Operator   lbp     rbp

  :        180     20 
  ::       180     20 
  :=       180     20 
  ::=      180     20 
  !        160
  !!       160
  ^        140     139 
  .        130     129 
  *        120
  /        120     120 
  +        100     100 
  -        100     134 
  =        80      80 
  #        80      80 
  >        80      80 
  >=       80      80 
  <        80      80 
  <=       80      80 
  not              70 
  and      65
  or       60
  ,        10
  $        -1
  ;        -1
@end example

@code{remove} and @code{kill} remove operator properties from an atom.
@code{remove ("@var{a}", op)} removes only the operator properties of @var{a}.
@code{kill ("@var{a}")} removes all properties of @var{a}, including the operator properties.
Note that the name of the operator must be enclosed in quotation marks.

@c MAYBE COPY THIS EXAMPLE TO remove AND/OR kill
@c ===beg===
@c infix ("##");
@c "##" (a, b) := a^b;
@c 5 ## 3;
@c remove ("##", op);
@c 5 ## 3;
@c "##" (5, 3);
@c infix ("##");
@c 5 ## 3;
@c kill ("##");
@c 5 ## 3;
@c "##" (5, 3);
@c ===end===
@example
(%i1) infix ("##");
(%o1)                          ##
(%i2) "##" (a, b) := a^b;
                                     b
(%o2)                     a ## b := a
(%i3) 5 ## 3;
(%o3)                          125
(%i4) remove ("##", op);
(%o4)                         done
(%i5) 5 ## 3;
Incorrect syntax: # is not a prefix operator
5 ##
  ^
(%i5) "##" (5, 3);
(%o5)                          125
(%i6) infix ("##");
(%o6)                          ##
(%i7) 5 ## 3;
(%o7)                          125
(%i8) kill ("##");
(%o8)                         done
(%i9) 5 ## 3;
Incorrect syntax: # is not a prefix operator
5 ##
  ^
(%i9) "##" (5, 3);
(%o9)                       ##(5, 3)
@end example

@opencatbox
@category{Operators} @category{Syntax}
@closecatbox

@node Functions and Variables for Expressions,  , Syntax, Expressions
@section Functions and Variables for Expressions

@deffn {Function} at (@var{expr}, [@var{eqn_1}, ..., @var{eqn_n}])
@deffnx {Function} at (@var{expr}, @var{eqn})
Evaluates the expression @var{expr} with
the variables assuming the values as specified for them in the list of
equations @code{[@var{eqn_1}, ..., @var{eqn_n}]} or the single equation @var{eqn}.

If a subexpression depends on any of the variables for which a value is specified
but there is no atvalue specified and it can't be otherwise evaluated,
then a noun form of the @code{at} is returned which displays in a two-dimensional form.

@code{at} carries out multiple substitutions in series, not parallel.

See also @code{atvalue}.
For other functions which carry out substitutions,
see also @code{subst} and @code{ev}.

Examples:
@c COPIED FROM example(at)

@c ===beg===
@c atvalue (f(x,y), [x = 0, y = 1], a^2);
@c atvalue ('diff (f(x,y), x), x = 0, 1 + y);
@c printprops (all, atvalue);
@c diff (4*f(x, y)^2 - u(x, y)^2, x);
@c at (%, [x = 0, y = 1]);
@c ===end===
@example
(%i1) atvalue (f(x,y), [x = 0, y = 1], a^2);
                                2
(%o1)                          a
(%i2) atvalue ('diff (f(x,y), x), x = 0, 1 + y);
(%o2)                        @@2 + 1
(%i3) printprops (all, atvalue);
                                !
                  d             !
                 --- (f(@@1, @@2))!       = @@2 + 1
                 d@@1            !
                                !@@1 = 0

                                     2
                          f(0, 1) = a

(%o3)                         done
(%i4) diff (4*f(x, y)^2 - u(x, y)^2, x);
                  d                          d
(%o4)  8 f(x, y) (-- (f(x, y))) - 2 u(x, y) (-- (u(x, y)))
                  dx                         dx
(%i5) at (%, [x = 0, y = 1]);
                                         !
              2              d           !
(%o5)     16 a  - 2 u(0, 1) (-- (u(x, y))!            )
                             dx          !
                                         !x = 0, y = 1
@end example

@opencatbox
@category{Evaluation} @category{Differential equations}
@closecatbox
@end deffn

@deffn {Function} box (@var{expr})
@deffnx {Function} box (@var{expr}, @var{a})
Returns @var{expr} enclosed in a box.
The return value is an expression with @code{box} as the operator and @var{expr} as the argument.
A box is drawn on the display when @code{display2d} is @code{true}.

@code{box (@var{expr}, @var{a})}
encloses @var{expr} in a box labelled by the symbol @var{a}.
The label is truncated if it is longer than the width of the box.

@code{box} evaluates its argument.
However, a boxed expression does not evaluate to its content,
so boxed expressions are effectively excluded from computations.

@code{boxchar} is the character used to draw the box in @code{box}
and in the @code{dpart} and @code{lpart} functions.

Examples:

@c ===beg===
@c box (a^2 + b^2);
@c a : 1234;
@c b : c - d;
@c box (a^2 + b^2);
@c box (a^2 + b^2, term_1);
@c 1729 - box (1729);
@c boxchar: "-";
@c box (sin(x) + cos(y));
@c ===end===
@example
(%i1) box (a^2 + b^2);
                            """""""""
                            " 2    2"
(%o1)                       "b  + a "
                            """""""""
(%i2) a : 1234;
(%o2)                         1234
(%i3) b : c - d;
(%o3)                         c - d
(%i4) box (a^2 + b^2);
                      """"""""""""""""""""
                      "       2          "
(%o4)                 "(c - d)  + 1522756"
                      """"""""""""""""""""
(%i5) box (a^2 + b^2, term_1);
                      term_1""""""""""""""
                      "       2          "
(%o5)                 "(c - d)  + 1522756"
                      """"""""""""""""""""
(%i6) 1729 - box (1729);
                                 """"""
(%o6)                     1729 - "1729"
                                 """"""
(%i7) boxchar: "-";
(%o7)                           -
(%i8) box (sin(x) + cos(y));
                        -----------------
(%o8)                   -cos(y) + sin(x)-
                        -----------------
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@defvr {Option variable} boxchar
Default value: @code{"}

@code{boxchar} is the character used to draw the box in the @code{box}
and in the @code{dpart} and @code{lpart} functions.

All boxes in an expression are drawn with the current value of @code{boxchar};
the drawing character is not stored with the box expression.

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@deffn {Function} carg (@var{z})
Returns the complex argument of @var{z}.
The complex argument is an angle @code{theta} in @code{(-%pi, %pi]}
such that @code{r exp (theta %i) = @var{z}} where @code{r} is the magnitude of @var{z}.
@c ACTUALLY carg DOESN'T ALWAYS RETURN A VALUE IN (-%pi, %pi]; SEE SF BUG REPORT # 816166

@code{carg} is a computational function,
not a simplifying function.
@c PROBABLY NEED TO EXPLAIN IMPLICATIONS OF ABOVE STATEMENT
@c SEE ALSO SF BUG REPORT # 902290

@code{carg} ignores the declaration @code{declare (@var{x}, complex)},
and treats @var{x} as a real variable.
This is a bug. @c SEE SF BUG REPORT # 620246

See also @code{abs} (complex magnitude), @code{polarform}, @code{rectform},
@code{realpart}, and @code{imagpart}.

Examples:

@c ===beg===
@c carg (1);
@c carg (1 + %i);
@c carg (exp (%i));
@c carg (exp (%pi * %i));
@c carg (exp (3/2 * %pi * %i));
@c carg (17 * exp (2 * %i));
@c ===end===

@example
(%i1) carg (1);
(%o1)                           0
(%i2) carg (1 + %i);
                               %pi
(%o2)                          ---
                                4
(%i3) carg (exp (%i));
(%o3)                           1
(%i4) carg (exp (%pi * %i));
(%o4)                          %pi
(%i5) carg (exp (3/2 * %pi * %i));
                                %pi
(%o5)                         - ---
                                 2
(%i6) carg (17 * exp (2 * %i));
(%o6)                           2
@end example

@opencatbox
@category{Complex variables}
@closecatbox
@end deffn

@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c CROSS REF declare, properties, ETC
@deffn {Special operator} constant
@code{declare (@var{a}, constant)} declares @var{a} to be a constant.
See @code{declare}.
@c WHAT EXACTLY ARE THE CONSEQUENCES OF DECLARING AN ATOM TO BE CONSTANT ??

@opencatbox
@category{Declarations and inferences} @category{Constants}
@closecatbox
@end deffn

@deffn {Function} constantp (@var{expr})
Returns @code{true} if @var{expr} is a constant expression,
otherwise returns @code{false}.
@c WHAT DOES MAXIMA KNOW ABOUT CONSTANT EXPRESSIONS ??

An expression is considered a constant expression if its arguments are
numbers (including rational numbers, as displayed with @code{/R/}),
symbolic constants such as @code{%pi}, @code{%e}, and @code{%i},
variables bound to a constant or declared constant by @code{declare},
or functions whose arguments are constant.

@code{constantp} evaluates its arguments.

Examples:

@c ===beg===
@c constantp (7 * sin(2));
@c constantp (rat (17/29));
@c constantp (%pi * sin(%e));
@c constantp (exp (x));
@c declare (x, constant);
@c constantp (exp (x));
@c constantp (foo (x) + bar (%e) + baz (2));
@c ===end===

@example
(%i1) constantp (7 * sin(2));
(%o1)                                true
(%i2) constantp (rat (17/29));
(%o2)                                true
(%i3) constantp (%pi * sin(%e));
(%o3)                                true
(%i4) constantp (exp (x));
(%o4)                                false
(%i5) declare (x, constant);
(%o5)                                done
(%i6) constantp (exp (x));
(%o6)                                true
(%i7) constantp (foo (x) + bar (%e) + baz (2));
(%o7)                                false
(%i8) 
@end example

@opencatbox
@category{Predicate functions} @category{Constants}
@closecatbox

@end deffn

@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c THIS ITEM IS EXTREMELY IMPORTANT
@c ENSURE THAT ALL KEYWORDS RECOGNIZED BY declare HAVE THEIR OWN DOCUMENTATION ITEMS !!
@c ALSO: HOW TO FIND THE LIST OF ALL SYMBOLS WHICH HAVE A GIVEN PROPERTY ??
@deffn {Function} declare (@var{a_1}, @var{p_1}, @var{a_2}, @var{p_2}, ...)
Assigns the atom or list of atoms @var{a_i} the property or list of properties @var{p_i}.
When @var{a_i} and/or @var{p_i} are lists,
each of the atoms gets all of the properties.

@code{declare} quotes its arguments.
@code{declare} always returns @code{done}.


As noted in the description for each declaration flag,
for some flags
@code{featurep(@var{object}, @var{feature})}
returns @code{true} if @var{object} has been declared to have @var{feature}.
However, @code{featurep} does not recognize some flags; this is a bug.

See also @code{features}.

@code{declare} recognizes the following properties:

@table @asis
@item @code{evfun}
Makes @var{a_i} known to @code{ev} so that the function named by @var{a_i}
is applied when @var{a_i} appears as a flag argument of @code{ev}.
See @code{evfun}.

@item @code{evflag}
Makes @var{a_i} known to the @code{ev} function so that @var{a_i} is bound to @code{true}
during the execution of @code{ev} when @var{a_i} appears as a flag argument of @code{ev}.
See @code{evflag}.

@c OBSOLETE @code{special} (RECOGNIZED BY DECLARE BUT NEVER USED ANYWHERE)

@c OBSOLETE @code{nonarray} (RECOGNIZED BY DECLARE BUT NEVER USED ANYWHERE)

@item @code{bindtest}
Tells Maxima to trigger an error when @var{a_i} is evaluated unbound.

@item @code{noun}
Tells Maxima to parse @var{a_i} as a noun. 
The effect of this is to replace instances of @var{a_i} with @code{'@var{a_i}}
or @code{nounify(@var{a_i})}, depending on the context.

@item @code{constant}
Tells Maxima to consider @var{a_i} a symbolic constant.
@c WHAT MAXIMA KNOWS ABOUT SYMBOLIC CONSTANTS IS PRETTY LIMITED
@c DUNNO IF WE WANT TO GET INTO DETAILS HERE. 
@c MAYBE IN THE DOCUMENTATION FOR CONSTANT (IF THERE IS SUCH)

@item @code{scalar}
Tells Maxima to consider @var{a_i} a scalar variable.

@item @code{nonscalar}
Tells Maxima to consider @var{a_i} a nonscalar variable.
The usual application is to declare a variable as a symbolic vector or matrix.

@item @code{mainvar}
Tells Maxima to consider @var{a_i} a "main variable".
A main variable succeeds all other constants and variables in the
canonical ordering of Maxima expressions,
as determined by @code{ordergreatp}.

@item @code{alphabetic}
Tells Maxima to recognize all characters in @var{a_i} (which must be a string) as alphabetic characters.

@item @code{feature}
Tells Maxima to recognize @var{a_i} as the name of a feature.
Other atoms may then be declared to have the @var{a_i} property.

@item @code{rassociative}, @code{lassociative}
Tells Maxima to recognize @var{a_i} as a right-associative or left-associative function.

@item @code{nary}
Tells Maxima to recognize @var{a_i} as an n-ary function.

The @code{nary} declaration is not the same as calling the @code{nary} function.
The sole effect of @code{declare(foo, nary)} is to instruct the Maxima simplifier
to flatten nested expressions,
for example, to simplify @code{foo(x, foo(y, z))} to @code{foo(x, y, z)}.

@item @code{symmetric}, @code{antisymmetric}, @code{commutative}
Tells Maxima to recognize @var{a_i} as a symmetric or antisymmetric function.
@code{commutative} is the same as @code{symmetric}.

@item @code{oddfun}, @code{evenfun}
Tells Maxima to recognize @var{a_i} as an odd or even function.

@item @code{outative}
Tells Maxima to simplify @var{a_i} expressions
by pulling constant factors out of the first argument.

When @var{a_i} has one argument,
a factor is considered constant if it is a literal or declared constant.

When @var{a_i} has two or more arguments,
a factor is considered constant
if the second argument is a symbol
and the factor is free of the second argument.

@item @code{multiplicative}
Tells Maxima to simplify @var{a_i} expressions
by the substitution @code{@var{a_i}(x * y * z * ...)} @code{-->}
@code{@var{a_i}(x) * @var{a_i}(y) * @var{a_i}(z) * ...}.
The substitution is carried out on the first argument only.

@item @code{additive}
Tells Maxima to simplify @var{a_i} expressions
by the substitution @code{@var{a_i}(x + y + z + ...)} @code{-->}
@code{@var{a_i}(x) + @var{a_i}(y) + @var{a_i}(z) + ...}.
The substitution is carried out on the first argument only.

@item @code{linear}
Equivalent to declaring @var{a_i} both @code{outative} and @code{additive}.

@c OBSOLETE @code{analytic} (RECOGNIZED BY DECLARE BUT NEVER USED ANYWHERE)

@item @code{integer}, @code{noninteger}
Tells Maxima to recognize @var{a_i} as an integer or noninteger variable.

@item @code{even}, @code{odd}
Tells Maxima to recognize @var{a_i} as an even or odd integer variable.

@item @code{rational}, @code{irrational}
Tells Maxima to recognize @var{a_i} as a rational or irrational real variable.

@item @code{real}, @code{imaginary}, @code{complex}
Tells Maxima to recognize @var{a_i} as a real, pure imaginary, or complex variable.

@item @code{increasing}, @code{decreasing}
Tells Maxima to recognize @var{a_i} as an increasing or decreasing function.
@c MAXIMA FAILS TO DEDUCE F(2) > F(1) FOR INCREASING FUNCTION F
@c AND FAILS TO DEDUCE ANYTHING AT ALL ABOUT DECREASING FUNCTIONS
@c REPORTED AS SF BUG # 1483194

@item @code{posfun}
Tells Maxima to recognize @var{a_i} as a positive function.

@item @code{integervalued}
Tells Maxima to recognize @var{a_i} as an integer-valued function.

@end table

Examples:

@code{evfun} and @code{evflag} declarations.
@c ===beg===
@c declare (expand, evfun);
@c (a + b)^3;
@c (a + b)^3, expand;
@c declare (demoivre, evflag);
@c exp (a + b*%i);
@c exp (a + b*%i), demoivre;
@c ===end===
@example
(%i1) declare (expand, evfun);
(%o1)                         done
(%i2) (a + b)^3;
                                   3
(%o2)                       (b + a)
(%i3) (a + b)^3, expand;
                     3        2      2      3
(%o3)               b  + 3 a b  + 3 a  b + a
(%i4) declare (demoivre, evflag);
(%o4)                         done
(%i5) exp (a + b*%i);
                             %i b + a
(%o5)                      %e
(%i6) exp (a + b*%i), demoivre;
                      a
(%o6)               %e  (%i sin(b) + cos(b))
@end example

@code{bindtest} declaration.
@c ===beg===
@c aa + bb;
@c declare (aa, bindtest);
@c aa + bb;
@c aa : 1234;
@c aa + bb;
@c ===end===
@example
(%i1) aa + bb;
(%o1)                        bb + aa
(%i2) declare (aa, bindtest);
(%o2)                         done
(%i3) aa + bb;
aa unbound variable
 -- an error.  Quitting.  To debug this try debugmode(true);
(%i4) aa : 1234;
(%o4)                         1234
(%i5) aa + bb;
(%o5)                       bb + 1234
@end example

@code{noun} declaration.
@c ===beg===
@c factor (12345678);
@c declare (factor, noun);
@c factor (12345678);
@c ''%, nouns;
@c ===end===
@example
(%i1) factor (12345678);
                             2
(%o1)                     2 3  47 14593
(%i2) declare (factor, noun);
(%o2)                         done
(%i3) factor (12345678);
(%o3)                   factor(12345678)
(%i4) ''%, nouns;
                             2
(%o4)                     2 3  47 14593
@end example

@code{constant}, @code{scalar}, @code{nonscalar}, and @code{mainvar} declarations.
@c ===beg===
@c declare (bb, constant);
@c declare (cc, scalar);
@c declare (dd, nonscalar);
@c declare (ee, mainvar);
@c ===end===
@example
@end example

@code{alphabetic} declaration.
@c ===beg===
@c xx\~yy\`\@ : 1729;
@c declare ("~`@", alphabetic);
@c xx~yy`@ + @yy`xx + `xx@@yy~;
@c listofvars (%);
@c ===end===
@example
(%i1) xx\~yy\`\@@ : 1729;
(%o1)                         1729
(%i2) declare ("~`@@", alphabetic);
(%o2)                         done
(%i3) xx~yy`@@ + @@yy`xx + `xx@@@@yy~;
(%o3)               `xx@@@@yy~ + @@yy`xx + 1729
(%i4) listofvars (%);
(%o4)                  [@@yy`xx, `xx@@@@yy~]
@end example

@code{feature} declaration.
@c ===beg===
@c declare (FOO, feature);
@c declare (x, FOO);
@c featurep (x, FOO);
@c ===end===
@example
(%i1) declare (FOO, feature);
(%o1)                         done
(%i2) declare (x, FOO);
(%o2)                         done
(%i3) featurep (x, FOO);
(%o3)                         true
@end example

@code{rassociative} and @code{lassociative} declarations.
@c ===beg===
@c declare (F, rassociative);
@c declare (G, lassociative);
@c ===end===
@example
@end example

@code{nary} declaration.
@c ===beg===
@c H (H (a, b), H (c, H (d, e)));
@c declare (H, nary);
@c H (H (a, b), H (c, H (d, e)));
@c ===end===
@example
(%i1) H (H (a, b), H (c, H (d, e)));
(%o1)               H(H(a, b), H(c, H(d, e)))
(%i2) declare (H, nary);
(%o2)                         done
(%i3) H (H (a, b), H (c, H (d, e)));
(%o3)                   H(a, b, c, d, e)
@end example

@code{symmetric} and @code{antisymmetric} declarations.
@c ===beg===
@c S (b, a);
@c declare (S, symmetric);
@c S (b, a);
@c S (a, c, e, d, b);
@c T (b, a);
@c declare (T, antisymmetric);
@c T (b, a);
@c T (a, c, e, d, b);
@c ===end===
@example
(%i1) S (b, a);
(%o1)                        S(b, a)
(%i2) declare (S, symmetric);
(%o2)                         done
(%i3) S (b, a);
(%o3)                        S(a, b)
(%i4) S (a, c, e, d, b);
(%o4)                   S(a, b, c, d, e)
(%i5) T (b, a);
(%o5)                        T(b, a)
(%i6) declare (T, antisymmetric);
(%o6)                         done
(%i7) T (b, a);
(%o7)                       - T(a, b)
(%i8) T (a, c, e, d, b);
(%o8)                   T(a, b, c, d, e)
@end example

@code{oddfun} and @code{evenfun} declarations.
@c ===beg===
@c o (- u) + o (u);
@c declare (o, oddfun);
@c o (- u) + o (u);
@c e (- u) - e (u);
@c declare (e, evenfun);
@c e (- u) - e (u);
@c ===end===
@example
(%i1) o (- u) + o (u);
(%o1)                     o(u) + o(- u)
(%i2) declare (o, oddfun);
(%o2)                         done
(%i3) o (- u) + o (u);
(%o3)                           0
(%i4) e (- u) - e (u);
(%o4)                     e(- u) - e(u)
(%i5) declare (e, evenfun);
(%o5)                         done
(%i6) e (- u) - e (u);
(%o6)                           0
@end example

@code{outative} declaration.
@c ===beg===
@c F1 (100 * x);
@c declare (F1, outative);
@c F1 (100 * x);
@c declare (zz, constant);
@c F1 (zz * y);
@c ===end===
@example
(%i1) F1 (100 * x);
(%o1)                       F1(100 x)
(%i2) declare (F1, outative);
(%o2)                         done
(%i3) F1 (100 * x);
(%o3)                       100 F1(x)
(%i4) declare (zz, constant);
(%o4)                         done
(%i5) F1 (zz * y);
(%o5)                       zz F1(y)
@end example

@code{multiplicative} declaration.
@c ===beg===
@c F2 (a * b * c);
@c declare (F2, multiplicative);
@c F2 (a * b * c);
@c ===end===
@example
(%i1) F2 (a * b * c);
(%o1)                       F2(a b c)
(%i2) declare (F2, multiplicative);
(%o2)                         done
(%i3) F2 (a * b * c);
(%o3)                   F2(a) F2(b) F2(c)
@end example

@code{additive} declaration.
@c ===beg===
@c F3 (a + b + c);
@c declare (F3, additive);
@c F3 (a + b + c);
@c ===end===
@example
(%i1) F3 (a + b + c);
(%o1)                     F3(c + b + a)
(%i2) declare (F3, additive);
(%o2)                         done
(%i3) F3 (a + b + c);
(%o3)                 F3(c) + F3(b) + F3(a)
@end example

@code{linear} declaration.
@c ===beg===
@c 'sum (F(k) + G(k), k, 1, inf);
@c declare (nounify (sum), linear);
@c 'sum (F(k) + G(k), k, 1, inf);
@c ===end===
@example
(%i1) 'sum (F(k) + G(k), k, 1, inf);
                       inf
                       ====
                       \
(%o1)                   >    (G(k) + F(k))
                       /
                       ====
                       k = 1
(%i2) declare (nounify (sum), linear);
(%o2)                         done
(%i3) 'sum (F(k) + G(k), k, 1, inf);
                     inf          inf
                     ====         ====
                     \            \
(%o3)                 >    G(k) +  >    F(k)
                     /            /
                     ====         ====
                     k = 1        k = 1
@end example

@opencatbox
@category{Declarations and inferences}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} disolate (@var{expr}, @var{x_1}, ..., @var{x_n})
is similar to @code{isolate (@var{expr}, @var{x})}
except that it enables the user to isolate
more than one variable simultaneously.  This might be useful, for
example, if one were attempting to change variables in a multiple
integration, and that variable change involved two or more of the
integration variables.  This function is autoloaded from
@file{simplification/disol.mac}.  A demo is available by
@code{demo("disol")$}.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@deffn {Function} dispform (@var{expr})
@deffnx {Function} dispform (@var{expr}, all)
Returns the external representation of @var{expr}.

@code{dispform(@var{expr})} returns the external representation
with respect to the main (top-level) operator.
@code{dispform(@var{expr}, all)} returns the external representation
with respect to all operators in @var{expr}.

See also @code{part}, @code{inpart}, and @code{inflag}.

Examples:

The internal representation of @code{- x} is "negative one times @code{x}"
while the external representation is "minus @code{x}".

@c ===beg===
@c - x;
@c ?format (true, "~S~%", %);
@c dispform (- x);
@c ?format (true, "~S~%", %);
@c ===end===
@example
(%i1) - x;
(%o1)                          - x
(%i2) ?format (true, "~S~%", %);
((MTIMES SIMP) -1 $X)
(%o2)                         false
(%i3) dispform (- x);
(%o3)                          - x
(%i4) ?format (true, "~S~%", %);
((MMINUS SIMP) $X)
(%o4)                         false
@end example

The internal representation of @code{sqrt(x)} is "@code{x} to the power 1/2"
while the external representation is "square root of @code{x}".

@c ===beg===
@c sqrt (x);
@c ?format (true, "~S~%", %);
@c dispform (sqrt (x));
@c ?format (true, "~S~%", %);
@c ===end===
@example
(%i1) sqrt (x);
(%o1)                        sqrt(x)
(%i2) ?format (true, "~S~%", %);
((MEXPT SIMP) $X ((RAT SIMP) 1 2))
(%o2)                         false
(%i3) dispform (sqrt (x));
(%o3)                        sqrt(x)
(%i4) ?format (true, "~S~%", %);
((%SQRT SIMP) $X)
(%o4)                         false
@end example

Use of the optional argument @code{all}.

@c ===beg===
@c expr : sin (sqrt (x));
@c freeof (sqrt, expr);
@c freeof (sqrt, dispform (expr));
@c freeof (sqrt, dispform (expr, all));
@c ===end===
@example
(%i1) expr : sin (sqrt (x));
(%o1)                     sin(sqrt(x))
(%i2) freeof (sqrt, expr);
(%o2)                         true
(%i3) freeof (sqrt, dispform (expr));
(%o3)                         true
(%i4) freeof (sqrt, dispform (expr, all));
(%o4)                         false
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} distrib (@var{expr})
Distributes sums over products.  It differs from @code{expand}
in that it works at only the top level of an expression, i.e., it doesn't
recurse and it is faster than @code{expand}.  It differs from @code{multthru} in
that it expands all sums at that level.

Examples:

@example
(%i1) distrib ((a+b) * (c+d));
(%o1)                 b d + a d + b c + a c
(%i2) multthru ((a+b) * (c+d));
(%o2)                 (b + a) d + (b + a) c
(%i3) distrib (1/((a+b) * (c+d)));
                                1
(%o3)                    ---------------
                         (b + a) (d + c)
(%i4) expand (1/((a+b) * (c+d)), 1, 0);
                                1
(%o4)                 ---------------------
                      b d + a d + b c + a c
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} dpart (@var{expr}, @var{n_1}, ..., @var{n_k})
Selects the same subexpression as @code{part}, but
instead of just returning that subexpression as its value, it returns
the whole expression with the selected subexpression displayed inside
a box.  The box is actually part of the expression.

@example
(%i1) dpart (x+y/z^2, 1, 2, 1);
                             y
(%o1)                       ---- + x
                               2
                            """
                            "z"
                            """
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c PROBABLY MORE TO BE SAID HERE
@deffn {Function} exp (@var{x})
Represents the exponential function.  
Instances of @code{exp (@var{x})} in input are simplified to @code{%e^@var{x}};
@code{exp} does not appear in simplified expressions.

@code{demoivre} if @code{true} causes @code{%e^(a + b %i)} to simplify to
@code{%e^(a (cos(b) + %i sin(b)))} if @code{b} is free of @code{%i}. See @code{demoivre}.

@code{%emode}, when @code{true}, 
causes @code{%e^(%pi %i x)} to be simplified. See @code{%emode}.

@code{%enumer}, when @code{true} causes @code{%e} to be replaced by
2.718...  whenever @code{numer} is @code{true}. See @code{%enumer}.

@c NEED EXAMPLES HERE
@opencatbox
@category{Exponential and logarithm functions}
@closecatbox
@end deffn

@defvr {Option variable} %emode
Default value: @code{true}

When @code{%emode} is @code{true},
@code{%e^(%pi %i x)} is simplified as
follows.

@code{%e^(%pi %i x)} simplifies to @code{cos (%pi x) + %i sin (%pi x)} if @code{x} is a floating point number, an integer, or
a multiple of 1/2, 1/3, 1/4, or 1/6, and then further simplified.

For other numerical @code{x},
@code{%e^(%pi %i x)} simplifies to @code{%e^(%pi %i y)} where @code{y} is @code{x - 2 k}
for some integer @code{k} such that @code{abs(y) < 1}.  

When @code{%emode} is @code{false}, no
special simplification of @code{%e^(%pi %i x)} is carried out.

@c NEED EXAMPLES HERE
@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@defvr {Option variable} %enumer
Default value: @code{false}

When @code{%enumer} is @code{true},
@code{%e} is replaced by its numeric value
2.718...  whenever @code{numer} is @code{true}. 

When @code{%enumer} is @code{false}, this substitution is carried out
only if the exponent in @code{%e^x} evaluates to a number.

See also @code{ev} and @code{numer}.

@c NEED EXAMPLES HERE
@opencatbox
@category{Exponential and logarithm functions} @category{Evaluation flags}
@closecatbox

@end defvr

@defvr {Option variable} exptisolate
Default value: @code{false}

@c WHAT DOES THIS MEAN EXACTLY ??
@code{exptisolate}, when @code{true}, causes @code{isolate (expr, var)} to
examine exponents of atoms (such as @code{%e}) which contain @code{var}.

@c NEED EXAMPLES HERE
@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@defvr {Option variable} exptsubst
Default value: @code{false}

@code{exptsubst}, when @code{true}, permits substitutions such as @code{y}
for @code{%e^x} in @code{%e^(a x)}.

@c NEED EXAMPLES HERE
@opencatbox
@category{Exponential and logarithm functions} @category{Expressions}
@closecatbox

@end defvr

@deffn {Function} freeof (@var{x_1}, ..., @var{x_n}, @var{expr})
@code{freeof (@var{x_1}, @var{expr})}
Returns @code{true}
if no subexpression of @var{expr} is equal to @var{x_1}
or if @var{x_1} occurs only as a dummy variable in @var{expr},
or if @var{x_1} is neither the noun nor verb form of any operator in @var{expr},
and returns @code{false} otherwise.

@code{freeof (@var{x_1}, ..., @var{x_n}, @var{expr})}
is equivalent to @code{freeof (@var{x_1}, @var{expr}) and ... and freeof (@var{x_n}, @var{expr})}.

The arguments @var{x_1}, ..., @var{x_n} 
may be names of functions and variables, subscripted names,
operators (enclosed in double quotes), or general expressions.
@code{freeof} evaluates its arguments.

@code{freeof} operates only on @var{expr} as it stands (after simplification and evaluation) and
does not attempt to determine if some equivalent expression would give a different result.
In particular, simplification may yield an equivalent but different expression which comprises
some different elements than the original form of @var{expr}.

A variable is a dummy variable in an expression if it has no binding outside of the expression.
Dummy variables recognized by @code{freeof} are
the index of a sum or product, the limit variable in @code{limit},
the integration variable in the definite integral form of @code{integrate},
the original variable in @code{laplace},
formal variables in @code{at} expressions,
and arguments in @code{lambda} expressions.
Local variables in @code{block} are not recognized by @code{freeof} as dummy variables;
this is a bug.

The indefinite form of @code{integrate} is @i{not} free of its variable of integration.

@itemize @bullet
@item
Arguments are names of functions, variables, subscripted names, operators, and expressions.
@code{freeof (a, b, expr)} is equivalent to
@code{freeof (a, expr) and freeof (b, expr)}.

@example
(%i1) expr: z^3 * cos (a[1]) * b^(c+d);
                                 d + c  3
(%o1)                   cos(a ) b      z
                             1
(%i2) freeof (z, expr);
(%o2)                         false
(%i3) freeof (cos, expr);
(%o3)                         false
(%i4) freeof (a[1], expr);
(%o4)                         false
(%i5) freeof (cos (a[1]), expr);
(%o5)                         false
(%i6) freeof (b^(c+d), expr);
(%o6)                         false
(%i7) freeof ("^", expr);
(%o7)                         false
(%i8) freeof (w, sin, a[2], sin (a[2]), b*(c+d), expr);
(%o8)                         true
@end example

@item
@code{freeof} evaluates its arguments.

@example
(%i1) expr: (a+b)^5$
(%i2) c: a$
(%i3) freeof (c, expr);
(%o3)                         false
@end example

@item
@code{freeof} does not consider equivalent expressions.
Simplification may yield an equivalent but different expression.

@example
(%i1) expr: (a+b)^5$
(%i2) expand (expr);
          5        4       2  3       3  2      4      5
(%o2)    b  + 5 a b  + 10 a  b  + 10 a  b  + 5 a  b + a
(%i3) freeof (a+b, %);
(%o3)                         true
(%i4) freeof (a+b, expr);
(%o4)                         false
(%i5) exp (x);
                                 x
(%o5)                          %e
(%i6) freeof (exp, exp (x));
(%o6)                         true
@end example

@item A summation or definite integral is free of its dummy variable.
An indefinite integral is not free of its variable of integration.

@example
(%i1) freeof (i, 'sum (f(i), i, 0, n));
(%o1)                         true
(%i2) freeof (x, 'integrate (x^2, x, 0, 1));
(%o2)                         true
(%i3) freeof (x, 'integrate (x^2, x));
(%o3)                         false
@end example
@end itemize

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c IS THIS DEFINITION CORRECT ??
@deffn {Function} genfact (@var{x}, @var{y}, @var{z})
Returns the generalized factorial, defined as
@code{x (x-z) (x - 2 z) ... (x - (y - 1) z)}.  Thus, for integral @var{x},
@code{genfact (x, x, 1) = x!} and @code{genfact (x, x/2, 2) = x!!}.

@opencatbox
@category{Gamma and factorial functions}
@closecatbox
@end deffn

@deffn {Function} imagpart (@var{expr})
Returns the imaginary part of the expression @var{expr}.

@code{imagpart} is a computational function,
not a simplifying function.
@c PROBABLY NEED TO EXPLAIN IMPLICATIONS OF ABOVE STATEMENT
@c SEE ALSO SF BUG REPORT # 902290

See also @code{abs}, @code{carg}, @code{polarform}, @code{rectform},
and @code{realpart}.

@c NEED EXAMPLES HERE
@opencatbox
@category{Complex variables}
@closecatbox
@end deffn

@deffn {Function} infix (@var{op})
@deffnx {Function} infix (@var{op}, @var{lbp}, @var{rbp})
@deffnx {Function} infix (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})
Declares @var{op} to be an infix operator.
An infix operator is a function of two arguments,
with the name of the function written between the arguments.
For example, the subtraction operator @code{-} is an infix operator.

@code{infix (@var{op})} declares @var{op} to be an infix operator
with default binding powers (left and right both equal to 180)
and parts of speech (left and right both equal to @code{any}).
@c HOW IS pos DIFFERENT FROM lpos AND rpos ??

@code{infix (@var{op}, @var{lbp}, @var{rbp})} declares @var{op} to be an infix operator
with stated left and right binding powers
and default parts of speech (left and right both equal to @code{any}).

@code{infix (@var{op}, @var{lbp}, @var{rbp}, @var{lpos}, @var{rpos}, @var{pos})}
declares @var{op} to be an infix operator
with stated left and right binding powers
and parts of speech @var{lpos}, @var{rpos}, and @var{pos}
for the left operand, the right operand, and the operator result, respectively.

"Part of speech", in reference to operator declarations, means expression type.
Three types are recognized: @code{expr}, @code{clause}, and @code{any},
indicating an algebraic expression, a Boolean expression, or any kind of expression,
respectively.
Maxima can detect some syntax errors by comparing the
declared part of speech to an actual expression.

The precedence of @var{op} with respect to other operators
derives from the left and right binding powers of the operators in question.
If the left and right binding powers of @var{op} are both greater
the left and right binding powers of some other operator,
then @var{op} takes precedence over the other operator.
If the binding powers are not both greater or less,
some more complicated relation holds.

The associativity of @var{op} depends on its binding powers.
Greater left binding power (@var{lbp}) implies an instance of
@var{op} is evaluated before other operators to its left in an expression,
while greater right binding power (@var{rbp}) implies  an instance of
@var{op} is evaluated before other operators to its right in an expression.
Thus greater @var{lbp} makes @var{op} right-associative,
while greater @var{rbp} makes @var{op} left-associative.
If @var{lbp} is equal to @var{rbp}, @var{op} is left-associative.

See also @code{Syntax}.

Examples:

If the left and right binding powers of @var{op} are both greater
the left and right binding powers of some other operator,
then @var{op} takes precedence over the other operator.

@c ===beg===
@c :lisp (get '$+ 'lbp)
@c :lisp (get '$+ 'rbp)
@c infix ("##", 101, 101);
@c "##"(a, b) := sconcat("(", a, ",", b, ")");
@c 1 + a ## b + 2;
@c infix ("##", 99, 99);
@c 1 + a ## b + 2;
@c ===end===
@example
(%i1) :lisp (get '$+ 'lbp)
100
(%i1) :lisp (get '$+ 'rbp)
100
(%i1) infix ("##", 101, 101);
(%o1)                          ##
(%i2) "##"(a, b) := sconcat("(", a, ",", b, ")");
(%o2)       (a ## b) := sconcat("(", a, ",", b, ")")
(%i3) 1 + a ## b + 2;
(%o3)                       (a,b) + 3
(%i4) infix ("##", 99, 99);
(%o4)                          ##
(%i5) 1 + a ## b + 2;
(%o5)                       (a+1,b+2)
@end example

Greater @var{lbp} makes @var{op} right-associative,
while greater @var{rbp} makes @var{op} left-associative.

@c ===beg===
@c infix ("##", 100, 99);
@c "##"(a, b) := sconcat("(", a, ",", b, ")")$
@c foo ## bar ## baz;
@c infix ("##", 100, 101);
@c foo ## bar ## baz;
@c ===end===
@example
(%i1) infix ("##", 100, 99);
(%o1)                          ##
(%i2) "##"(a, b) := sconcat("(", a, ",", b, ")")$
(%i3) foo ## bar ## baz;
(%o3)                    (foo,(bar,baz))
(%i4) infix ("##", 100, 101);
(%o4)                          ##
(%i5) foo ## bar ## baz;
(%o5)                    ((foo,bar),baz)
@end example

Maxima can detect some syntax errors by comparing the
declared part of speech to an actual expression.

@c ===beg===
@c infix ("##", 100, 99, expr, expr, expr);
@c if x ## y then 1 else 0;
@c infix ("##", 100, 99, expr, expr, clause);
@c if x ## y then 1 else 0;
@c ===end===
@example
(%i1) infix ("##", 100, 99, expr, expr, expr);
(%o1)                          ##
(%i2) if x ## y then 1 else 0;
Incorrect syntax: Found algebraic expression where logical expression expected
if x ## y then 
             ^
(%i2) infix ("##", 100, 99, expr, expr, clause);
(%o2)                          ##
(%i3) if x ## y then 1 else 0;
(%o3)                if x ## y then 1 else 0
@end example

@opencatbox
@category{Operators} @category{Declarations and inferences} @category{Syntax}
@closecatbox

@end deffn

@defvr {Option variable} inflag
Default value: @code{false}

When @code{inflag} is @code{true}, functions for part
extraction inspect the internal form of @code{expr}.

Note that the simplifier re-orders expressions.
Thus @code{first (x + y)} returns @code{x} if @code{inflag}
is @code{true} and @code{y} if @code{inflag} is @code{false}.
(@code{first (y + x)} gives the same results.)

Also, setting @code{inflag} to @code{true} and calling @code{part} or @code{substpart} is
the same as calling @code{inpart} or @code{substinpart}.

Functions affected by the setting of @code{inflag} are:
@code{part}, @code{substpart}, @code{first}, @code{rest}, @code{last}, @code{length},
the @code{for} ... @code{in} construct,
@code{map}, @code{fullmap}, @code{maplist}, @code{reveal} and @code{pickapart}.

@c NEED EXAMPLES HERE
@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@c NEEDS WORK
@deffn {Function} inpart (@var{expr}, @var{n_1}, ..., @var{n_k})
is similar to @code{part} but works on the internal
representation of the expression rather than the displayed form and
thus may be faster since no formatting is done.  Care should be taken
with respect to the order of subexpressions in sums and products
(since the order of variables in the internal form is often different
from that in the displayed form) and in dealing with unary minus,
subtraction, and division (since these operators are removed from the
expression). @code{part (x+y, 0)} or @code{inpart (x+y, 0)} yield @code{+}, though in order to
refer to the operator it must be enclosed in "s.  For example
@code{... if inpart (%o9,0) = "+" then ...}.

Examples:

@example
(%i1) x + y + w*z;
(%o1)                      w z + y + x
(%i2) inpart (%, 3, 2);
(%o2)                           z
(%i3) part (%th (2), 1, 2);
(%o3)                           z
(%i4) 'limit (f(x)^g(x+1), x, 0, minus);
                                  g(x + 1)
(%o4)                 limit   f(x)
                      x -> 0-
(%i5) inpart (%, 1, 2);
(%o5)                       g(x + 1)
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} isolate (@var{expr}, @var{x})
Returns @var{expr} with subexpressions which are sums and
which do not contain @var{var} replaced by intermediate expression labels
(these being atomic symbols like @code{%t1}, @code{%t2}, ...).  This is often useful
to avoid unnecessary expansion of subexpressions which don't contain
the variable of interest.  Since the intermediate labels are bound to
the subexpressions they can all be substituted back by evaluating the
expression in which they occur.

@code{exptisolate} (default value: @code{false}) if @code{true} will cause @code{isolate} to examine exponents of
atoms (like @code{%e}) which contain @var{var}.

@code{isolate_wrt_times} if @code{true}, then @code{isolate} will also isolate with respect to
products. See @code{isolate_wrt_times}.

Do @code{example (isolate)} for examples.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@defvr {Option variable} isolate_wrt_times
Default value: @code{false}

When @code{isolate_wrt_times} is @code{true}, @code{isolate}
will also isolate with respect to products.  E.g. compare both settings of the
switch on

@example
(%i1) isolate_wrt_times: true$
(%i2) isolate (expand ((a+b+c)^2), c);

(%t2)                          2 a


(%t3)                          2 b


                          2            2
(%t4)                    b  + 2 a b + a

                     2
(%o4)               c  + %t3 c + %t2 c + %t4
(%i4) isolate_wrt_times: false$
(%i5) isolate (expand ((a+b+c)^2), c);
                     2
(%o5)               c  + 2 b c + 2 a c + %t4
@end example

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@c NEEDS EXAMPLES
@defvr {Option variable} listconstvars
Default value: @code{false}

When @code{listconstvars} is @code{true}, it will cause @code{listofvars} to
include @code{%e}, @code{%pi}, @code{%i}, and any variables declared constant in the list
it returns if they appear in the expression @code{listofvars} is called on.
The default is to omit these.

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@defvr {Option variable} listdummyvars
Default value: @code{true}

When @code{listdummyvars} is @code{false}, "dummy variables" in the
expression will not be included in the list returned by @code{listofvars}.
(The meaning of "dummy variables" is as given in @code{freeof}.
"Dummy variables" are mathematical things like the index of a sum or
product, the limit variable, and the definite integration variable.)
Example:

@example
(%i1) listdummyvars: true$
(%i2) listofvars ('sum(f(i), i, 0, n));
(%o2)                        [i, n]
(%i3) listdummyvars: false$
(%i4) listofvars ('sum(f(i), i, 0, n));
(%o4)                          [n]
@end example

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@c NEEDS WORK
@deffn {Function} listofvars (@var{expr})
Returns a list of the variables in @var{expr}.

@code{listconstvars} if @code{true} causes @code{listofvars} to include @code{%e}, @code{%pi},
@code{%i}, and any variables declared constant in the list it returns if they
appear in @var{expr}.  The default is to omit these.

@example
(%i1) listofvars (f (x[1]+y) / g^(2+a));
(%o1)                     [g, a, x , y]
                                  1
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} lfreeof (@var{list}, @var{expr})
For each member @var{m} of @var{list}, calls @code{freeof (@var{m}, @var{expr})}.
It returns @code{false} if any call to @code{freeof} does and @code{true} otherwise.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@deffn {Function} lopow (@var{expr}, @var{x})
Returns the lowest exponent of @var{x} which explicitly appears in
@var{expr}.  Thus

@example
(%i1) lopow ((x+y)^2 + (x+y)^a, x+y);
(%o1)                       min(a, 2)
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} lpart (@var{label}, @var{expr}, @var{n_1}, ..., @var{n_k})
is similar to @code{dpart} but uses a
labelled box. A labelled box is similar to the one produced by @code{dpart}
but it has a name in the top line.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} multthru (@var{expr})
@deffnx {Function} multthru (@var{expr_1}, @var{expr_2})
Multiplies a factor (which should be a sum) of @var{expr} by
the other factors of @var{expr}.  That is, @var{expr} is @code{@var{f_1} @var{f_2} ... @var{f_n}}
where at least
one factor, say @var{f_i}, is a sum of terms.  Each term in that sum is
multiplied by the other factors in the product.  (Namely all the
factors except @var{f_i}).  @code{multthru} does not expand exponentiated sums.
This function is the fastest way to distribute products (commutative
or noncommutative) over sums.  Since quotients are represented as
products @code{multthru} can be used to divide sums by products as well.

@code{multthru (@var{expr_1}, @var{expr_2})} multiplies each term in @var{expr_2} (which should be a
sum or an equation) by @var{expr_1}.  If @var{expr_1} is not itself a sum then this
form is equivalent to @code{multthru (@var{expr_1}*@var{expr_2})}.

@example
(%i1) x/(x-y)^2 - 1/(x-y) - f(x)/(x-y)^3;
                      1        x         f(x)
(%o1)             - ----- + -------- - --------
                    x - y          2          3
                            (x - y)    (x - y)
(%i2) multthru ((x-y)^3, %);
                           2
(%o2)             - (x - y)  + x (x - y) - f(x)
(%i3) ratexpand (%);
                           2
(%o3)                   - y  + x y - f(x)
(%i4) ((a+b)^10*s^2 + 2*a*b*s + (a*b)^2)/(a*b*s^2);
                        10  2              2  2
                 (b + a)   s  + 2 a b s + a  b
(%o4)            ------------------------------
                                  2
                             a b s
(%i5) multthru (%);  /* note that this does not expand (b+a)^10 */
                                        10
                       2   a b   (b + a)
(%o5)                  - + --- + ---------
                       s    2       a b
                           s
(%i6) multthru (a.(b+c.(d+e)+f));
(%o6)            a . f + a . c . (e + d) + a . b
(%i7) expand (a.(b+c.(d+e)+f));
(%o7)         a . f + a . c . e + a . c . d + a . b
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} nounify (@var{f})
Returns the noun form of the function name @var{f}.  This is
needed if one wishes to refer to the name of a verb function as if it
were a noun.  Note that some verb functions will return their noun
forms if they can't be evaluated for certain arguments.  This is also
the form returned if a function call is preceded by a quote.

@opencatbox
@category{Nouns and verbs}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} nterms (@var{expr})
Returns the number of terms that @var{expr} would have if it were
fully expanded out and no cancellations or combination of terms
occurred.
Note that expressions like @code{sin (@var{expr})}, @code{sqrt (@var{expr})}, @code{exp (@var{expr})}, etc.
count as just one term regardless of how many terms @var{expr} has (if it is a
sum).

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} op (@var{expr})
Returns the main operator of the expression @var{expr}.
@code{op (@var{expr})} is equivalent to @code{part (@var{expr}, 0)}. 

@code{op} returns a string if the main operator is
a built-in or user-defined
prefix, binary or n-ary infix, postfix, matchfix, or nofix operator.
Otherwise, if @var{expr} is a subscripted function expression,
@code{op} returns the subscripted function;
in this case the return value is not an atom.
Otherwise, @var{expr} is an array function or ordinary function expression,
and @code{op} returns a symbol.

@code{op} observes the value of the global flag @code{inflag}.

@code{op} evaluates it argument.

See also @code{args}.

Examples:

@c ===beg===
@c stringdisp: true$
@c op (a * b * c);
@c op (a * b + c);
@c op ('sin (a + b));
@c op (a!);
@c op (-a);
@c op ([a, b, c]);
@c op ('(if a > b then c else d));
@c op ('foo (a));
@c prefix (foo);
@c op (foo a);
@c op (F [x, y] (a, b, c));
@c op (G [u, v, w]);
@c ===end===

@example
(%i1) stringdisp: true$
(%i2) op (a * b * c);
(%o2)                          "*"
(%i3) op (a * b + c);
(%o3)                          "+"
(%i4) op ('sin (a + b));
(%o4)                          sin
(%i5) op (a!);
(%o5)                          "!"
(%i6) op (-a);
(%o6)                          "-"
(%i7) op ([a, b, c]);
(%o7)                          "["
(%i8) op ('(if a > b then c else d));
(%o8)                         "if"
(%i9) op ('foo (a));
(%o9)                          foo
(%i10) prefix (foo);
(%o10)                        "foo"
(%i11) op (foo a);
(%o11)                        "foo"
(%i12) op (F [x, y] (a, b, c));
(%o12)                        F
                               x, y
(%i13) op (G [u, v, w]);
(%o13)                          G
@end example

@opencatbox
@category{Expressions} @category{Operators}
@closecatbox

@end deffn

@c NEEDS WORK
@deffn {Function} operatorp (@var{expr}, @var{op})
@deffnx {Function} operatorp (@var{expr}, [@var{op_1}, ..., @var{op_n}])

@code{operatorp (@var{expr}, @var{op})} returns @code{true}
if @var{op} is equal to the operator of @var{expr}.

@code{operatorp (@var{expr}, [@var{op_1}, ..., @var{op_n}])} returns @code{true}
if some element @var{op_1}, ..., @var{op_n} is equal to the operator of @var{expr}.

@opencatbox
@category{Operators} @category{Predicate functions}
@closecatbox

@end deffn

@c NEEDS WORK
@deffn {Function} optimize (@var{expr})
Returns an expression that produces the same value and
side effects as @var{expr} but does so more efficiently by avoiding the
recomputation of common subexpressions.  @code{optimize} also has the side
effect of "collapsing" its argument so that all common subexpressions
are shared.
Do @code{example (optimize)} for examples.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@defvr {Option variable} optimprefix
Default value: @code{%}

@code{optimprefix} is the prefix used for generated symbols by
the @code{optimize} command.

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@deffn {Function} ordergreat (@var{v_1}, ..., @var{v_n})
@deffnx {Function} orderless (@var{v_1}, ..., @var{v_n})

@code{ordergreat} changes the canonical ordering of Maxima expressions
such that @var{v_1} succeeds @var{v_2} succeeds ...  succeeds @var{v_n},
and @var{v_n} succeeds any other symbol not mentioned as an argument.

@code{orderless} changes the canonical ordering of Maxima expressions
such that @var{v_1} precedes @var{v_2} precedes ...  precedes @var{v_n},
and @var{v_n} precedes any other variable not mentioned as an argument.

The order established by @code{ordergreat} and @code{orderless} is dissolved by @code{unorder}.
@code{ordergreat} and @code{orderless} can be called only once each,
unless @code{unorder} is called;
only the last call to @code{ordergreat} and @code{orderless} has any effect.

See also @code{ordergreatp}.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@deffn {Function} ordergreatp (@var{expr_1}, @var{expr_2})
@deffnx {Function} orderlessp (@var{expr_1}, @var{expr_2})

@code{ordergreatp} returns @code{true} if @var{expr_1} succeeds @var{expr_2} in the
canonical ordering of Maxima expressions,
and @code{false} otherwise.

@code{orderlessp} returns @code{true} if @var{expr_1} precedes @var{expr_2} in the
canonical ordering of Maxima expressions,
and @code{false} otherwise.

All Maxima atoms and expressions are comparable under @code{ordergreatp} and @code{orderlessp},
although there are isolated examples of expressions for which these predicates are not transitive;
that is a bug.

The canonical ordering of atoms (symbols, literal numbers, and strings) is the following.

(integers and floats) precede (bigfloats) precede
(declared constants) precede (strings) precede (declared scalars)
precede (first argument to @code{orderless}) precedes ...  precedes
(last argument to @code{orderless}) precedes (other symbols) precede
(last argument to @code{ordergreat}) precedes ... precedes
(first argument to @code{ordergreat}) precedes (declared main variables)

For non-atomic expressions, the canonical ordering is derived from the ordering for atoms.
For the built-in @code{+} @code{*} and @code{^} operators,
the ordering is not easily summarized.
For other built-in operators and all other functions and operators,
expressions are ordered by their arguments (beginning with the first argument),
then by the name of the operator or function.
In the case of subscripted expressions,
the subscripted symbol is considered the operator and the subscript is considered an argument.

The canonical ordering of expressions is modified by the functions
@code{ordergreat} and @code{orderless},
and the @code{mainvar}, @code{constant}, and @code{scalar} declarations.

See also @code{sort}.

Examples:

Ordering ordinary symbols and constants.
Note that @code{%pi} is not ordered according to its numerical value.

@c ===beg===
@c stringdisp : true;
@c sort ([%pi, 3b0, 3.0, x, X, "foo", 3, a, 4, "bar", 4.0, 4b0]);
@c ===end===
@example
(%i1) stringdisp : true;
(%o1)                         true
(%i2) sort ([%pi, 3b0, 3.0, x, X, "foo", 3, a, 4, "bar", 4.0, 4b0]);
(%o2) [3, 3.0, 4, 4.0, 3.0b0, 4.0b0, %pi, "bar", "foo", a, x, X]
@end example

Effect of @code{ordergreat} and @code{orderless} functions.

@c ===beg===
@c sort ([M, H, K, T, E, W, G, A, P, J, S]);
@c ordergreat (S, J);
@c orderless (M, H);
@c sort ([M, H, K, T, E, W, G, A, P, J, S]);
@c ===end===
@example
(%i1) sort ([M, H, K, T, E, W, G, A, P, J, S]);
(%o1)           [A, E, G, H, J, K, M, P, S, T, W]
(%i2) ordergreat (S, J);
(%o2)                         done
(%i3) orderless (M, H);
(%o3)                         done
(%i4) sort ([M, H, K, T, E, W, G, A, P, J, S]);
(%o4)           [M, H, A, E, G, K, P, T, W, J, S]
@end example

Effect of @code{mainvar}, @code{constant}, and @code{scalar} declarations.

@c ===beg===
@c sort ([aa, foo, bar, bb, baz, quux, cc, dd, A1, B1, C1]);
@c declare (aa, mainvar);
@c declare ([baz, quux], constant);
@c declare ([A1, B1], scalar);
@c sort ([aa, foo, bar, bb, baz, quux, cc, dd, A1, B1, C1]);
@c ===end===
@example
(%i1) sort ([aa, foo, bar, bb, baz, quux, cc, dd, A1, B1, C1]);
(%o1)   [aa, bar, baz, bb, cc, dd, foo, quux, A1, B1, C1]
(%i2) declare (aa, mainvar);
(%o2)                         done
(%i3) declare ([baz, quux], constant);
(%o3)                         done
(%i4) declare ([A1, B1], scalar);
(%o4)                         done
(%i5) sort ([aa, foo, bar, bb, baz, quux, cc, dd, A1, B1, C1]);
(%o5)   [baz, quux, A1, B1, bar, bb, cc, dd, foo, C1, aa]
@end example

Ordering non-atomic expressions.

@c ===beg===
@c sort ([1, 2, n, f(1), f(2), f(2, 1), g(1), g(1, 2), g(n), f(n, 1)]);
@c sort ([foo(1), X[1], X[k], foo(k), 1, k]);
@c ===end===
@example
(%i1) sort ([1, 2, n, f(1), f(2), f(2, 1), g(1), g(1, 2), g(n), f(n, 1)]);
(%o1) [1, 2, f(1), g(1), g(1, 2), f(2), f(2, 1), n, g(n), 
                                                         f(n, 1)]
(%i2) sort ([foo(1), X[1], X[k], foo(k), 1, k]);
(%o2)            [1, foo(1), X , k, foo(k), X ]
                              1              k
@end example

@opencatbox
@category{Expressions} @category{Predicate functions}
@closecatbox
@end deffn

@c NEEDS WORK
@c -----------------------------------------------------------------------------
@deffn {Function} part (@var{expr}, @var{n_1}, ..., @var{n_k})
Returns parts of the displayed form of @code{expr}. It obtains the part of 
@code{expr} as specified by the indices @var{n_1}, ..., @var{n_k}.  First part 
@var{n_1} of @code{expr} is obtained, then part @var{n_2} of that, etc. The 
result is part @var{n_k} of ... part @var{n_2} of part @var{n_1} of @code{expr}.
If no indices are specified @code{expr} is returned.

@code{part} can be used to obtain an element of a list, a row of a matrix, etc.

@c "If the last argument to a part function" => FOLLOWING APPLIES TO OTHER FUNCTIONS ??
@c ATTEMPT TO VERIFY; IF SO, COPY THIS COMMENTARY TO DESCRIPTIONS OF OTHER FUNCTIONS
If the last argument to a @code{part} function is a list of indices then
several subexpressions are picked out, each one corresponding to an
index of the list.  Thus @code{part (x + y + z, [1, 3])} is @code{z+x}.

@code{piece} holds the last expression selected when using the @code{part}
functions.  It is set during the execution of the function and thus
may be referred to in the function itself as shown below.

If @code{partswitch} is set to @code{true} then @code{end} is returned when a
selected part of an expression doesn't exist, otherwise an error
message is given.

See also @code{inpart}, @code{substpart}, @code{substinpart}, @code{dpart}, and 
@code{lpart}.

Examples:

@c ===beg===
@c part(z+2*y+a,2);
@c part(z+2*y+a,[1,3]);
@c part(z+2*y+a,2,1);
@c ===end===
@example
(%i1) part(z+2*y+a,2);
(%o1)                                 2 y
(%i2) part(z+2*y+a,[1,3]);
(%o2)                                z + a
(%i3) part(z+2*y+a,2,1);
(%o3)                                  2
@end example

@code{example (part)} displays additional examples.

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@deffn {Function} partition (@var{expr}, @var{x})
Returns a list of two expressions.  They are (1)
the factors of @var{expr} (if it is a product), the terms of @var{expr} (if it is a
sum), or the list (if it is a list) which don't contain @var{x} and, (2)
the factors, terms, or list which do.

@example
(%i1) partition (2*a*x*f(x), x);
(%o1)                     [2 a, x f(x)]
(%i2) partition (a+b, x);
(%o2)                      [b + a, 0]
(%i3) partition ([a, b, f(a), c], a); 
(%o3)                  [[b, c], [a, f(a)]]
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS EXAMPLE
@defvr {Option variable} partswitch
Default value: @code{false}

When @code{partswitch} is @code{true}, @code{end} is returned
when a selected part of an expression doesn't exist, otherwise an
error message is given.

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@deffn {Function} pickapart (@var{expr}, @var{n})
Assigns intermediate expression labels to subexpressions of
@var{expr} at depth @var{n}, an integer.
Subexpressions at greater or lesser depths are not assigned labels.
@code{pickapart} returns an expression in terms of intermediate expressions
equivalent to the original expression @var{expr}.

See also @code{part}, @code{dpart}, @code{lpart}, @code{inpart}, and @code{reveal}.

Examples:

@example
(%i1) expr: (a+b)/2 + sin (x^2)/3 - log (1 + sqrt(x+1));
                                          2
                                     sin(x )   b + a
(%o1)       - log(sqrt(x + 1) + 1) + ------- + -----
                                        3        2
(%i2) pickapart (expr, 0);

                                          2
                                     sin(x )   b + a
(%t2)       - log(sqrt(x + 1) + 1) + ------- + -----
                                        3        2

(%o2)                          %t2
(%i3) pickapart (expr, 1);

(%t3)                - log(sqrt(x + 1) + 1)


                                  2
                             sin(x )
(%t4)                        -------
                                3


                              b + a
(%t5)                         -----
                                2

(%o5)                    %t5 + %t4 + %t3
(%i5) pickapart (expr, 2);

(%t6)                 log(sqrt(x + 1) + 1)


                                  2
(%t7)                        sin(x )


(%t8)                         b + a

                         %t8   %t7
(%o8)                    --- + --- - %t6
                          2     3
(%i8) pickapart (expr, 3);

(%t9)                    sqrt(x + 1) + 1


                                2
(%t10)                         x

                  b + a              sin(%t10)
(%o10)            ----- - log(%t9) + ---------
                    2                    3
(%i10) pickapart (expr, 4);

(%t11)                     sqrt(x + 1)

                      2
                 sin(x )   b + a
(%o11)           ------- + ----- - log(%t11 + 1)
                    3        2
(%i11) pickapart (expr, 5);

(%t12)                        x + 1

                   2
              sin(x )   b + a
(%o12)        ------- + ----- - log(sqrt(%t12) + 1)
                 3        2
(%i12) pickapart (expr, 6);
                  2
             sin(x )   b + a
(%o12)       ------- + ----- - log(sqrt(x + 1) + 1)
                3        2
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@c NEEDS WORK
@defvr {System variable} piece
Holds the last expression selected when using the @code{part}
functions.
@c WHAT DOES THIS MEAN EXACTLY ??
It is set during the execution of the function and thus
may be referred to in the function itself.

@c NEED "SEE ALSO" TO POINT TO LIST OF ALL RELEVANT FUNCTIONS

@opencatbox
@category{Expressions}
@closecatbox

@end defvr

@c NEEDS EXAMPLES
@deffn {Function} polarform (@var{expr})
Returns an expression @code{r %e^(%i theta)} equivalent to @var{expr},
such that @code{r} and @code{theta} are purely real.

@opencatbox
@category{Complex variables} @category{Exponential and logarithm functions}
@closecatbox
@end deffn

@c ISN'T THERE AN EQUIVALENT FUNCTION SOMEWHERE ??
@c NEEDS WORK (IF KEPT)
@deffn {Function} powers (@var{expr}, @var{x})
Gives the powers of @var{x} occuring in @var{expr}.

@code{load (powers)} loads this function.
@c HMM, THERE'S A BUNCH OF MAXIMA FUNCTIONS IN src/powers.lisp ...
@c FOR SOME REASON src/powers.lisp IS NOT PART OF THE USUAL BUILD -- STRANGE

@c HERE IS THE TEXT FROM archive/share/unknown/powers.usg -- MERGE !!!
@c THIS FUNCTION IS A GENERALISATION OF "HIPOW" AND "LOPOW"
@c IN THAT IT RETURNS A LIST OF ALL THE POWERS OF VAR OCCURING
@c IN EXPR. IT IS STILL NECESSARY TO EXPAND EXPR BEFORE APPLYING
@c POWERS (ON PAIN OF GETTING THE WRONG ANSWER).
@c 
@c THIS FUNCTION HAS MANY USES, E.G. IF YOU WANT TO FIND ALL
@c THE COEFFICIENTS OF X IN A POLYNOMIAL POLY YOU CAN USE
@c MAP(LAMBDA([POW],COEFF(POLY,X,POW)),POWERS(POLY,X));
@c AND MANY OTHER SIMILAR USEFUL HACKS.

@opencatbox
@category{Expressions} @category{Polynomials}
@closecatbox
@end deffn

@deffn {Function} product (@var{expr}, @var{i}, @var{i_0}, @var{i_1})
Represents a product of the values of @var{expr} as
the index @var{i} varies from @var{i_0} to @var{i_1}.
The noun form @code{'product} is displayed as an uppercase letter pi.

@code{product} evaluates @var{expr} and lower and upper limits @var{i_0} and @var{i_1},
@code{product} quotes (does not evaluate) the index @var{i}.

If the upper and lower limits differ by an integer,
@var{expr} is evaluated for each value of the index @var{i},
and the result is an explicit product.

Otherwise, the range of the index is indefinite.
Some rules are applied to simplify the product.
When the global variable @code{simpproduct} is @code{true}, additional rules are applied.
In some cases, simplification yields a result which is not a product;
otherwise, the result is a noun form @code{'product}.

See also @code{nouns} and @code{evflag}.

Examples:

@c ===beg===
@c product (x + i*(i+1)/2, i, 1, 4);
@c product (i^2, i, 1, 7);
@c product (a[i], i, 1, 7);
@c product (a(i), i, 1, 7);
@c product (a(i), i, 1, n);
@c product (k, k, 1, n);
@c product (k, k, 1, n), simpproduct;
@c product (integrate (x^k, x, 0, 1), k, 1, n);
@c product (if k <= 5 then a^k else b^k, k, 1, 10);
@c ===end===

@example
(%i1) product (x + i*(i+1)/2, i, 1, 4);
(%o1)           (x + 1) (x + 3) (x + 6) (x + 10)
(%i2) product (i^2, i, 1, 7);
(%o2)                       25401600
(%i3) product (a[i], i, 1, 7);
(%o3)                 a  a  a  a  a  a  a
                       1  2  3  4  5  6  7
(%i4) product (a(i), i, 1, 7);
(%o4)          a(1) a(2) a(3) a(4) a(5) a(6) a(7)
(%i5) product (a(i), i, 1, n);
                             n
                           /===\
                            ! !
(%o5)                       ! !  a(i)
                            ! !
                           i = 1
(%i6) product (k, k, 1, n);
                               n
                             /===\
                              ! !
(%o6)                         ! !  k
                              ! !
                             k = 1
(%i7) product (k, k, 1, n), simpproduct;
(%o7)                          n!
(%i8) product (integrate (x^k, x, 0, 1), k, 1, n);
                             n
                           /===\
                            ! !    1
(%o8)                       ! !  -----
                            ! !  k + 1
                           k = 1
(%i9) product (if k <= 5 then a^k else b^k, k, 1, 10);
                              15  40
(%o9)                        a   b
@end example

@opencatbox
@category{Sums and products}
@closecatbox
@end deffn

@c NEEDS EXAMPLES
@deffn {Function} realpart (@var{expr})
Returns the real part of @var{expr}. @code{realpart} and @code{imagpart} will
work on expressions involving trigonometic and hyperbolic functions,
as well as square root, logarithm, and exponentiation.

@opencatbox
@category{Complex variables}
@closecatbox
@end deffn

@c NEEDS EXAMPLES
@deffn {Function} rectform (@var{expr})
Returns an expression @code{a + b %i} equivalent to @var{expr},
such that @var{a} and @var{b} are purely real.

@opencatbox
@category{Complex variables}
@closecatbox
@end deffn

@deffn {Function} rembox (@var{expr}, unlabelled)
@deffnx {Function} rembox (@var{expr}, @var{label})
@deffnx {Function} rembox (@var{expr})
Removes boxes from @var{expr}.

@code{rembox (@var{expr}, unlabelled)} removes all unlabelled boxes from @var{expr}.

@code{rembox (@var{expr}, @var{label})} removes only boxes bearing @var{label}.

@code{rembox (@var{expr})} removes all boxes, labelled and unlabelled.

Boxes are drawn by the @code{box}, @code{dpart}, and @code{lpart} functions.

Examples:

@c ===beg===
@c expr: (a*d - b*c)/h^2 + sin(%pi*x);
@c dpart (dpart (expr, 1, 1), 2, 2);
@c expr2: lpart (BAR, lpart (FOO, %, 1), 2);
@c rembox (expr2, unlabelled);
@c rembox (expr2, FOO);
@c rembox (expr2, BAR);
@c rembox (expr2);
@c ===end===
@example
(%i1) expr: (a*d - b*c)/h^2 + sin(%pi*x);
                                  a d - b c
(%o1)                sin(%pi x) + ---------
                                      2
                                     h
(%i2) dpart (dpart (expr, 1, 1), 2, 2);
                        """""""    a d - b c
(%o2)               sin("%pi x") + ---------
                        """""""      """"
                                     " 2"
                                     "h "
                                     """"
(%i3) expr2: lpart (BAR, lpart (FOO, %, 1), 2);
                  FOO"""""""""""   BAR""""""""
                  "    """"""" "   "a d - b c"
(%o3)             "sin("%pi x")" + "---------"
                  "    """"""" "   "  """"   "
                  """"""""""""""   "  " 2"   "
                                   "  "h "   "
                                   "  """"   "
                                   """""""""""
(%i4) rembox (expr2, unlabelled);
                                  BAR""""""""
                   FOO"""""""""   "a d - b c"
(%o4)              "sin(%pi x)" + "---------"
                   """"""""""""   "    2    "
                                  "   h     "
                                  """""""""""
(%i5) rembox (expr2, FOO);
                                  BAR""""""""
                       """""""    "a d - b c"
(%o5)              sin("%pi x") + "---------"
                       """""""    "  """"   "
                                  "  " 2"   "
                                  "  "h "   "
                                  "  """"   "
                                  """""""""""
(%i6) rembox (expr2, BAR);
                   FOO"""""""""""
                   "    """"""" "   a d - b c
(%o6)              "sin("%pi x")" + ---------
                   "    """"""" "     """"
                   """"""""""""""     " 2"
                                      "h "
                                      """"
(%i7) rembox (expr2);
                                  a d - b c
(%o7)                sin(%pi x) + ---------
                                      2
                                     h
@end example

@opencatbox
@category{Expressions}
@closecatbox
@end deffn

@deffn {Function} sum (@var{expr}, @var{i}, @var{i_0}, @var{i_1})
Represents a summation of the values of @var{expr} as
the index @var{i} varies from @var{i_0} to @var{i_1}.
The noun form @code{'sum} is displayed as an uppercase letter sigma.

@code{sum} evaluates its summand @var{expr} and lower and upper limits @var{i_0} and @var{i_1},
@code{sum} quotes (does not evaluate) the index @var{i}.

If the upper and lower limits differ by an integer,
the summand @var{expr} is evaluated for each value of the summation index @var{i},
and the result is an explicit sum.

Otherwise, the range of the index is indefinite.
Some rules are applied to simplify the summation.
When the global variable @code{simpsum} is @code{true}, additional rules are applied.
In some cases, simplification yields a result which is not a summation;
otherwise, the result is a noun form @code{'sum}.

When the @code{evflag} (evaluation flag) @code{cauchysum} is @code{true},
a product of summations is expressed as a Cauchy product,
in which the index of the inner summation is a function of the
index of the outer one, rather than varying independently.

The global variable @code{genindex} is the alphabetic prefix used to generate the next index of summation,
when an automatically generated index is needed.

@code{gensumnum} is the numeric suffix used to generate the next index of summation,
when an automatically generated index is needed.
When @code{gensumnum} is @code{false}, an automatically-generated index is only
@code{genindex} with no numeric suffix.

See also @code{sumcontract}, @code{intosum},
@code{bashindices}, @code{niceindices},
@code{nouns}, @code{evflag}, and @code{zeilberger}.

Examples:

@c ===beg===
@c sum (i^2, i, 1, 7);
@c sum (a[i], i, 1, 7);
@c sum (a(i), i, 1, 7);
@c sum (a(i), i, 1, n);
@c sum (2^i + i^2, i, 0, n);
@c sum (2^i + i^2, i, 0, n), simpsum;
@c sum (1/3^i, i, 1, inf);
@c sum (1/3^i, i, 1, inf), simpsum;
@c sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf);
@c sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf), simpsum;
@c sum (integrate (x^k, x, 0, 1), k, 1, n);
@c sum (if k <= 5 then a^k else b^k, k, 1, 10);
@c ===end===

@example
(%i1) sum (i^2, i, 1, 7);
(%o1)                          140
(%i2) sum (a[i], i, 1, 7);
(%o2)           a  + a  + a  + a  + a  + a  + a
                 7    6    5    4    3    2    1
(%i3) sum (a(i), i, 1, 7);
(%o3)    a(7) + a(6) + a(5) + a(4) + a(3) + a(2) + a(1)
(%i4) sum (a(i), i, 1, n);
                            n
                           ====
                           \
(%o4)                       >    a(i)
                           /
                           ====
                           i = 1
(%i5) sum (2^i + i^2, i, 0, n);
                          n
                         ====
                         \       i    2
(%o5)                     >    (2  + i )
                         /
                         ====
                         i = 0
(%i6) sum (2^i + i^2, i, 0, n), simpsum;
                              3      2
                   n + 1   2 n  + 3 n  + n
(%o6)             2      + --------------- - 1
                                  6
(%i7) sum (1/3^i, i, 1, inf);
                            inf
                            ====
                            \     1
(%o7)                        >    --
                            /      i
                            ====  3
                            i = 1
(%i8) sum (1/3^i, i, 1, inf), simpsum;
                                1
(%o8)                           -
                                2
(%i9) sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf);
                              inf
                              ====
                              \     1
(%o9)                      30  >    --
                              /      2
                              ====  i
                              i = 1
(%i10) sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf), simpsum;
                                  2
(%o10)                       5 %pi
(%i11) sum (integrate (x^k, x, 0, 1), k, 1, n);
                            n
                           ====
                           \       1
(%o11)                      >    -----
                           /     k + 1
                           ====
                           k = 1
(%i12) sum (if k <= 5 then a^k else b^k, k, 1, 10);
          10    9    8    7    6    5    4    3    2
(%o12)   b   + b  + b  + b  + b  + a  + a  + a  + a  + a
@end example

@opencatbox
@category{Sums and products}
@closecatbox
@end deffn

@deffn {Function} lsum (@var{expr}, @var{x}, @var{L})
Represents the sum of @var{expr} for each element @var{x} in @var{L}.

A noun form @code{'lsum} is returned
if the argument @var{L} does not evaluate to a list.

Examples:

@c ===beg===
@c lsum (x^i, i, [1, 2, 7]);
@c lsum (i^2, i, rootsof (x^3 - 1));
@c ===end===
@example
(%i1) lsum (x^i, i, [1, 2, 7]);
                            7    2
(%o1)                      x  + x  + x
(%i2) lsum (i^2, i, rootsof (x^3 - 1));
                     ====
                     \      2
(%o2)                 >    i
                     /
                     ====
                                   3
                     i in rootsof(x  - 1)
@end example

@opencatbox
@category{Sums and products}
@closecatbox
@end deffn

@deffn {Function} verbify (@var{f})
Returns the verb form of the function name @var{f}.

See also @code{verb}, @code{noun}, and @code{nounify}.

Examples:

@c ===beg===
@c verbify ('foo);
@c :lisp $%
@c nounify (foo);
@c :lisp $%
@c ===end===
@example
(%i1) verbify ('foo);
(%o1)                          foo
(%i2) :lisp $%
$FOO
(%i2) nounify (foo);
(%o2)                          foo
(%i3) :lisp $%
%FOO
@end example

@opencatbox
@category{Nouns and verbs}
@closecatbox
@end deffn
