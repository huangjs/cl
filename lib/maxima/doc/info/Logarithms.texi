
@menu
* Functions and Variables for Logarithms::
@end menu

@node Functions and Variables for Logarithms,  , Logarithms, Logarithms
@section Functions and Variables for Logarithms

@defvr {Option variable} %e_to_numlog
Default value: @code{false}

When @code{true}, @code{r} some rational number, and
@code{x} some expression, @code{%e^(r*log(x))} will be simplified into @code{x^r} .  It
should be noted that the @code{radcan} command also does this transformation,
and more complicated transformations of this ilk as well.
The @code{logcontract} command "contracts" expressions containing @code{log}.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@deffn {Function} li [@var{s}] (@var{z})
Represents the polylogarithm function of order @var{s} and argument @var{z},
defined by the infinite series

@tex
$${\rm Li}_s \left(z\right) = \sum_{k=1}^\infty {z^k \over k^s}$$
@end tex
@ifnottex
@example
                                 inf
                                 ====   k
                                 \     z
                        Li (z) =  >    --
                          s      /      s
                                 ====  k
                                 k = 1
@end example
@end ifnottex

@code{li [1]} is @code{- log (1 - z)}.
@code{li [2]} and @code{li [3]} are the dilogarithm and trilogarithm functions, respectively.

When the order is 1, the polylogarithm simplifies to @code{- log (1 - z)},
which in turn simplifies to a numerical value
if @var{z} is a real or complex floating point number or the @code{numer} evaluation flag is present.

When the order is 2 or 3,
the polylogarithm simplifies to a numerical value
if @var{z} is a real floating point number
or the @code{numer} evaluation flag is present.

Examples:

@c ===beg===
@c assume (x > 0);
@c integrate ((log (1 - t)) / t, t, 0, x);
@c li [2] (7);
@c li [2] (7), numer;
@c li [3] (7);
@c li [2] (7), numer;
@c L : makelist (i / 4.0, i, 0, 8);
@c map (lambda ([x], li [2] (x)), L);
@c map (lambda ([x], li [3] (x)), L);
@c ===end===
@example
(%i1) assume (x > 0);
(%o1)                        [x > 0]
(%i2) integrate ((log (1 - t)) / t, t, 0, x);
(%o2)                       - li (x)
                                2
(%i3) li [2] (7);
(%o3)                        li (7)
                               2
(%i4) li [2] (7), numer;
(%o4)        1.24827317833392 - 6.113257021832577 %i
(%i5) li [3] (7);
(%o5)                        li (7)
                               3
(%i6) li [2] (7), numer;
(%o6)        1.24827317833392 - 6.113257021832577 %i
(%i7) L : makelist (i / 4.0, i, 0, 8);
(%o7)   [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0]
(%i8) map (lambda ([x], li [2] (x)), L);
(%o8) [0, .2676526384986274, .5822405249432515, 
.9784693966661848, 1.64493407, 2.190177004178597
 - .7010261407036192 %i, 2.374395264042415
 - 1.273806203464065 %i, 2.448686757245154
 - 1.758084846201883 %i, 2.467401098097648
 - 2.177586087815347 %i]
(%i9) map (lambda ([x], li [3] (x)), L);
(%o9) [0, .2584613953442624, 0.537213192678042, 
.8444258046482203, 1.2020569, 1.642866878950322
 - .07821473130035025 %i, 2.060877505514697
 - .2582419849982037 %i, 2.433418896388322
 - .4919260182322965 %i, 2.762071904015935
 - .7546938285978846 %i]
@end example

@opencatbox
@category{Exponential and logarithm functions}
@closecatbox
@end deffn

@deffn {Function} log (@var{x})
Represents the natural (base @math{e}) logarithm of @var{x}.

Maxima does not have a built-in function for the base 10 logarithm or other bases.
@code{log10(x) := log(x) / log(10)} is a useful definition.

Simplification and evaluation of logarithms is governed by several global flags:

@code{logexpand} - causes @code{log(a^b)} to become @code{b*log(a)}.
If it is set to @code{all}, @code{log(a*b)} will also simplify to @code{log(a)+log(b)}.
If it is set to @code{super}, then @code{log(a/b)} will also simplify to @code{log(a)-log(b)} for rational
numbers @code{a/b}, @code{a#1}.  (@code{log(1/b)}, for @code{b} integer, always simplifies.)  If
it is set to @code{false}, all of these simplifications will be turned off.

@code{logsimp} - if @code{false} then no simplification of @code{%e} to a power
containing @code{log}'s is done.

@code{lognumer} - if @code{true} then negative floating point arguments to
@code{log} will always be converted to their absolute value before the @code{log} is
taken.  If @code{numer} is also @code{true}, then negative integer arguments to @code{log}
will also be converted to their absolute value.

@code{lognegint} - if @code{true} implements the rule @code{log(-n)} ->
@code{log(n)+%i*%pi} for @code{n} a positive integer.

@code{%e_to_numlog} - when @code{true}, @code{r} some rational number, and
@code{x} some expression, @code{%e^(r*log(x))} will be simplified into
@code{x^r} .  It should be noted that the @code{radcan} command also
does this transformation, and more complicated transformations of this ilk as well.
The @code{logcontract} command "contracts" expressions containing @code{log}.

@opencatbox
@category{Exponential and logarithm functions}
@closecatbox
@end deffn

@defvr {Option variable} logabs
Default value: @code{false}

When doing indefinite integration where
logs are generated, e.g. @code{integrate(1/x,x)}, the answer is given in
terms of @code{log(abs(...))} if @code{logabs} is @code{true}, but in terms of @code{log(...)} if
@code{logabs} is @code{false}.  For definite integration, the @code{logabs:true} setting is
used, because here "evaluation" of the indefinite integral at the
endpoints is often needed.

@opencatbox
@category{Exponential and logarithm functions} @category{Integral calculus} @category{Global flags}
@closecatbox

@end defvr

@c NEEDS EXAMPLES
@defvr {Option variable} logarc
@defvrx {Function} logarc (@var{expr})

When the global variable @code{logarc} is @code{true},
inverse circular and hyperbolic functions are replaced by
equivalent logarithmic functions.
The default value of @code{logarc} is @code{false}.

The function @code{logarc(@var{expr})} carries out that replacement for
an expression @var{expr}
without setting the global variable @code{logarc}.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables} @category{Simplification functions}
@closecatbox

@end defvr

@defvr {Option variable} logconcoeffp
Default value: @code{false}

Controls which coefficients are
contracted when using @code{logcontract}.  It may be set to the name of a
predicate function of one argument.  E.g. if you like to generate
SQRTs, you can do @code{logconcoeffp:'logconfun$
logconfun(m):=featurep(m,integer) or ratnump(m)$} .  Then
@code{logcontract(1/2*log(x));} will give @code{log(sqrt(x))}.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@deffn {Function} logcontract (@var{expr})
Recursively scans the expression @var{expr}, transforming
subexpressions of the form @code{a1*log(b1) + a2*log(b2) + c} into
@code{log(ratsimp(b1^a1 * b2^a2)) + c}

@c ===beg===
@c 2*(a*log(x) + 2*a*log(y))$
@c logcontract(%);
@c ===end===
@example
(%i1) 2*(a*log(x) + 2*a*log(y))$
(%i2) logcontract(%);
                                 2  4
(%o2)                     a log(x  y )

@end example

If you do @code{declare(n,integer);} then @code{logcontract(2*a*n*log(x));} gives
@code{a*log(x^(2*n))}.  The coefficients that "contract" in this manner are
those such as the 2 and the @code{n} here which satisfy
@code{featurep(coeff,integer)}.  The user can control which coefficients are
contracted by setting the option @code{logconcoeffp} to the name of a
predicate function of one argument.  E.g. if you like to generate
SQRTs, you can do @code{logconcoeffp:'logconfun$
logconfun(m):=featurep(m,integer) or ratnump(m)$} .  Then
@code{logcontract(1/2*log(x));} will give @code{log(sqrt(x))}.

@opencatbox
@category{Exponential and logarithm functions}
@closecatbox
@end deffn

@defvr {Option variable} logexpand
Default value: @code{true}

Causes @code{log(a^b)} to become @code{b*log(a)}.  If
it is set to @code{all}, @code{log(a*b)} will also simplify to @code{log(a)+log(b)}.  If it
is set to @code{super}, then @code{log(a/b)} will also simplify to @code{log(a)-log(b)} for
rational numbers @code{a/b}, @code{a#1}.  (@code{log(1/b)}, for integer @code{b}, always
simplifies.)  If it is set to @code{false}, all of these simplifications will
be turned off.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@defvr {Option variable} lognegint
Default value: @code{false}

If @code{true} implements the rule
@code{log(-n)} -> @code{log(n)+%i*%pi} for @code{n} a positive integer.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@defvr {Option variable} lognumer
Default value: @code{false}

If @code{true} then negative floating point
arguments to @code{log} will always be converted to their absolute value
before the @code{log} is taken.  If @code{numer} is also @code{true}, then negative integer
arguments to @code{log} will also be converted to their absolute value.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables} @category{Numerical evaluation}
@closecatbox

@end defvr

@defvr {Option variable} logsimp
Default value: @code{true}

If @code{false} then no simplification of @code{%e} to a
power containing @code{log}'s is done.

@opencatbox
@category{Exponential and logarithm functions} @category{Simplification flags and variables}
@closecatbox

@end defvr

@deffn {Function} plog (@var{x})
Represents the principal branch of the complex-valued natural
logarithm with @code{-%pi} < @code{carg(@var{x})} <= @code{+%pi} .

@opencatbox
@category{Exponential and logarithm functions} @category{Complex variables}
@closecatbox
@end deffn

