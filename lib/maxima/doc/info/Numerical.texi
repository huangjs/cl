@menu
* Introduction to fast Fourier transform::                     
* Functions and Variables for fast Fourier transform::
* Introduction to Fourier series::
* Functions and Variables for Fourier series::
@end menu

@node Introduction to fast Fourier transform, Functions and Variables for fast Fourier transform, Numerical, Numerical
@section Introduction to fast Fourier transform

The @code{fft} package comprises functions for the numerical (not symbolic) computation
of the fast Fourier transform.

@opencatbox
@category{Fourier transform} @category{Numerical methods} @category{Share packages} @category{Package fft}
@closecatbox


@c end concepts Numerical

@node Functions and Variables for fast Fourier transform, Introduction to Fourier series, Introduction to fast Fourier transform, Numerical
@section Functions and Variables for fast Fourier transform

@deffn {Function} polartorect (@var{r}, @var{t})

Translates complex values of the form @code{r %e^(%i t)} to the form @code{a + b %i},
where @var{r} is the magnitude and @var{t} is the phase.
@var{r} and @var{t} are 1-dimensional arrays of the same size.
The array size need not be a power of 2.

The original values of the input arrays are
replaced by the real and imaginary parts, @code{a} and @code{b}, on return.
The outputs are calculated as

@example
a = r cos(t)
b = r sin(t)
@end example

@code{polartorect} is the inverse function of @code{recttopolar}.

@code{load(fft)} loads this function. See also @code{fft}.

@opencatbox
@category{Package fft} @category{Complex variables}
@closecatbox
@end deffn

@deffn {Function} recttopolar (@var{a}, @var{b})

Translates complex values of the form @code{a + b %i} to the form @code{r %e^(%i t)},
where @var{a} is the real part and @var{b} is the imaginary part.
@var{a} and @var{b} are 1-dimensional arrays of the same size.
The array size need not be a power of 2.

The original values of the input arrays are
replaced by the magnitude and angle, @code{r} and @code{t}, on return.
The outputs are calculated as

@example
r = sqrt(a^2 + b^2)
t = atan2(b, a)
@end example

The computed angle is in the range @code{-%pi} to @code{%pi}. 

@code{recttopolar} is the inverse function of @code{polartorect}.

@code{load(fft)} loads this function. See also @code{fft}.

@opencatbox
@category{Package fft} @category{Complex variables}
@closecatbox
@end deffn

@deffn {Function} inverse_fft (@var{y})

Computes the inverse complex fast Fourier transform.
@var{y} is a list or array (named or unnamed) which contains the data to transform.
The number of elements must be a power of 2.
The elements must be literal numbers (integers, rationals, floats, or bigfloats)
or symbolic constants,
or expressions @code{a + b*%i} where @code{a} and @code{b} are literal numbers
or symbolic constants.

@code{inverse_fft} returns a new object of the same type as @var{y},
which is not modified.
Results are always computed as floats
or expressions @code{a + b*%i} where @code{a} and @code{b} are floats.

The inverse discrete Fourier transform is defined as follows.
Let @code{x} be the output of the inverse transform.
Then for @code{j} from 0 through @code{n - 1},

@example
x[j] = sum(y[k] exp(+2 %i %pi j k / n), k, 0, n - 1)
@end example

@code{load(fft)} loads this function.

See also @code{fft} (forward transform), @code{recttopolar}, and @code{polartorect}.

Examples:

Real data.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 2, 3, 4, -1, -2, -3, -4] $
@c L1 : inverse_fft (L);
@c L2 : fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 2, 3, 4, -1, -2, -3, -4] $
(%i4) L1 : inverse_fft (L);
(%o4) [0.0, 14.49 %i - .8284, 0.0, 2.485 %i + 4.828, 0.0, 
                       4.828 - 2.485 %i, 0.0, - 14.49 %i - .8284]
(%i5) L2 : fft (L1);
(%o5) [1.0, 2.0 - 2.168L-19 %i, 3.0 - 7.525L-20 %i, 
4.0 - 4.256L-19 %i, - 1.0, 2.168L-19 %i - 2.0, 
7.525L-20 %i - 3.0, 4.256L-19 %i - 4.0]
(%i6) lmax (abs (L2 - L));
(%o6)                       3.545L-16
@end example

Complex data.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
@c L1 : inverse_fft (L);
@c L2 : fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $                 
(%i3) L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
(%i4) L1 : inverse_fft (L);
(%o4) [4.0, 2.711L-19 %i + 4.0, 2.0 %i - 2.0, 
- 2.828 %i - 2.828, 0.0, 5.421L-20 %i + 4.0, - 2.0 %i - 2.0, 
2.828 %i + 2.828]
(%i5) L2 : fft (L1);
(%o5) [4.066E-20 %i + 1.0, 1.0 %i + 1.0, 1.0 - 1.0 %i, 
1.55L-19 %i - 1.0, - 4.066E-20 %i - 1.0, 1.0 - 1.0 %i, 
1.0 %i + 1.0, 1.0 - 7.368L-20 %i]
(%i6) lmax (abs (L2 - L));                    
(%o6)                       6.841L-17
@end example

@opencatbox
@category{Package fft}
@closecatbox

@end deffn

@deffn {Function} fft (@var{x})

Computes the complex fast Fourier transform.
@var{x} is a list or array (named or unnamed) which contains the data to transform.
The number of elements must be a power of 2.
The elements must be literal numbers (integers, rationals, floats, or bigfloats)
or symbolic constants,
or expressions @code{a + b*%i} where @code{a} and @code{b} are literal numbers
or symbolic constants.

@code{fft} returns a new object of the same type as @var{x},
which is not modified.
Results are always computed as floats
or expressions @code{a + b*%i} where @code{a} and @code{b} are floats.

The discrete Fourier transform is defined as follows.
Let @code{y} be the output of the transform.
Then for @code{k} from 0 through @code{n - 1},

@example
y[k] = (1/n) sum(x[j] exp(-2 %i %pi j k / n), j, 0, n - 1)
@end example

When the data @var{x} are real,
real coefficients @code{a} and @code{b} can be computed such that

@example
x[j] = sum (a[k] * cos (2*%pi*j*k / n) + b[k] * sin (2*%pi*j*k / n), k, 0, n/2)
@end example

with

@example
a[0] = realpart (y[0])
b[0] = 0
@end example

and, for k from 1 through n/2 - 1,

@example
a[k] = realpart (y[k] + y[n - k])
b[k] = imagpart (y[n - k] - y[k])
@end example

and

@example
a[n/2] = realpart (y[n/2])
b[n/2] = 0
@end example

@code{load(fft)} loads this function.

See also @code{inverse_fft} (inverse transform), @code{recttopolar}, and @code{polartorect}.

Examples:

Real data.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 2, 3, 4, -1, -2, -3, -4] $
@c L1 : fft (L);
@c L2 : inverse_fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 2, 3, 4, -1, -2, -3, -4] $
(%i4) L1 : fft (L);
(%o4) [0.0, - 1.811 %i - .1036, 0.0, .6036 - .3107 %i, 0.0, 
                         .3107 %i + .6036, 0.0, 1.811 %i - .1036]
(%i5) L2 : inverse_fft (L1);
(%o5) [1.0, 2.168L-19 %i + 2.0, 7.525L-20 %i + 3.0, 
4.256L-19 %i + 4.0, - 1.0, - 2.168L-19 %i - 2.0, 
- 7.525L-20 %i - 3.0, - 4.256L-19 %i - 4.0]
(%i6) lmax (abs (L2 - L));
(%o6)                       3.545L-16
@end example

Complex data.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
@c L1 : fft (L);
@c L2 : inverse_fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
(%i4) L1 : fft (L);
(%o4) [0.5, .3536 %i + .3536, - 0.25 %i - 0.25, 
0.5 - 6.776L-21 %i, 0.0, - .3536 %i - .3536, 0.25 %i - 0.25, 
0.5 - 3.388L-20 %i]
(%i5) L2 : inverse_fft (L1);
(%o5) [1.0 - 4.066E-20 %i, 1.0 %i + 1.0, 1.0 - 1.0 %i, 
- 1.008L-19 %i - 1.0, 4.066E-20 %i - 1.0, 1.0 - 1.0 %i, 
1.0 %i + 1.0, 1.947L-20 %i + 1.0]
(%i6) lmax (abs (L2 - L));
(%o6)                       6.83L-17
@end example

Computation of sine and cosine coefficients.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 2, 3, 4, 5, 6, 7, 8] $
@c n : length (L) $
@c x : make_array (any, n) $
@c fillarray (x, L) $
@c y : fft (x) $
@c a : make_array (any, n/2 + 1) $
@c b : make_array (any, n/2 + 1) $
@c a[0] : realpart (y[0]) $
@c b[0] : 0 $
@c for k : 1 thru n/2 - 1 do
@c    (a[k] : realpart (y[k] + y[n - k]),
@c     b[k] : imagpart (y[n - k] - y[k]));
@c a[n/2] : y[n/2] $
@c b[n/2] : 0 $
@c listarray (a);
@c listarray (b);
@c f(j) := sum (a[k] * cos (2*%pi*j*k / n) + b[k] * sin (2*%pi*j*k / n), k, 0, n/2) $
@c makelist (float (f (j)), j, 0, n - 1);
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 2, 3, 4, 5, 6, 7, 8] $
(%i4) n : length (L) $
(%i5) x : make_array (any, n) $
(%i6) fillarray (x, L) $
(%i7) y : fft (x) $
(%i8) a : make_array (any, n/2 + 1) $
(%i9) b : make_array (any, n/2 + 1) $
(%i10) a[0] : realpart (y[0]) $
(%i11) b[0] : 0 $
(%i12) for k : 1 thru n/2 - 1 do
   (a[k] : realpart (y[k] + y[n - k]),
    b[k] : imagpart (y[n - k] - y[k]));
(%o12)                        done
(%i13) a[n/2] : y[n/2] $
(%i14) b[n/2] : 0 $
(%i15) listarray (a);
(%o15)          [4.5, - 1.0, - 1.0, - 1.0, - 0.5]
(%i16) listarray (b);
(%o16)           [0, - 2.414, - 1.0, - .4142, 0]
(%i17) f(j) := sum (a[k] * cos (2*%pi*j*k / n) + b[k] * sin (2*%pi*j*k / n), k, 0, n/2) $
(%i18) makelist (float (f (j)), j, 0, n - 1);
(%o18)      [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]
@end example

@opencatbox
@category{Package fft}
@closecatbox

@end deffn

@defvr {Option variable} fortindent
Default value: 0

@code{fortindent} controls the left margin indentation of
expressions printed out by the @code{fortran} command.  0 gives normal
printout (i.e., 6 spaces), and positive values will causes the
expressions to be printed farther to the right.

@opencatbox
@category{Translation and compilation}
@closecatbox

@end defvr

@deffn {Function} fortran (@var{expr})
Prints @var{expr} as a Fortran statement.
The output line is indented with spaces.
If the line is too long, @code{fortran} prints continuation lines.
@code{fortran} prints the exponentiation operator @code{^} as @code{**},
and prints a complex number @code{a + b %i} in the form @code{(a,b)}.

@var{expr} may be an equation. If so, @code{fortran} prints an assignment
statement, assigning the right-hand side of the equation to the left-hand side.
In particular, if the right-hand side of @var{expr} is the name of a matrix,
then @code{fortran} prints an assignment statement for each element of the matrix.

If @var{expr} is not something recognized by @code{fortran},
the expression is printed in @code{grind} format without complaint.
@code{fortran} does not know about lists, arrays, or functions.

@code{fortindent} controls the left margin of the printed lines.
0 is the normal margin (i.e., indented 6 spaces). Increasing @code{fortindent}
causes expressions to be printed further to the right.

When @code{fortspaces} is @code{true}, @code{fortran} fills out
each printed line with spaces to 80 columns.

@code{fortran} evaluates its arguments;
quoting an argument defeats evaluation.
@code{fortran} always returns @code{done}.

Examples:

@verbatim
(%i1) expr: (a + b)^12$
(%i2) fortran (expr);
      (b+a)**12                                                                 
(%o2)                         done
(%i3) fortran ('x=expr);
      x = (b+a)**12                                                             
(%o3)                         done
(%i4) fortran ('x=expand (expr));
      x = b**12+12*a*b**11+66*a**2*b**10+220*a**3*b**9+495*a**4*b**8+792
     1   *a**5*b**7+924*a**6*b**6+792*a**7*b**5+495*a**8*b**4+220*a**9*b
     2   **3+66*a**10*b**2+12*a**11*b+a**12
(%o4)                         done
(%i5) fortran ('x=7+5*%i);
      x = (7,5)                                                                 
(%o5)                         done
(%i6) fortran ('x=[1,2,3,4]);
      x = [1,2,3,4]                                                             
(%o6)                         done
(%i7) f(x) := x^2$
(%i8) fortran (f);
      f                                                                         
(%o8)                         done
@end verbatim

@opencatbox
@category{Translation and compilation}
@closecatbox

@end deffn

@defvr {Option variable} fortspaces
Default value: @code{false}

When @code{fortspaces} is @code{true}, @code{fortran} fills out
each printed line with spaces to 80 columns.

@opencatbox
@category{Translation and compilation}
@closecatbox

@end defvr

@deffn {Function} horner (@var{expr}, @var{x})
@deffnx {Function} horner (@var{expr})
Returns a rearranged representation of @var{expr} as
in Horner's rule, using @var{x} as the main variable if it is specified.
@code{x} may be omitted in which case the main variable of the canonical rational expression
form of @var{expr} is used.

@code{horner} sometimes improves stability if @code{expr} is
to be numerically evaluated.  It is also useful if Maxima is used to
generate programs to be run in Fortran. See also @code{stringout}.

@example
(%i1) expr: 1e-155*x^2 - 5.5*x + 5.2e155;
                           2
(%o1)            1.0E-155 x  - 5.5 x + 5.2E+155
(%i2) expr2: horner (%, x), keepfloat: true;
(%o2)            (1.0E-155 x - 5.5) x + 5.2E+155
(%i3) ev (expr, x=1e155);
Maxima encountered a Lisp error:

 floating point overflow

Automatically continuing.
To reenable the Lisp debugger set *debugger-hook* to nil.
(%i4) ev (expr2, x=1e155);
(%o4)                       7.0E+154
@end example

@opencatbox
@category{Numerical methods}
@closecatbox

@end deffn

@deffn {Function} find_root (@var{expr}, @var{x}, @var{a}, @var{b})
@deffnx {Function} find_root (@var{f}, @var{a}, @var{b})
@deffnx {Option variable} find_root_error
@deffnx {Option variable} find_root_abs
@deffnx {Option variable} find_root_rel

Finds a root of the expression @var{expr} or the function @var{f}
over the closed interval @math{[@var{a}, @var{b}]}.
The expression @var{expr} may be an equation,
in which case @code{find_root} seeks a root of @code{lhs(@var{expr}) - rhs(@var{expr})}.

Given that Maxima can evaluate @var{expr} or @var{f} over @math{[@var{a}, @var{b}]}
and that @var{expr} or @var{f} is continuous,
@code{find_root} is guaranteed to find the root,
or one of the roots if there is more than one.

@code{find_root} initially applies binary search.
If the function in question appears to be smooth enough,
@code{find_root} applies linear interpolation instead.

The accuracy of @code{find_root} is governed by @code{find_root_abs} and @code{find_root_rel}.
@code{find_root} stops when the function in question
evaluates to something less than or equal to @code{find_root_abs},
or if successive approximants @var{x_0}, @var{x_1} differ by no more than
@code{find_root_rel * max(abs(x_0), abs(x_1))}.
The default values of @code{find_root_abs} and @code{find_root_rel} are both zero.

@code{find_root} expects the function in question to have a different sign at the endpoints
of the search interval.
If this condition is not met,
the behavior of @code{find_root} is governed by @code{find_root_error}.
When @code{find_root_error} is @code{true},
@code{find_root} prints an error message.
Otherwise @code{find_root} returns the value of @code{find_root_error}.
The default value of @code{find_root_error} is @code{true}.

If @var{f} evaluates to something other than a number at any step in the search algorithm,
@code{find_root} returns a partially-evaluated @code{find_root} expression.

The order of @var{a} and @var{b} is ignored;
the region in which a root is sought is @math{[min(@var{a}, @var{b}), max(@var{a}, @var{b})]}.

Examples:
@c PREVIOUS EXAMPLE STUFF -- MAY WANT TO BRING TRANSLATE BACK INTO THE EXAMPLE
@c f(x):=(mode_declare(x,float),sin(x)-x/2.0);
@c interpolate(sin(x)-x/2,x,0.1,%pi)       time= 60 msec
@c interpolate(f(x),x,0.1,%pi);            time= 68 msec
@c translate(f);
@c interpolate(f(x),x,0.1,%pi);            time= 26 msec
@c interpolate(f,0.1,%pi);                 time=  5 msec

@c ===beg===
@c f(x) := sin(x) - x/2;
@c find_root (sin(x) - x/2, x, 0.1, %pi);
@c find_root (sin(x) = x/2, x, 0.1, %pi);
@c find_root (f(x), x, 0.1, %pi);
@c find_root (f, 0.1, %pi);
@c find_root (exp(x) = y, x, 0, 100);
@c find_root (exp(x) = y, x, 0, 100), y = 10;
@c log (10.0);
@c ===end===
@example
(%i1) f(x) := sin(x) - x/2;
                                        x
(%o1)                  f(x) := sin(x) - -
                                        2
(%i2) find_root (sin(x) - x/2, x, 0.1, %pi);
(%o2)                   1.895494267033981
(%i3) find_root (sin(x) = x/2, x, 0.1, %pi);
(%o3)                   1.895494267033981
(%i4) find_root (f(x), x, 0.1, %pi);
(%o4)                   1.895494267033981
(%i5) find_root (f, 0.1, %pi);
(%o5)                   1.895494267033981
(%i6) find_root (exp(x) = y, x, 0, 100);
                            x
(%o6)           find_root(%e  = y, x, 0.0, 100.0)
(%i7) find_root (exp(x) = y, x, 0, 100), y = 10;
(%o7)                   2.302585092994046
(%i8) log (10.0);
(%o8)                   2.302585092994046
@end example

@opencatbox
@category{Algebraic equations} @category{Numerical methods}
@closecatbox

@end deffn

@deffn {Function} newton (@var{expr}, @var{x}, @var{x_0}, @var{eps})
Returns an approximate solution of @code{@var{expr} = 0} by Newton's method,
considering @var{expr} to be a function of one variable, @var{x}.
The search begins with @code{@var{x} = @var{x_0}}
and proceeds until @code{abs(@var{expr}) < @var{eps}}
(with @var{expr} evaluated at the current value of @var{x}).

@code{newton} allows undefined variables to appear in @var{expr},
so long as the termination test @code{abs(@var{expr}) < @var{eps}} evaluates
to @code{true} or @code{false}.
Thus it is not necessary that @var{expr} evaluate to a number.

@code{load(newton1)} loads this function.

See also @code{realroots}, @code{allroots}, @code{find_root}, and @code{mnewton}.

Examples:

@c ===beg===
@c load (newton1);
@c newton (cos (u), u, 1, 1/100);
@c ev (cos (u), u = %);
@c assume (a > 0);
@c newton (x^2 - a^2, x, a/2, a^2/100);
@c ev (x^2 - a^2, x = %);
@c ===end===
@example
(%i1) load (newton1);
(%o1) /usr/share/maxima/5.10.0cvs/share/numeric/newton1.mac
(%i2) newton (cos (u), u, 1, 1/100);
(%o2)                   1.570675277161251
(%i3) ev (cos (u), u = %);
(%o3)                 1.2104963335033528E-4
(%i4) assume (a > 0);
(%o4)                        [a > 0]
(%i5) newton (x^2 - a^2, x, a/2, a^2/100);
(%o5)                  1.00030487804878 a
(%i6) ev (x^2 - a^2, x = %);
                                           2
(%o6)                6.098490481853958E-4 a
@end example

@opencatbox
@category{Algebraic equations} @category{Numerical methods}
@closecatbox

@end deffn


@node Introduction to Fourier series, Functions and Variables for Fourier series, Functions and Variables for fast Fourier transform, Numerical
@section Introduction to Fourier series

The @code{fourie} package comprises functions for the symbolic computation
of Fourier series.
There are functions in the @code{fourie} package to calculate Fourier integral
coefficients and some functions for manipulation of expressions.

@opencatbox
@category{Fourier transform} @category{Share packages} @category{Package fourie}
@closecatbox


@node Functions and Variables for Fourier series, , Introduction to Fourier series, Numerical
@section Functions and Variables for Fourier series

@c REPHRASE
@deffn {Function} equalp (@var{x}, @var{y})
Returns @code{true} if @code{equal (@var{x}, @var{y})} otherwise @code{false} (doesn't give an
error message like @code{equal (x, y)} would do in this case).

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@deffn {Function} remfun (@var{f}, @var{expr})
@deffnx {Function} remfun (@var{f}, @var{expr}, @var{x})
@code{remfun (@var{f}, @var{expr})}
replaces all occurrences of @code{@var{f} (@var{arg})} by @var{arg} in @var{expr}.

@code{remfun (@var{f}, @var{expr}, @var{x})}
replaces all occurrences of @code{@var{f} (@var{arg})} by @var{arg} in @var{expr}
only if @var{arg} contains the variable @var{x}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@deffn {Function} funp (@var{f}, @var{expr})
@deffnx {Function} funp (@var{f}, @var{expr}, @var{x})
@code{funp (@var{f}, @var{expr})}
returns @code{true} if @var{expr} contains the function @var{f}.

@code{funp (@var{f}, @var{expr}, @var{x})}
returns @code{true} if @var{expr} contains the function @var{f} and the variable
@var{x} is somewhere in the argument of one of the instances of @var{f}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@deffn {Function} absint (@var{f}, @var{x}, @var{halfplane})
@deffnx {Function} absint (@var{f}, @var{x})
@deffnx {Function} absint (@var{f}, @var{x}, @var{a}, @var{b})
@code{absint (@var{f}, @var{x}, @var{halfplane})}
returns the indefinite integral of @var{f} with respect to
@var{x} in the given halfplane (@code{pos}, @code{neg}, or @code{both}).
@var{f} may contain expressions of the form
@code{abs (x)}, @code{abs (sin (x))}, @code{abs (a) * exp (-abs (b) * abs (x))}.

@code{absint (@var{f}, @var{x})} is equivalent to @code{absint (@var{f}, @var{x}, pos)}.

@code{absint (@var{f}, @var{x}, @var{a}, @var{b})}
returns the definite integral of @var{f} with respect to @var{x} from @var{a} to @var{b}.
@c SAME LIST AS ABOVE ??
@var{f} may include absolute values.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie} @category{Integral calculus}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourier (@var{f}, @var{x}, @var{p})
Returns a list of the Fourier coefficients of @code{@var{f}(@var{x})} defined
on the interval @code{[-p, p]}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEES EXPANSION. WHAT IS THE ARGUMENT l ??
@deffn {Function} foursimp (@var{l})
Simplifies @code{sin (n %pi)} to 0 if @code{sinnpiflag} is @code{true} and
@code{cos (n %pi)} to @code{(-1)^n} if @code{cosnpiflag} is @code{true}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie} @category{Trigonometric functions} @category{Simplification functions}
@closecatbox
@end deffn

@defvr {Option variable} sinnpiflag
Default value: @code{true}

See @code{foursimp}.

@opencatbox
@category{Package fourie}
@closecatbox

@end defvr

@defvr {Option variable} cosnpiflag
Default value: @code{true}

See @code{foursimp}.

@opencatbox
@category{Package fourie}
@closecatbox

@end defvr

@c NEEDS EXPANSION. EXPLAIN x AND p HERE (DO NOT REFER SOMEWHERE ELSE)
@deffn {Function} fourexpand (@var{l}, @var{x}, @var{p}, @var{limit})
Constructs and returns the Fourier series from the list of
Fourier coefficients @var{l} up through @var{limit} terms (@var{limit}
may be @code{inf}). @var{x} and @var{p} have same meaning as in
@code{fourier}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourcos (@var{f}, @var{x}, @var{p})
Returns the Fourier cosine coefficients for @code{@var{f}(@var{x})} defined on @code{[0, @var{p}]}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} foursin (@var{f}, @var{x}, @var{p})
Returns the Fourier sine coefficients for @code{@var{f}(@var{x})} defined on @code{[0, @var{p}]}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} totalfourier (@var{f}, @var{x}, @var{p})
Returns @code{fourexpand (foursimp (fourier (@var{f}, @var{x}, @var{p})), @var{x}, @var{p}, 'inf)}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourint (@var{f}, @var{x})
Constructs and returns a list of the Fourier integral coefficients of @code{@var{f}(@var{x})}
defined on @code{[minf, inf]}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourintcos (@var{f}, @var{x})
Returns the Fourier cosine integral coefficients for @code{@var{f}(@var{x})} on @code{[0, inf]}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn

@c NEEDS EXPANSION
@deffn {Function} fourintsin (@var{f}, @var{x})
Returns the Fourier sine integral coefficients for @code{@var{f}(@var{x})} on @code{[0, inf]}.

@c NEEDS EXAMPLES
@opencatbox
@category{Package fourie}
@closecatbox
@end deffn
