@c Language: German
@c English original: Program.texi CVS 1.21

@menu
* Einf@"uhrung in Steuerstrukturen::  
* Definitionen f@"ur Steuerstrukturen::  
@end menu

@node Einf@"uhrung in Steuerstrukturen, Definitionen f@"ur Steuerstrukturen, Steuerstrukturen, Steuerstrukturen
@section Einf@"uhrung in Steuerstrukturen

Maxima stellt verschiedene @code{do}-Schleifen f@"ur die Iteration zur Verf@"ugung, 
und mit @code{go} auch ein etwas primitiveres Konstrukt.

@c end concepts Steuerstrukturen
@node Definitionen f@"ur Steuerstrukturen,  , Einf@"uhrung in Steuerstrukturen, Steuerstrukturen
@section Definitionen f@"ur Steuerstrukturen

@deffn {Funktion} backtrace ()
@deffnx {Funktion} backtrace (@var{n})
Gibt den Stapelspeicher ("call stack") aus, d.h. die Funktionen,
die die gerade aktive Funktion aufgerufen haben.

Beispiele:

@itemize @bullet
@item
@code{backtrace()} gibt den gesamten Stapelspeicher aus.

@example
(%i1) h(x) := g(x/7)$
(%i2) g(x) := f(x-11)$
(%i3) f(x) := e(x^2)$
(%i4) e(x) := (backtrace(), 2*x + 13)$
(%i5) h(10);
#0: e(x=4489/49)
#1: f(x=-67/7)
#2: g(x=10/7)
#3: h(x=10)
                              9615
(%o5)                         ----
                               49
@end example
@end itemize

@itemize @bullet
@item
@code{backtrace (@var{n})} gibt einschlie@ss{}lich der
gerade aktiven Funktion die @var{n} letzten Funktionen aus.

@example
(%i1) h(x) := (backtrace(1), g(x/7))$
(%i2) g(x) := (backtrace(1), f(x-11))$
(%i3) f(x) := (backtrace(1), e(x^2))$
(%i4) e(x) := (backtrace(1), 2*x + 13)$
(%i5) h(10);
#0: h(x=10)
#0: g(x=10/7)
#0: f(x=-67/7)
#0: e(x=4489/49)
                              9615
(%o5)                         ----
                               49
@end example
@end itemize

@end deffn

@deffn {Spezieller Operator} do
Die Anweisung @code{do} bewirkt die Ausf@"uhrung der Iteration.
Die vielf@"altigen Erscheinungsformen der @code{do}-Anweisung werden
folgend in mehreren Abschnitten beschrieben.
Als erstes wird die gew@"ohnliche Form vorgestellt,
die analog zu der ist, die man in anderen Programmiersprachen findet
(Fortran, Algol, PL/I, etc.).
Anschlie@ss{}end werden dann weitere M@"oglichkeiten genannt.

Es gibt drei Varianten, die sich nur in ihrer Terminierungsbedingung unterscheiden.  
Sie sind:

@itemize @bullet
@item
@code{for @var{variable}: @var{initial_value} step @var{increment}
      thru @var{limit} do @var{body}}
@item
@code{for @var{variable}: @var{initial_value} step @var{increment}
      while @var{condition} do @var{body}}
@item
@code{for @var{variable}: @var{initial_value} step @var{increment}
      unless @var{condition} do @var{body}}
@end itemize

@c UGH. DO WE REALLY NEED TO MENTION THIS??
(Alternativ kann @code{step} auch nach der Terminierungsbedingung angegeben werden.)

@var{initial_value}, @var{increment}, @var{limit} und @var{body} kann jeder 
Ausdruck sein. Ist @var{increment} 1, kann "@code{step 1}" auch entfallen.

Bei der Ausf@"uhrung der @code{do}-Anweisung wird zuerst @var{initial_value} 
der Variablen (@var{variable}, im folgenden Kontrollvariable genannt) zugewiesen.
Dann: (1) Wenn die Kontrollvariable den Wert @var{limit} der 
@code{thru}-Spezifikation @"uberschritten hat, oder wenn die Bedingung 
@var{condition} von @code{unless} @code{true} ist, 
oder wenn die Bedingung
@var{condition} von @code{while} @code{false} ist, endet @code{do}.
(2) Der Schleifenrumpf (@var{body}) wird ausgewertet.
(3) @var{increment} wird zur Kontrollvariable addiert.
Die Schritte (1) bis (3) werden solange ausgef@"uhrt bis irgend eine 
Terminierungsbedingung erf@"ullt ist.

Der @code{thru}-Test ist erf@"ullt, wenn im Falle eines nichtnegativen 
Inkrements die Kontrollvariable gr@"o@ss{}er als @var{limit} ist, oder
entsprechend bei negativem Inkrement die Kontrollvariable kleiner als 
@var{limit} ist. @var{increment} und @var{limit} k@"onnen auch
nichtnumerische Ausdr@"ucke sein, solange es m@"oglich ist, die entsprechende 
Ungleichung auszuwerten. Wenn jedoch das Inkrement bei der Eingabe der
@code{do}-Anweisung nicht syntaktisch negativ ist, dann nimmt Maxima bei der
Ausf@"uhrung der Schleife an, dass es positiv ist. Ist es das nicht, 
kann die Schleife eventuell nicht korrekt terminieren.

Beachte, dass @var{increment}, @var{limit} und die Terminierungsbedingung
in jedem Schleifendurchlauf ausgewertet werden. Ben@"otigt einer dieser Ausdr@"ucke
viel Rechenzeit, @"andert aber w@"ahrend des Schleifendurchlaufs nicht seinen
Wert, ist es wesentlich effizienter, diesen Wert vor der @code{do}-Schleife einer
Variablen zuzuweisen und diese dann in der @code{do}-Anweisung zu verwenden.

Der Wert, der normalerweise von einer @code{do}-Anweisung zur@"uckgegeben
wird, ist das Atom @code{done}.
Die Funktion @code{return} kann jedoch im Inneren des Schleifenrumpfs
verwendet werden, um die Schleife vorzeitig zu verlassen und
einen beliebigen R@"uckgabewert festzulegen.
Beachte hierbei, dass @code{return} in einer @code{do}-Anweisung, die
innerhalb eines @code{block}-Konstrukts verwendet wird, nur @code{do}
beenden kann, nicht aber @code{block}.
Beachte auch, dass die Funktion @code{go} keinen Sprung aus einem @code{do}
in einen umgebenden @code{block} erm@"oglicht.

Die Kontrollvariable ist stets eine lokale Variable der @code{do}-Anweisung.
Ihr Wert kann daher den Wert einer Variablen au@ss{}erhalb des @code{do} mit 
gleichem Namen nicht beeinflussen. Nach der Terminierung der Schleife ist 
die Kontrollvariable ungebunden.

@example
(%i1) for a:-3 thru 26 step 7 do display(a)$
                             a = - 3

                              a = 4

                             a = 11

                             a = 18

                             a = 25
@end example

@example
(%i1) s: 0$
(%i2) for i: 1 while i <= 10 do s: s+i;
(%o2)                         done
(%i3) s;
(%o3)                          55
@end example

Beachte, dass die Bedingung @code{while i <= 10} zu  
@code{unless i > 10}  und auch zu  @code{thru 10}  gleichwertig ist.

@example
(%i1) series: 1$
(%i2) term: exp (sin (x))$
(%i3) for p: 1 unless p > 7 do
          (term: diff (term, x)/p, 
           series: series + subst (x=0, term)*x^p)$
(%i4) series;
                  7    6     5    4    2
                 x    x     x    x    x
(%o4)            -- - --- - -- - -- + -- + x + 1
                 90   240   15   8    2
@end example

Das Beispiel zeigt 8 Terme der Taylorreihe von @code{e^sin(x)}.

@example
(%i1) poly: 0$
(%i2) for i: 1 thru 5 do
          for j: i step -1 thru 1 do
              poly: poly + i*x^j$
(%i3) poly;
                  5      4       3       2
(%o3)          5 x  + 9 x  + 12 x  + 14 x  + 15 x
(%i4) guess: -3.0$
(%i5) for i: 1 thru 10 do
          (guess: subst (guess, x, 0.5*(x + 10/x)),
           if abs (guess^2 - 10) < 0.00005 then return (guess));
(%o5)                  - 3.162280701754386
@end example

In diesem Beispiel wird die negative Quadratwurzel von 10 mit Hilfe von 10
Newton-Raphson-Iterationen berechnet. W@"are die Konvergenzbedingung nicht
erf@"ullt, h@"atte die Schleife nur @code{done} zur@"uckgegeben.

Anstatt stets eine bestimmte Einheit zur Kontrollvariable zu addieren,
m@"ochte man vielleicht die Kontrollvariable in jedem Schleifendurchlauf
auf eine andere Art und Weise ver@"andern.
In diesem Fall kann man @code{next @var{expression}} anstelle von
@code{step @var{increment}} verwenden.
Die Kontrollvariable wird dadurch nach jedem Schleifendurchlauf auf den 
aktuellen Wert von @var{expression} gesetzt.

@example
(%i6) for count: 2 next 3*count thru 20 do display (count)$
                            count = 2

                            count = 6

                           count = 18
@end example

@c UGH. DO WE REALLY NEED TO MENTION THIS??
Als Alternative zu @code{for @var{variable}: @var{value} ...do...}
kann die Syntax @code{for @var{variable} from @var{value} ...do...} 
verwendet werden.
Dies erm@"oglicht, dass @code{from @var{value}} auch hinter
@code{step @var{increment}} oder @code{next @var{expression}}
oder der Terminierungsbedingung platziert werden kann. Wenn @code{from @var{value}}
weggelassen wurde, wird 1 als Startwert verwendet.

Manchmal wird man auch eine Iteration durchf@"uhren wollen, in der die
Kontrollvariable gar nicht im Schleifenrumpf verwendet wird. 
Dann gen@"ugt es, nur die Terminierungsbedingung anzugeben. Auf die Initialisierung 
und die Angabe des Inkrements wird wie in dem folgenden Beispiel 
verzichtet. Hier wird die Quadratwurzel von 5 mit einem mit einem 
relativ schlechten Sch@"atzwert berechnet.

@example
(%i1) x: 1000$
(%i2) thru 20 do x: 0.5*(x + 5.0/x)$
(%i3) x;
(%o3)                   2.23606797749979
(%i4) sqrt(5), numer;
(%o4)                   2.23606797749979
@end example

Wenn gew@"unscht, kann auch auf die Terminierungsbedingung verzichtet werden.
@code{do @var{body}} gen@"ugt.
Der Schleifenrumpf wird dann endlos wiederholt ausgewertet.
In diesem Fall sollte die Funktion @code{return} verwendet werden, 
um die @code{do}-Schleife zu beenden.

@example
(%i1) newton (f, x):= ([y, df, dfx], df: diff (f ('x), 'x),
          do (y: ev(df), x: x - f(x)/y, 
              if abs (f (x)) < 5e-6 then return (x)))$
(%i2) sqr (x) := x^2 - 5.0$
(%i3) newton (sqr, 1000);
(%o3)                   2.236068027062195
@end example

@c DUNNO IF WE NEED THIS LEVEL OF DETAIL; THIS ARTICLE IS GETTING PRETTY LONG
(Beachte, dass in diesem Beispiel mit @code{return} zwar nur die
@code{do}-Schleife beendet wird, da aber @code{do} die letzte Anweisung
in @code{block} ist, wird der letzte aktuelle Wert von @code{x} dann
sowohl von @code{do} als auch von der Funktion @code{newton}
zur@"uckgegeben.)

Maxima verf@"ugt noch @"uber eine andere Form der @code{do}-Anweisung.
Die Syntax ist:

@example
for @var{variable} in @var{list} @var{end_tests} do @var{body}
@end example

Die Elemente der Liste k@"onnen beliebige Ausdr@"ucke sein. Diese werden
in jeder Iteration der Schleife sukzessive der Kontrollvariablen zugewiesen.
Die optionale Terminierungsbedingung @var{end_tests} kann verwendet werden,
um die Ausf@"uhrung der @code{do}-Anweisung zu beenden.
Andernfalls terminiert die Schleife, wenn die Liste ersch@"opft ist oder wenn
im Schleifenrumpf @code{return} ausgef@"uhrt wurde.
(Tats@"achlich kann @var{list} jeder Ausdruck sein, der kein Atom ist.
Seine Teile werden dann sukzessive verwendet.)

@example
(%i1)  for f in [log, rho, atan] do ldisp(f(1))$
(%t1)                                  0
(%t2)                                rho(1)
                                     %pi
(%t3)                                 ---
                                      4
(%i4) ev(%t3,numer);
(%o4)                             0.78539816
@end example

@end deffn

@deffn {Funktion} errcatch (@var{expr_1}, ..., @var{expr_n})
Wertet @var{expr_1}, ..., @var{expr_n} nacheinander aus und
gibt @code{[@var{expr_n}]} (eine Liste) zur@"uck,
wenn kein Fehler auftritt. Sollte bei der Auswertung irgend eines Arguments
ein Fehler auftreten, verhindert @code{errcatch} die Meldung des Fehlers
und gibt ohne die Auswertung eines weiteren Arguments die leere Liste @code{[]} zur@"uck.

@code{errcatch} ist n@"utzlich in @code{batch}-Dateien,
in denen man einen Fehler vermutet, der dann @code{batch} beenden w@"urde,
sollte der Fehler nicht aufgefangen werden.

@end deffn

@deffn {Funktion} error (@var{expr_1}, ..., @var{expr_n})
@deffnx {System variable} error
Wertet und gibt @var{expr_1}, ..., @var{expr_n} aus,
und bewirkt dann einen Fehlerr@"ucksprung in den Maxima Top Level oder in
das n@"achste umgebende @code{errcatch}.

Die Variable @code{error} ist eine Liste, die den Fehler beschreibt.
Das erste Element von @code{error} ist ein Formatierungsstring,
der alle Strings unter den @var{expr_1}, ..., @var{expr_n} enth@"alt,
und die restlichen Elemente sind die Werte der Nicht-String-Argumente.

@code{errormsg()} gibt dann @code{error} formatiert aus.
Im Endeffekt ist dies dann eine erneute Ausgabe der letzten Fehlermeldung.

@end deffn

@deffn {Funktion} errormsg ()
Gibt erneut die letzte Fehlermeldung aus.
Die Variable @code{error} enth@"alt die Meldung,
und @code{errormsg} gibt sie formatiert aus.

@end deffn

@c REPHRASE
@deffn {Spezieller Operator} for
Wird bei Iterationen verwendet. Siehe @code{do} zur Beschreibung
der Iteration in Maxima.

@end deffn

@deffn {Funktion} go (@var{tag})
Wird in einem @code{block} verwendet, um die Programmkontrolle
an eine Anweisung zu @"ubergeben, die mit dem Argument von @code{go}
markiert ist. Um eine Anweisung zu markieren, stellt man ihr ein Atom als eine
zus@"atzliche Anweisung in @code{block} voran. Zum Beispiel:

@example
block ([x], x:1, loop, x+1, ..., go(loop), ...)
@end example

Das Argument von @code{go} muss der Name einer Marke ("tag") sein, die im gleichen
@code{block} steht. Man kann @code{go} nicht verwenden, um eine Marke
in einem anderen @code{block} zu erreichen als den, der dieses @code{go}
enth@"alt.

@end deffn

@c NEEDS CLARIFICATION, EXPANSION, EXAMPLES
@c THIS ITEM IS IMPORTANT
@deffn {Spezieller Operator} if
@code{if} wird f@"ur die bedingte Anweisung verwendet.
Die Syntax ist:

@example
if <condition> then <expr_1> else <expr_2>
@end example

Der Wert einer @code{if}-Anweisung ist @var{expr_1} wenn die Bedingung
@var{condition} @code{true} ist, und @var{expr_2} im Falle von
@code{false}.
@var{expr_1} und @var{expr_2} sind beliebige Maxima Ausdr@"ucke
(einschlie@ss{}lich ineinander geschachtelter @code{if}-Anweisungen), 
und @var{condition} ist ein Ausdruck, der zu @code{true} oder @code{false}
ausgewertet wird und mit Hilfe der folgenden vergleichenden und 
logischen Operatoren zusammengesetzt ist:

@c - SEEMS LIKE THIS TABLE WANTS TO BE IN A DISCUSSION OF PREDICATE FUNCTIONS; PRESENT LOCATION IS OK I GUESS
@c - REFORMAT THIS TABLE USING TEXINFO MARKUP (MAYBE)
@example
Operation              Symbol      Typ
 
kleiner als            <           vergleichend infix
kleiner oder gleich    <=          vergleichend infix
gleich (syntaktisch)   =           vergleichend infix
Negation von =         #           vergleichend infix
gleich (Wert)          equal       vergleichend Funktion
Negation von equal     notequal    vergleichend Funktion
gr@"o@ss{}er oder gleich     >=          vergleichend infix
gr@"o@ss{}er                 >           vergleichend infix
und                    and         logisch infix
oder                   or          logisch infix
nicht                  not         logisch pr@"afix
@end example

@end deffn

@c NEEDS CLARIFICATION
@c THIS ITEM IS IMPORTANT
@deffn {Funktion} map (@var{f}, @var{expr_1}, ..., @var{expr_n})
Gibt einen Ausdruck zur@"uck, dessen Hauptoperator derselbe ist wie
in den Ausdr@"ucken @var{expr_1}, ..., @var{expr_n},
dessen Teile aber das Ergebnis der Anwendung von @var{f} auf die einander
entsprechenden Teile der Ausdr@"ucke sind.
@var{f} ist entweder der Name einer Funktion mit @math{n} Argumenten
oder eine @code{lambda}-Form  mit @math{n} Argumenten.

Wird die Optionsvariable @code{maperror} auf @code{false} gesetzt,
bewirkt dies, dass die map-Funktionen (1) in dem Fall, dass die
Ausdr@"ucke @var{expr_i} nicht alle die gleiche L@"ange besitzen, nach
dem Erreichen des Endes des k@"urzesten @var{expr_i} endet und (2)
in dem Fall, dass die @var{expr_i} nicht alle vom gleichen Objekttyp sind,
die Funktion @var{f} auf die Liste [@var{expr_1}, @var{expr_2}, ...]
anwendet (im Sinne von @code{apply}).
Ist @code{maperror} auf @code{true} gesetzt (Standardeinstellung),
wird in den genannten F@"allen eine Fehlermeldung ausgegeben.

Einer der Verwendungszwecke von @code{map} ist, eine Funktion
(z.B. @code{partfrac}) auf jeden Term eines recht gro@ss{}en Ausdrucks
anzuwenden, falls es nicht m@"oglich ist, die Funktion auf den gesamten Ausdruck
anzuwenden, bedingt durch ein Ersch@"opfen des Speicherplatzes w@"ahrend der
Auswertung.

@c IN THESE EXAMPLES, SPELL OUT WHAT IS THE MAIN OPERATOR 
@c AND SHOW HOW THE RESULT FOLLOWS FROM THE DESCRIPTION STATED IN THE FIRST PARAGRAPH
@example
(%i1) map(f,x+a*y+b*z);
(%o1)                        f(b z) + f(a y) + f(x)
(%i2) map(lambda([u],partfrac(u,x)),x+1/(x^3+4*x^2+5*x+2));
                           1       1        1
(%o2)                     ----- - ----- + -------- + x
                         x + 2   x + 1          2
                                         (x + 1)
(%i3) map(ratsimp, x/(x^2+x)+(y^2+y)/y);
                                      1
(%o3)                            y + ----- + 1
                                    x + 1
(%i4) map("=",[a,b],[-0.5,3]);
(%o4)                          [a = - 0.5, b = 3]


@end example
@end deffn

@deffn {Funktion} mapatom (@var{expr})
Gibt @code{true} zur@"uck, genau dann wenn @var{expr}
von den map-Funktionen als Atom angesehen wird. "Mapatome" sind Atome,
Zahlen (einschlie@ss{}lich der rationalen Zahlen) und indizierte Variablen.
@c WHAT ARE "THE MAPPING ROUTINES", AND WHY DO THEY HAVE A SPECIALIZED NOTION OF ATOMS ??
@c "MAPPING ROUTINES" HERE TRANSLATED AS "MAP FUNCTIONS" - VvN

@end deffn

@c NEEDS CLARIFICATION
@defvr {Option variable} maperror
Standardeinstellung: @code{true}

Wird @code{maperror} auf @code{false} gesetzt,
bewirkt dies, dass alle map-Funktionen, zum Beispiel

@example
map (f, expr_1, expr_2, ...))
@end example

(1) in dem Fall, dass die
Ausdr@"ucke @var{expr_i} nicht alle die gleiche L@"ange besitzen, nach
dem Erreichen des Endes des k@"urzesten @var{expr_i} endet und (2)
in dem Fall, dass die @var{expr_i} nicht alle vom gleichen Objekttyp sind,
die Funktion @var{f} auf die Liste [@var{expr_1}, @var{expr_2}, ...]
anwendet (im Sinne von @code{apply}).

Ist @code{maperror} auf @code{true} gesetzt,
wird in den genannten F@"allen eine Fehlermeldung ausgegeben.

@end defvr

@c NEEDS CLARIFICATION
@deffn {Funktion} maplist (@var{f}, @var{expr_1}, ..., @var{expr_n})
Gibt eine Liste von Anwendungen von @var{f} auf die einander
entsprechenden Teile der Ausdr@"ucke @var{expr_1}, ..., @var{expr_n}
zur@"uck. @var{f} ist der Name einer Funktion oder eines Lambda-Ausdrucks.

@code{maplist} ist zu unterscheiden von
@code{map (@var{f}, @var{expr_1}, ..., @var{expr_n})},
welches einen Ausdruck mit demselben Hauptoperator, den die @var{expr_i}
besitzen, zur@"uck gibt. (Ausnahmen bilden Vereinfachungen und der Fall,
dass @code{map} @code{apply} anwendet.)

@end deffn

@c NEEDS CLARIFICATION
@defvr {Option variable} prederror
Standardwert: @code{true}

Ist @code{prederror} @code{true}, wird, wann immer das Pr@"adikat
einer @code{if}-Anweisung oder einer @code{is}-Funktion nicht zu
@code{true} oder @code{false} ausgewertet werden kann,
eine Fehlermeldung ausgegeben.

Ist @code{prederror} @code{false}, wird statt dessen @code{unknown}
zur@"uckgegeben.
Der Modus @code{prederror: false} wird nicht in @"ubersetztem Code
unterst@"utzt. @code{maybe} wird dagegen in @"ubersetztem Code
unterst@"utzt.

Siehe auch @code{is} und @code{maybe}.

@end defvr

@deffn {Funktion} return (value)
Kann verwendet werden, um ausdr@"ucklich einen Programmblock
mit ihrem Argument als R@"uckgabewert zu verlassen.
Siehe @code{block} f@"ur mehr Informationen.

@end deffn

@c NEEDS CLARIFICATION
@deffn {Funktion} scanmap (@var{f}, @var{expr})
@deffnx {Funktion} scanmap (@var{f}, @var{expr}, bottomup)
Wendet @var{f} nach einer Top-down-Methode rekursiv auf @var{expr}
an. Dies ist besonders n@"utzlich, wenn eine vollst@"andige Faktorisierung 
gew@"unscht wird, zum Beispiel:

@example
(%i1) exp:(a^2+2*a+1)*y + x^2$
(%i2) scanmap(factor,exp);
                                    2      2
(%o2)                         (a + 1)  y + x
@end example

Beachte, in welcher Weise @code{scanmap} die gegebene Funktion @code{factor}
auf die Bestandteile von @var{expr} anwendet.
Wird @code{scanmap} eine andere Form von @var{expr} @"ubergeben, kann
das Resultat ein anderes sein.
So ist @code{%o2} nicht wiederhergestellt, wenn @code{scanmap} auf
die ausmultiplizierte Form von @var{exp} angewendet wird:

@example
(%i3) scanmap(factor,expand(exp));
                           2                  2
(%o3)                      a  y + 2 a y + y + x
@end example

Hier ist ein anderes Beispiel f@"ur die Art und Weise, in der @code{scanmap}
rekursiv eine gegebene Funktion auf alle Teilausdr@"ucke anwendet,
einschlie@ss{}lich der Exponenten:

@example
(%i4) expr : u*v^(a*x+b) + c$
(%i5) scanmap('f, expr);
                    f(f(f(a) f(x)) + f(b))
(%o5) f(f(f(u) f(f(v)                      )) + f(c))
@end example

@code{scanmap (@var{f}, @var{expr}, bottomup)} wendet @var{f}
auf @var{expr} nach einer Bottom-up-Methode an.
Z.B. f@"ur ein undefiniertes @code{f},

@example
scanmap(f,a*x+b) ->
   f(a*x+b) -> f(f(a*x)+f(b)) -> f(f(f(a)*f(x))+f(b))
scanmap(f,a*x+b,bottomup) -> f(a)*f(x)+f(b)
    -> f(f(a)*f(x))+f(b) ->
     f(f(f(a)*f(x))+f(b))
@end example

In diesem Fall erh@"alt man auf beiden Wegen dasselbe Ergebnis.

@end deffn

@deffn {Funktion} throw (@var{expr})
Wertet @var{expr} aus und wirft den Wert des letzten @code{catch} aus.
@code{throw} wird zusammen mit @code{catch} als Mechanismus
f@"ur einen nichtlokalen R@"ucksprung verwendet.

@end deffn

@deffn {Funktion} outermap (@var{f}, @var{a_1}, ..., @var{a_n})
Wendet die Funktion @var{f} auf jedes Element des @"au@ss{}eren
Produkts @var{a_1} kreuz @var{a_2} ... kreuz @var{a_n} an.

@var{f} ist der Name einer Funktion von @math{n} Argumenten
oder ein Lambda-Ausdruck von @math{n} Argumenten.
Jedes Argument @var{a_k} kann eine Liste oder eine geschachtelte Liste,
eine Matrix oder jede andere Art von Ausdruck sein.

Der R@"uckgabewert von @code{outermap} ist eine geschachtelte Struktur.
Sei @var{x} der R@"uckgabewert.
Dann hat @var{x} dieselbe Struktur wie das erste Listen-, geschachtelte 
Listen- oder Matrix-Argument,
@code{@var{x}[i_1]...[i_m]} hat dieselbe Struktur wie das zweite Listen-, 
geschachtelte Listen- oder Matrix-Argument,
@code{@var{x}[i_1]...[i_m][j_1]...[j_n]}  hat dieselbe Struktur wie das 
dritte Listen-, geschachtelte Listen- oder Matrix-Argument, u.s.w.,
wobei @var{m}, @var{n}, ... die Anzahl der Indizes ist, die jeweils
ben@"otigt werden, um auf die Elemente des jeweiligen Arguments zugreifen zu k@"onnen
(Eins f@"ur eine Liste, zwei f@"ur eine Matrix und eins oder mehr f@"ur eine
geschachtelte Liste).
Argumente, die keine Listen oder Matrizen sind, haben auf die Struktur des
R@"uckgabewertes keinen Einfluss.

Beachte, dass sich der Effekt von @code{outermap} von einer Anwendung von
@var{f} auf jedes Element des vom @code{cartesian_product}
zur@"uckgegebenen @"au@ss{}eren Produkts unterscheidet.
@code{outermap} h@"alt die Struktur der Argumente im R@"uckgabewert aufrecht,
w@"ahrend @code{cartesian_product} dies nicht tut.

@code{outermap} wertet seine Argumente aus.

Siehe auch @code{map}, @code{maplist}, und @code{apply}.
@c CROSS REF OTHER FUNCTIONS HERE ??

Beispiele:

Elementare Beispiele von @code{outermap}.
Um die Kombination der Argumente klar zeigen zu k@"onnen, bleibt @code{F}
undefiniert.

@c ===beg===
@c outermap (F, [a, b, c], [1, 2, 3]);
@c outermap (F, matrix ([a, b], [c, d]), matrix ([1, 2], [3, 4]));
@c outermap (F, [a, b], x, matrix ([1, 2], [3, 4]));
@c outermap (F, [a, b], matrix ([1, 2]), matrix ([x], [y]));
@c outermap ("+", [a, b, c], [1, 2, 3]);
@c ===end===
@example
(%i1) outermap (F, [a, b, c], [1, 2, 3]);
(%o1) [[F(a, 1), F(a, 2), F(a, 3)], [F(b, 1), F(b, 2), F(b, 3)], 
                                     [F(c, 1), F(c, 2), F(c, 3)]]
(%i2) outermap (F, matrix ([a, b], [c, d]), matrix ([1, 2], [3, 4]));
         [ [ F(a, 1)  F(a, 2) ]  [ F(b, 1)  F(b, 2) ] ]
         [ [                  ]  [                  ] ]
         [ [ F(a, 3)  F(a, 4) ]  [ F(b, 3)  F(b, 4) ] ]
(%o2)    [                                            ]
         [ [ F(c, 1)  F(c, 2) ]  [ F(d, 1)  F(d, 2) ] ]
         [ [                  ]  [                  ] ]
         [ [ F(c, 3)  F(c, 4) ]  [ F(d, 3)  F(d, 4) ] ]
(%i3) outermap (F, [a, b], x, matrix ([1, 2], [3, 4]));
       [ F(a, x, 1)  F(a, x, 2) ]  [ F(b, x, 1)  F(b, x, 2) ]
(%o3) [[                        ], [                        ]]
       [ F(a, x, 3)  F(a, x, 4) ]  [ F(b, x, 3)  F(b, x, 4) ]
(%i4) outermap (F, [a, b], matrix ([1, 2]), matrix ([x], [y]));
       [ [ F(a, 1, x) ]  [ F(a, 2, x) ] ]
(%o4) [[ [            ]  [            ] ], 
       [ [ F(a, 1, y) ]  [ F(a, 2, y) ] ]
                              [ [ F(b, 1, x) ]  [ F(b, 2, x) ] ]
                              [ [            ]  [            ] ]]
                              [ [ F(b, 1, y) ]  [ F(b, 2, y) ] ]
(%i5) outermap ("+", [a, b, c], [1, 2, 3]);
(%o5) [[a + 1, a + 2, a + 3], [b + 1, b + 2, b + 3], 
                                           [c + 1, c + 2, c + 3]]
@end example

Eine n@"ahere Betrachtung der R@"uckgabewerte von @code{outermap}.
Das erste, zweite und dritte Argument sind eine Matrix, eine Liste bzw. eine Matrix.
Der R@"uckgabewert ist eine Matrix. Jedes Element dieser Matrix ist eine Liste,
und jedes Element jeder Liste ist eine Matrix.

@c ===beg===
@c arg_1 :  matrix ([a, b], [c, d]);
@c arg_2 : [11, 22];
@c arg_3 : matrix ([xx, yy]);
@c xx_0 : outermap (lambda ([x, y, z], x / y + z), arg_1, arg_2, arg_3);
@c xx_1 : xx_0 [1][1];
@c xx_2 : xx_0 [1][1] [1];
@c xx_3 : xx_0 [1][1] [1] [1][1];
@c [op (arg_1), op (arg_2), op (arg_3)];
@c [op (xx_0), op (xx_1), op (xx_2)];
@c ===end===
@example
(%i1) arg_1 :  matrix ([a, b], [c, d]);
                            [ a  b ]
(%o1)                       [      ]
                            [ c  d ]
(%i2) arg_2 : [11, 22];
(%o2)                       [11, 22]
(%i3) arg_3 : matrix ([xx, yy]);
(%o3)                      [ xx  yy ]
(%i4) xx_0 : outermap (lambda ([x, y, z], x / y + z), arg_1, arg_2, arg_3);
               [  [      a        a  ]  [      a        a  ]  ]
               [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]
               [  [      11       11 ]  [      22       22 ]  ]
(%o4)  Col 1 = [                                              ]
               [  [      c        c  ]  [      c        c  ]  ]
               [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]
               [  [      11       11 ]  [      22       22 ]  ]
                 [  [      b        b  ]  [      b        b  ]  ]
                 [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]
                 [  [      11       11 ]  [      22       22 ]  ]
         Col 2 = [                                              ]
                 [  [      d        d  ]  [      d        d  ]  ]
                 [ [[ xx + --  yy + -- ], [ xx + --  yy + -- ]] ]
                 [  [      11       11 ]  [      22       22 ]  ]
(%i5) xx_1 : xx_0 [1][1];
           [      a        a  ]  [      a        a  ]
(%o5)     [[ xx + --  yy + -- ], [ xx + --  yy + -- ]]
           [      11       11 ]  [      22       22 ]
(%i6) xx_2 : xx_0 [1][1] [1];
                      [      a        a  ]
(%o6)                 [ xx + --  yy + -- ]
                      [      11       11 ]
(%i7) xx_3 : xx_0 [1][1] [1] [1][1];
                                  a
(%o7)                        xx + --
                                  11
(%i8) [op (arg_1), op (arg_2), op (arg_3)];
(%o8)                  [matrix, [, matrix]
(%i9) [op (xx_0), op (xx_1), op (xx_2)];
(%o9)                  [matrix, [, matrix]
@end example

@code{outermap} h@"alt die Struktur der Argumente im R@"uckgabewert aufrecht, 
w@"ahrend @code{cartesian_product} dies nicht tut.

@c ===beg===
@c outermap (F, [a, b, c], [1, 2, 3]);
@c setify (flatten (%));
@c map (lambda ([L], apply (F, L)), cartesian_product ({a, b, c}, {1, 2, 3}));
@c is (equal (%, %th (2)));
@c ===end===
@example
(%i1) outermap (F, [a, b, c], [1, 2, 3]);
(%o1) [[F(a, 1), F(a, 2), F(a, 3)], [F(b, 1), F(b, 2), F(b, 3)], 
                                     [F(c, 1), F(c, 2), F(c, 3)]]
(%i2) setify (flatten (%));
(%o2) @{F(a, 1), F(a, 2), F(a, 3), F(b, 1), F(b, 2), F(b, 3), 
                                       F(c, 1), F(c, 2), F(c, 3)@}
(%i3) map (lambda ([L], apply (F, L)), cartesian_product (@{a, b, c@}, @{1, 2, 3@}));
(%o3) @{F(a, 1), F(a, 2), F(a, 3), F(b, 1), F(b, 2), F(b, 3), 
                                       F(c, 1), F(c, 2), F(c, 3)@}
(%i4) is (equal (%, %th (2)));
(%o4)                         true
@end example

@end deffn
