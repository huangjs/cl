@c version 1.16
@menu
* Funciones y variables para Afines::      
@end menu

@node Funciones y variables para Afines,  , Afines, Afines

@section Funciones y variables para Afines

@deffn {Funci@'on} fast_linsolve ([@var{expr_1}, ..., @var{expr_m}], [@var{x_1}, ..., @var{x_n}])
Resuelve las ecuaciones lineales simult@'aneas @var{expr_1}, ..., @var{expr_m}
para las variables @var{x_1}, ..., @var{x_n}.
Cada @var{expr_i} puede ser una ecuaci@'on o una expresi@'on general;
en caso de tratarse de una expresi@'on general, ser@'a tratada como una ecuaci@'on de la forma @code{@var{expr_i} = 0}.

El valor que devuelve es una lista de ecuaciones de la forma
@code{[@var{x_1} = @var{a_1}, ..., @var{x_n} = @var{a_n}]}
donde todas las @var{a_1}, ..., @var{a_n} est@'an exentas de @var{x_1}, ..., @var{x_n}.

La funci@'on @code{fast_linsolve} es m@'as r@'apida que @code{linsolve} para sistemas de ecuaciones con coeficientes
dispersos.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} grobner_basis ([@var{expr_1}, ..., @var{expr_m}])
Devuelve una base de Groebner para las ecuaciones @var{expr_1}, ..., @var{expr_m}.
La funci@'on @code{polysimp} puede ser entonces utilizada para simplificar
otras funciones relativas a las ecuaciones.

@example
grobner_basis ([3*x^2+1, y*x])$

polysimp (y^2*x + x^3*9 + 2) ==> -3*x + 2
@end example

@code{polysimp(f)} alcanza 0 si y s@'olo si @var{f} est@'a en el ideal generado por
@var{expr_1}, ..., @var{expr_m}, es decir, si y s@'olo si @var{f} es una
combinaci@'on  polin@'omica de los elementos de 
@var{expr_1}, ..., @var{expr_m}.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@c NEEDS CLARIFICATION IN A SERIOUS WAY
@deffn {Funci@'on} set_up_dot_simplifications (@var{eqns}, @var{check_through_degree})
@deffnx {Funci@'on} set_up_dot_simplifications (@var{eqns})

Las @var{eqns} son ecuaciones polin@'omicas de variables no conmutativas.
El valor de @code{current_variables} es la lista de variables utilizadas para
el c@'alculo de los grados. Las ecuaciones deben ser homog@'eneas, al objeto de 
completar el procedimiento.

@c AQUI FALTA UN PARRAFO POR TRADUCIR (Mario)

El grado es el devuelto por @code{nc_degree}. @'Este a su vez depende de los pesos 
de las variables individuales.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} declare_weights (@var{x_1}, @var{w_1}, ..., @var{x_n}, @var{w_n})
Asigna los pesos @var{w_1}, ..., @var{w_n} a @var{x_1}, ..., @var{x_n}, respectivamente.
Estos pesos son los utilizados en el c@'alculo de @code{nc_degree}.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} nc_degree (@var{p})
Devuelve el grado de un polinomio no conmutativo @var{p}. V@'ease @code{declare_weights}.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@c NEEDS CLARIFICATION -- TO WHICH EQUATIONS DOES THIS DESCRIPTION REFER ??
@deffn {Funci@'on} dotsimp (@var{f})
Devuelve 0 si y s@'olo si  @var{f} est@'a en el ideal generado por las ecuaciones, esto es,
si y s@'olo si @var{f} es una combinaci@'on lineal de los elementos de las ecuaciones.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} fast_central_elements ([@var{x_1}, ..., @var{x_n}], @var{n})
Si se ha ejecutado @code{set_up_dot_simplifications} con antelaci@'on, obtiene los 
polinomios centrales de grado @var{n} de variables @var{x_1}, ..., @var{x_n}.

Por ejemplo:
@example
set_up_dot_simplifications ([y.x + x.y], 3);
fast_central_elements ([x, y], 2);
[y.y, x.x];
@end example

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@c THIS IS NOT AT ALL CLEAR
@deffn {Funci@'on} check_overlaps (@var{n}, @var{add_to_simps})
Revisa la superposici@'on hasta el grado @var{n},
asegur@'andose de que el usuario tiene suficientes reglas de simplificaci@'on en cada
grado para que @code{dotsimp} trabaje correctamente. Este proceso puede acelerarse
si se conoce de antemano cu@'al es la dimensi@'on del espacio de monomios.
Si @'este es de dimensi@'on global finita, entonces deber@'{@dotless{i}}a usarse @code{hilbert}. Si
no se conoce la dimensiones de los monomios, no se deber@'{@dotless{i}}a especificar una @code{rank_function}.
Un tercer argumento opcional es @code{reset}.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} mono ([@var{x_1}, ..., @var{x_n}], @var{n})
Devuelve la lista de monomios independientes. @c FALTA COMPLETAR ESTE PARRAFO (Mario)

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn


@deffn {Funci@'on} monomial_dimensions (@var{n})
Calcula el desarrollo de Hilbert de grado @var{n} para el algebra actual.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} extract_linear_equations ([@var{p_1}, ..., @var{p_n}], [@var{m_1}, ..., @var{m_n}])
Hace una lista de los coeficientes de los polinomios no conmutativos @var{p_1}, ..., @var{p_n}  
de los monomios no conmutativos @var{m_1}, ..., @var{m_n}. Los coeficientes deben escalares. H@'agase uso 
de @code{list_nc_monomials} para construir la lista de monomios.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@deffn {Funci@'on} list_nc_monomials ([@var{p_1}, ..., @var{p_n}])
@deffnx {Funci@'on} list_nc_monomials (@var{p})
Devuelve  una lista de los monomios no conmutativos que aparecen en el polinomio  @var{p}
o una lista de polinomios en @var{p_1}, ..., @var{p_n}.

Antes de utilizar esta funci@'on ejec@'utese @code{load(affine)}.
@end deffn

@c THIS FUNCTION DOESN'T SEEM TO BE APPROPRIATE IN USER-LEVEL DOCUMENTATION
@c PRESERVE THIS DESCRIPTION PENDING FURTHER DECISION
@c @defun pcoeff (poly monom [variables-to-exclude-from-cof (list-variables monom)])
@c 
@c This function is called from Lisp level, and uses internal poly format.
@c @example
@c 
@c CL-MAXIMA>>(setq me (st-rat #$x^2*u+y+1$))
@c (#:Y 1 1 0 (#:X 2 (#:U 1 1) 0 1))
@c 
@c CL-MAXIMA>>(pcoeff me (st-rat #$x^2$))
@c (#:U 1 1)
@c @end example
@c @noindent
@c 
@c Rule: if a variable appears in monom it must be to the exact power,
@c and if it is in variables to exclude it may not appear unless it was
@c in monom to the exact power.  (pcoeff pol 1 ..) will exclude variables
@c like substituting them to be zero.
@c 
@c @end defun

@c THIS FUNCTION DOESN'T SEEM TO BE APPROPRIATE IN USER-LEVEL DOCUMENTATION
@c PRESERVE THIS DESCRIPTION PENDING FURTHER DECISION
@c @defun new-disrep (poly)
@c 
@c From Lisp this returns the general Maxima format for an arg which is
@c in st-rat form:
@c 
@c @example
@c (displa(new-disrep (setq me (st-rat #$x^2*u+y+1$))))
@c 
@c        2
@c y + u x  + 1
@c @end example
@c 
@c @end defun


@defvr {Variable} all_dotsimp_denoms
Valor por defecto: @code{false}

Cuando @code{all_dotsimp_denoms} es una lista, los denominadores encontrados
por @code{dotsimp} son a@~nadidos a la lista. La variable @code{all_dotsimp_denoms}
puede inicializarse como una lista vac@'{@dotless{i}}a @code{[]} antes de llamar a @code{dotsimp}.

Por defecto, @code{dotsimp} no recolecta los denominadores.

@end defvr



