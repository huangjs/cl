@c version 1.14
@menu
* Funciones y variables para la detecci@'on e informe de fallos::
@end menu


@node Funciones y variables para la detecci@'on e informe de fallos
@section Funciones y variables para la detecci@'on e informe de fallos
@deffn {Funci@'on} run_testsuite ([@var{options}])

Ejecuta el conjunto de pruebas de Maxima. Los tests que producen las 
respuestas deseadas son considerados como ``pruebas superadas'', como
los tests que no producen las respuestas deseadas, son marcados como
fallos conocidos. 

@code{run_testsuite} admite las siguientes opciones:

@table @var
@item display_all
Muestra todas las pruebas. Normalmente no se muestran las pruebas,
a menos que produzcan fallos. (Su valor por defecto es @code{false}).
@item display_known_bugs
Muestra las pruebas marcadas como fallos ya conocidos. (Su valor
por defecto es @code{false}).
@item tests
Esta es la lista de las pruebas que se deben ejecutar. Cada prueba
se puede especificar, tanto mediante una cadena de texto como
por un s@'{@dotless{i}}mbolo. Por defecto, todas las pruebas se ejecutan. El
conjunto completo de pruebas est@'a especificado en @code{testsuite_files}.
@end table

Por ejemplo, @code{run_testsuite(display_known_bugs = true, tests=[rtest5])}
ejecuta la prueba @code{rtest5} y muestra si est@'a marcada como fallo
conocido.

@code{run_testsuite(display_all = true, tests=["rtest1", rtest1a])} ejecutar@'a
las pruebas @code{rtest1} y @code{rtest2}, mostrando cada una de ellas.

@code{run_testsuite} cambia el entorno de Maxima. 
T@'{@dotless{i}}picamente un script de test ejecuta @code{kill} para establecer un entorno conocido (ll@'amese uno sin funciones ni variables definidas por el usuario) y entonces define una serie de funciones y variables apropiadas para el test. 

@code{run_testsuite} retorna @code{done}.
@end deffn


@defvr {Variable opcional} testsuite_files

@code{testsuite_files} es el conjunto de tests a ejecutar por @code{run_testsuite}. Se trata de una lista con los nombres de los ficheros que contienen los tests a ejecutar. Si se sabe que alguno de los tests de un fichero falla, entonces en lugar de listar el nombre del fichero, se utiliza una lista que contiene el nombre del fichero y los n@'umeros de los tests que fallan.

Por ejemplo, esta es una parte de los tests por defecto:

@example
 ["rtest13s", ["rtest14", 57, 63]]
@end example

Con esto se especifica que el conjunto de tests est@'a formado por los ficheros "rtest13s"  y "rtest14", pero que "rtest14" contiene dos tests que se sabe que causan fallos, el 57 y el 63.
@end defvr


@deffn {Funci@'on} bug_report ()
Imprime las versiones de Maxima y de Lisp y proporciona un enlace a la
p@'agina web sobre informe de fallos del proyecto Maxima. 
La informaci@'on respecto a las versiones es la misma que reporta la 
funci@'on @code{build_info}. 

Cuando se informa sobre un fallo, es de gran ayuda que se copie la
informaci@'on relacionada con la versi@'on de Maxima y de Lisp usada,
dentro del propio informe. 

@code{bug_report} retorna una cadena vac@'{@dotless{i}}a @code{""}.
@end deffn

@deffn {Funci@'on} build_info ()
Imprime un resumen de los par@'ametros que se usaron para construir la
versi@'on de Maxima que se est@'a usando. 

@code{build_info} retorna una cadena vac@'{@dotless{i}}a  @code{""}.
@end deffn
