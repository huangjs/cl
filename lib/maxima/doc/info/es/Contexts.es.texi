@c english version 1.13
@menu
* Funciones y variables para Contextos::    
@end menu

@node Funciones y variables para Contextos,  , Contextos, Contextos
@section Funciones y variables para Contextos

@deffn {Funci@'on} activate (@var{context_1}, ..., @var{context_n})
Activa los contextos @var{context_1}, ..., @var{context_n}.
Los hechos en estos contextos est@'an disponibles para hacer deducciones y extraer informaci@'on.
Los hechos en estos contextos no se listan al invocar @code{facts ()}.

La variable @code{activecontexts} es la lista de contextos que se han activado por medio de la funci@'on @code{activate}.

@end deffn

@defvr {Variable del sistema} activecontexts
Valor por defecto: @code{[]}

La variable @code{activecontexts} es la lista de contextos que se han activado por medio de la funci@'on @code{activate}, pero que no se han activado por ser subcontextos del contexto actual.

@end defvr

@deffn {Funci@'on} assume (@var{pred_1}, ..., @var{pred_n})
A@~nade los predicados @var{pred_1}, ..., @var{pred_n} al contexto actual.
Si un predicado es inconsistente o redundante con los otros predicados
del contexto actual, entonces no es a@~nadido al contexto. 
El contexto va acumulando predicados con cada llamada a @code{assume}.

La funci@'on @code{assume} devuelve una lista cuyos miembros son los 
predicados que han sido a@~nadidos al contexto, o los @'atomos 
@code{redundant} o @code{inconsistent} si fuere necesario.

Los predicados @var{pred_1}, ..., @var{pred_n} tan solo pueden ser
expresiones formadas con los operadores relacionales @code{< <= equal notequal >=}
y @code{>}. Los predicados no pueden estar formados por expresiones que sean del
tipo igualdad @code{=} ni del tipo desigualdad @code{#}, ni tampoco pueden ser
funciones de predicado como @code{integerp}.

En cambio, s@'{@dotless{i}} se reconocen predicados compuestos de la forma 
@code{@var{pred_1} and ... and @var{pred_n}}, pero no 
@code{@var{pred_1} or ... or @var{pred_n}}.
Tambi@'en se reconoce @code{not @var{pred_k}} si @var{pred_k} es un
predicado relacional. Expresiones de la forma @code{not (@var{pred_1} and @var{pred_2})}
y @code{not (@var{pred_1} or @var{pred_2})} no son reconocidas.

El mecanismo deductivo de Maxima no es muy potente; existen muchas 
consecuencias que, siendo obvias, no pueden ser obtenidas por @code{is}.
Se trata de una debilidad reconocida.

La funci@'on @code{assume} eval@'ua sus argumentos.

V@'eanse tambi@'en @code{is}, @code{facts}, @code{forget}, @code{context} y @code{declare}.

Ejemplos:

@c ===beg===
@c assume (xx > 0, yy < -1, zz >= 0);
@c assume (aa < bb and bb < cc);
@c facts ();
@c is (xx > yy);
@c is (yy < -yy);
@c is (sinh (bb - aa) > 0);
@c forget (bb > aa);
@c prederror : false;
@c is (sinh (bb - aa) > 0);
@c is (bb^2 < cc^2);
@c ===end===

@example
(%i1) assume (xx > 0, yy < -1, zz >= 0);
(%o1)              [xx > 0, yy < - 1, zz >= 0]
(%i2) assume (aa < bb and bb < cc);
(%o2)                  [bb > aa, cc > bb]
(%i3) facts ();
(%o3)     [xx > 0, - 1 > yy, zz >= 0, bb > aa, cc > bb]
(%i4) is (xx > yy);
(%o4)                         true
(%i5) is (yy < -yy);
(%o5)                         true
(%i6) is (sinh (bb - aa) > 0);
(%o6)                         true
(%i7) forget (bb > aa);
(%o7)                       [bb > aa]
(%i8) prederror : false;
(%o8)                         false
(%i9) is (sinh (bb - aa) > 0);
(%o9)                        unknown
(%i10) is (bb^2 < cc^2);
(%o10)                       unknown
@end example

@end deffn

@defvr {Variable opcional} assumescalar
Valor por defecto: @code{true}

La variable @code{assumescalar} ayuda a controlar si una expresi@'on @code{expr} para la cual @code{nonscalarp (expr)} es @code{false} va a tener un comportamiento similar a un escalar bajo ciertas transformaciones.

Sea @code{expr} cualquier expresi@'on distinta de una lista o matriz, y sea tambi@'en @code{[1, 2, 3]} una lista o una matriz. Entonces, @code{expr . [1, 2, 3]} dar@'a como resultado @code{[expr, 2 expr, 3 expr]} si @code{assumescalar} es @code{true}, o si @code{scalarp (expr)} es @code{true}, o si @code{constantp (expr)} es @code{true}.

Si @code{assumescalar} vale @code{true}, la expresi@'on se comportar@'a como un escalar s@'olo en operaciones conmutativas, pero no en el caso de la multiplicaci@'on no conmutativa o producto matricial @code{.}.

Si @code{assumescalar} vale @code{false}, la expresi@'on se comportar@'a como un no escalar.

Si @code{assumescalar} vale @code{all}, la expresi@'on se comportar@'a como un escalar para todas las operaciones.

@end defvr

@defvr {Variable opcional} assume_pos
Valor por defecto: @code{false}

Si @code{assume_pos} vale @code{true} y el signo de un par@'ametro @var{x} no puede ser determinado a partir del contexto actual o de otras consideraciones, @code{sign} y @code{asksign (@var{x})} devolver@'an @code{true}. Con esto se pueden evitar algunas preguntas al usuario que se generan autom@'aticamente, como las que hacen @code{integrate} y otras funciones.

By default, a parameter is @var{x} such that @code{symbolp (@var{x})}
or @code{subvarp (@var{x})}.

Por defecto, un par@'ametro @var{x} es aquel para el que @code{symbolp (@var{x})} o @code{subvarp (@var{x})} devuelven @code{true}.
La clase de expresiones que se consideran par@'ametros se puede extender mediante la utilizaci@'on de la variable @code{assume_pos_pred}.

Las funciones @code{sign} y @code{asksign} intentan deducir el signo de una expresi@'on a partir de los signos de los operandos que contiene. Por ejemplo, si @code{a} y @code{b} son ambos positivos, entonces @code{a + b} tambi@'en es positivo.

Sin embargo, no es posible obviar todas las preguntas que hace @code{asksign}. En particular, cuando el argumento de @code{asksign} es una diferencia @code{@var{x} - @var{y}} o un logaritmo @code{log(@var{x})}, @code{asksign} siempre solicita una respuesta por parte del usuario, incluso cuando @code{assume_pos} vale @code{true} y @code{assume_pos_pred} es una funci@'on que devuelve @code{true} para todos los argumentos.

@c NEED EXAMPLES HERE
@end defvr

@defvr {Variable opcional} assume_pos_pred
Valor por defecto: @code{false}

Cuando a @code{assume_pos_pred} se le asigna el nombre de una funci@'on o una expresi@'on lambda de un @'unico argumento @var{x}, @'esta ser@'a invocada para determinar si @var{x} se considera un par@'ametro por @code{assume_pos}. La variable 
@code{assume_pos_pred} se ignora cuando @code{assume_pos} vale @code{false}.

La funci@'on @code{assume_pos_pred} es invocada por  @code{sign} y por @code{asksign} con un argumento @var{x}, el cual puede ser un @'atomo, una variable subindicada o una expresi@'on de llamada a una funci@'on. Si la funci@'on @code{assume_pos_pred} devuelve @code{true}, @var{x} ser@'a considerada como un par@'ametro por @code{assume_pos}.

Por defecto, un par@'ametro @var{x} es aquel para el que @code{symbolp (@var{x})} o @code{subvarp (@var{x})} devuelven @code{true}.

V@'eanse tambi@'en @code{assume} y @code{assume_pos}.

Ejemplos:
@c EXAMPLE OUTPUT GENERATED FROM:
@c assume_pos: true$
@c assume_pos_pred: symbolp$
@c sign (a);
@c sign (a[1]);
@c assume_pos_pred: lambda ([x], display (x), true)$
@c asksign (a);
@c asksign (a[1]);
@c asksign (foo (a));
@c asksign (foo (a) + bar (b));
@c asksign (log (a));
@c asksign (a - b);

@example
(%i1) assume_pos: true$
(%i2) assume_pos_pred: symbolp$
(%i3) sign (a);
(%o3)                          pos
(%i4) sign (a[1]);
(%o4)                          pnz
(%i5) assume_pos_pred: lambda ([x], display (x), true)$
(%i6) asksign (a);
                              x = a

(%o6)                          pos
(%i7) asksign (a[1]);
                             x = a
                                  1

(%o7)                          pos
(%i8) asksign (foo (a));
                           x = foo(a)

(%o8)                          pos
(%i9) asksign (foo (a) + bar (b));
                           x = foo(a)

                           x = bar(b)

(%o9)                          pos
(%i10) asksign (log (a));
                              x = a

Is  a - 1  positive, negative, or zero?

p;
(%o10)                         pos
(%i11) asksign (a - b);
                              x = a

                              x = b

                              x = a

                              x = b

Is  b - a  positive, negative, or zero?

p;
(%o11)                         neg
@end example

@end defvr

@defvr {Variable opcional} context
Valor por defecto: @code{initial}

La variable @code{context} da nombre al conjunto de hechos establecidos desde @code{assume} y @code{forget}. La funci@'on @code{assume} a@~nade nuevos hechos al conjunto nombrado por @code{context}, mientras que @code{forget} los va eliminando.
Asignando a @code{context} un nuevo nombre @var{foo} cambia el contexto actual a @var{foo}. Si el contexto @var{foo} no existe todav@'{@dotless{i}}a, se crea autom@'aticamente mediante una llamada a @code{newcontext}.

V@'ease @code{contexts} para una descripci@'on general del mecanismo que siguen los contextos.

@end defvr

@defvr {Variable opcional} contexts
Valor por defecto: @code{[initial, global]}

La variable @code{contexts} es una lista que contiene los contextos existentes, incluyendo el actualmente activo.

El mecanismo que siguen los contextos permiten al usuario agrupar y nombrar un conjunto de hechos, que recibe el nombre de contexto. Una vez hecho esto, el usuario puede hacer que Maxima tenga en cuenta o que olvide cualquier n@'umero de hechos sin m@'as que activar o desactivar su contexto.

Cualquier @'atomo simb@'olico puede ser el nombre de un contexto, y los hechos contenidos en tal contexto pueden ser almacenados hasta que se destruyan uno a uno mediante llamadas a la funci@'on @code{forget}, o que se destruyan conjuntamente invocando a @code{kill} para eliminar el contexto al que pertenecen.

Los contextos tienen estructura jer@'arquica, siendo su ra@'{@dotless{i}}z el contexto @code{global}, el cual contiene informaci@'on sobre Maxima que necesitan algunas funciones. Cuando en un contexto todos los hechos est@'an activos (lo que significa que est@'an siendo utilizados en deducciones) lo estar@'an tambi@'en en cualquier subcontexto del contexto actual.

Cuando se comienza una sesi@'on de Maxima, el usuario estar@'a trabajando en un contexto llamado @code{initial}, el cual tiene un subcontexto de nombre @code{global}.

V@'eanse tambi@'en @code{facts}, @code{newcontext}, @code{supcontext}, @code{killcontext}, @code{activate}, @code{deactivate}, @code{assume} y @code{forget}.

@end defvr

@deffn {Funci@'on} deactivate (@var{contexto_1}, ..., @var{contexto_n})
Desactiva los contextos especificados @var{contexto_1}, ..., @var{contexto_n}.

@end deffn

@deffn {Funci@'on} facts (@var{item})
@deffnx {Funci@'on} facts ()
Si @var{item} es el nombre de un contexto,
@code{facts (@var{item})} devuelve una lista
con los hechos asociados al contexto especificado.

Si @var{item} no es el nombre de un contexto,
@code{facts (@var{item})} devuelve una lista con los hechos conocidos acerca de @var{item} en el contexto actual. Los hechos que est@'en activos en contextos diferentes no aparecen en la lista.

La lamada @code{facts ()}, sin argumentos, muestra el contexto actual.

@end deffn

@defvr {Declaraci@'on} features
Maxima reconoce ciertas propiedades matem@'aticas sobre funciones y variables.

La llamada @code{declare (@var{x}, @var{foo})} asocia la propiedad @var{foo} a la funci@'on o variable @var{x}.

La llamada @code{declare (@var{foo}, feature)} declara una nueva propiedad @var{foo}. Por ejemplo, @code{declare ([rojo, verde, azul], feature)} declara tres nuevas propiedades, @code{rojo}, @code{verde} y @code{azul}.

El predicado @code{featurep (@var{x}, @var{foo})}
devuelve @code{true} si @var{x} goza de la propiedad @var{foo}, y @code{false} en caso contrario.

La lista @code{features} contiene las propiedades que reconoce Maxima; a saber,
@code{integer}, @code{noninteger}, @code{even}, @code{odd}, @code{rational},
@code{irrational}, @code{real}, @code{imaginary}, @code{complex},
@code{analytic}, @code{increasing}, @code{decreasing}, @code{oddfun},
@code{evenfun}, @code{posfun}, @code{commutative}, @code{lassociative},
@code{rassociative}, @code{symmetric}, and @code{antisymmetric}, junto con las definidas por el usuario.

La lista @code{features} s@'olo contiene propiedades matem@'aticas. Hay otra lista con propiedades no matem@'aticas; V@'ease @code{status}.

@end defvr

@deffn {Funci@'on} forget (@var{pred_1}, ..., @var{pred_n})
@deffnx {Funci@'on} forget (@var{L})
Borra los predicados establecidos por @code{assume}. Los predicados pueden ser expresiones equivalentes, pero no necesariamente id@'enticas, a las establecidas por @code{assume}.
The predicates may be expressions equivalent to (but not necessarily identical to)
those previously assumed.

La llamada @code{forget (@var{L})}, siendo @var{L} una lista de predicados, borra todos los predicados contenidos en ella.

@end deffn

@deffn {Funci@'on} killcontext (@var{contexto_1}, ..., @var{contexto_n})
Elimina los contextos @var{contexto_1}, ..., @var{contexto_n}.

Si alguno de estos contextos es el actual, el nuevo contexto activo ser@'a el primer subcontexto disponible del actual que no haya sido eliminado. Si el primer contexto no eliminado disponible es @code{global} entonces @code{initial} ser@'a usado en su lugar.  Si el contexto @code{initial} es eliminado, se crear@'a un nuevo contexto @code{initial} completamente vac@'{@dotless{i}}o.

La funci@'on @code{killcontext} no elimina un contexto actualmente activo si es un subcontexto del contexto actual, o si se hace uso de la funci@'on @code{activate}.

La funci@'on @code{killcontext} eval@'ua sus argumentos y devuelve @code{done}.

@end deffn

@deffn {Funci@'on} newcontext (@var{nombre})
Crea un nuevo contexto vac@'{@dotless{i}}o @var{nombre}, el cual tiene a @code{global} como su @'unico subcontexto. El reci@'en creado contexto pasa a ser el contexto actualmente activo.

La funci@'on @code{newcontext} eval@'ua sus argumentos y devuelve @var{nombre}.

@end deffn

@deffn {Funci@'on} supcontext (@var{nombre}, @var{contexto})
@deffnx {Funci@'on} supcontext (@var{nombre})
Crea un nuevo contexto @var{nombre}, que tiene a @var{contexto} como subcontexto. El argumento
@var{contexto} debe existir ya.

Si no se especifica @var{context}, se tomar@'a como tal el actual.

@end deffn
