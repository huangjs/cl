@c English version 1.12
@menu
* Introducci@'on a las funciones e integrales el@'{@dotless{i}}pticas::
* Funciones y variables para funciones el@'{@dotless{i}}pticas::
* Funciones y variables para integrales el@'{@dotless{i}}pticas::
@end menu


@node Introducci@'on a las funciones e integrales el@'{@dotless{i}}pticas, Funciones y variables para funciones el@'{@dotless{i}}pticas, Funciones el@'{@dotless{i}}pticas, Funciones el@'{@dotless{i}}pticas
@comment  node-name,  next,  previous,  up

@section Introducci@'on a las funciones e integrales el@'{@dotless{i}}pticas

Maxima da soporte para las funciones el@'{@dotless{i}}pticas jacobianas y para las integrales el@'{@dotless{i}}pticas completas e incompletas.  Esto incluye la manipulaci@'on simb@'olica de estas funciones y su evaluaci@'on num@'erica. Las definiciones de estas funciones y de muchas de sus propiedades se pueden encontrar en Abramowitz y Stegun, cap@'{@dotless{i}}tulos 16--17, que es la fuente principal utilizada para su programaci@'on en Maxima, aunque existen algunas diferencias.

En particular, todas las funciones e integrales el@'{@dotless{i}}pticas utilizan el par@'amero @math{m} en lugar del m@'odulo @math{k} o del @'angulo @math{alfa}. Esta es una de las diferencias con Abramowitz y Stegun, que utilizan el @'angulo para las funciones el@'{@dotless{i}}pticas. Las siguientes relaciones son v@'alidas:

@ifhtml
@math{m = k^2} y @math{k = sin(alfa)}.
@end ifhtml
@ifinfo
@math{m = k^2} y @math{k = sin(alfa)}.
@end ifinfo
@tex
$$m = k^2$$ y $$k = \sin\alpha $$
@end tex

Las funciones e integrales el@'{@dotless{i}}pticas en Maxima tienen como objetivo primordial dar soporte al c@'alculo simb@'olico, de ah@'{@dotless{i}} que tambi@'en est@'en incluidas la mayor@'{@dotless{i}}a de las derivadas e integrales asociadas a estas funciones. No obstante lo anterior, si los argumentos dados a las funciones son decimales en coma flotante, los resultados tambi@'en ser@'an decimales.

Sin embargo, la mayor@'{@dotless{i}}a de las propiedades no realacionadas con las derivadas de las funciones e integrales el@'{@dotless{i}}pticas  todav@'{@dotless{i}}a no han sido programadas en Maxima.

Algunos ejemplos de funciones el@'{@dotless{i}}pticas:
@c ===beg===
@c jacobi_sn (u, m);
@c jacobi_sn (u, 1);
@c jacobi_sn (u, 0);
@c diff (jacobi_sn (u, m), u);
@c diff (jacobi_sn (u, m), m);
@c ===end===
@example
(%i1) jacobi_sn (u, m);
(%o1)                    jacobi_sn(u, m)
(%i2) jacobi_sn (u, 1);
(%o2)                        tanh(u)
(%i3) jacobi_sn (u, 0);
(%o3)                        sin(u)
(%i4) diff (jacobi_sn (u, m), u);
(%o4)            jacobi_cn(u, m) jacobi_dn(u, m)
(%i5) diff (jacobi_sn (u, m), m);
(%o5) jacobi_cn(u, m) jacobi_dn(u, m)

      elliptic_e(asin(jacobi_sn(u, m)), m)
 (u - ------------------------------------)/(2 m)
                     1 - m

            2
   jacobi_cn (u, m) jacobi_sn(u, m)
 + --------------------------------
              2 (1 - m)
@end example

Algunos ejemplos de integrales el@'{@dotless{i}}pticas:
@c ===beg===
@c elliptic_f (phi, m);
@c elliptic_f (phi, 0);
@c elliptic_f (phi, 1);
@c elliptic_e (phi, 1);
@c elliptic_e (phi, 0);
@c elliptic_kc (1/2);
@c makegamma (%);
@c diff (elliptic_f (phi, m), phi);
@c diff (elliptic_f (phi, m), m);
@c ===end===
@example
(%i1) elliptic_f (phi, m);
(%o1)                  elliptic_f(phi, m)
(%i2) elliptic_f (phi, 0);
(%o2)                          phi
(%i3) elliptic_f (phi, 1);
                               phi   %pi
(%o3)                  log(tan(--- + ---))
                                2     4
(%i4) elliptic_e (phi, 1);
(%o4)                       sin(phi)
(%i5) elliptic_e (phi, 0);
(%o5)                          phi
(%i6) elliptic_kc (1/2);
                                     1
(%o6)                    elliptic_kc(-)
                                     2
(%i7) makegamma (%);
                                 2 1
                            gamma (-)
                                   4
(%o7)                      -----------
                           4 sqrt(%pi)
(%i8) diff (elliptic_f (phi, m), phi);
                                1
(%o8)                 ---------------------
                                    2
                      sqrt(1 - m sin (phi))
(%i9) diff (elliptic_f (phi, m), m);
       elliptic_e(phi, m) - (1 - m) elliptic_f(phi, m)
(%o9) (-----------------------------------------------
                              m

                                 cos(phi) sin(phi)
                             - ---------------------)/(2 (1 - m))
                                             2
                               sqrt(1 - m sin (phi))
@end example

El paquete para funciones e integrales el@'{@dotless{i}}pticas fue programado por Raymond Toy. Se distribuye, igual que Maxima, bajo la General Public License (GPL).

@node Funciones y variables para funciones el@'{@dotless{i}}pticas, Funciones y variables para integrales el@'{@dotless{i}}pticas, Introducci@'on a las funciones e integrales el@'{@dotless{i}}pticas, Funciones el@'{@dotless{i}}pticas
@comment  node-name,  next,  previous,  up

@section Funciones y variables para funciones el@'{@dotless{i}}pticas

@deffn {Funci@'on} jacobi_sn (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{sn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_cn (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{cn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_dn (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{dn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_ns (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{ns(u,m) = 1/sn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_sc (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{sc(u,m) = sn(u,m)/cn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_sd (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{sd(u,m) = sn(u,m)/dn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_nc (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{nc(u,m) = 1/cn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_cs (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{cs(u,m) = cn(u,m)/sn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_cd (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{cd(u,m) = cn(u,m)/dn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_nd (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{nc(u,m) = 1/cn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_ds (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{ds(u,m) = dn(u,m)/sn(u,m)}.
@end deffn

@deffn {Funci@'on} jacobi_dc (@var{u}, @var{m})
Funci@'on el@'{@dotless{i}}ptica jacobiana @math{dc(u,m) = dn(u,m)/cn(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_sn (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{sn(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_cn (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{cn(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_dn (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{dn(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_ns (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{ns(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_sc (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{sc(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_sd (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{sd(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_nc (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{nc(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_cs (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{cs(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_cd (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{cd(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_nd (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{nc(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_ds (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{ds(u,m)}.
@end deffn

@deffn {Funci@'on} inverse_jacobi_dc (@var{u}, @var{m})
Inversa de la funci@'on el@'{@dotless{i}}ptica jacobiana @math{dc(u,m)}.
@end deffn


@node Funciones y variables para integrales el@'{@dotless{i}}pticas, , Funciones y variables para funciones el@'{@dotless{i}}pticas, Funciones el@'{@dotless{i}}pticas
@comment  node-name,  next,  previous,  up

@section Funciones y variables para integrales el@'{@dotless{i}}pticas


@deffn {Funci@'on} elliptic_f (@var{phi}, @var{m})
Integral el@'{@dotless{i}}ptica incompleta de primera especie, definida como

@ifhtml
@math{integrate(1/sqrt(1 - m*sin(x)^2), x, 0, phi)}
@end ifhtml
@ifinfo
@math{integrate(1/sqrt(1 - m*sin(x)^2), x, 0, phi)}
@end ifinfo

@tex
$$\int_0^\phi {{d\theta}\over{\sqrt{1 - m\sin^2\theta}}}$$
@end tex

V@'eanse tambi@'en @code{elliptic_e} y @code{elliptic_kc}.

@end deffn


@deffn {Funci@'on} elliptic_e (@var{phi}, @var{m})
Integral el@'{@dotless{i}}ptica incompleta de segunda especie, definida como

@ifhtml
@math{elliptic_e(phi, m) = integrate(sqrt(1 - m*sin(x)^2), x, 0, phi)}
@end ifhtml
@ifinfo
@math{elliptic_e(phi, m) = integrate(sqrt(1 - m*sin(x)^2), x, 0, phi)}
@end ifinfo
@tex
$$\int_0^\phi \sqrt{1 - m\sin^2\theta} d\theta$$
@end tex

V@'eanse tambi@'en @code{elliptic_e} y @code{elliptic_ec}.

@end deffn


@deffn {Funci@'on} elliptic_eu (@var{u}, @var{m})
Integral el@'{@dotless{i}}ptica incompleta de segunda especie, definida como

@ifhtml
@math{integrate(dn(v,m)^2,v,0,u) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t, 0, tau)}

donde @math{tau = sn(u,m)}. 
@end ifhtml
@ifinfo
@math{integrate(dn(v,m)^2,v,0,u) = integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t, 0, tau)}

donde @math{tau = sn(u,m)}.
@end ifinfo
@tex
$$\int_0^u {\rm dn}(v, m)^2 dv  = \int_0^\tau \sqrt{{1-m t^2}\over{1-t^2}} dt$$

donde $\tau = {\rm sn}(u, m)$.
@end tex

Esto se relaciona con @code{elliptic_e} mediante

@ifhtml
@math{elliptic_eu(u, m) = elliptic_e(asin(sn(u,m)),m)}
@end ifhtml
@ifinfo
@math{elliptic_eu(u, m) = elliptic_e(asin(sn(u,m)),m)}
@end ifinfo
@tex
$$E(u,m) = E(\phi, m)$$

donde $\phi = \sin^{-1} {\rm sn}(u, m)$.
@end tex

V@'ease tambi@'en @code{elliptic_e}.
@end deffn

@deffn {Funci@'on} elliptic_pi (@var{n}, @var{phi}, @var{m})
Integral el@'{@dotless{i}}ptica incompleta de tercera especie, definida como

@ifhtml
@math{integrate(1/(1-n*sin(x)^2)/sqrt(1 - m*sin(x)^2), x, 0, phi)}
@end ifhtml
@ifinfo
@math{integrate(1/(1-n*sin(x)^2)/sqrt(1 - m*sin(x)^2), x, 0, phi)}
@end ifinfo
@tex
$$\int_0^\phi {{d\theta}\over{(1-n\sin^2 \theta)\sqrt{1 - m\sin^2\theta}}}$$
@end tex

Maxima s@'olo conoce la derivada respecto de @math{phi}.
@end deffn


@deffn {Funci@'on} elliptic_kc (@var{m})
Integral el@'{@dotless{i}}ptica completa de primera especie, definida como

@ifhtml
@math{integrate(1/sqrt(1 - m*sin(x)^2), x, 0, %pi/2)}
@end ifhtml
@ifinfo
@math{integrate(1/sqrt(1 - m*sin(x)^2), x, 0, %pi/2)}
@end ifinfo

@tex
$$\int_0^{{\pi}\over{2}} {{d\theta}\over{\sqrt{1 - m\sin^2\theta}}}$$
@end tex

Para algunos valores de @math{m}, se conoce el valor de la integral en t@'erminos de la funci@'on @math{Gamma}. H@'agase uso de @code{makegamma} para realizar su c@'alculo.
@end deffn


@deffn {Funci@'on} elliptic_ec (@var{m})
Integral el@'{@dotless{i}}ptica completa de segunda especie, definida como

@ifhtml
@math{integrate(sqrt(1 - m*sin(x)^2), x, 0, %pi/2)}
@end ifhtml
@ifinfo
@math{integrate(sqrt(1 - m*sin(x)^2), x, 0, %pi/2)}
@end ifinfo

@tex
$$\int_0^{{\pi}\over{2}} \sqrt{1 - m\sin^2\theta} d\theta$$
@end tex
Para algunos valores de @math{m}, se conoce el valor de la integral en t@'erminos de la funci@'on @math{Gamma}. H@'agase uso de @code{makegamma} para realizar su c@'alculo.
@end deffn

