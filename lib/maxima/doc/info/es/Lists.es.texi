@c version 1.36
@menu
* Introducci@'on a las listas::       
* Funciones y variables para listas::       
@end menu

@node Introducci@'on a las listas, Funciones y variables para listas, Listas, Listas
@section Introducci@'on a las listas

Las listas son bloques de construcci@'on b@'asica para Maxima y Lisp. Todos los tipos de datos
diferentes a los arreglos, tablas mixtas o n@'umeros son representados como listas Lisp,
estas listas Lisp tienen la forma

@example
((MPLUS) $A 2)
@end example

@noindent
para indicar la expresi@'on @code{a+2}. Al nivel de Maxima se observar@'a
la notaci@'on infija @code{a+2}. Maxima tambi@'en tiene listas con el formato

@example
[1, 2, 7, x+y]
@end example

@noindent
para una lista de 4 elementos. Internamente esto se corresponde con una lista Lisp
de la forma

@example
((MLIST) 1  2  7  ((MPLUS)  $X $Y ))
@end example

@noindent
El elemento que denota el tipo de expresi@'on en Maxima es tambi@'en una lista, la cual tras ser analizada y simplificada tomar@'a la forma

@example
((MLIST SIMP) 1 2 7 ((MPLUS SIMP) $X $Y))
@end example


@node Funciones y variables para listas,  , Introducci@'on a las listas, Listas
@section Funciones y variables para listas

@deffn {Funci@'on} append (@var{lista_1}, ..., @var{lista_n})

Devuelve una lista cuyos elementos son los de la lista @var{lista_1} seguidos de los de @var{lista_2}, ...  La funci@'on @code{append} tambi@'en opera con expresiones generales, como la llamada @code{append (f(a,b), f(c,d,e));}, de la que se obtiene @code{f(a,b,c,d,e)}.

Tecl@'eese @code{example(append);} para ver un ejemplo.

@end deffn

@deffn {Funci@'on} assoc (@var{clave}, @var{lista}, @var{valor_por_defecto})
@deffnx {Function} assoc (@var{clave}, @var{lista})

Esta funci@'on busca la @var{clave} en el lado derecho de la  @var{lista}, la cual es de la forma @code{[x,y,z,...]}, donde cada elemento  es una expresi@'on formada por un operador binario y dos elementos. Por ejemplo, @code{x=1}, @code{2^3}, @code{[a,b]} etc.  La @var{clave} se compara con el primer operando. La funci@'on @code{assoc} devuelve el segundo operando si se encuentra con que la @code{clave} coincide.  Si la @code{clave} no coincide entonces devuelve el valor @var{valor_por_defecto}. El argumento @var{valor_por_defecto} es opcional; en caso de no estar presente, se devolver@'a @code{false}.

@end deffn

@deffn {Funci@'on} atom (@var{expr})

Devuelve @code{true} si @var{expr} es un @'atomo (n@'umero, nombre o cadena alfanum@'erica) y @code{false} en caso contario. As@'{@dotless{i}}, @code{atom(5)} devolver@'a @code{true}, mientras que @code{atom(a[1])} y @code{atom(sin(x))} dar@'an como resultado @code{false} (dando por hecho que tanto @code{a[1]} como @code{x} no tienen valores asignados).

@end deffn

@deffn {Funci@'on} cons (@var{expr}, @var{lista})

Devuelve una nueva lista en la que el elemento @var{expr} ocupa la primera posici@'on, seguido de los elementos de @var{lista}. La funci@'on  @code{cons} tambi@'en opera con otro tipo de expresiones, como  @code{cons(x, f(a,b,c));}  ->  @code{f(x,a,b,c)}.

@end deffn

@deffn {Funci@'on} copylist (@var{lista})

Devuelve una copia de la @var{lista}.

@end deffn


@deffn {Funci@'on} create_list (@var{form}, @var{x_1}, @var{list_1}, ..., @var{x_n}, @var{list_n})
Crea una lista mediante la evaluaci@'on de @var{form} con @var{x_1} tomando cada uno de los
valores de @var{list_1}, para cada uno de estos valores liga @var{x_2} con cada elemento de 
@var{list_2}, .... El n@'umero de elementos en el resultado ser@'a el producto del n@'umero de elementos
en cada lista. Cada variable @var{x_i} debe ser un s@'{@dotless{i}}mbolo y no ser@'a evaluado. La lista de argumentos ser@'a evaluada una vez al comienzo de la iteraci@'on.

Por ejemplo:
@example
(%i1) create_list(x^i,i,[1,3,7]);
                 3   7
(%o1)       [x, x , x ]
@end example

@noindent
Con una doble iteraci@'on:

@example
(%i1) create_list([i,j],i,[a,b],j,[e,f,h]);
(%o1) [[a, e], [a, f], [a, h], [b, e], [b, f], [b, h]]
@end example

En lugar de @var{list_i} se pueden suministrar dos argumentos cada uno de los cuales 
deber@'{@dotless{i}}a poder evaluarse a un n@'umero, los cuales ser@'an los l@'{@dotless{i}}mites inferior
y superior, ambos inclusive, para cada iteraci@'on.

Por ejemplo:
@example
(%i1) create_list([i,j],i,[1,2,3],j,1,i);
(%o1) [[1, 1], [2, 1], [2, 2], [3, 1], [3, 2], [3, 3]]
@end example

N@'otese que los l@'{@dotless{i}}mites o lista para la variable @code{j} pueden depender
del valor actual de @code{i}.
@end deffn


@deffn {Funci@'on} delete (@var{expr_1}, @var{expr_2})
@deffnx {Funci@'on} delete (@var{expr_1}, @var{expr_2}, @var{n})

@code{delete(@var{expr_1}, @var{expr_2})}
elimina de @var{expr_2} cualesquiera argumentos del operador
del nivel superior que sean iguales a @var{expr_1}.
N@'otese que los argumentos de las subexpresiones no se ven
afectados por esta funci@'on.

@var{expr_1} puede ser un @'atomo o una expresi@'on no
at@'omica. @var{expr_2} puede ser cualquier expresi@'on no
at@'omica. La funci@'on @code{delete} devuelve una
nueva expresi@'on sin modificar @var{expr_2}.

@code{delete(@var{expr_1}, @var{expr_2}, @var{n})}
elimina de @var{expr_2} los primeros @var{n} argumentos
del operador del nivel superior que sean iguales a @var{expr_1}.
Si hay menos de @var{n} argumentos iguales, entonces se
eliminan todos ellos.

Ejemplos:

Eliminando elementos de una lista.

@c ===beg===
@c delete (y, [w, x, y, z, z, y, x, w]);
@c ===end===
@example
(%i1) delete (y, [w, x, y, z, z, y, x, w]);
(%o1)                  [w, x, z, z, x, w]
@end example

Eliminando t@'erminos de una suma.

@c ===beg===
@c delete (sin(x), x + sin(x) + y);
@c ===end===
@example
(%i1) delete (sin(x), x + sin(x) + y);
(%o1)                         y + x
@end example

Eliminando factores de un producto.

@c ===beg===
@c delete (u - x, (u - w)*(u - x)*(u - y)*(u - z));
@c ===end===
@example
(%i1) delete (u - x, (u - w)*(u - x)*(u - y)*(u - z));
(%o1)                (u - w) (u - y) (u - z)
@end example

Eliminando argumentos de una expresi@'on arbitraria.

@c ===beg===
@c delete (a, foo (a, b, c, d, a));
@c ===end===
@example
(%i1) delete (a, foo (a, b, c, d, a));
(%o1)                     foo(b, c, d)
@end example

Limitando el n@'umero de argumentos a eliminar.

@c ===beg===
@c delete (a, foo (a, b, a, c, d, a), 2);
@c ===end===
@example
(%i1) delete (a, foo (a, b, a, c, d, a), 2);
(%o1)                    foo(b, c, d, a)
@end example

Los argumentos se comparan respecto de "=".
Aquellos argumentos que verifiquen la condici@'on @code{equal},
pero no "=" no ser@'an eliminados.

@c ===beg===
@c [is (equal (0, 0)), is (equal (0, 0.0)), is (equal (0, 0b0))];
@c [is (0 = 0), is (0 = 0.0), is (0 = 0b0)];
@c delete (0, [0, 0.0, 0b0]);
@c is (equal ((x + y)*(x - y), x^2 - y^2));
@c is ((x + y)*(x - y) = x^2 - y^2);
@c delete ((x + y)*(x - y), [(x + y)*(x - y), x^2 - y^2]);
@c ===end===
@example
(%i1) [is (equal (0, 0)), is (equal (0, 0.0)), is (equal (0, 0b0))];

`rat' replaced 0.0 by 0/1 = 0.0
`rat' replaced 0.0B0 by 0/1 = 0.0B0
(%o1)                  [true, true, true]
(%i2) [is (0 = 0), is (0 = 0.0), is (0 = 0b0)];
(%o2)                 [true, false, false]
(%i3) delete (0, [0, 0.0, 0b0]);
(%o3)                     [0.0, 0.0b0]
(%i4) is (equal ((x + y)*(x - y), x^2 - y^2));
(%o4)                         true
(%i5) is ((x + y)*(x - y) = x^2 - y^2);
(%o5)                         false
(%i6) delete ((x + y)*(x - y), [(x + y)*(x - y), x^2 - y^2]);
                              2    2
(%o6)                       [x  - y ]
@end example
@end deffn

@deffn {Funci@'on} eighth (@var{expr})

Devuelve el octavo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} endcons (@var{expr}, @var{lista})

Devuelve una nueva lista formada por los elementos de @code{lista} seguidos de los de @var{expr}. La funci@'on @code{endcons} tambi@'en opera con expresiones generales, por ejemplo @code{endcons(x, f(a,b,c));}  ->  @code{f(a,b,c,x)}.

@end deffn

@deffn {Funci@'on} fifth (@var{expr})

Devuelve el quinto elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} first (@var{expr})

Devuelve la primera parte de @var{expr}, que puede consistir en el primer elemento de una lista, la primera fila de una matriz, el primer t@'ermino de una suma, etc. N@'otese que tanto @code{first} como sus funciones relacionadas, @code{rest} y @code{last}, operan sobre la forma en la que @var{expr} es mostrada por Maxima, no sobre la forma en la que es introducida la expresi@'on. Sin embargo, cuando la variable @code{inflag} toma el valor @code{true} estas funciones tendr@'an en cuenta el formato interno de @var{expr}. T@'engase en cuenta que el simplificador reordena las expresiones.  As@'{@dotless{i}}, @code{first(x+y)} devolver@'a @code{x} si @code{inflag} vale @code{true} y @code{y} cuando @code{inflag} tome el valor @code{false} (@code{first(y+x)} devuelve el mismo resultado). Las funciones @code{second} ... @code{tenth} devuelven desde el segundo hasta el d@'ecimo elemento del argumento de entrada.

@end deffn

@deffn {Funci@'on} fourth (@var{expr})

Devuelve el cuarto elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} get (@var{a}, @var{i})

Recupera la propiedad de usuario indicada por @var{i} asociada al @'atomo @var{a} o devuelve @code{false} si @var{a} no tiene la propiedad @var{i}.

La funci@'on @code{get} eval@'ua sus argumentos.

@example
(%i1) put (%e, 'transcendental, 'type);
(%o1)                    transcendental
(%i2) put (%pi, 'transcendental, 'type)$
(%i3) put (%i, 'algebraic, 'type)$
(%i4) typeof (expr) := block ([q],
        if numberp (expr)
        then return ('algebraic),
        if not atom (expr)
        then return (maplist ('typeof, expr)),
        q: get (expr, 'type),
        if q=false
        then errcatch (error(expr,"is not numeric.")) else q)$
(%i5) typeof (2*%e + x*%pi);
x is not numeric.
(%o5)  [[transcendental, []], [algebraic, transcendental]]
(%i6) typeof (2*%e + %pi);
(%o6)     [transcendental, [algebraic, transcendental]]

@end example

@end deffn


@deffn {Funci@'on} join (@var{l}, @var{m})
Crea una nueva lista con los elementos de las listas @var{l} y @var{m} alternados.
El resultado tiene como elementos @code{[@var{l}[1], @var{m}[1], @var{l}[2], @var{m}[2], ...]}.
Las listas @var{l} y @var{m} pueden contener cualquier tipo de elementos.

Si las listas son de diferente longitud, @code{join} ignora los elementos sobrantes de la lista m@'as larga.

Maxima da error si o bien @var{l} o @var{m} no son listas.

Ejemplos:

@c ===beg===
@c L1: [a, sin(b), c!, d - 1];
@c join (L1, [1, 2, 3, 4]);
@c join (L1, [aa, bb, cc, dd, ee, ff]);
@c ===end===
@example
(%i1) L1: [a, sin(b), c!, d - 1];
(%o1)                [a, sin(b), c!, d - 1]
(%i2) join (L1, [1, 2, 3, 4]);
(%o2)          [a, 1, sin(b), 2, c!, 3, d - 1, 4]
(%i3) join (L1, [aa, bb, cc, dd, ee, ff]);
(%o3)        [a, aa, sin(b), bb, c!, cc, d - 1, dd]
@end example

@end deffn


@deffn {Funci@'on} last (@var{expr})

Devuelve la @'ultima parte (t@'ermino, fila, elemento, etc.) de @var{expr}.

@end deffn

@deffn {Funci@'on} length (@var{expr})

Devuelve (por defecto) el n@'umero de partes de que consta @var{expr} en la versi@'on correspondiente a la que muestra.  En el caso de listas, se devuelve el n@'umero de elementos, si se trata de matrices el n@'umero de filas y se se trata de sumas el n@'umero de t@'erminos o sumandos (v@'ease @code{dispform}).

La funci@'on @code{length} se ve afectada por el valor de la variable @code{inflag}.  As@'{@dotless{i}}, @code{length(a/(b*c));} devuelve 2 si @code{inflag} vale @code{false} (dando por hecho que @code{exptdispflag} vale @code{true}), pero devuelve 3 si @code{inflag} vale @code{true} (ya que la representaci@'on interna es @code{a*b^-1*c^-1}).

@end deffn

@defvr {Variable opcional} listarith
Valor por defecto: @code{true}

Cuando vale @code{false} provoca que no se realicen operaciones aritm@'eticas con listas;  cuando vale @code{true}, las operaciones con listas y matrices son contagiosas, en el sentido de que las listas se transforman en matrices, retornando resultados de este @'ultimo tipo. Sin embargo, operaciones que involucren listas con listas devolver@'an tambi@'en listas.

@end defvr

@deffn {Funci@'on} listp (@var{expr})

Devuelve el valor @code{true} si @var{expr} es una lista, y @code{false} en caso contrario.

@end deffn

@deffn {Funci@'on} makelist (@var{expr}, @var{i}, @var{i_0}, @var{i_1})
@deffnx {Funci@'on} makelist (@var{expr}, @var{x}, @var{list})

Construye y devuelve una lista, siendo cada uno de sus elementos generados por @var{expr}.

La llamada @code{makelist (@var{expr}, @var{i}, @var{i_0}, @var{i_1})} devuelve una lista cuyo @code{j}-@'esimo elemento es igual a @code{ev (@var{expr}, @var{i}=j)}, tomando  @code{j} los valores enteros entre  @var{i_0} y @var{i_1}.

La llamada @code{makelist (@var{expr}, @var{x}, @var{list})} devuelve una lista cuyo @code{j}-@'esimo elemento es igual a
@code{ev (@var{expr}, @var{x}=@var{list}[j])}, tomando  @code{j} los valores enteros entre  1 through @code{length (@var{list})}.

Ejemplos:

@example
(%i1) makelist(concat(x,i),i,1,6);
(%o1)               [x1, x2, x3, x4, x5, x6]
(%i2) makelist(x=y,y,[a,b,c]);
(%o2)                 [x = a, x = b, x = c]

@end example

@end deffn

@deffn {Funci@'on} member (@var{expr_1}, @var{expr_2})

Devuelve @code{true} si @code{is(@var{expr_1} = @var{a})}
para alg@'un elemento @var{a} de @code{args(@var{expr_2})},
en caso contrario devuelve @code{false}.

Normalmente, @code{expr_2} ser@'a una lista,
en cuyo caso @code{args(@var{expr_2}) = @var{expr_2}},
y la comprobaci@'on ser@'a si @code{is(@var{expr_1} = @var{a})} para 
alg@'un elemento @var{a} de @code{expr_2}.

La funci@'on @code{member} no inspecciona las partes de los argumentos de @code{expr_2},
por lo que puede devolver @code{false} si @code{expr_1} es parte de alguno de los argumentos de @code{expr_2}.

V@'ease tambi@'en @code{elementp}.

Ejemplos:

@c ===beg===
@c member (8, [8, 8.0, 8b0]);
@c member (8, [8.0, 8b0]);
@c member (b, [a, b, c]);
@c member (b, [[a, b], [b, c]]);
@c member ([b, c], [[a, b], [b, c]]);
@c F (1, 1/2, 1/4, 1/8);
@c member (1/8, %);
@c member ("ab", ["aa", "ab", sin(1), a + b]);
@c ===end===
@example
(%i1) member (8, [8, 8.0, 8b0]);
(%o1)                         true
(%i2) member (8, [8.0, 8b0]);
(%o2)                         false
(%i3) member (b, [a, b, c]);
(%o3)                         true
(%i4) member (b, [[a, b], [b, c]]);
(%o4)                         false
(%i5) member ([b, c], [[a, b], [b, c]]);
(%o5)                         true
(%i6) F (1, 1/2, 1/4, 1/8);
                               1  1  1
(%o6)                     F(1, -, -, -)
                               2  4  8
(%i7) member (1/8, %);
(%o7)                         true
(%i8) member ("ab", ["aa", "ab", sin(1), a + b]);
(%o8)                         true
@end example

@end deffn

@deffn {Funci@'on} ninth (@var{expr})

Devuelve el noveno elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} unique (@var{L})

Devuelve la lista @var{L} sin redundancias, es decir, sin
elementos repetidos

Cuando ninguno de los elementos de @var{L} est@'a repetido,
@code{unique} devuelve una r@'eplica de @var{L}, no la
propia @var{L}.

Si @var{L} no es una lista, @code{unique} devuelve @var{L}.

Ejemplo:

@c ===beg===
@c unique ([1, %pi, a + b, 2, 1, %e, %pi, a + b, [1]]);
@c ===end===
@example
(%i1) unique ([1, %pi, a + b, 2, 1, %e, %pi, a + b, [1]]);
(%o1)              [1, 2, %e, %pi, [1], b + a]
@end example
@end deffn


@deffn {Funci@'on} rest (@var{expr}, @var{n})
@deffnx {Funci@'on} rest (@var{expr})

Devuelve @var{expr} sin sus primeros @var{n} elementos si @var{n} es positivo, o sus @'ultimos @code{- @var{n}} elementos si @var{n} es negativo. En caso de que @var{n} tome el valor 1 puede ser omitido. La expresi@'on  @var{expr} puede ser una lista, una matriz o cualquier otra expresi@'on.

@end deffn

@deffn {Funci@'on} reverse (@var{lista})

Invierte el orden de los elementos de la @var{lista} (no los propios elementos). La funci@'on @code{reverse} tambi@'en opera sobre expresiones generales, como en  @code{reverse(a=b);} gives @code{b=a}.

@end deffn

@deffn {Funci@'on} second (@var{expr})

Devuelve el segundo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} seventh (@var{expr})

Devuelve el s@'eptimo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} sixth (@var{expr})

Devuelve el sexto elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn


@deffn {Funci@'on} sublist_indices (@var{L}, @var{P})

Devuelve los @'{@dotless{i}}ndices de los elementos @code{x} de la
lista @var{L} para la cual el predicado @code{maybe(@var{P}(x))}
devuelve @code{true}, lo que excluye a @code{unknown} y a @code{false}.
@var{P} puede ser el nombre de una funci@'on o de una expresi@'on lambda.
@var{L} debe ser una lista literal.

Ejemplos:
@c ===beg===
@c sublist_indices ('[a, b, b, c, 1, 2, b, 3, b],
@c                  lambda ([x], x='b));
@c sublist_indices ('[a, b, b, c, 1, 2, b, 3, b],
@c                  symbolp);
@c sublist_indices ([1 > 0, 1 < 0, 2 < 1, 2 > 1, 2 > 0],
@c                  identity);
@c assume (x < -1);
@c map (maybe, [x > 0, x < 0, x < -2]);
@c sublist_indices ([x > 0, x < 0, x < -2], identity);
@c ===end===

@example
(%i1) sublist_indices ('[a, b, b, c, 1, 2, b, 3, b],
                    lambda ([x], x='b));
(%o1)                     [2, 3, 7, 9]
(%i2) sublist_indices ('[a, b, b, c, 1, 2, b, 3, b],
                    symbolp);
(%o2)                  [1, 2, 3, 4, 7, 9]
(%i3) sublist_indices ([1 > 0, 1 < 0, 2 < 1, 2 > 1, 2 > 0],
                    identity);
(%o3)                       [1, 4, 5]
(%i4) assume (x < -1);
(%o4)                       [x < - 1]
(%i5) map (maybe, [x > 0, x < 0, x < -2]);
(%o5)                [false, true, unknown]
(%i6) sublist_indices ([x > 0, x < 0, x < -2], identity);
(%o6)                          [2]
@end example

@end deffn



@deffn {Funci@'on} tenth (@var{expr})

Devuelve el d@'ecimo elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn

@deffn {Funci@'on} third (@var{expr})

Devuelve el tercer elemento de la lista o expresi@'on @var{expr}. V@'ease @code{first} para m@'as detalles.

@end deffn
