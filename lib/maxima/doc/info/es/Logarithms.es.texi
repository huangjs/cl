@c english version 1.17
@menu
* Funciones y variables para logaritmos::  
@end menu

@node Funciones y variables para logaritmos,  , Logaritmos, Logaritmos
@section Funciones y variables para logaritmos

@defvr {Variable opcional} %e_to_numlog
Valor por defecto: @code{false}

Si @code{%e_to_numlog} vale @code{true}, @code{r} es un n@'umero racional y @code{x} una expresi@'on, @code{%e^(r*log(x))} se reduce a @code{x^r} .  T@'engase en cuenta que la instrucci@'on @code{radcan} tambi@'en hace este tipo de transformaciones, as@'{@dotless{i}} como otras m@'as complicadas. La instrucci@'on @code{logcontract} "contrae" expresiones que contienen alg@'un @code{log}.

@end defvr

@deffn {Funci@'on} li [@var{s}] (@var{z})
Representa la funci@'on polilogar@'{@dotless{i}}tmica de orden @var{s} y argumento @var{z},
definida por la serie infinita

@example
                                 inf
                                 ====   k
                                 \     z
                        Li (z) =  >    --
                          s      /      s
                                 ====  k
                                 k = 1
@end example

@code{li [1]} es @code{- log (1 - z)}.
@code{li [2]} y @code{li [3]} son las funciones di- y trilogaritmo, respectivamente.

Cuando el orden es 1, el polilogaritmo se simplifica a @code{- log (1 - z)},
el cual a su vez se reduce a un valor num@'erico si @var{z} es un n@'umero
real o complejo en coma flotante o si est@'a presente el t@'ermino @code{numer}.

Cuando el orden es 2 @'o 3,
el polilogaritmo se reduce a un valor num@'erico si @var{z} es
un n@'umero real en coma flotante o si est@'a presente el t@'ermino @code{numer}.

Ejemplos:

@c ===beg===
@c assume (x > 0);
@c integrate ((log (1 - t)) / t, t, 0, x);
@c li [2] (7);
@c li [2] (7), numer;
@c li [3] (7);
@c li [2] (7), numer;
@c L : makelist (i / 4.0, i, 0, 8);
@c map (lambda ([x], li [2] (x)), L);
@c map (lambda ([x], li [3] (x)), L);
@c ===end===
@example
(%i1) assume (x > 0);
(%o1)                        [x > 0]
(%i2) integrate ((log (1 - t)) / t, t, 0, x);
(%o2)                       - li (x)
                                2
(%i3) li [2] (7);
(%o3)                        li (7)
                               2
(%i4) li [2] (7), numer;
(%o4)        1.24827317833392 - 6.113257021832577 %i
(%i5) li [3] (7);
(%o5)                        li (7)
                               3
(%i6) li [2] (7), numer;
(%o6)        1.24827317833392 - 6.113257021832577 %i
(%i7) L : makelist (i / 4.0, i, 0, 8);
(%o7)   [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0]
(%i8) map (lambda ([x], li [2] (x)), L);
(%o8) [0, .2676526384986274, .5822405249432515, 
.9784693966661848, 1.64493407, 2.190177004178597
 - .7010261407036192 %i, 2.374395264042415
 - 1.273806203464065 %i, 2.448686757245154
 - 1.758084846201883 %i, 2.467401098097648
 - 2.177586087815347 %i]
(%i9) map (lambda ([x], li [3] (x)), L);
(%o9) [0, .2584613953442624, 0.537213192678042, 
.8444258046482203, 1.2020569, 1.642866878950322
 - .07821473130035025 %i, 2.060877505514697
 - .2582419849982037 %i, 2.433418896388322
 - .4919260182322965 %i, 2.762071904015935
 - .7546938285978846 %i]
@end example

@end deffn

@deffn {Funci@'on} log (@var{x})
Representa el logaritmo natural (en base @math{e}) de @var{x}.

Maxima no tiene definida una funci@'on para el logaritmo de base 10 u
otras bases. El usuario puede hacer uso de la definici@'on 
@code{log10(x) := log(x) / log(10)}.

La simplificaci@'on y evaluaci@'on de logaritmos se controla cciertas variables globales:

@code{logexpand} - hace que @code{log(a^b)} se convierta en @code{b*log(a)}.
Si toma el valor @code{all}, @code{log(a*b)} tambi@'en se reducir@'a a  @code{log(a)+log(b)}.
Si toma el valor @code{super}, entonces @code{log(a/b)} tambi@'en se reducir@'a a @code{log(a)-log(b)}, siendo @code{a/b} racional y @code{a#1},  (la expresi@'on @code{log(1/b)}, para @code{b} entero, se simplifica siempre).  Si toma el valor  @code{false}, se desactivar@'an todas estas simplificaciones.

@code{logsimp} - si vale @code{false}, entonces no se transforma @code{%e} a potencias que contengan logaritmos.

@code{lognumer} - si vale @code{true}, entonces los argumentos de @code{log} que sean n@'umeros decimales negativos en coma flotante se convertir@'an siempre a su valor absoluto antes de aplicar @code{log}.  Si @code{numer} vale tambi@'en @code{true}, entonces los argumentos enteros negativos de @code{log} tambi@'en se convertir@'an en su valor absoluto.

@code{lognegint} - si vale @code{true} se aplica la regla @code{log(-n)} -> @code{log(n)+%i*%pi} siendo @code{n} un entero positivo.

@code{%e_to_numlog} - si vale @code{true}, @code{r} es un n@'umero racional y @code{x} una expresi@'on, @code{%e^(r*log(x))} se reduce a @code{x^r} .  T@'engase en cuenta que la instrucci@'on @code{radcan} tambi@'en hace este tipo de transformaciones, as@'{@dotless{i}} como otras m@'as complicadas. La instrucci@'on @code{logcontract} "contrae" expresiones que contienen alg@'un @code{log}.

@end deffn

@defvr {Variable opcional} logabs
Valor por defecto: @code{false}

Cuando se calculan integrales indefinidas en las que se generan logaritmos, como en @code{integrate(1/x,x)}, el resultado se devuelve de la forma  @code{log(abs(...))} si @code{logabs} vale @code{true}, o de la forma @code{log(...)} si
@code{logabs} vale @code{false}. En la integraci@'on definida se hace la asignaci@'on @code{logabs:true}, ya que aqu@'{@dotless{i}} es normalmente necesario evaluar la integral indefinida en los extremos del intervalo de integraci@'on.

@end defvr

@c NEEDS EXAMPLES
@defvr {Variable opcional} logarc
@defvrx {Funci@'on} logarc (@var{expr})

Si la variable global @code{logarc} toma el valor @code{true},
las funciones circulares e hiperb@'olicas inversas se 
reemplazan por funciones logar@'{@dotless{i}}tmicas equivalentes.
El valor por defecto de @code{logarc} es @code{false}.

La funci@'on @code{logarc(@var{expr})} realiza la anterior transformaci@'on
en la expresi@'on @var{expr} sin necesidad de alterar el valor de la
variable global @code{logarc}.

@end defvr

@defvr {Variable opcional} logconcoeffp
Valor por defecto: @code{false}

Controla qu@'e coeficientes se contraen cuando se utiliza @code{logcontract}. Se le puede asignar el nombre de una funci@'on de predicado de un argumento; por ejemplo, si se quiere introducir ra@'{@dotless{i}}ces cuadradas, se puede hacer @code{logconcoeffp:'logconfun$ logconfun(m):=featurep(m,integer) or ratnump(m)$} .  Entonces 
@code{logcontract(1/2*log(x));} devolver@'a @code{log(sqrt(x))}.

@end defvr

@deffn {Funci@'on} logcontract (@var{expr})
Analiza la expresi@'on @var{expr} recursivamente, transformando subexpresiones de la forma @code{a1*log(b1) + a2*log(b2) + c} en @code{log(ratsimp(b1^a1 * b2^a2)) + c}

@c ===beg===
@c 2*(a*log(x) + 2*a*log(y))$
@c logcontract(%);
@c ===end===
@example
(%i1) 2*(a*log(x) + 2*a*log(y))$
(%i2) logcontract(%);
                                 2  4
(%o2)                     a log(x  y )

@end example

Si se hace @code{declare(n,integer);} entonces @code{logcontract(2*a*n*log(x));} da
@code{a*log(x^(2*n))}.  Los coeficientes que se contraen de esta manera son aquellos que como el 2 y el @code{n} satisfacen 
@code{featurep(coeff,integer)}. El usuario puede controlar qu@'e coeficientes se contraen asign@'andole a la variable global @code{logconcoeffp} el nombre de una funci@'on de predicado de un argumento; por ejemplo, si se quiere introducir ra@'{@dotless{i}}ces cuadradas, se puede hacer @code{logconcoeffp:'logconfun$ logconfun(m):=featurep(m,integer) or ratnump(m)$} .  Entonces @code{logcontract(1/2*log(x));} devolver@'a @code{log(sqrt(x))}.

@end deffn

@defvr {Variable opcional} logexpand
Valor por defecto: @code{true}

Si @code{logexpand} vale @code{true} hace que @code{log(a^b)} se convierta en @code{b*log(a)}.
Si toma el valor @code{all}, @code{log(a*b)} tambi@'en se reducir@'a a  @code{log(a)+log(b)}.
Si toma el valor @code{super}, entonces @code{log(a/b)} tambi@'en se reducir@'a a @code{log(a)-log(b)}, siendo @code{a/b} racional y @code{a#1},  (la expresi@'on @code{log(1/b)}, para @code{b} entero, se simplifica siempre).  Si toma el valor  @code{false}, se desactivar@'an todas estas simplificaciones.

@end defvr

@defvr {Variable opcional} lognegint
Valor por defecto: @code{false}

Si @code{lognegint} vale @code{true} se aplica la regla @code{log(-n)} -> @code{log(n)+%i*%pi} siendo @code{n} un entero positivo.

@end defvr

@defvr {Variable opcional} lognumer
Valor por defecto: @code{false}

Si @code{lognumer} vale @code{true}, entonces los argumentos de @code{log} que sean n@'umeros decimales negativos en coma flotante se convertir@'an siempre a su valor absoluto antes de aplicar @code{log}.  Si @code{numer} vale tambi@'en @code{true}, entonces los argumentos enteros negativos de @code{log} tambi@'en se convertir@'an en su valor absoluto.

@end defvr

@defvr {Variable opcional} logsimp
Valor por defecto: @code{true}

Si @code{logsimp} vale @code{false}, entonces no se transforma @code{%e} a potencias que contengan logaritmos.

@end defvr

@deffn {Funci@'on} plog (@var{x})
Representa la rama principal del logaritmo natural complejo con @code{-%pi} < @code{carg(@var{x})} <= @code{+%pi} .

@end deffn
