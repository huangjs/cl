@c english version 1.36
@menu
* Introducci@'on a las matrices y el @'algebra lineal::
* Funciones y variables para las matrices y el @'algebra lineal::
@end menu

@node Introducci@'on a las matrices y el @'algebra lineal, Funciones y variables para las matrices y el @'algebra lineal, Matrices y @'Algebra Lineal, Matrices y @'Algebra Lineal
@section Introducci@'on a las matrices y el @'algebra lineal

@menu
* Operador punto::                         
* Vectores::                     
* Paquete eigen::
@end menu

@node Operador punto, Vectores, Introducci@'on a las matrices y el @'algebra lineal, Introducci@'on a las matrices y el @'algebra lineal
@subsection Operador punto
El operador  @code{.} realiza la multiplicaci@'on matricial y el producto escalar.
Cuando los operandos son dos matrices columna o matrices fila @code{a} y @code{b},
la expresi@'on @code{a.b} es equivalente a @code{sum (a[i]*b[i], i, 1, length(a))}.
Si @code{a} y @code{b} no son complejos, estamos en el caso del producto escalar.
En caso de ser @code{a} y @code{b} vectores en el campo complejo, el producto 
escalar se define como @code{conjugate(a).b}; la funci@'on @code{innerproduct} del
paquete @code{eigen} realiza el producto escalar complejo.

Cuando los operandos son matrices de @'{@dotless{i}}ndole m@'as general,
el resultado que se obtiene es el producto matricial de @code{a} por @code{b}.
El n@'umero de filas de @code{b} debe ser igual al n@'umero de columnas de @code{a},
y el resultado tiene un n@'umero de filas igual al de @code{a} y un n@'umero de
columnas igual al de @code{b}.

Al objeto de distinguir @code{.} como operador aritm@'etico del punto decimal
de la notaci@'on en coma flotante, puede ser necesario dejar espacios a ambos lados.
Por ejemplo, @code{5.e3} es @code{5000.0} pero @code{5 . e3} es @code{5} por @code{e3}.

Hay algunas variables globales que controlan la simplificaci@'on de expresiones que
contengan al operador @code{.}, a saber,
@code{dot}, @code{dot0nscsimp}, @code{dot0simp}, @code{dot1simp}, @code{dotassoc}, 
@code{dotconstrules}, @code{dotdistrib}, @code{dotexptsimp}, @code{dotident},
y @code{dotscrules}.

@node Vectores, Paquete eigen, Operador punto, Introducci@'on a las matrices y el @'algebra lineal
@subsection Vectores
El paquete @code{vect} define funciones para an@'alisis vectorial. Para cargar el paquete en memoria se debe hacer
@code{load ("vect")}  y con @code{demo ("vect")} se presenta una demostraci@'on sobre las funciones del paquete.
@c find maxima -name \*orth\* YIELDS NOTHING; ARE THESE FUNCTIONS IN ANOTHER FILE NOW ??
@c and SHARE;VECT ORTH contains definitions of various orthogonal curvilinear coordinate systems.

El paquete de an@'alisis vectorial puede combinar y simplificar expresiones
simb@'olicas que incluyan productos escalares y vectoriales, junto con los operadores
de gradiente, divergencia, rotacional y laplaciano. La distribuci@'on de estos operadores
sobre sumas o productos se gobierna por ciertas variables, al igual que otras transformaciones,
incluida la expansi@'on en componentes en cualquier sistema de coordenadas especificado. 
Tambi@'en hay funciones para obtener el potencial escalar o vectorial de un campo.

El paquete @code{vect} contiene las siguientes funciones:
@code{vectorsimp}, @code{scalefactors},
@code{express}, @code{potential} y @code{vectorpotential}.
@c REVIEW vect.usg TO ENSURE THAT TEXINFO HAS WHATEVER IS THERE
@c PRINTFILE(VECT,USAGE,SHARE); for details.

Aviso: el paquete @code{vect} declara el operador @code{.} como conmutativo.

@node Paquete eigen, , Vectores, Introducci@'on a las matrices y el @'algebra lineal
@subsection Paquete eigen

El paquete @code{eigen} contiene funciones para el c@'alculo 
simb@'olico de valores y vectores propios. Maxima carga el paquete
autom@'aticamente si se hace una llamada a cualquiera de las dos funciones
@code{eigenvalues} o @code{eigenvectors}. El paquete se puede cargar de
forma expl@'{@dotless{i}}cita mediante @code{load ("eigen")}.

La instrucci@'on @code{demo ("eigen")} hace una demostraci@'on de las funciones de este paquete;
@code{batch ("eigen")} realiza la misma demostraci@'on pero sin pausas entre los
sucesivos c@'alculos.

Las funciones del paquete @code{eigen} son
@code{innerproduct}, @code{unitvector}, @code{columnvector},
@code{gramschmidt}, @code{eigenvalues}, @code{eigenvectors}, @code{uniteigenvectors}
y @code{similaritytransform}.

@c end concepts Matrices and Linear Algebra
@node Funciones y variables para las matrices y el @'algebra lineal,  , Introducci@'on a las matrices y el @'algebra lineal, Matrices y @'Algebra Lineal
@section Funciones y variables para las matrices y el @'algebra lineal

@deffn {Funci@'on} addcol (@var{M}, @var{lista_1}, ..., @var{lista_n})
A@~nade la/s columna/s dada/s por la/s lista/s (o matrices) a la matriz @var{M}.

@end deffn

@deffn {Funci@'on} addrow (@var{M}, @var{lista_1}, ..., @var{lista_n})
A@~nade la/s fila/s dada/s por la/s lista/s (o matrices) a la matriz @var{M}.

@end deffn

@deffn {Funci@'on} adjoint (@var{M})
Devuelve el adjunto de la matriz @var{M}.
La matriz adjunta es la transpuesta de la matriz de cofactores de @var{M}.

@end deffn

@deffn {Funci@'on} augcoefmatrix ([@var{eqn_1}, ..., @var{eqn_m}], [@var{x_1}, ..., @var{x_n}])
Devuelve la matriz aumentada de coeficientes del sistema de ecuaciones lineales 
@var{eqn_1}, ..., @var{eqn_m} de variables @var{x_1}, ..., @var{x_n}. Se trata de la
matriz de coeficientes con una columna adicional para los t@'erminos constantes de cada
ecuaci@'on, es decir, aquellos t@'erminos que no dependen de las variables
@var{x_1}, ..., @var{x_n}.

@example
(%i1) m: [2*x - (a - 1)*y = 5*b, c + b*y + a*x = 0]$
(%i2) augcoefmatrix (m, [x, y]);
                       [ 2  1 - a  - 5 b ]
(%o2)                  [                 ]
                       [ a    b      c   ]
@end example

@end deffn

@deffn {Funci@'on} charpoly (@var{M}, @var{x})
Calcula el polinomio caracter@'{@dotless{i}}stico de la matriz @var{M}
respecto de la variable @var{x}. Esto es, 
@code{determinant (@var{M} - diagmatrix (length (@var{M}), @var{x}))}.

@example
(%i1) a: matrix ([3, 1], [2, 4]);
                            [ 3  1 ]
(%o1)                       [      ]
                            [ 2  4 ]
(%i2) expand (charpoly (a, lambda));
                           2
(%o2)                lambda  - 7 lambda + 10
(%i3) (programmode: true, solve (%));
(%o3)               [lambda = 5, lambda = 2]
(%i4) matrix ([x1], [x2]);
                             [ x1 ]
(%o4)                        [    ]
                             [ x2 ]
(%i5) ev (a . % - lambda*%, %th(2)[1]);
                          [ x2 - 2 x1 ]
(%o5)                     [           ]
                          [ 2 x1 - x2 ]
(%i6) %[1, 1] = 0;
(%o6)                     x2 - 2 x1 = 0
(%i7) x2^2 + x1^2 = 1;
                            2     2
(%o7)                     x2  + x1  = 1
(%i8) solve ([%th(2), %], [x1, x2]);
                  1               2
(%o8) [[x1 = - -------, x2 = - -------], 
               sqrt(5)         sqrt(5)

                                             1             2
                                    [x1 = -------, x2 = -------]]
                                          sqrt(5)       sqrt(5)
@end example

@end deffn

@deffn {Funci@'on} coefmatrix ([@var{eqn_1}, ..., @var{eqn_m}], [@var{x_1}, ..., @var{x_n}])
Devuelve la matriz de coeficientes para las variables @var{x_1}, ..., @var{x_n}
del sistema de ecuaciones lineales @var{eqn_1}, ..., @var{eqn_m}.

@example
(%i1) coefmatrix([2*x-(a-1)*y+5*b = 0, b*y+a*x = 3], [x,y]);
                                 [ 2  1 - a ]
(%o1)                            [          ]
                                 [ a    b   ]
@end example

@end deffn

@deffn {Funci@'on} col (@var{M}, @var{i})
Devuelve la @var{i}-@'esima columna de la matriz @var{M}.
El resultado es una matriz de una sola columna.
@c EXAMPLE HERE

@end deffn

@deffn {Funci@'on} columnvector (@var{L})
@deffnx {Funci@'on} covect (@var{L})
Devuelve una matriz con una columna  y @code{length (@var{L})} filas,
conteniendo los elementos de la lista @var{L}.

La llamada @code{covect} es un sin@'onimo de @code{columnvector}.

Es necesario cargar la funci@'on haciendo @code{load ("eigen")}.


Ejemplo:

@c HMM, SPURIOUS "redefining the Macsyma function".
@c LEAVE IT HERE SINCE THAT'S WHAT A USER ACTUALLY SEES.
@example
(%i1) load ("eigen")$
Warning - you are redefining the Macsyma function eigenvalues
Warning - you are redefining the Macsyma function eigenvectors
(%i2) columnvector ([aa, bb, cc, dd]);
                             [ aa ]
                             [    ]
                             [ bb ]
(%o2)                        [    ]
                             [ cc ]
                             [    ]
                             [ dd ]
@end example

@end deffn

@deffn {Funci@'on} conjugate (@var{x})
Devuelve el conjugado complejo de @var{x}.

@c ===beg===
@c declare ([aa, bb], real, cc, complex, ii, imaginary);
@c conjugate (aa + bb*%i);
@c conjugate (cc);
@c conjugate (ii);
@c conjugate (xx + yy);
@c ===end===
@example
(%i1) declare ([aa, bb], real, cc, complex, ii, imaginary);

(%o1)                         done
(%i2) conjugate (aa + bb*%i);

(%o2)                      aa - %i bb
(%i3) conjugate (cc);

(%o3)                     conjugate(cc)
(%i4) conjugate (ii);

(%o4)                         - ii
(%i5) conjugate (xx + yy);

(%o5)             conjugate(yy) + conjugate(xx)
@end example

@end deffn

@deffn {Funci@'on} copymatrix (@var{M})
Devuelve una copia de la matriz @var{M}. Esta es la @'unica
manera de obtener una r@'eplica de @var{M} adem@'as de la de
copiar elemento a elemento.

N@'otese que una asignaci@'on de una matriz a otra, como en @code{m2: m1},
no hace una copia de @code{m1}. Asignaciones del tipo @code{m2 [i,j]: x} o
@code{setelmx (x, i, j, m2} tambi@'en modifica @code{m1 [i,j]}. Si se crea una copia 
con @code{copymatrix} y luego se hacen asignaciones se tendr@'a una copia separada y
modificada.

@c NEED EXAMPLE HERE
@end deffn

@deffn {Funci@'on} determinant (@var{M})
Calcula el determinante de  @var{M} por un m@'etodo similar al
de eliminaci@'on de Gauss

@c JUST HOW DOES ratmx AFFECT THE RESULT ??
La forma del resultado depende del valor asignado
a @code{ratmx}.

@c IS A SPARSE DETERMINANT SOMETHING OTHER THAN THE DETERMINANT OF A SPARSE MATRIX ??
Existe una rutina especial para calcular determinantes de matrices con elementos dispersas, la cual
ser@'a invocada cuando las variables @code{ratmx} y @code{sparse} valgan ambas
@code{true}.

@c EXAMPLES NEEDED HERE
@end deffn

@defvr {Variable opcional} detout
Valor por defecto: @code{false}

Cuando @code{detout} vale @code{true}, el determinante de la matriz 
cuya inversa se calcula aparece como un factor fuera de la matriz.

Para que esta variable surta efecto, @code{doallmxops} y @code{doscmxops} deber@'{@dotless{i}}an tener
el valor @code{false} (v@'eanse sus descripciones). Alternativamente, esta 
variable puede ser suministrada a @code{ev}.

Ejemplo:

@example
(%i1) m: matrix ([a, b], [c, d]);
                            [ a  b ]
(%o1)                       [      ]
                            [ c  d ]
(%i2) detout: true$
(%i3) doallmxops: false$
(%i4) doscmxops: false$
(%i5) invert (m);
                          [  d   - b ]
                          [          ]
                          [ - c   a  ]
(%o5)                     ------------
                           a d - b c
@end example
@c THERE'S MORE TO THIS STORY: detout: false$ invert (m); RETURNS THE SAME THING.
@c IT APPEARS THAT doallmxops IS CRUCIAL HERE.

@end defvr

@deffn {Funci@'on} diagmatrix (@var{n}, @var{x})
Devuelve una matriz diagonal de orden @var{n} 
con los elementos de la diagonal todos ellos iguales a @var{x}. La llamada
@code{diagmatrix (@var{n}, 1)} devuelve una matriz identidad
(igual que @code{ident (@var{n})}).

La variable @var{n} debe ser un n@'umero entero, en caso contrario @code{diagmatrix} env@'{@dotless{i}}a un mensaje de error.

@var{x} puede ser cualquier tipo de expresi@'on, incluso otra matriz.
Si @var{x} es una matriz, no se copia; todos los elementos de la diagonal son iguales a @var{x}.

@c NEED EXAMPLE HERE
@end deffn

@defvr {Variable opcional} doallmxops
Valor por defecto: @code{true}

Cuando @code{doallmxops} vale @code{true},
todas las operaciones relacionadas con matrices son
llevadas a cabo. Cuando es @code{false}, entonces las
selecciones para @code{dot} controlan las operaciones a ejecutar.

@c NEED EXAMPLES HERE
@end defvr

@defvr {Variable opcional} domxexpt
Valor por defecto: @code{true}

Cuando @code{domxexpt} vale @code{true},
un exponente matricial, como @code{exp (@var{M})} donde @var{M} es
una matriz, se interpreta como una matriz cuyo elemento @code{[i,j} es
igual a @code{exp (m[i,j])}. En otro caso, @code{exp (@var{M})} se
eval@'ua como @code{exp (ev(@var{M}))}.

La variable @code{domxexpt} afecta a todas las expresiones de la forma @code{@var{base}^@var{exponente}}
donde @var{base} es una expresi@'on escalar o constante y @var{exponente} es una
lista o matriz.

Ejemplo:

@example
(%i1) m: matrix ([1, %i], [a+b, %pi]);
                         [   1    %i  ]
(%o1)                    [            ]
                         [ b + a  %pi ]
(%i2) domxexpt: false$
(%i3) (1 - c)^m;
                             [   1    %i  ]
                             [            ]
                             [ b + a  %pi ]
(%o3)                 (1 - c)
(%i4) domxexpt: true$
(%i5) (1 - c)^m;
                  [                      %i  ]
                  [    1 - c      (1 - c)    ]
(%o5)             [                          ]
                  [        b + a         %pi ]
                  [ (1 - c)       (1 - c)    ]
@end example

@end defvr

@defvr {Variable opcional} domxmxops
Valor por defecto: @code{true}

Cuando @code{domxmxops} vale @code{true}, se realizan todas las operaciones entre
matrices o entre matrices y listas (pero no las operaciones 
entre matrices y escalares); si esta variable es @code{false} tales
operaciones no se realizan.
@c IS THIS AN EVALUATION OR A SIMPLIFICATION FLAG ??

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} domxnctimes
Valor por defecto: @code{false}

Cuando @code{domxnctimes} vale @code{true}, se calculan los productos
no conmutativos entre matrices.
@c IS THIS AN EVALUATION OR A SIMPLIFICATION FLAG ??

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dontfactor
Valor por defecto: @code{[]}

En @code{dontfactor} puede guardarse una lista de variables respecto de
las cuales no se realizar@'an factorizaciones. Inicialmente, la lista
est@'a vac@'{@dotless{i}}a.

@end defvr

@defvr {Variable opcional} doscmxops
Valor por defecto: @code{false}

Cuando @code{doscmxops} vale @code{true}, se realizan las operaciones entre escalares y 
matrices.
@c IS THIS AN EVALUATION OR A SIMPLIFICATION FLAG ??

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} doscmxplus
Valor por defecto: @code{false}

Cuando @code{doscmxplus} vale @code{true}, las operaciones entre
escalares y matrices dan como resultado una matriz.
@c IS THIS AN EVALUATION OR A SIMPLIFICATION FLAG ??

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dot0nscsimp
Valor por defecto: @code{true}

@c WHAT DOES THIS MEAN EXACTLY ??
(Esta descripci@'on no est@'a clara en la versi@'on inglesa original.)

@c NEED EXAMPLE HERE
@end defvr


@c AQUI FALTA DEFINICION DE dot0simp

@c AQUI FALTA DEFINICION DE dot1simp

@defvr {Variable opcional} dotassoc
Valor por defecto: @code{true}

Cuando @code{dotassoc} vale @code{true}, una expresi@'on como @code{(A.B).C} se transforma en
@code{A.(B.C)}.
@c "." MEANS NONCOMMUTATIVE MULTIPLICATION RIGHT ??

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dotconstrules
Valor por defecto: @code{true}

Cuando @code{dotconstrules} vale @code{true}, un producto no conmutativo de una
constante con otro t@'ermino se transforma en un producto conmutativo.

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dotdistrib
Valor por defecto: @code{false}

Cuando @code{dotdistrib} vale @code{true}, una expresi@'on como @code{A.(B + C)} se transforma en @code{A.B + A.C}.

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dotexptsimp
Valor por defecto: @code{true}

Cuando @code{dotexptsimp} vale @code{true}, una expresi@'on como @code{A.A} se transforma en @code{A^^2}.

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dotident
Valor por defecto: 1

El valor de la variable @code{dotident} es el resultado devuelto por @code{X^^0}.
@c "RETURNED" ?? IS THIS A SIMPLIFICATION OR AN EVALUATION ??

@c NEED EXAMPLE HERE
@end defvr

@defvr {Variable opcional} dotscrules
Valor por defecto: @code{false}

Cuando @code{dotscrules} vale @code{true}, una expresi@'on como @code{A.SC} o @code{SC.A} se transforma 
en @code{SC*A} y @code{A.(SC*B)} en @code{SC*(A.B)}.
@c HMM, DOES "SC" MEAN "SCALAR" HERE ?? CLARIFY

@c NEED EXAMPLE HERE
@end defvr

@deffn {Funci@'on} echelon (@var{M})
Devuelve la forma escalonada de la matriz @var{M}, obtenida por eliminaci@'on gaussiana.
La forma escalonada se calcula a partir de @var{M} mediante operaciones elementales con sus filas,
de tal manera que el primer elemento no nulo de cada fila en la matriz 
resultado es la unidad y que cada elemento de la columna por debajo del primer uno de cada
fila sean todos ceros.

La funci@'on @code{triangularize} tambi@'en lleva a cabo la eliminaci@'on gaussiana, pero no 
normaliza el primer elemento no nulo de cada fila.

Otras funciones, como @code{lu_factor} y @code{cholesky}, tambi@'en dan como resultados
matrices triangularizadas.

@c ===beg===
@c M: matrix ([3, 7, aa, bb], [-1, 8, 5, 2], [9, 2, 11, 4]);
@c echelon (M);
@c ===end===
@example
(%i1) M: matrix ([3, 7, aa, bb], [-1, 8, 5, 2], [9, 2, 11, 4]);
                       [  3   7  aa  bb ]
                       [                ]
(%o1)                  [ - 1  8  5   2  ]
                       [                ]
                       [  9   2  11  4  ]
(%i2) echelon (M);
                  [ 1  - 8  - 5      - 2     ]
                  [                          ]
                  [         28       11      ]
                  [ 0   1   --       --      ]
(%o2)             [         37       37      ]
                  [                          ]
                  [              37 bb - 119 ]
                  [ 0   0    1   ----------- ]
                  [              37 aa - 313 ]
@end example

@end deffn

@deffn {Funci@'on} eigenvalues (@var{M})
@deffnx {Funci@'on} eivals (@var{M})
@c eigen.mac IS AUTOLOADED IF eigenvalues OR eigenvectors IS REFERENCED; EXTEND THAT TO ALL FUNCTIONS ??
@c EACH FUNCTION INTENDED FOR EXTERNAL USE SHOULD HAVE ITS OWN DOCUMENTATION ITEM
Devuelve una lista con dos sublistas. La primera sublista la forman los
valores propios de la matriz @var{M} y la segunda sus multiplicidades correspondientes.

El nombre @code{eivals} es un sin@'onimo de @code{eigenvalues}.

La funci@'on @code{eigenvalues} llama a la funci@'on @code{solve} para calcular las ra@'{@dotless{i}}ces
del polinomio caracter@'{@dotless{i}}stico de la matriz. En ocasiones, @code{solve} no
podr@'a encontrar dichas ra@'{@dotless{i}}ces, en cuyo caso otras funciones de este paquete
no trabajar@'an correctamente, a excepci@'on de @code{innerproduct},
@code{unitvector}, @code{columnvector} y @code{gramschmidt}.
@c WHICH ONES ARE THE FUNCTIONS WHICH DON'T WORK ??
@c ACTUALLY IT'S MORE IMPORTANT TO LIST THE ONES WHICH DON'T WORK HERE
@c WHAT DOES "will not work" MEAN, ANYWAY ??

En algunos casos los valores propios encontrados por @code{solve} ser@'an
expresiones complicadas, las cuales se podr@'an simplificar haciendo uso
de otras funciones.
@c WHAT ARE THOSE OTHER FUNCTIONS ??

El paquete @code{eigen.mac} se carga en memoria de forma autom@'atica cuando
se invocan @code{eigenvalues} o @code{eigenvectors}. Si @code{eigen.mac} no
est@'a ya cargado, @code{load ("eigen")} lo carga. Tras la carga, todas las
funciones y variables del paquete estar@'an activas.
@c REFER TO OVERVIEW OF PACKAGE (INCLUDING LIST OF FUNCTIONS) HERE

@c NEED EXAMPLES HERE
@end deffn

@deffn {Funci@'on} eigenvectors (@var{M})
@deffnx {Funci@'on} eivects (@var{M})

Calcula los vectores propios de la matriz @var{M}.
El resultado devuelto es una lista con dos elementos;
el primero est@'a formado por dos listas, la primera con los valores propios
de @var{M} y la segunda con sus respectivas multiplicidades, el segundo
elemento es una lista de listas de vectores propios, una por
cada valor propio, pudiendo haber uno o m@'as vectores propios en cada lista.

Tomando la matriz @var{M} como argumento, devuelve una lista de listas,
la primera de las cuales es la salida de @code{eigenvalues} y las 
siguientes son los vectorios propios de la matriz asociados a los
valores propios correspondientes. Los vectores propios calculados son los 
vectores propios por la derecha.

El nombre @code{eivects} es un sin@'onimo de @code{eigenvectors}.

El paquete @code{eigen.mac} se carga en memoria de forma autom@'atica cuando
se invocan @code{eigenvalues} o @code{eigenvectors}. Si @code{eigen.mac} no
est@'a ya cargado, @code{load ("eigen")} lo carga. Tras la carga, todas las
funciones y variables del paquete estar@'an activas.

Las variables que afectan a esta funci@'on son: 

@code{nondiagonalizable} toma el valor @code{true} o @code{false} dependiendo
de si la matriz no es diagonalizable o diagonalizable tras la ejecuci@'on de
@code{eigenvectors}.

@code{hermitianmatrix}, si vale @code{true}, entonces los vectores propios 
degenerados de la matriz herm@'{@dotless{i}}tica son ortogonalizados mediante el
algoritmo de Gram-Schmidt.

@code{knowneigvals}, si vale @code{true}, entonces el paquete @code{eigen} da por
sentado que los valores propios de la matriz son conocidos por el usuario y 
almacenados en la variable global @code{listeigvals}.  @code{listeigvals} deber@'{@dotless{i}}a
ser similar a la salida de @code{eigenvalues}.

La funci@'on @code{algsys} se utiliza aqu@'{@dotless{i}} para calcular los vectores propios. A
veces, @code{algsys} no podr@'a calcular una soluci@'on. En algunos casos, ser@'a posible
simplificar los valores propios calcul@'andolos en primer lugar con @code{eigenvalues} y
luego utilizando otras funciones para simplificarlos. Tras la simplificaci@'on, 
@code{eigenvectors} podr@'a ser llamada otra vez con la variable @code{knowneigvals}
ajustada al valor @code{true}.

V@'ease tambi@'en @code{eigenvalues}.

Ejemplos:

Una matriz con un @'unico vector propio por cada valor propio.

@c ===beg===
@c M1 : matrix ([11, -1], [1, 7]);
@c [vals, vecs] : eigenvectors (M1);
@c for i thru length (vals[1]) do disp (val[i] = vals[1][i],
@c   mult[i] = vals[2][i], vec[i] = vecs[i]);
@c ===end===
@example
(%i1) M1 : matrix ([11, -1], [1, 7]);
                           [ 11  - 1 ]
(%o1)                      [         ]
                           [ 1    7  ]
(%i2) [vals, vecs] : eigenvectors (M1);
(%o2) [[[9 - sqrt(3), sqrt(3) + 9], [1, 1]], 
                        [[[1, sqrt(3) + 2]], [[1, 2 - sqrt(3)]]]]
(%i3) for i thru length (vals[1]) do disp (val[i] = vals[1][i],
  mult[i] = vals[2][i], vec[i] = vecs[i]);
                       val  = 9 - sqrt(3)
                          1

                            mult  = 1
                                1

                    vec  = [[1, sqrt(3) + 2]]
                       1

                       val  = sqrt(3) + 9
                          2

                            mult  = 1
                                2

                    vec  = [[1, 2 - sqrt(3)]]
                       2

(%o3)                         done
@end example

Una matriz con dos vectores propios para uno de los valores propios.

@c ===beg===
@c M1 : matrix ([0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 2, 0], [0, 0, 0, 2]);
@c [vals, vecs] : eigenvectors (M1);
@c for i thru length (vals[1]) do disp (val[i] = vals[1][i],
@c   mult[i] = vals[2][i], vec[i] = vecs[i]);
@c ===end===
@example
(%i1) M1 : matrix ([0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 2, 0], [0, 0, 0, 2]);
                         [ 0  1  0  0 ]
                         [            ]
                         [ 0  0  0  0 ]
(%o1)                    [            ]
                         [ 0  0  2  0 ]
                         [            ]
                         [ 0  0  0  2 ]
(%i2) [vals, vecs] : eigenvectors (M1);
(%o2) [[[0, 2], [2, 2]], [[[1, 0, 0, 0]],
                                   [[0, 0, 1, 0], [0, 0, 0, 1]]]]
(%i3) for i thru length (vals[1]) do disp (val[i] = vals[1][i],
  mult[i] = vals[2][i], vec[i] = vecs[i]);
                            val  = 0
                               1

                            mult  = 2
                                1

                      vec  = [[1, 0, 0, 0]]
                         1

                            val  = 2
                               2

                            mult  = 2
                                2

               vec  = [[0, 0, 1, 0], [0, 0, 0, 1]]
                  2

(%o3)                         done
@end example

@end deffn



@deffn {Funci@'on} ematrix (@var{m}, @var{n}, @var{x}, @var{i}, @var{j})
Devuelve una matriz de orden @var{m} por @var{n}, con todos sus elementos 
nulos, excepto el que ocupa la posici@'on @code{[@var{i}, @var{j}]}, que
es igual a @var{x}.

@end deffn

@deffn {Funci@'on} entermatrix (@var{m}, @var{n})
Devuelve una matriz de orden @var{m} por @var{n}, cuyos elementos
son leidos de forma interactiva.

Si @var{n} es igual a @var{m}, Maxima pregunta por el tipo de
matriz (diagonal, sim@'etrica, antisim@'etrica o general) y luego por
cada elemento. Cada respuesta introducida por el usuario debe terminar
con un punto y coma @code{;} o con un signo de d@'olar @code{$}.

Si @var{n} y @var{m} no son iguales, Maxima pregunta
por el valor de cada elemento.

Los elementos de la matriz pueden ser cualquier tipo de 
expresi@'on, que en todo caso ser@'a evaluada.
@code{entermatrix} eval@'ua sus argumentos.

@example
(%i1) n: 3$
(%i2) m: entermatrix (n, n)$

Is the matrix  1. Diagonal  2. Symmetric  3. Antisymmetric  
   4. General
Answer 1, 2, 3 or 4 : 
1$
Row 1 Column 1: 
(a+b)^n$
Row 2 Column 2: 
(a+b)^(n+1)$
Row 3 Column 3: 
(a+b)^(n+2)$

Matrix entered.
(%i3) m;
                [        3                     ]
                [ (b + a)      0         0     ]
                [                              ]
(%o3)           [                  4           ]
                [    0      (b + a)      0     ]
                [                              ]
                [                            5 ]
                [    0         0      (b + a)  ]
@end example

@end deffn


@deffn {Funci@'on} genmatrix (@var{a}, @var{i_2}, @var{j_2}, @var{i_1}, @var{j_1})
@deffnx {Funci@'on} genmatrix (@var{a}, @var{i_2}, @var{j_2}, @var{i_1})
@deffnx {Funci@'on} genmatrix (@var{a}, @var{i_2}, @var{j_2})
Devuelve una matriz generada a partir de @var{a}, siendo @code{@var{a}[@var{i_1},@var{j_1}]} el elemento superior izquierdo y @code{@var{a}[@var{i_2},@var{j_2}]} el inferior derecho de la matriz. 
Aqu@'{@dotless{i}} @var{a} se declara como una arreglo (creado por @code{array},
pero no por @code{make_array}), o un array no declarado, o una funci@'on array, o una
expresi@'on lambda de dos argumentos.
(An array function is created like other functions with @code{:=} or @code{define},
but arguments are enclosed in square brackets instead of parentheses.)

Si se omite @var{j_1}, entonces se le asigna el valor @var{i_1}. Si tanto @var{j_1} como @var{i_1} se omiten, a las dos variables se le asigna el valor 1.

Si un elemento @code{i,j} del arreglo no est@'a definido, se le asignar@'a el elemento simb@'olico @code{@var{a}[i,j]}.

@c ===beg===
@c h [i, j] := 1 / (i + j - 1);
@c genmatrix (h, 3, 3);
@c array (a, fixnum, 2, 2);
@c a [1, 1] : %e;
@c a [2, 2] : %pi;
@c genmatrix (a, 2, 2);
@c genmatrix (lambda ([i, j], j - i), 3, 3);
@c genmatrix (B, 2, 2);
@c ===end===
@example
(%i1) h [i, j] := 1 / (i + j - 1);
                                    1
(%o1)                  h     := ---------
                        i, j    i + j - 1
(%i2) genmatrix (h, 3, 3);
                           [    1  1 ]
                           [ 1  -  - ]
                           [    2  3 ]
                           [         ]
                           [ 1  1  1 ]
(%o2)                      [ -  -  - ]
                           [ 2  3  4 ]
                           [         ]
                           [ 1  1  1 ]
                           [ -  -  - ]
                           [ 3  4  5 ]
(%i3) array (a, fixnum, 2, 2);
(%o3)                           a
(%i4) a [1, 1] : %e;
(%o4)                          %e
(%i5) a [2, 2] : %pi;
(%o5)                          %pi
(%i6) genmatrix (a, 2, 2);
                           [ %e   0  ]
(%o6)                      [         ]
                           [ 0   %pi ]
(%i7) genmatrix (lambda ([i, j], j - i), 3, 3);
                         [  0    1   2 ]
                         [             ]
(%o7)                    [ - 1   0   1 ]
                         [             ]
                         [ - 2  - 1  0 ]
(%i8) genmatrix (B, 2, 2);
                        [ B      B     ]
                        [  1, 1   1, 2 ]
(%o8)                   [              ]
                        [ B      B     ]
                        [  2, 1   2, 2 ]
@end example

@end deffn

@deffn {Funci@'on} gramschmidt (@var{x})
@deffnx {Funci@'on} gramschmidt (@var{x}, @var{F})

Ejecuta el algoritmo de ortogonalizaci@'on de Gram-Schmidt sobre @var{x},
que puede ser una matriz o una lista de listas. La funci@'on 
@code{gramschmidt} no altera el valor de @var{x}.
El producto interno por defecto empleado en @code{gramschmidt} es
@code{innerproduct}, o @var{F}, si se ha hecho uso de esta opci@'on.

Si @var{x} es una matriz, el algoritmo se aplica a las filas de @var{x}. Si
@var{x} es una lista de listas, el algoritmo se aplica a las sublistas,
las cuales deben tener el mismo n@'umero de miembros. En cualquier caso,
el valor devuelto es una lista de listas, cuyas sublistas son ortogonales.
@c Falta completar este p'arrafo

La funci@'on @code{factor} es invocada  en cada paso del algoritmo para 
simplificar resultados intermedios. Como consecuencia, el valor retornado 
puede contener enteros factorizados.

El nombre @code{gschmit} es sin@'onimo de @code{gramschmidt}.

Es necesario cargar la funci@'on haciendo @code{load ("eigen")}.

Ejemplo:

Algoritmo de Gram-Schmidt utilizando el producto interno por defecto.

@c ===beg===
@c load (eigen)$
@c x: matrix ([1, 2, 3], [9, 18, 30], [12, 48, 60]);
@c y: gramschmidt (x);
@c map (innerproduct, [y[1], y[2], y[3]], [y[2], y[3], y[1]]);
@c ===end===
@example
(%i1) load (eigen)$
(%i2) x: matrix ([1, 2, 3], [9, 18, 30], [12, 48, 60]);
                         [ 1   2   3  ]
                         [            ]
(%o2)                    [ 9   18  30 ]
                         [            ]
                         [ 12  48  60 ]
(%i3) y: gramschmidt (x);
                       2      2            4     3
                      3      3   3 5      2  3  2  3
(%o3)  [[1, 2, 3], [- ---, - --, ---], [- ----, ----, 0]]
                      2 7    7   2 7       5     5
(%i4) map (innerproduct, [y[1], y[2], y[3]], [y[2], y[3], y[1]]);
(%o4)                       [0, 0, 0]
@end example

Algoritmo de Gram-Schmidt utilizando un producto interno especificado
por el usuario.

@c ===beg===
@c load (eigen)$
@c ip (f, g) := integrate (f * g, u, a, b);
@c y : gramschmidt ([1, sin(u), cos(u)], ip), a= -%pi/2, b=%pi/2;
@c map (ip, [y[1], y[2], y[3]], [y[2], y[3], y[1]]), a= -%pi/2, b=%pi/2;
@c ===end===
@example
(%i1) load (eigen)$
(%i2) ip (f, g) := integrate (f * g, u, a, b);
(%o2)          ip(f, g) := integrate(f g, u, a, b)
(%i3) y : gramschmidt ([1, sin(u), cos(u)], ip), a= -%pi/2, b=%pi/2;
                               %pi cos(u) - 2
(%o3)              [1, sin(u), --------------]
                                    %pi
(%i4) map (ip, [y[1], y[2], y[3]], [y[2], y[3], y[1]]), a= -%pi/2, b=%pi/2;
(%o4)                       [0, 0, 0]
@end example

@end deffn


@deffn {Funci@'on} ident (@var{n})
Devuelve la matriz identidad de orden @var{n}.

@end deffn

@deffn {Funci@'on} innerproduct (@var{x}, @var{y})
@deffnx {Funci@'on} inprod (@var{x}, @var{y})
Devuelve el producto interior o escalar de @var{x} por @var{y}, que deben ser listas de igual longitud, o ambas matrices columa o fila de igual longitud. El valor devuelto es @code{conjugate (x) . y}, donde @code{.} es el operador de multiplicaci@'on no conmutativa.

Es necesario cargar la funci@'on haciendo @code{load ("eigen")}.

El nombre @code{inprod} es sin@'onimo de @code{innerproduct}.

@c NEED EXAMPLE HERE
@end deffn

@c THIS DESCRIPTION NEEDS WORK
@deffn {Funci@'on} invert (@var{M})
Devuelve la inversa de la matriz @var{M}, calculada por el m@'etodo del adjunto.

@c FALTAN DOS PARRAFOS AQUI

La implementaci@'on actual no es eficiente para matrices de orden grande.

Cuando @code{detout} vale @code{true}, el determinante queda fuera de la inversa a modo de factor escalar.

Los elementos de la matriz inversa no se expanden. Si @var{M} tiene elementos polin@'omicos, se puede mejorar el aspecto del resultado haciendo @code{expand (invert (m)), detout}. @c FALTA COMPLETAR PARRAFO

V@'ease la descripci@'on de @code{^^} (exponente no conmutativo) para informaci@'on sobre otro m@'etodo para invertir matrices.

@c NEED EXAMPLE HERE
@end deffn

@defvr {Variable opcional} lmxchar
Valor por defecto: @code{[}

La variable @code{lmxchar} guarda el car@'acter a mostrar como delimitador izquierdo de la matriz.
V@'ease tambi@'en @code{rmxchar}.

Ejemplo:

@example
(%i1) lmxchar: "|"$
(%i2) matrix ([a, b, c], [d, e, f], [g, h, i]);
                           | a  b  c ]
                           |         ]
(%o2)                      | d  e  f ]
                           |         ]
                           | g  h  i ]
@end example

@end defvr

@deffn {Funci@'on} matrix (@var{fila_1}, ..., @var{fila_n})
Devuelve una matriz rectangular con las filas  @var{fila_1}, ..., @var{fila_n}. Cada fila es una lista de expresiones. Todas las filas deben tener el mismo n@'umero de miembros.

Las operaciones @code{+} (suma), @code{-} (resta), @code{*} (multiplicaci@'on) y @code{/} (divisi@'on), se llevan a cabo elemento a elemento cuando los operandos son dos matrices, un escalar y una matriz o una matriz con un escalar. La operaci@'on @code{^} (exponenciaci@'on, equivalente a @code{**}) se lleva cabo tambi@'en elemento a elemento si los operandos son un escalr y una matriz o uma matriz y un escalar, pero no si los operandos son dos matrices.

El producto matricial se representa con el operador de multiplicaci@'on no conmutativa @code{.}. El correspondiente operador de exponenciaci@'on no conmutativa es @code{^^}. Dada la matriz @code{@var{A}}, @code{@var{A}.@var{A} = @var{A}^^2} y @code{@var{A}^^-1} es la inversa de @var{A}, si existe.

Algunas variables controlan la simplificaci@'on de expresiones que incluyan estas operaciones: @code{doallmxops}, @code{domxexpt}, @code{domxmxops}, @code{doscmxops} y @code{doscmxplus}.
@c CHECK -- WE PROBABLY WANT EXHAUSTIVE LIST HERE

Hay otras opciones adicionales relacionadas con matrices:
@code{lmxchar}, @code{rmxchar}, @code{ratmx}, @code{listarith}, @code{detout},
@code{scalarmatrix} y @code{sparse}.
@c CHECK -- WE PROBABLY WANT EXHAUSTIVE LIST HERE

Hay tambi@'en algunas funciones que admiten matrices como argumentos o que devuelven resultados matriciales: @code{eigenvalues}, @code{eigenvectors},
@code{determinant},
@code{charpoly}, @code{genmatrix}, @code{addcol}, @code{addrow}, 
@code{copymatrix}, @code{transpose}, @code{echelon} y @code{rank}.
@c CHECK -- WE PROBABLY WANT EXHAUSTIVE LIST HERE

Ejemplos:

@itemize @bullet
@item
Construcci@'on de matrices a partir de listas.
@end itemize
@example
(%i1) x: matrix ([17, 3], [-8, 11]);
                           [ 17   3  ]
(%o1)                      [         ]
                           [ - 8  11 ]
(%i2) y: matrix ([%pi, %e], [a, b]);
                           [ %pi  %e ]
(%o2)                      [         ]
                           [  a   b  ]
@end example
@itemize @bullet
@item
Suma elemento a elemento.
@end itemize
@example
(%i3) x + y;
                      [ %pi + 17  %e + 3 ]
(%o3)                 [                  ]
                      [  a - 8    b + 11 ]
@end example
@itemize @bullet
@item
Resta elemento a elemento.
@end itemize
@example
(%i4) x - y;
                      [ 17 - %pi  3 - %e ]
(%o4)                 [                  ]
                      [ - a - 8   11 - b ]
@end example
@itemize @bullet
@item
Multiplicaci@'on elemento a elemento.
@end itemize
@example
(%i5) x * y;
                        [ 17 %pi  3 %e ]
(%o5)                   [              ]
                        [ - 8 a   11 b ]
@end example
@itemize @bullet
@item
Divisi@'on elemento a elemento.
@end itemize
@example
(%i6) x / y;
                        [ 17       - 1 ]
                        [ ---  3 %e    ]
                        [ %pi          ]
(%o6)                   [              ]
                        [   8    11    ]
                        [ - -    --    ]
                        [   a    b     ]
@end example
@itemize @bullet
@item
Matriz elevada a un exponente escalar, operaci@'on elemento a elemento.
@end itemize
@example
(%i7) x ^ 3;
                         [ 4913    27  ]
(%o7)                    [             ]
                         [ - 512  1331 ]
@end example
@itemize @bullet
@item
Base escalar y exponente matricial, operaci@'on elemento a elemento.
@end itemize
@example
(%i8) exp(y); 
                         [   %pi    %e ]
                         [ %e     %e   ]
(%o8)                    [             ]
                         [    a     b  ]
                         [  %e    %e   ]
@end example
@itemize @bullet
@item
Base y exponente matriciales. Esta operaci@'on no se realiza elemento a elemento.
@c WHAT IS THIS ??
@end itemize
@example
(%i9) x ^ y;
                                [ %pi  %e ]
                                [         ]
                                [  a   b  ]
                     [ 17   3  ]
(%o9)                [         ]
                     [ - 8  11 ]
@end example
@itemize @bullet
@item
Multiplicaci@'on matricial no conmutativa.
@end itemize
@example
(%i10) x . y;
                  [ 3 a + 17 %pi  3 b + 17 %e ]
(%o10)            [                           ]
                  [ 11 a - 8 %pi  11 b - 8 %e ]
(%i11) y . x;
                [ 17 %pi - 8 %e  3 %pi + 11 %e ]
(%o11)          [                              ]
                [  17 a - 8 b     11 b + 3 a   ]
@end example
@itemize @bullet
@item
Exponenciaci@'on matricial no conmutativa. Una base escalar @var{b} elevada a un exponente matricial @var{M} se lleva a cabo elemento a elemento y por lo tanto @code{b^^m} equivale a @code{b^m}.
@end itemize
@example
(%i12) x ^^ 3;
                        [  3833   1719 ]
(%o12)                  [              ]
                        [ - 4584  395  ]
(%i13) %e ^^ y;
                         [   %pi    %e ]
                         [ %e     %e   ]
(%o13)                   [             ]
                         [    a     b  ]
                         [  %e    %e   ]
@end example
@itemize @bullet
@item
Una matriz elevada al exponente -1 con el operador de exponenciaci@'on no conmutativa equivale a la matriz inversa, si existe.
@end itemize
@example
(%i14) x ^^ -1;
                         [ 11      3  ]
                         [ ---  - --- ]
                         [ 211    211 ]
(%o14)                   [            ]
                         [  8    17   ]
                         [ ---   ---  ]
                         [ 211   211  ]
(%i15) x . (x ^^ -1);
                            [ 1  0 ]
(%o15)                      [      ]
                            [ 0  1 ]
@end example

@end deffn

@deffn {Funci@'on} matrixmap (@var{f}, @var{M})
Devuelve una matriz con el elemento @code{i,j} igual a @code{@var{f}(@var{M}[i,j])}.

V@'eanse tambi@'en @code{map}, @code{fullmap}, @code{fullmapl} y @code{apply}.

@c NEED EXAMPLE HERE
@end deffn

@deffn {Funci@'on} matrixp (@var{expr})
Devuelve @code{true} si @var{expr} es una matriz, en caso contrario @code{false}.

@end deffn

@defvr {Variable opcional} matrix_element_add
Valor por defecto: @code{+}

La variable @code{matrix_element_add} guarda el s@'{@dotless{i}}mbolo del operador a ejecutar en lugar de la suma en el producto matricial; a @code{matrix_element_add} se le puede asignar cualquier operador n-ario (esto es, una funci@'on que admite cualquier n@'umero de argumentos). El valor asignado puede ser el nombre de un operador encerrado entre ap@'ostrofos, el nombre de una funci@'on o una expresi@'on lambda.

V@'eanse tambi@'en @code{matrix_element_mult} y @code{matrix_element_transpose}.

Ejemplo:

@example
(%i1) matrix_element_add: "*"$
(%i2) matrix_element_mult: "^"$
(%i3) aa: matrix ([a, b, c], [d, e, f]);
                           [ a  b  c ]
(%o3)                      [         ]
                           [ d  e  f ]
(%i4) bb: matrix ([u, v, w], [x, y, z]);
                           [ u  v  w ]
(%o4)                      [         ]
                           [ x  y  z ]
(%i5) aa . transpose (bb);
                     [  u  v  w   x  y  z ]
                     [ a  b  c   a  b  c  ]
(%o5)                [                    ]
                     [  u  v  w   x  y  z ]
                     [ d  e  f   d  e  f  ]
@end example

@end defvr


@defvr {Variable opcional} matrix_element_mult
Valor por defecto: @code{*}

La variable @code{matrix_element_mult} guarda el s@'{@dotless{i}}mbolo del operador a ejecutar en lugar de la multiplicaci@'on en el producto matricial; a @code{matrix_element_mult} se le puede asignar cualquier operador binario. El valor asignado puede ser el nombre de un operador encerrado entre ap@'ostrofos, el nombre de una funci@'on o una expresi@'on lambda.

El operador @code{.} puede ser una opci@'on @'util en determinados contextos.

V@'eanse tambi@'en @code{matrix_element_add} y @code{matrix_element_transpose}.

Ejemplo:

@example
(%i1) matrix_element_add: lambda ([[x]], sqrt (apply ("+", x)))$
(%i2) matrix_element_mult: lambda ([x, y], (x - y)^2)$
(%i3) [a, b, c] . [x, y, z];
                          2          2          2
(%o3)         sqrt((c - z)  + (b - y)  + (a - x) )
(%i4) aa: matrix ([a, b, c], [d, e, f]);
                           [ a  b  c ]
(%o4)                      [         ]
                           [ d  e  f ]
(%i5) bb: matrix ([u, v, w], [x, y, z]);
                           [ u  v  w ]
(%o5)                      [         ]
                           [ x  y  z ]
(%i6) aa . transpose (bb);
               [             2          2          2  ]
               [ sqrt((c - w)  + (b - v)  + (a - u) ) ]
(%o6)  Col 1 = [                                      ]
               [             2          2          2  ]
               [ sqrt((f - w)  + (e - v)  + (d - u) ) ]

                         [             2          2          2  ]
                         [ sqrt((c - z)  + (b - y)  + (a - x) ) ]
                 Col 2 = [                                      ]
                         [             2          2          2  ]
                         [ sqrt((f - z)  + (e - y)  + (d - x) ) ]
@end example

@end defvr

@defvr {Variable opcional} matrix_element_transpose
Valor por defecto: @code{false}

La variable @code{matrix_element_transpose} es una operaci@'on que se aplica a cada elemento de una matriz a la que se le calcula la transpuesta. A @code{matrix_element_mult} se le puede asignar cualquier operador unitario. El valor asignado puede ser el nombre de un operador encerrador entre ap@'ostrofos, el nombre de una funci@'on o una expresi@'on lambda.

Cuando @code{matrix_element_transpose} es igual a @code{transpose}, la funci@'on @code{transpose} se aplica a cada elemento. Cuando  @code{matrix_element_transpose} es igual  a @code{nonscalars}, la funci@'on @code{transpose} se aplica a todos los elementos no escalares. Si alguno de los elementos es un @'atomo, la opci@'on @code{nonscalars} se aplica 
@code{transpose} s@'olo si el @'atomo se declara no escalar, mientras que la opci@'on @code{transpose} siempre aplica  @code{transpose}.

La opci@'on por defecto, @code{false}, significa que no se aplica ninguna operaci@'on.

V@'eanse tambi@'en @code{matrix_element_add} y @code{matrix_element_mult}.

Ejemplos:

@example
(%i1) declare (a, nonscalar)$
(%i2) transpose ([a, b]);
                        [ transpose(a) ]
(%o2)                   [              ]
                        [      b       ]
(%i3) matrix_element_transpose: nonscalars$
(%i4) transpose ([a, b]);
                        [ transpose(a) ]
(%o4)                   [              ]
                        [      b       ]
(%i5) matrix_element_transpose: transpose$
(%i6) transpose ([a, b]);
                        [ transpose(a) ]
(%o6)                   [              ]
                        [ transpose(b) ]
(%i7) matrix_element_transpose: 
           lambda ([x], realpart(x) - %i*imagpart(x))$
(%i8) m: matrix ([1 + 5*%i, 3 - 2*%i], [7*%i, 11]);
                     [ 5 %i + 1  3 - 2 %i ]
(%o8)                [                    ]
                     [   7 %i       11    ]
(%i9) transpose (m);
                      [ 1 - 5 %i  - 7 %i ]
(%o9)                 [                  ]
                      [ 2 %i + 3    11   ]
@end example

@end defvr


@c IS THIS THE ONLY MATRIX TRACE FUNCTION ??
@deffn {Funci@'on} mattrace (@var{M})
Devuelve la traza (esto es, la suma de los elementos de la diagonal principal) de la matriz cuadrada @var{M}.  

Para disponer de esta funci@'on es necesario cargar el paquete haciendo @code{load ("nchrpl")}.

@end deffn

@deffn {Funci@'on} minor (@var{M}, @var{i}, @var{j})
Devuelve el menor @code{(@var{i}, @var{j})} de la matriz @var{M}.  Esto es, la propia matriz @var{M}, una vez extra@'{@dotless{i}}das la fila @var{i} y la columna @var{j}.

@end deffn

@deffn {Funci@'on} ncexpt (@var{a}, @var{b})
Si una expresi@'on exponencial no conmutativa es demasiado grande para mostrarse en la forma @code{@var{a}^^@var{b}} entonces aparece como @code{ncexpt (@var{a},@var{b})}.

El nombre @code{ncexpt} no corresponde al de una funci@'on u operador, sino que tan solo aparece en la salida y no se reconoce como una entrada v@'alida.

@end deffn

@deffn {Funci@'on} ncharpoly (@var{M}, @var{x})
Devuelve el polinomio caracter@'{@dotless{i}}stico de la matriz @var{M} respecto de la variable @var{x}. Es una alternativa a la funci@'on @code{charpoly} de Maxima.

La funci@'on @code{ncharpoly} opera calculando trazas de las potencias de la matriz dada, que son iguales a las sumas de las potencias de las ra@'{@dotless{i}}ces del polinomio caracter@'{@dotless{i}}stico. A partir de estas cantidades se pueden calcular las funciones sim@'etricas de las ra@'{@dotless{i}}ces, que no son otra cosa sino los coeficientes del polinomio caracter@'{@dotless{i}}stico. La funci@'on   @code{charpoly} opera calculando el determinante de  by @code{@var{x} * ident [n] - a}. La funci@'on @code{ncharpoly} es m'as eficiente en el caso de matrices grandes y densas.

Para disponer de esta funci@'on es necesario cargar el paquete haciendo @code{load ("nchrpl")}.

@end deffn

@deffn {Funci@'on} newdet (@var{M}, @var{n})
Calcula el determinante de la matriz o arreglo @var{M} por el algoritmo del @'arbol menor de Johnson-Gentleman.
@c UGH -- ARRAYS ARE SUCH A MESS
El argumento @var{n} es el orden; es opcional si @var{M} es una matriz.

@end deffn

@c NEEDS CLARIFICATION AND EXAMPLES
@defvr {Declaraci@'on} nonscalar
Hace que los @'atomos se comporten como hace una lista o matriz con respecto del operador @code{.} del la multiplicaci@'on no conmutativa.

@end defvr

@deffn {Funci@'on} nonscalarp (@var{expr})
Devuelve @code{true} si @var{expr} no es escalar, es decir, si contiene @'atomos declarados como no escalares, listas o matrices.

@end deffn

@deffn {Funci@'on} permanent (@var{M}, @var{n})
Calcula la permanente de la matriz @var{M}. La permanente es como un determinante pero sin cambios de signo.

@end deffn

@deffn {Funci@'on} rank (@var{M})
Calcula el rango de la matriz @var{M}.  Esto es, el orden del mayor subdeterminante no singular de @var{M}.

@c STATEMENT NEEDS CLARIFICATION
La funci@'on @var{rango} puede retornar una respuesta err@'onea si no detecta que un elemento de la matriz equivalente a cero lo es.

@end deffn

@defvr {Variable opcional} ratmx
Valor por defecto: @code{false}

Si @code{ratmx} vale @code{false}, el determinante y la suma, resta y producto matriciales se calculan cuando las matrices se expresan en t@'erminos de sus elementos, pero no se calcula la inversi@'on matricial en su representaci@'on general.

Si @code{ratmx} vale @code{true}, las cuatro operaciones citadas m@'as arriba se calculan en el formato CRE y el resultado de la matriz inversa tambi@'en se da en formato CRE. Esto puede hacer que se expandan los elementos de la matriz, dependiendo del valor de @code{ratfac}, lo que quiz@'as no sea siempre deseable.

@end defvr

@deffn {Funci@'on} row (@var{M}, @var{i})
Devuelve la @var{i}-@'esima fila de la matriz @var{M}. El valor que devuelve tiene formato de matriz.

@end deffn

@defvr {Variable opcional} scalarmatrixp
Valor por defecto: @code{true}

Si @code{scalarmatrixp} vale @code{true}, entonces siempre que una matriz 1 x 1 se produce como resultado del c@'alculo del producto no conmutativo de matrices se cambia al formato escalar.

Si @code{scalarmatrixp} vale @code{all}, entonces todas las matrices 1 x 1 se simplifican a escalares.

Si @code{scalarmatrixp} vale @code{false}, las matrices 1 x 1 no se convierten en escalares.

@end defvr

@c FALTA AQUI DEFINICION DE scalefactors.

@deffn {Funci@'on} setelmx (@var{x}, @var{i}, @var{j}, @var{M})
Asigna el valor @var{x} al (@var{i}, @var{j})-@'esimo elemento de la matriz @var{M} y devuelve la matriz actualizada.

La llamada @code{@var{M} [@var{i}, @var{j}]: @var{x}} hace lo mismo, pero devuelve  @var{x} en lugar de @var{M}.

@end deffn

@deffn {Funci@'on} similaritytransform (@var{M})
@deffnx {Funci@'on} simtran (@var{M})
La funci@'on @code{similaritytransform} calcula la transformada de similitud de la matriz @code{M}. Devuelve una lista que es la salida de la instrucci@'on @code{uniteigenvectors}. Adem@'as, si la variable @code{nondiagonalizable} vale @code{false} entonces se calculan dos matrices globales @code{leftmatrix} y @code{rightmatrix}. Estas matrices tienen la propiedad de que @code{leftmatrix . @var{M} . rightmatrix} es una matriz diagonal con los valores propios de @var{M} en su diagonal.  Si @code{nondiagonalizable} vale @code{true} entonces no se calculan estas matrices.

Si la variable @code{hermitianmatrix} vale @code{true} entonces @code{leftmatrix} es el conjugado complejo de la transpuesta de @code{rightmatrix}.  En otro caso @code{leftmatrix} es la inversa de @code{rightmatrix}.

Las columnas de la matriz @code{rightmatrix} son los vectores propios de @var{M}.  Las otras variables (v@'eanse @code{eigenvalues} y @code{eigenvectors}) tienen el mismo efecto, puesto que @code{similaritytransform} llama a las otras funciones del paquete para poder formar @code{rightmatrix}.

Estas funciones se cargan con @code{load ("eigen")}.

El nombre @code{simtran} es sin@'onimo de @code{similaritytransform}.

@end deffn

@defvr {Variable opcional} sparse
Valor por defecto: @code{false}

Si @code{sparse} vale @code{true} y si @code{ratmx} vale @code{true}, entonces @code{determinant}
utilizar@'a rutinas especiales para calcular determinantes dispersos.

@end defvr

@deffn {Funci@'on} submatrix (@var{i_1}, ..., @var{i_m}, @var{M}, @var{j_1}, ..., @var{j_n})
@deffnx {Funci@'on} submatrix (@var{i_1}, ..., @var{i_m}, @var{M})
@deffnx {Funci@'on} submatrix (@var{M}, @var{j_1}, ..., @var{j_n})
Devuelve una nueva matriz formada a partir de la matriz @var{M} pero cuyas filas @var{i_1}, ..., @var{i_m} y columnas  @var{j_1}, ..., @var{j_n} han sido eliminadas.

@end deffn

@deffn {Funci@'on} transpose (@var{M})
Calcula la transpuesta de @var{M}.

Si @var{M} es una matriz, el valor devuelto es otra matriz @var{N} tal que @code{N[i,j] = M[j,i]}.

Si @var{M} es una lista, el valor devuelto es una matriz @var{N} de @code{length (m)} filas y 1 columna, tal que @code{N[i,1] = M[i]}.

En caso de no ser @var{M} ni matriz ni lista, se devuelve la
expresi@'on nominal @code{'transpose (@var{M})}.
@end deffn

@deffn {Funci@'on} triangularize (@var{M})
Devuelve la forma triangular superior de la matriz @code{M}, obtenida por eliminaci@'on gaussiana.
El resultado es el mismo que el devuelto por @code{echelon}, con la salvedad de que el primer elemento no nulo de cada fila no se normaliza a 1.

Las funciones @code{lu_factor} y @code{cholesky} tambi@'en triangularizan matrices.

@c ===beg===
@c M: matrix ([3, 7, aa, bb], [-1, 8, 5, 2], [9, 2, 11, 4]);
@c triangularize (M);
@c ===end===
@example
(%i1) M: matrix ([3, 7, aa, bb], [-1, 8, 5, 2], [9, 2, 11, 4]);
                       [  3   7  aa  bb ]
                       [                ]
(%o1)                  [ - 1  8  5   2  ]
                       [                ]
                       [  9   2  11  4  ]
(%i2) triangularize (M);
             [ - 1   8         5            2      ]
             [                                     ]
(%o2)        [  0   - 74     - 56         - 22     ]
             [                                     ]
             [  0    0    626 - 74 aa  238 - 74 bb ]
@end example

@end deffn

@deffn {Funci@'on} uniteigenvectors (@var{M})
@deffnx {Funci@'on} ueivects (@var{M})
Calcula los vectores propios unitarios de la matriz @var{M}. El valor que devuelve es una lista de listas, la primera de las cuales es la salida de la funci@'on @code{eigenvalues} y el resto de sublistas son los vectores propios unitarios de la matriz correspondiente a esos valores propios, respectivamente.

Las variables citadas en la descripci@'on de la funci@'on @code{eigenvectors} tienen los mismos efectos en @code{uniteigenvectors}.

Si @code{knowneigvects} vale @code{true}, el paquete @code{eigen} da por supuesto que el usuario conoce los vectores propios de la matriz y que est@'an guardados en la variable global @code{listeigvects}, en tal caso el contenido de  @code{listeigvects} debe ser una lista de estructura similar a la que devuelve la funci@'on @code{eigenvectors}.

@c FOLLOWING PARAGRAPH IS IN NEED OF SERIOUS CLARIFICATION
Si @code{knowneigvects} vale @code{true} y la lista de vectores propios est@'a en la variable @code{listeigvects}, el valor de la variable @code{nondiagonalizable} puede que no sea el correcto. Si tal es el caso, debe asignarsele el valor correcto. @c FALTA TERMINAR ESTE PARRAFO

Para utilizar esta fucni@'on es necesario cargarla haciendo @code{load ("eigen")}.

El nombre @code{ueivects} es sin@'onimo de @code{uniteigenvectors}.

@end deffn

@deffn {Funci@'on} unitvector (@var{x})
@deffnx {Funci@'on} uvect (@var{x})
Devuelve @math{@var{x}/norm(@var{x})}, esto es, el vector unitario de igual direcci@'on y sentido que @var{x}.

@code{load ("eigen")} loads this function.

Para utilizar esta fucni@'on es necesario cargarla haciendo @code{load ("eigen")}.

El nombre @code{uvect} es sin@'onimo de @code{unitvector}.

@end deffn

@c NEEDS A LOT OF WORK: MAKE SURE THAT ALL VECTOR SIMPLIFICATION FLAGS HAVE A DESCRIPTION HERE
@deffn {Funci@'on} vectorsimp (@var{expr})
Realiza simplificaciones y expansiones de acuerdo con los valores de las siguientes variables globales:

@code{expandall}, @code{expanddot}, @code{expanddotplus}, @code{expandcross}, @code{expandcrossplus},
@code{expandcrosscross}, @code{expandgrad}, @code{expandgradplus}, @code{expandgradprod},
@code{expanddiv}, @code{expanddivplus}, @code{expanddivprod}, @code{expandcurl}, @code{expandcurlplus},
@code{expandcurlcurl}, @code{expandlaplacian}, @code{expandlaplacianplus} y @code{expandlaplacianprod}.

Todas estas variables tienen por defecto el valor @code{false}. El sufijo @code{plus} se refiere al uso de la suma o la distributividad.  El sufijo @code{prod} se refiere a la expansi@'on de operadores que realizan cualquier tipo de producto.

@table @code
@item expandcrosscross
Simplifica @math{p ~ (q ~ r)} en @math{(p . r)*q - (p . q)*r}.
@item expandcurlcurl
Simplifica @math{curl curl p} en @math{grad div p + div grad p}.
@item expandlaplaciantodivgrad
Simplifica @math{laplacian p} en @math{div grad p}.
@item expandcross
Activa @code{expandcrossplus} y @code{expandcrosscross}.
@item expandplus
Activa @code{expanddotplus}, @code{expandcrossplus}, @code{expandgradplus},
@code{expanddivplus}, @code{expandcurlplus} y @code{expandlaplacianplus}.
@item expandprod
Activa @code{expandgradprod}, @code{expanddivprod} y @code{expandlaplacianprod}.
@end table

@c EXPLAIN THE IMPORT OF THIS STATEMENT
Estas variables est@'an declaradas como @code{evflag}.

@c SEEMS SOME TEXT HAS GONE MISSING HERE; COMMENT OUT FRAGMENT PENDING
@c RECOVERY AND/OR RECONSTRUCTION OF THIS PARAGRAPH
@c For orthogonal curvilinear coordinates, the global variables
@c COORDINATES[[X,Y,Z]], DIMENSION[3], SF[[1,1,1]], and SFPROD[1] are set
@c by the function invocation

@end deffn


@c AQUI FALTA LA DEFINICION DE LA VARIABLE vect_cross


@deffn {Funci@'on} zeromatrix (@var{m}, @var{n})
Devuelve una matriz rectangular @var{m} por @var{n} con todos sus elementos iguales a cero.

@end deffn

@defvr {S@'{@dotless{i}}mbolo especial} [
@defvrx {S@'{@dotless{i}}mbolo especial} [
@ifinfo
@fnindex Delimitadores de listas
@fnindex Operador de sub@'{@dotless{i}}ndice
@end ifinfo
Los s@'{@dotless{i}}mbolos @code{[} y @code{]} marcan el comienzo y final, respectivamente, de una lista.

Los s@'{@dotless{i}}mbolos @code{[} y @code{]} tambi@'en se utilizan para indicar los sub@'{@dotless{i}}ndices de los elementos de una lista, arreglo o funci@'on arreglo.

Ejemplos:

@example
(%i1) x: [a, b, c];
(%o1)                       [a, b, c]
(%i2) x[3];
(%o2)                           c
(%i3) array (y, fixnum, 3);
(%o3)                           y
(%i4) y[2]: %pi;
(%o4)                          %pi
(%i5) y[2];
(%o5)                          %pi
(%i6) z['foo]: 'bar;
(%o6)                          bar
(%i7) z['foo];
(%o7)                          bar
(%i8) g[k] := 1/(k^2+1);
                                  1
(%o8)                     g  := ------
                           k     2
                                k  + 1
(%i9) g[10];
                                1
(%o9)                          ---
                               101
@end example

@end defvr
