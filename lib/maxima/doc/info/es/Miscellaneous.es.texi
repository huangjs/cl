@c version 1.27
@menu
* Introducci@'on a la miscel@'anea de opciones::  
* Share::  
* Funciones y variables para la miscel@'anea de opciones::
@end menu

@node Introducci@'on a la miscel@'anea de opciones, Share, Miscel@'anea de opciones, Miscel@'anea de opciones

@section Introducci@'on a la miscel@'anea de opciones

En esta secci@'on se comentan varias opciones que tienen un efecto global sobre le comportamiento de Maxima. Tambi@'en se comentan varias listas, como la de las funciones definidas por el usuario.

@node Share, Funciones y variables para la miscel@'anea de opciones, Introducci@'on a la miscel@'anea de opciones, Miscel@'anea de opciones

@section Share

El directorio "share" de Maxima contiene programas y ficheros de inter@'es para los usuarios de Maxima, pero no forman parte del n@'ucleo de Maxima. Estos programas se cargan en memoria con llamadas a las funciones @code{load} o @code{setup_autoload}.

La llamada @code{:lisp *maxima-sharedir*} muestra la localizaci@'on del directorio "share" dentro del sistema de ficheros del usuario.

La llamada @code{printfile ("share.usg")} muestra una lista actualizada de paquetes en "share". Los usuarios pueden encontrar m@'as informaci@'on accediendo directamente a los contenidos del directorio "share".

@node Funciones y variables para la miscel@'anea de opciones,  , Share, Miscel@'anea de opciones
@section Funciones y variables para la miscel@'anea de opciones

@defvr {Variable del sistema} aliases
Valor por defecto: @code{[]}

La variable @code{aliases} es la lista de @'atomos que tienen un "alias" definido por el usuario (establecido mediante las funciones  @code{alias}, @code{ordergreat} o @code{orderless} o declarando el @'atomo como un @code{noun} (nombre) con @code{declare}.
@end defvr

@defvr {Declaraci@'on} alphabetic

@code{alphabetic} es una declaraci@'on de tipo reconocida por @code{declare}.
La expresi@'on @code{declare(@var{s}, alphabetic)} indica a Maxima que
reconozca como alfab@'eticos todos los caracteres de @var{s}, que debe ser
una cadena alfanum@'erica.

Ejemplo:

@c ===beg===
@c xx\~yy\`\@ : 1729;
@c declare ("~`@", alphabetic);
@c xx~yy`@ + @yy`xx + `xx@@yy~;
@c listofvars (%);
@c ===end===
@example
(%i1) xx\~yy\`\@@ : 1729;
(%o1)                         1729
(%i2) declare ("~`@@", alphabetic);
(%o2)                         done
(%i3) xx~yy`@@ + @@yy`xx + `xx@@@@yy~;
(%o3)               `xx@@@@yy~ + @@yy`xx + 1729
(%i4) listofvars (%);
(%o4)                  [@@yy`xx, `xx@@@@yy~]
@end example

@end defvr


@deffn {Funci@'on} args (@var{expr})

Devuelve la lista de argumentos de @code{expr}, que puede ser cualquier tipo de expresi@'on a excepci@'on de un @'atomo. Tan solo se muestran los argumentos del operador principal; subexpresiones de @code{expr} aparecen como elementos o subexpresiones de elementos de la lista de argumentos.

El orden de los miembros de la lista puede depender de la variable global @code{inflag}.

La llamada @code{args (@var{expr})} es equivalente a @code{substpart ("[", @var{expr}, 0)}.

V@'eanse tambi@'en @code{substpart} y @code{op}.

@end deffn

@defvr {Variable optativa} genindex
Valor por defecto: @code{i}

La variable @code{genindex} es el prefijo alfab@'etico utilizado para generar la siguiente variable de sumaci@'on en caso de necesidad.

@end defvr

@defvr {Variable optativa} gensumnum
Valor por defecto: 0

La variable @code{gensumnum} es el sufijo num@'erico utilizado para generar la siguiente variable de sumaci@'on. Si vale  @code{false} entonces el @'{@dotless{i}}ndice consistir@'a solamente de  @code{genindex}, sin sufijo num@'erico.

@end defvr

@defvr {Constante} inf

S@'{@dotless{i}}mbolo que identifica al infinito positivo dentro de un contexto de n@'umeros reales.

@end defvr

@defvr {Constante} infinity

S@'{@dotless{i}}mbolo que identifica al infinito complejo, una magnitud infinita con @'angulo de fase arbitrario.  V@'eanse tambi@'en @code{inf} y @code{minf}.

@end defvr

@defvr {Variable del sistema} infolists
Valor por defecto: @code{[]}

La variable @code{infolists} es una lista con los nombres de todas las listas que guardan informaci@'on sobre Maxima. Estas son:

@table @code
@item labels
Todas las etiquetas @code{%i}, @code{%o} y @code{%t} con valores asignados.
@item values
Todos los @'atomos que son variables de usuario, no opciones de Maxima creadas con  @code{:} o @code{::}.
@item functions
Todas las funciones de usuario creadas con @code{:=} o @code{define}.
@item arrays
Arreglos declarados y no declarados, creados por @code{:}, @code{::} o @code{:=}.
@c AREN'T THERE OTHER MEANS OF CREATING ARRAYS ??
@item macros
Cualquier macro definida por el usuario.
@item myoptions
Todas las opciones inicializadas por el usuario, independientemente de que posteriormente hayan sido devueltas a sus valores por defecto.
@item rules
Reglas de patrones y simplificaci@'on definidas por el usuario, creadas con @code{tellsimp}, @code{tellsimpafter}, @code{defmatch} o @code{defrule}.
@item aliases
@'Atomos que tienen un "alias" definido por el usuario, creado por las funciones @code{alias}, @code{ordergreat} o @code{orderless} o por haber declarado el @'atomo como @code{noun} (nombre) con @code{declare}.
@item dependencies
@'Atomos que tienen dependencias funcionales, creados por las funciones @code{depends} o @code{gradef}.
@item gradefs
Funciones que tienen derivadas definidas por el usuario, creadas por la funci@'on @code{gradef}.
@item props
Todos los @'atomos que tengan cualquier propiedad que no sea de las mencionadas hasta ahora, como las establecidas por @code{atvalue}, @code{matchdeclare}, etc., as@'{@dotless{i}} como propiedadas especificadas en la funci@'on @code{declare}.
@item let_rule_packages
Todos los paquetes de reglas @code{let} definidos por el usuario, junto con el paquete especial @code{default_let_rule_package}; @code{default_let_rule_package} es el nombre del paquete de reglas utilizado cuando no se use ning@'un otro especificado por el usuario.
@end table

@end defvr


@deffn {Funci@'on} integerp (@var{expr})

Devuelve @code{true} si @var{expr} es un n@'umero entero y @code{false} en cualquier otro caso.

La funci@'on @code{integerp} devuelve @code{false} si su argumento es un s@'{@dotless{i}}mbolo, incluso cuando @'este ha sido declarado como entero.

Ejemplos:

@example
(%i1) integerp (0);
(%o1)                         true
(%i2) integerp (1);
(%o2)                         true
(%i3) integerp (-17);
(%o3)                         true
(%i4) integerp (0.0);
(%o4)                         false
(%i5) integerp (1.0);
(%o5)                         false
(%i6) integerp (%pi);
(%o6)                         false
(%i7) integerp (n);
(%o7)                         false
(%i8) declare (n, integer);
(%o8)                         done
(%i9) integerp (n);
(%o9)                         false
@end example

@end deffn

@defvr {Variable optativa} m1pbranch
Valor por defecto: @code{false}

La variable @code{m1pbranch} es la rama principal de @code{-1} elevado a una potencia. Cantidades como @code{(-1)^(1/3)} (esto es, un exponente racional impar) y @code{(-1)^(1/4)} (esto es, un exponente racional par) son tratados como sigue:

@c REDRAW THIS AS A TABLE
@example
              dominio real
                            
(-1)^(1/3):      -1         
(-1)^(1/4):   (-1)^(1/4)   

             dominio complejo              
m1pbranch:false          m1pbranch:true
(-1)^(1/3)               1/2+%i*sqrt(3)/2
(-1)^(1/4)              sqrt(2)/2+%i*sqrt(2)/2
@end example

@end defvr

@deffn {Funci@'on} numberp (@var{expr})

Devuelve @code{true} si @var{expr} es un en@'umero entero, racional, 
de coma flotante o "bigfloat", en caso contrario devuelve @code{false}.

La funci@'on @code{numberp} devuelve @code{false} si su argumento es un s@'{@dotless{i}}mbolo, incluso cuando el argumento es un n@'umero simb@'olico como @code{%pi} o @code{%i}, o aunque haya sido declarado como @code{even} (par), @code{odd} (impar), @code{integer} (entero), @code{rational} (racional), @code{irrational} (irracional), @code{real} (real), @code{imaginary} (imaginario) o @code{complex} (complejo).

Ejemplos:

@example
(%i1) numberp (42);
(%o1)                         true
(%i2) numberp (-13/19);
(%o2)                         true
(%i3) numberp (3.14159);
(%o3)                         true
(%i4) numberp (-1729b-4);
(%o4)                         true
(%i5) map (numberp, [%e, %pi, %i, %phi, inf, minf]);
(%o5)      [false, false, false, false, false, false]
(%i6) declare (a, even, b, odd, c, integer, d, rational,
     e, irrational, f, real, g, imaginary, h, complex);
(%o6)                         done
(%i7) map (numberp, [a, b, c, d, e, f, g, h]);
(%o7) [false, false, false, false, false, false, false, false]
@end example

@end deffn

@deffn {Funci@'on} properties (@var{a})

Devuelve una lista con los nombres de propiedades asociadas con el @'atomo @var{a}.

@end deffn

@defvr {S@'{@dotless{i}}mbolo especial} props

@code{props} son @'atomos que tienen cualquier propiedad diferente de las mencionadas
expl@'{@dotless{i}}citamente en @code{infolists}, tales como las especificadas por
@code{atvalues}, @code{matchdeclares}, etc., as@'{@dotless{i}} como las propiedades
especificadas mediante la funci@'on @code{declare}.

@end defvr

@deffn {Funci@'on} propvars (@var{prop})

Devuelve una lista con aquellos @'atomos de la lista @code{props} que tienen la propiedad indicada por @var{prop}. 

@end deffn

@deffn {Funci@'on} put (@var{@'atomo}, @var{valor}, @var{indicador})

Asigna el @var{valor} a la propiedad  (especificada por @var{indicador}) de @var{@'atomo}; @var{indicador} puede ser el nombre de cualquier propiedad y no solamente de aquellas definidas por el sistema.

La funci@'on @code{put} eval@'ua sus argumentos y devuelve @var{valor}.

Ejemplos:

@example
(%i1) put (foo, (a+b)^5, expr);
                                   5
(%o1)                       (b + a)
(%i2) put (foo, "Hello", str);
(%o2)                         Hello
(%i3) properties (foo);
(%o3)            [[user properties, str, expr]]
(%i4) get (foo, expr);
                                   5
(%o4)                       (b + a)
(%i5) get (foo, str);
(%o5)                         Hello
@end example

@end deffn

@deffn {Funci@'on} qput (@var{@'atomo}, @var{valor}, @var{indicador})

Asigna @var{valor} a la propiedad de @var{@'atomo} que especifique @var{indicador}. Act@'ua del mismo modeo que @code{put}, excepto que sus argumentos no son evaluados.

Ejemplo:

@example
(%i1) foo: aa$ 
(%i2) bar: bb$
(%i3) baz: cc$
(%i4) put (foo, bar, baz);
(%o4)                          bb
(%i5) properties (aa);
(%o5)                [[user properties, cc]]
(%i6) get (aa, cc);
(%o6)                          bb
(%i7) qput (foo, bar, baz);
(%o7)                          bar
(%i8) properties (foo);
(%o8)            [value, [user properties, baz]]
(%i9) get ('foo, 'baz);
(%o9)                          bar
@end example

@end deffn

@deffn {Funci@'on} rem (@var{@'atomo}, @var{indicador})

Elimina del @var{@'atomo} la propiedad indicada por @var{indicador}.

@end deffn

@deffn {Funci@'on} remove (@var{a_1}, @var{p_1}, ..., @var{a_n}, @var{p_n})
@deffnx {Funci@'on} remove ([@var{a_1}, ..., @var{a_m}], [@var{p_1}, ..., @var{p_n}], ...)
@deffnx {Funci@'on} remove ("@var{a}", operator)
@deffnx {Funci@'on} remove (@var{a}, transfun)
@deffnx {Funci@'on} remove (all, @var{p})

Elimina propiedades asociadas con @'atomos.

La llamada @code{remove (@var{a_1}, @var{p_1}, ..., @var{a_n}, @var{p_n})}
elimina la propiedad @code{p_k} del @'atomo @code{a_k}.

La llamada @code{remove ([@var{a_1}, ..., @var{a_m}], [@var{p_1}, ..., @var{p_n}], ...)}
elimina las propiedades @code{@var{p_1}, ..., @var{p_n}} de los @'atomos @var{a_1}, ..., @var{a_m}. Puede tener m@'as de un par de listas.

@c VERIFY THAT THIS WORKS AS ADVERTISED
La llamada @code{remove (all, @var{p})} elimina la propiedad @var{p} de todos los @'atomos que la tengan.

@c SHOULD REFER TO A LIST OF ALL SYSTEM-DEFINED PROPERTIES HERE.
Las propiedades eliminadas pueden ser de las que define el sistema, como @code{function}, @code{macro} o @code{mode_declare}, o de las que define el usuario.

La llamada @code{remove ("@var{a}", operator)} o su equivalente @code{remove ("@var{a}", op)} elimina de  @var{a} las propiedades de operador declaradas por @code{prefix}, @code{infix}, @code{nary}, @code{postfix}, @code{matchfix} o @code{nofix}. N@'otese que el nombre del operador debe escribirse como cadena precedida de ap@'ostrofo.

La llamada @code{remove} devuelve siempre @code{done} independientemente que haya alg@'un @'atomo con la propiedad especificada.

@end deffn

@deffn {Funci@'on} remvalue (@var{nombre_1}, ..., @var{nombre_n})
@deffnx {Funci@'on} remvalue (all)

Elimina del sistema los valores de las variable de usuario @var{nombre_1}, ..., @var{nombre_n} (incluso las que tienen sub@'{@dotless{i}}ndices).

La llamada @code{remvalue (all)} elimina los valores de todas las variables en @code{values}, la lista de todas las variables a las que el usuario a dado alg@'un nombre, pero no de aqu@'ellas a las que Maxima asigna autom@'aticamente un valor.

V@'ease tambi@'en @code{values}.

@end deffn

@deffn {Funci@'on} rncombine (@var{expr})

Transforma @var{expr} combinando todos los t@'erminos de @var{expr} que tengan denominadores id@'enticos o que difieran unos de otros por factores num@'ericos. Su comportamiento es diferente al de la funci@'on @code{combine}, que combina t@'erminos con iguales denominadores.

Haciendo @code{pfeformat: true} y utilizando @code{combine} se consiguen resultados similares a aqu@'ellos que se pueden obtener con  @code{rncombine}, pero @code{rncombine} realiza el paso adicional de multiplicar denominadores num@'ericos. Esto da como resultado expresiones en las que se pueden reconocer algunas cancelaciones.

Antes de utilizar esta funci@'on ejec@'utese @code{load(rncomb)}.
@end deffn

@deffn {Funci@'on} scalarp (@var{expr})

Devuelve @code{true} si @var{expr} is un n@'umero, constante  o variable declarada como @code{scalar} con @code{declare}, o compuesta completamente de tales n@'umeros, constantes o variables, pero que no contengan matrices ni listas.

@end deffn

@deffn {Funci@'on} setup_autoload (@var{nombre_fichero}, @var{funci@'on_1}, ..., @var{funci@'on_n})

Especifica que si alguna de las funciones @var{function_1}, ..., @var{function_n} es referenciada pero todav@'{@dotless{i}}a no ha sido definida, se cargar@'a @var{nombre_fichero} mediante una llamada a @code{load}. El @var{nombre_fichero} normalmente contendr@'a las definiciones de las funciones especificadas, aunque esto no es imperativo.

La funci@'on @code{setup_autoload} no opera con arreglos de funciones.

La funci@'on @code{setup_autoload} no eval@'ua sus argumentos.

Ejemplo:

@example
(%i1) legendre_p (1, %pi);
(%o1)                  legendre_p(1, %pi)
(%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
(%o2)                         done
(%i3) ultraspherical (2, 1/2, %pi);
Warning - you are redefining the Macsyma function ultraspherical
Warning - you are redefining the Macsyma function legendre_p
                            2
                 3 (%pi - 1)
(%o3)            ------------ + 3 (%pi - 1) + 1
                      2
(%i4) legendre_p (1, %pi);
(%o4)                          %pi
(%i5) legendre_q (1, %pi);
                              %pi + 1
                      %pi log(-------)
                              1 - %pi
(%o5)                 ---------------- - 1
                             2
@end example

@end deffn
