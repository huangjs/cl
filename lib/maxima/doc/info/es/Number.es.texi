@c english version 1.30
@menu
* Funciones y variables para teor@'{@dotless{i}}a de n@'umeros::  
@end menu

@node Funciones y variables para teor@'{@dotless{i}}a de n@'umeros,  , Teor@'{@dotless{i}}a de N@'umeros, Teor@'{@dotless{i}}a de N@'umeros
@section Funciones y variables para teor@'{@dotless{i}}a de n@'umeros


@deffn {Funci@'on} bern (@var{n})
Devuelve el @var{n}-@'esimo n@'umero de Bernoulli del entero @var{n}.
@c WELL, ACTUALLY bern SIMPLIFIES, LIKE FACTORIAL -- DO WE WANT TO GET INTO THAT ???
@c OR JUST PRETEND IT'S "RETURNED" ???
Los n@'umeros de Bernoulli iguales a cero son suprimidos si @code{zerobern} vale @code{false}.

V@'ease tambi@'en @code{burn}.

@example
(%i1) zerobern: true$
(%i2) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                  1  1       1      1        1
(%o2)       [1, - -, -, 0, - --, 0, --, 0, - --]
                  2  6       30     42       30
(%i3) zerobern: false$
(%i4) map (bern, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
            1  1    1   5     691   7    3617  43867
(%o4) [1, - -, -, - --, --, - ----, -, - ----, -----]
            2  6    30  66    2730  6    510    798
@end example

@end deffn

@deffn {Funci@'on} bernpoly (@var{x}, @var{n})
Devuelve el @var{n}-@'esimo polinomio de Bernoulli de variable @var{x}.

@end deffn

@deffn {Funci@'on} bfzeta (@var{s}, @var{n})
Devuelve la funci@'on zeta de Riemann para el argumento @var{s}. El valor que devuelve es del tipo "big float" (bfloat) y 
@var{n}  es su n@'umero de d@'{@dotless{i}}gitos.

Es necesario cargar en memoria esta funci@'on haciendo @code{load ("bffac")}.

@end deffn

@deffn {Funci@'on} bfhzeta (@var{s}, @var{h}, @var{n})
Devuelve la funci@'on zeta de Hurwitz para los argumentos @var{s} y @var{h}. El valor que devuelve es del tipo "big float" (bfloat) y @var{n}  es su n@'umero de d@'{@dotless{i}}gitos.

La funci@'on zeta de Hurwitz se define como

@tex
$$\zeta \left(s,h\right) = \sum_{k=0}^\infty {1 \over \left(k+h\right)^{s}}$$
@end tex
@ifnottex
@example
                        inf
                        ====
                        \        1
         zeta (s,h)  =   >    --------
                        /            s
                        ====  (k + h)
                        k = 0
@end example
@end ifnottex

Ejec@'utese @code{load (bffac)} antes de hacer uso de esta funci@'on.

@end deffn

@deffn {Funci@'on} binomial (@var{x}, @var{y})
Es el coeficiente binomial @code{@var{x}!/(@var{y}! (@var{x} - @var{y})!)}.
Si @var{x} y @var{y} son enteros, entonces se calcula el valor num@'erico 
del coeficiente binomial. Si @var{y} o @var{x - y} son enteros, 
el coeficiente binomial se expresa como un polinomio.

Ejemplos:

@c ===beg===
@c binomial (11, 7);
@c 11! / 7! / (11 - 7)!;
@c binomial (x, 7);
@c binomial (x + 7, x);
@c binomial (11, y);
@c ===end===
@example
(%i1) binomial (11, 7);
(%o1)                          330
(%i2) 11! / 7! / (11 - 7)!;
(%o2)                          330
(%i3) binomial (x, 7);
        (x - 6) (x - 5) (x - 4) (x - 3) (x - 2) (x - 1) x
(%o3)   -------------------------------------------------
                              5040
(%i4) binomial (x + 7, x);
      (x + 1) (x + 2) (x + 3) (x + 4) (x + 5) (x + 6) (x + 7)
(%o4) -------------------------------------------------------
                               5040
(%i5) binomial (11, y);
(%o5)                    binomial(11, y)
@end example
@end deffn

@deffn {Funci@'on} burn (@var{n})
Devuelve el @var{n}-@'esimo n@'umero de Bernoulli del entero @var{n}. La funci@'on @code{burn} puede ser m@'as eficiente que @code{bern} para @var{n} grande (mayor que 105, por ejemplo), pues @code{bern} calcula todos los n@'umeros de Bernoulli hasta @var{n} antes de devolver el resultado.

@c STATEMENTS ABOUT TIMING NEED VERIFICATION !!!
@c CAN'T VERIFY NOW AS burn IS BROKEN IN 5.9.1 AND CVS BUILD AT PRESENT !!!
@c (BERN(402) takes about 645 secs vs 13.5 secs for BURN(402).
@c The time to compute @code{bern} is approximately exponential,
@c while the time to compute @code{burn} is approximately cubic.
@c But if next you do BERN(404), it only takes 12 secs,
@c since BERN remembers all in an array, whereas BURN(404) will take
@c maybe 14 secs or maybe 25, depending on whether Maxima needs to
@c BFLOAT a better value of %PI.)

La funci@'on @code{burn} se beneficia del hecho de que los n@'umeros racionales de Bernoulli pueden aproximarse por funciones zeta con una eficiencia aceptable.

Es necesario cargar en memoria esta funci@'on haciendo @code{load ("bffac")}.

@end deffn


@deffn {Funci@'on} cf (@var{expr})
Transforma @var{expr} a fracciones continuas. La expresi@'on @var{expr} debe contener fracciones continuas y ra@'{@dotless{i}}ces cuadradas de n@'umeros enteros. Los operandos de la expresi@'on pueden combinarse con operadores aritm@'eticos. Adem@'as de fracciones continuas y ra@'{@dotless{i}}ces cuadradas, los factores de la expresi@'on deben ser enteros o n@'umeros racionales. Maxima no tiene m@'as conocimiento sobre operaciones con fracciones continuas que el que aporta la funci@'on @code{cf}.

La funci@'on @code{cf} eval@'ua sus argumentos despu@'es de asignar a la variable @code{listarith} el valor @code{false}, retornando una fracci@'on continua en forma de lista.

Una fracci@'on continua @code{a + 1/(b + 1/(c + ...))} se representa como la lista @code{[a, b, c, ...]}, donde los elementos @code{a}, @code{b}, @code{c}, ... se eval@'uan como enteros. La expresi@'on @var{expr} puede contener tambi@'en  @code{sqrt (n)} donde @code{n} es un entero; en tal caso, @code{cf} devolver@'a tantos t@'erminos de la fracci@'on continua como indique el valor de la variable @code{cflength} multiplicado por el per@'{@dotless{i}}odo.

Una fracci@'on continua puede reducirse a un n@'umero evaluando la representaci@'on aritm@'etica que devuelve @code{cfdisrep}. V@'ease tambi@'en  @code{cfexpand}, que es otra alternativa para evaluar fracciones continuas.

V@'eanse asimismo @code{cfdisrep}, @code{cfexpand} y @code{cflength}.

Ejemplos:

@itemize @bullet
@item
La expresi@'on @var{expr} contiene fracciones continuas y ra@'{@dotless{i}}ces cuadradas de enteros.

@example
(%i1) cf ([5, 3, 1]*[11, 9, 7] + [3, 7]/[4, 3, 2]);
(%o1)               [59, 17, 2, 1, 1, 1, 27]
(%i2) cf ((3/17)*[1, -2, 5]/sqrt(11) + (8/13));
(%o2)        [0, 1, 1, 1, 3, 2, 1, 4, 1, 9, 1, 9, 2]
@end example

@item
La variable @code{cflength} controla cuantos per@'{@dotless{i}}odos de la fracci@'on continua se calculan para n@'umeros irracionales algebraicos.

@example
(%i1) cflength: 1$
(%i2) cf ((1 + sqrt(5))/2);
(%o2)                    [1, 1, 1, 1, 2]
(%i3) cflength: 2$
(%i4) cf ((1 + sqrt(5))/2);
(%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
(%i5) cflength: 3$
(%i6) cf ((1 + sqrt(5))/2);
(%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
@end example

@item
Una fracci@'on continua puede calcularse evaluando la representaci@'on aritm@'etica que devuelve @code{cfdisrep}.

@example
(%i1) cflength: 3$
(%i2) cfdisrep (cf (sqrt (3)))$
(%i3) ev (%, numer);
(%o3)                   1.731707317073171
@end example

@item
Maxima no sabe sobre operaciones con fracciones continuas m@'as de lo que aporta la funci@'on @code{cf}.

@example
(%i1) cf ([1,1,1,1,1,2] * 3);
(%o1)                     [4, 1, 5, 2]
(%i2) cf ([1,1,1,1,1,2]) * 3;
(%o2)                  [3, 3, 3, 3, 3, 6]
@end example

@end itemize
@end deffn


@deffn {Funci@'on} cfdisrep (@var{lista})
Construye y devuelve una expresi@'on aritm@'etica ordinaria de la forma  @code{a + 1/(b + 1/(c + ...))} a partir de la representaci@'on en formato lista de la fracci@'on continua  @code{[a, b, c, ...]}.

@example
(%i1) cf ([1, 2, -3] + [1, -2, 1]);
(%o1)                     [1, 1, 1, 2]
(%i2) cfdisrep (%);
                                  1
(%o2)                     1 + ---------
                                    1
                              1 + -----
                                      1
                                  1 + -
                                      2
@end example

@end deffn


@deffn {Funci@'on} cfexpand (@var{x})
Devuelve la matriz con los numeradores y denominadores de la @'ultima (columna 1) y pen@'ultima (columna 2) convergentes de la fracci@'on continua @var{x}.

@example
(%i1) cf (rat (ev (%pi, numer)));

`rat' replaced 3.141592653589793 by 103993/33102 =3.141592653011902
(%o1)                  [3, 7, 15, 1, 292]
(%i2) cfexpand (%); 
                         [ 103993  355 ]
(%o2)                    [             ]
                         [ 33102   113 ]
(%i3) %[1,1]/%[2,1], numer;
(%o3)                   3.141592653011902
@end example

@end deffn

@defvr {Variable opcional} cflength
Valor por defecto: 1

La variable @code{cflength} controla el n@'umero de t@'erminos de la fracci@'on continua que devuelve la funci@'on @code{cf}, que ser@'a @code{cflength} multiplicado por el per@'{@dotless{i}}odo. As@'{@dotless{i}}, el valor por defecto ser@'a el de un per@'{@dotless{i}}odo.

@example
(%i1) cflength: 1$
(%i2) cf ((1 + sqrt(5))/2);
(%o2)                    [1, 1, 1, 1, 2]
(%i3) cflength: 2$
(%i4) cf ((1 + sqrt(5))/2);
(%o4)               [1, 1, 1, 1, 1, 1, 1, 2]
(%i5) cflength: 3$
(%i6) cf ((1 + sqrt(5))/2);
(%o6)           [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2]
@end example

@end defvr

@deffn {Funci@'on} divsum (@var{n}, @var{k})
@deffnx {Funci@'on} divsum (@var{n})

La llamada @code{divsum (@var{n}, @var{k})} devuelve la suma de los divisores de @var{n} elevados a la @var{k}-@'esima potencia.

La llamada @code{divsum (@var{n})} devuelve la suma de los divisores de @var{n}.

@example
(%i1) divsum (12);
(%o1)                          28
(%i2) 1 + 2 + 3 + 4 + 6 + 12;
(%o2)                          28
(%i3) divsum (12, 2);
(%o3)                          210
(%i4) 1^2 + 2^2 + 3^2 + 4^2 + 6^2 + 12^2;
(%o4)                          210
@end example

@end deffn


@deffn {Funci@'on} euler (@var{n})
Devuelve el @var{n}-@'esimo n@'umero de Euler del entero no negativo @var{n}.

Para la constante de Euler-Mascheroni, v@'ease @code{%gamma}.

@example
(%i1) map (euler, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
(%o1)    [1, 0, - 1, 0, 5, 0, - 61, 0, 1385, 0, - 50521]
@end example

@end deffn

@defvr {Constante} %gamma
@ifinfo
@vrindex Constante de Euler-Mascheroni
@end ifinfo
Es la constante de Euler-Mascheroni, 0.5772156649015329 ....

@end defvr

@deffn {Funci@'on} factorial (@var{x})
Representa la funci@'on factorial. Maxima considera @code{factorial (@var{x})} lo mismo que @code{@var{x}!}.
V@'ease @code{!}.

@end deffn


@defvr {Variable opcional} factorial_expand
Valor por defecto: false

La variable @code{factorial_expand} controla la simplificaci@'on
de expresiones tales como @code{(n+1)!}, siendo @code{n} un entero. 

V@'ease @code{!} para un ejemplo.

@end defvr


@deffn {Funci@'on} fib (@var{n})
Devuelve el @var{n}-@'esimo n@'umero de Fibonacci. La llamada @code{fib(0)} es igual a 0, @code{fib(1)} devuelve 1 y
@code{fib (-@var{n})} es igual a @code{(-1)^(@var{n} + 1) * fib(@var{n})}.

Despu@'es de llamar a @code{fib}, la variable @code{prevfib} toma el valor @code{fib (@var{x} - 1)}, que es el n@'umero de Fibonacci que precede al @'ultimo calculado.

@example
(%i1) map (fib, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
(%o1)         [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
@end example

@end deffn

@deffn {Funci@'on} fibtophi (@var{expr})
Expresa los n@'umeros de Fibonacci en @var{expr} en t@'erminos de la raz@'on @'aurea @code{%phi},
que es @code{(1 + sqrt(5))/2}, aproximadamente 1.61803399.

Ejemplos:

@c ===beg===
@c fibtophi (fib (n));
@c fib (n-1) + fib (n) - fib (n+1);
@c fibtophi (%);
@c ratsimp (%);
@c ===end===
@example
(%i1) fibtophi (fib (n));
                           n             n
                       %phi  - (1 - %phi)
(%o1)                  -------------------
                           2 %phi - 1
(%i2) fib (n-1) + fib (n) - fib (n+1);
(%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
(%i3) fibtophi (%);
            n + 1             n + 1       n             n
        %phi      - (1 - %phi)        %phi  - (1 - %phi)
(%o3) - --------------------------- + -------------------
                2 %phi - 1                2 %phi - 1
                                          n - 1             n - 1
                                      %phi      - (1 - %phi)
                                    + ---------------------------
                                              2 %phi - 1
(%i4) ratsimp (%);
(%o4)                           0
@end example

@end deffn

@deffn {Funci@'on} ifactors (@var{n})
Devuelve la factorizaci@'on del argumento @var{n}, siendo @'este un 
n@'umero entero positivo. Si @code{n=p1^e1..pk^nk} es la descomposici@'on 
de @var{n} en n@'umeros primos, @code{ifactors} devuelve @code{[[p1, e1], ... , [pk, ek]]}.

Los m@'etodos de factorizaci@'on son las divisones tentativas hasta el 9973,
as@'{@dotless{i}} como los  m@'etodos rho de Pollard y el de la curva 
el@'{@dotless{i}}ptica.

@example
(%i1) ifactors(51575319651600);
(%o1)     [[2, 4], [3, 2], [5, 2], [1583, 1], [9050207, 1]]
(%i2) apply("*", map(lambda([u], u[1]^u[2]), %));
(%o2)                        51575319651600
@end example

@end deffn


@deffn {Funci@'on} inrt (@var{x}, @var{n})
Devuelve la ra@'{@dotless{i}}z entera @var{n}-@'esima del valor absoluto de  @var{x}.

@example
(%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
(%i2) map (lambda ([a], inrt (10^a, 3)), l);
(%o2) [2, 4, 10, 21, 46, 100, 215, 464, 1000, 2154, 4641, 10000]
@end example

@end deffn

@deffn {Funci@'on} inv_mod (@var{n}, @var{m})
Calcula el inverso de @var{n} m@'odulo @var{m}. 
La llamada @code{inv_mod (n,m)} devuelve @code{false}
si @var{n} es un divisor nulo m@'odulo @var{m}.

@example
(%i1) inv_mod(3, 41);
(%o1)                           14
(%i2) ratsimp(3^-1), modulus=41;
(%o2)                           14
(%i3) inv_mod(3, 42);
(%o3)                          false
@end example

@end deffn

@deffn {Funci@'on} jacobi (@var{p}, @var{q})
Devuelve el s@'{@dotless{i}}mbolo de Jacobi para @var{p} y @var{q}.

@example
(%i1) l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$
(%i2) map (lambda ([a], jacobi (a, 9)), l);
(%o2)         [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0]
@end example

@end deffn

@deffn {Funci@'on} lcm (@var{expr_1}, ..., @var{expr_n})
Devuelve el m@'{@dotless{i}}nimo com@'un m@'ultiplo de sus argumentos. Los argumentos pueden ser tanto expresiones en general como enteros.

Es necesario cargar en memoria esta funci@'on haciendo @code{load ("functs")}.

@end deffn

@deffn {Funci@'on} next_prime (@var{n})
Devuelve el menor de los primos mayores que @var{n}.

@example
(%i1) next_prime(27);
(%o1)                       29
@end example

@end deffn


@deffn {Funci@'on} partfrac (@var{expr}, @var{var})
Expande la expresi@'on @var{expr} en fracciones parciales respecto de la variable principal @var{var}. La funci@'on @code{partfrac} hace una descomposici@'on completa en fracciones parciales. El algoritmo que se utiliza se basa en el hecho de que los denominadores de la expansi@'on en fracciones parciales (los factores del denominador original) son primos relativos. Los numeradores se pueden escribir como combinaciones lineales de los denominadores.

@example
(%i1) 1/(1+x)^2 - 2/(1+x) + 2/(2+x);
                      2       2        1
(%o1)               ----- - ----- + --------
                    x + 2   x + 1          2
                                    (x + 1)
(%i2) ratsimp (%);
                                 x
(%o2)                 - -------------------
                         3      2
                        x  + 4 x  + 5 x + 2
(%i3) partfrac (%, x);
                      2       2        1
(%o3)               ----- - ----- + --------
                    x + 2   x + 1          2
                                    (x + 1)
@end example

@end deffn

@deffn {Funci@'on} power_mod (@var{a}, @var{n}, @var{m})
Utiliza un algoritmo modular para calcular @code{a^n mod m},
siendo @var{a} y @var{n} enteros cualesquiera y @var{m} un entero positivo.
Si @var{n} es negativo, se utilizar@'a @code{inv_mod} para encontrar el
inverso modular.

@example
(%i1) power_mod(3, 15, 5);
(%o1)                          2
(%i2) mod(3^15,5);
(%o2)                          2
(%i3) power_mod(2, -1, 5);
(%o3)                          3
(%i4) inv_mod(2,5);
(%o4)                          3
@end example

@end deffn

@deffn {Funci@'on} primep (@var{n})
Comprueba si el n@'umero entero @var{n} es o no primo, devolviendo @code{true}
o @code{false} seg@'un el caso.

Cuando el resultado de @code{primep (@var{n})} es @code{false}, @var{n} es un
n@'umero compuesto, y si es @code{true}, @var{n} es primo con alta probabilidad.

Si @var{n} es menor que 10^16, se utiliza una versi@'on 
determin@'{@dotless{i}}stica de la prueba de Miller-Rabin. En tal caso,
si @code{primep (@var{n})} devuelve @code{true}, entonces @var{n} es un n@'umero primo.

Para @var{n} mayor que 10^16 @code{primep} realiza un n@'umero de pruebas
de seudo-primalidad de Miller-Rabin igual a @code{primep_number_of_tests} y una 
prueba de seudo-primalidad de Lucas. La probabilidad de que @var{n} pase una
prueba de Miller-Rabin es menor que 1/4. Con el valor por defecto de 
@code{primep_number_of_tests}, que es 25, la probabilidad de que @var{n}
sea compuesto es menor que 10^-15.

@end deffn

@defvr {Variable opcional} primep_number_of_tests
Valor por defecto: 25

N@'umero de pruebas de Miller-Rabin a realizar por @code{primep}.
@end defvr

@deffn {Funci@'on} prev_prime (@var{n})
Devuelve el mayor de los primos menores que @var{n}.

@example
(%i1) prev_prime(27);
(%o1)                       23
@end example
@end deffn


@deffn {Funci@'on} qunit (@var{n})
Devuelve la unidad principal de @code{sqrt (@var{n})}, siendo @var{n} un entero; consiste en la resoluci@'on de la ecuaci@'on de Pell  @code{a^2 - @var{n} b^2 = 1}.

@example
(%i1) qunit (17);
(%o1)                     sqrt(17) + 4
(%i2) expand (% * (sqrt(17) - 4));
(%o2)                           1
@end example

@end deffn

@deffn {Funci@'on} totient (@var{n})
Devuelve el n@'umero de enteros menores o iguales a @var{n} que son primos relativos con @var{n}.

@end deffn

@defvr {Variable opcional} zerobern
Valor por defecto: @code{true}

Si @code{zerobern} vale @code{false}, @code{bern} excluye los n@'umeros de Bernoulli iguales a cero. 
See @code{bern}.

@end defvr

@deffn {Funci@'on} zeta (@var{n})
Devuelve la funci@'on zeta de Riemann para @var{x} entero negativo, 0, 1 o n@'umero par positivo. No se eval@'ua @code{zeta (@var{n})} para cualesquiera otros argumentos, incluyendo racionales no enteros, n@'umeros en coma flotante o argumentos complejos.

V@'eanse tambi@'en @code{bfzeta} y @code{zeta%pi}.

@example
(%i1) map (zeta, [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5]);
                                     2              4
           1        1     1       %pi            %pi
(%o1) [0, ---, 0, - --, - -, inf, ----, zeta(3), ----, zeta(5)]
          120       12    2        6              90
@end example

@end deffn

@defvr {Variable opcional} zeta%pi
Valor por defecto: @code{true}

Si @code{zeta%pi} vale @code{true}, @code{zeta} devuelve una expresi@'on proporcional a @code{%pi^n} si @code{n} es un n@'umero par positivo. En caso contrario, @code{zeta} no se eval@'ua y devuelve la forma nominal @code{zeta (n)}.

@example
(%i1) zeta%pi: true$
(%i2) zeta (4);
                                 4
                              %pi
(%o2)                         ----
                               90
(%i3) zeta%pi: false$
(%i4) zeta (4);
(%o4)                        zeta(4)
@end example

@end defvr
