@c version 1.29
@menu
* Introducci@'on a los m@'etodos num@'ericos::
* Series de Fourier::
* Funciones y variables para los m@'etodos num@'ericos::
* Funciones y variables para las series de Fourier::
@end menu

@node Introducci@'on a los m@'etodos num@'ericos, Series de Fourier, M@'etodos num@'ericos, M@'etodos num@'ericos
@section Introducci@'on a los m@'etodos num@'ericos

@node Series de Fourier, Funciones y variables para los m@'etodos num@'ericos, Introducci@'on a los m@'etodos num@'ericos, M@'etodos num@'ericos
@section Series de Fourier

El paquete @code{fft} contiene funciones para el c@'alculo num@'erico (no simb@'olico) de la transformada r@'apida de Fourier. La instrucci@'on @code{load ("fft")} carga el paquete. V@'ease @code{fft}.

El paquete @code{fourie} contiene funciones para el c@'alculo simb@'olico de series de Fourier. La instrucci@'on 
@code{load ("fourie")} carga el paquete. Hay funciones en el paquete @code{fourie} para calcular los coeficientes de Fourier y para la transformaci@'on de expresiones. V@'ease @code{Funciones y variables para las series de Fourier}.

@c end concepts M@'etodos num@'ericos

@node Funciones y variables para los m@'etodos num@'ericos, Funciones y variables para las series de Fourier, Series de Fourier, M@'etodos num@'ericos
@section Funciones y variables para los m@'etodos num@'ericos
@c NOTE: Let's keep POLARTORECT, RECTTOPOLAR, and IFT before FFT
@c in this file. Otherwise DESCRIBE returns the FFT text (because
@c POLARTORECT, etc are list in the heading of FFT with @defunx).

@deffn {Funci@'on} polartorect (@var{magnitude_array}, @var{phase_array})

Transforma valores complejos de la forma @code{r %e^(%i t)} a la forma
@code{a + b %i}, siendo @var{r} el m@'odulo y @var{t} la fase.
Ambos valores @var{r} y @var{t} son arrays unidimensionales cuyos
tam@~nos son iguales a la misma potencia de dos.

Los valores originales de los arrays de entrada son reemplazados por
las partes real e imaginaria, @code{a} y @code{b}, de los correspondientes
n@'umeros complejos. El resultado se calcula como

@example
a = r cos(t)
b = r sin(t)
@end example

@code{polartorect} es la funci@'on inversa de @code{recttopolar}.

Para utilizar esta funci@'on ejec@'utese antes @code{load(fft)}.
V@'ease tambi@'en @code{fft}.

@end deffn

@deffn {Funci@'on} recttopolar (@var{real_array}, @var{imaginary_array})

Transforma valores complejos de la forma @code{a + b %i} a la forma
@code{r %e^(%i t)}, siendo @var{a} la parte real y @var{a} la imaginaria.
Ambos valores @var{a} y @var{b} son arrays unidimensionales cuyos
tam@~nos son iguales a la misma potencia de dos.

Los valores originales de los arrays de entrada son reemplazados por
los m@'odulos y las fases, @code{r} y @code{t}, de los correspondientes
n@'umeros complejos. El resultado se calcula como

@example
r = sqrt(a^2 + b^2)
t = atan2(b, a)
@end example

El @'angulo calculado pertence al rango de @code{-%pi} a @code{%pi}. 

@code{recttopolar} es la funci@'on inversa de @code{polartorect}.

Para utilizar esta funci@'on ejec@'utese antes @code{load(fft)}.
V@'ease tambi@'en @code{fft}.

@end deffn



@deffn {Funci@'on} inverse_fft (@var{y})

Calcula la transformada inversa r@'apida de Fourier.

@var{y} es una lista o array (declarado o no) que contiene los datos a
transformar. El n@'umero de elementos debe ser una potencia de dos.
Los elementos deben ser n@'umeros literales (enteros, racionales,
de punto flotante o decimales grandes), constantes simb@'olicas,
expresiones del tipo @code{a + b*%i}, siendo @code{a} y @code{b}
n@'umeros literales, o constantes simb@'olicas.

La funci@'on @code{inverse_fft} devuelve un nuevo objeto del
mismo tipo que @var{y}, el cual no se ve modificado. Los
resultados se calculan siempre como decimales o expresiones @code{a + b*%i},
siendo @code{a} y @code{b} decimales.

La transformada inversa discreta de Fourier se define como se indica
a continuaci@'on. Si @code{x} es el resultado de la transformada inversa,
entonces para @code{j} entre 0 y @code{n - 1} se tiene

@example
x[j] = sum(y[k] exp(+2 %i %pi j k / n), k, 0, n - 1)
@end example

Para utilizar esta funci@'on ejec@'utese antes @code{load(fft)}.

V@'eanse tambi@'en @code{fft} (transformada directa), @code{recttopolar} y @code{polartorect}.

Ejemplos:

Datos reales.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 2, 3, 4, -1, -2, -3, -4] $
@c L1 : inverse_fft (L);
@c L2 : fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 2, 3, 4, -1, -2, -3, -4] $
(%i4) L1 : inverse_fft (L);
(%o4) [0.0, 14.49 %i - .8284, 0.0, 2.485 %i + 4.828, 0.0, 
                       4.828 - 2.485 %i, 0.0, - 14.49 %i - .8284]
(%i5) L2 : fft (L1);
(%o5) [1.0, 2.0 - 2.168L-19 %i, 3.0 - 7.525L-20 %i, 
4.0 - 4.256L-19 %i, - 1.0, 2.168L-19 %i - 2.0, 
7.525L-20 %i - 3.0, 4.256L-19 %i - 4.0]
(%i6) lmax (abs (L2 - L));
(%o6)                       3.545L-16
@end example

Datos complejos.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
@c L1 : inverse_fft (L);
@c L2 : fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $                 
(%i3) L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
(%i4) L1 : inverse_fft (L);
(%o4) [4.0, 2.711L-19 %i + 4.0, 2.0 %i - 2.0, 
- 2.828 %i - 2.828, 0.0, 5.421L-20 %i + 4.0, - 2.0 %i - 2.0, 
2.828 %i + 2.828]
(%i5) L2 : fft (L1);
(%o5) [4.066E-20 %i + 1.0, 1.0 %i + 1.0, 1.0 - 1.0 %i, 
1.55L-19 %i - 1.0, - 4.066E-20 %i - 1.0, 1.0 - 1.0 %i, 
1.0 %i + 1.0, 1.0 - 7.368L-20 %i]
(%i6) lmax (abs (L2 - L));                    
(%o6)                       6.841L-17
@end example

@end deffn

@deffn {Funci@'on} fft (@var{x})

Calcula la transformada r@'apida compleja de Fourier.

@var{x} es una lista o array (declarado o no) que contiene los datos a
transformar. El n@'umero de elementos debe ser una potencia de dos.
Los elementos deben ser n@'umeros literales (enteros, racionales,
de punto flotante o decimales grandes), constantes simb@'olicas,
expresiones del tipo @code{a + b*%i}, siendo @code{a} y @code{b}
n@'umeros literales, o constantes simb@'olicas.

La funci@'on @code{fft} devuelve un nuevo objeto del
mismo tipo que @var{x}, el cual no se ve modificado. Los
resultados se calculan siempre como decimales o expresiones @code{a + b*%i},
siendo @code{a} y @code{b} decimales.

La transformada discreta de Fourier se define como se indica
a continuaci@'on. Si @code{y} es el resultado de la transformada inversa,
entonces para @code{k} entre 0 y @code{n - 1} se tiene

@example
y[k] = (1/n) sum(x[j] exp(-2 %i %pi j k / n), j, 0, n - 1)
@end example

Si los datos @var{x} son reales, los coeficientes reales @code{a} y @code{b}
se pueden calcular de manera que 

@example
x[j] = sum (a[k] * cos (2*%pi*j*k / n) + b[k] * sin (2*%pi*j*k / n), k, 0, n/2)
@end example

con

@example
a[0] = realpart (y[0])
b[0] = 0
@end example

y, para k entre 1 y n/2 - 1,

@example
a[k] = realpart (y[k] + y[n - k])
b[k] = imagpart (y[n - k] - y[k])
@end example

y

@example
a[n/2] = realpart (y[n/2])
b[n/2] = 0
@end example

Para utilizar esta funci@'on ejec@'utese antes @code{load(fft)}.

V@'eanse tambi@'en @code{inverse_fft} (transformada inversa), @code{recttopolar} y @code{polartorect}.

Ejemplos:

Datos reales.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 2, 3, 4, -1, -2, -3, -4] $
@c L1 : fft (L);
@c L2 : inverse_fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 2, 3, 4, -1, -2, -3, -4] $
(%i4) L1 : fft (L);
(%o4) [0.0, - 1.811 %i - .1036, 0.0, .6036 - .3107 %i, 0.0, 
                         .3107 %i + .6036, 0.0, 1.811 %i - .1036]
(%i5) L2 : inverse_fft (L1);
(%o5) [1.0, 2.168L-19 %i + 2.0, 7.525L-20 %i + 3.0, 
4.256L-19 %i + 4.0, - 1.0, - 2.168L-19 %i - 2.0, 
- 7.525L-20 %i - 3.0, - 4.256L-19 %i - 4.0]
(%i6) lmax (abs (L2 - L));
(%o6)                       3.545L-16
@end example

Datos complejos.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
@c L1 : fft (L);
@c L2 : inverse_fft (L1);
@c lmax (abs (L2 - L));
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 1 + %i, 1 - %i, -1, -1, 1 - %i, 1 + %i, 1] $
(%i4) L1 : fft (L);
(%o4) [0.5, .3536 %i + .3536, - 0.25 %i - 0.25, 
0.5 - 6.776L-21 %i, 0.0, - .3536 %i - .3536, 0.25 %i - 0.25, 
0.5 - 3.388L-20 %i]
(%i5) L2 : inverse_fft (L1);
(%o5) [1.0 - 4.066E-20 %i, 1.0 %i + 1.0, 1.0 - 1.0 %i, 
- 1.008L-19 %i - 1.0, 4.066E-20 %i - 1.0, 1.0 - 1.0 %i, 
1.0 %i + 1.0, 1.947L-20 %i + 1.0]
(%i6) lmax (abs (L2 - L));
(%o6)                       6.83L-17
@end example

C@'alculo de los coeficientes del seno y coseno.

@c ===beg===
@c load (fft) $
@c fpprintprec : 4 $
@c L : [1, 2, 3, 4, 5, 6, 7, 8] $
@c n : length (L) $
@c x : make_array (any, n) $
@c fillarray (x, L) $
@c y : fft (x) $
@c a : make_array (any, n/2 + 1) $
@c b : make_array (any, n/2 + 1) $
@c a[0] : realpart (y[0]) $
@c b[0] : 0 $
@c for k : 1 thru n/2 - 1 do
@c    (a[k] : realpart (y[k] + y[n - k]),
@c     b[k] : imagpart (y[n - k] - y[k]));
@c a[n/2] : y[n/2] $
@c b[n/2] : 0 $
@c listarray (a);
@c listarray (b);
@c f(j) := sum (a[k] * cos (2*%pi*j*k / n) + b[k] * sin (2*%pi*j*k / n), k, 0, n/2) $
@c makelist (float (f (j)), j, 0, n - 1);
@c ===end===
@example
(%i1) load (fft) $
(%i2) fpprintprec : 4 $
(%i3) L : [1, 2, 3, 4, 5, 6, 7, 8] $
(%i4) n : length (L) $
(%i5) x : make_array (any, n) $
(%i6) fillarray (x, L) $
(%i7) y : fft (x) $
(%i8) a : make_array (any, n/2 + 1) $
(%i9) b : make_array (any, n/2 + 1) $
(%i10) a[0] : realpart (y[0]) $
(%i11) b[0] : 0 $
(%i12) for k : 1 thru n/2 - 1 do
   (a[k] : realpart (y[k] + y[n - k]),
    b[k] : imagpart (y[n - k] - y[k]));
(%o12)                        done
(%i13) a[n/2] : y[n/2] $
(%i14) b[n/2] : 0 $
(%i15) listarray (a);
(%o15)          [4.5, - 1.0, - 1.0, - 1.0, - 0.5]
(%i16) listarray (b);
(%o16)           [0, - 2.414, - 1.0, - .4142, 0]
(%i17) f(j) := sum (a[k] * cos (2*%pi*j*k / n) + b[k] * sin (2*%pi*j*k / n), k, 0, n/2) $
(%i18) makelist (float (f (j)), j, 0, n - 1);
(%o18)      [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]
@end example

@end deffn

@defvr {Variable opcional} fortindent
Valor por defecto: 0

La variable @code{fortindent} controla el margen izquierdo de las expresiones que escribe la instrucci@'on @code{fortran}.  El valor 0 escribe con un margen normal de 6 espacios; valores positivos har@'an que las expresiones se escriban m@'as a la derecha.

@end defvr

@deffn {Funci@'on} fortran (@var{expr})
Escribe @var{expr} en c@'odigo Fortran. La salida se escribe con m@'argenes, y si @'esta es demasiado larga @code{fortran} sigue escribiendo en l@'{@dotless{i}}neas sucesivas. La funci@'on @code{fortran} escribe el operador de exponenciaci@'on @code{^} como @code{**}, e imprime un n@'umero complejo @code{a + b %i} como @code{(a,b)}.

El argumento @var{expr} puede ser una ecuaci@'on. En tal caso, @code{fortran} escribe una sentencia de asignaci@'on, d@'andole el valor del miembro derecho de la expresi@'on al miembro izquierdo. En particular, si el miembro derecho de @var{expr} es el nombre de una matriz, entonces @code{fortran} escribe una sentencia de asignaci@'on para cada elemento de la matriz.

Si @var{expr} no es reconozida por @code{fortran}, la expresi@'on se escribe en formato @code{grind} sin avisos. La funci@'on @code{fortran} no reconoce listas, arreglos ni funciones.

La variable @code{fortindent} controla el margen izquierdo de las expresiones que escribe la instrucci@'on @code{fortran}.  El valor 0 escribe con un margen normal de 6 espacios; valores positivos har@'an que las expresiones se escriban m@'as a la derecha.

Si @code{fortspaces} vale @code{true}, @code{fortran} rellena las l@'{@dotless{i}}neas con espacios de 80 columnas.

La funci@'on @code{fortran} eval@'ua sus argumentos; un argumento precedido de ap@'ostrofo previene de la evaluaci@'on.
La funci@'on @code{fortran} siempre devuelve @code{done}.

Ejemplos:

@verbatim
(%i1) expr: (a + b)^12$
(%i2) fortran (expr);
      (b+a)**12                                                                 
(%o2)                         done
(%i3) fortran ('x=expr);
      x = (b+a)**12                                                             
(%o3)                         done
(%i4) fortran ('x=expand (expr));
      x = b**12+12*a*b**11+66*a**2*b**10+220*a**3*b**9+495*a**4*b**8+792        
     1   *a**5*b**7+924*a**6*b**6+792*a**7*b**5+495*a**8*b**4+220*a**9*b        
     2   **3+66*a**10*b**2+12*a**11*b+a**12                                     
(%o4)                         done
(%i5) fortran ('x=7+5*%i);
      x = (7,5)                                                                 
(%o5)                         done
(%i6) fortran ('x=[1,2,3,4]);
      x = [1,2,3,4]                                                             
(%o6)                         done
(%i7) f(x) := x^2$
(%i8) fortran (f);
      f                                                                         
(%o8)                         done
@end verbatim

@end deffn

@defvr {Variable opcional} fortspaces
Valor por defecto: @code{false}

Si @code{fortspaces} vale @code{true}, @code{fortran} rellena las l@'{@dotless{i}}neas con espacios de 80 columnas.

@end defvr

@deffn {Funci@'on} horner (@var{expr}, @var{x})
@deffnx {Funci@'on} horner (@var{expr})
Cambia el formato de @var{expr} seg@'un la regla de Horner utilizando @var{x} como variable principal, si @'esta se especifica. El argumento @code{x} se puede omitir, en cuyo caso se considerar@'a como variable principal la de @var{expr} en su formato racional can@'onico (CRE).

La funci@'on @code{horner} puede mejorar las estabilidad si @code{expr} va a ser num@'ericamente evaluada. Tambi@'en es @'util si Maxima se utiliza para generar programas que ser@'an ejecutados en Fortran. V@'ease tambi@'en @code{stringout}.

@example
(%i1) expr: 1e-155*x^2 - 5.5*x + 5.2e155;
                           2
(%o1)            1.0E-155 x  - 5.5 x + 5.2E+155
(%i2) expr2: horner (%, x), keepfloat: true;
(%o2)            (1.0E-155 x - 5.5) x + 5.2E+155
(%i3) ev (expr, x=1e155);
Maxima encountered a Lisp error:

 floating point overflow

Automatically continuing.
To reenable the Lisp debugger set *debugger-hook* to nil.
(%i4) ev (expr2, x=1e155);
(%o4)                       7.0E+154
@end example

@end deffn


@deffn {Funci@'on} find_root (@var{expr}, @var{x}, @var{a}, @var{b})
@deffnx {Funci@'on} find_root (@var{f}, @var{a}, @var{b})
@deffnx {Variable opcional} find_root_error
@deffnx {Variable opcional} find_root_abs
@deffnx {Variable opcional} find_root_rel

Calcula una ra@'{@dotless{i}}z de la expresi@'on @var{expr} o de
la funci@'on @var{f} en el intervalo cerrado @math{[@var{a}, @var{b}]}.
La expresi@'on @var{expr} puede ser una ecuaci@'on, en cuyo caso 
@code{find_root} busca una ra@'{@dotless{i}}z de
@code{lhs(@var{expr}) - rhs(@var{expr})}.

Dado que Maxima puede evaluar @var{expr} o @var{f} en 
@math{[@var{a}, @var{b}]}, entonces, si @var{expr} o @var{f} es
continua, @code{find_root} encuentrar@'a la ra@'{@dotless{i}}z
buscada; o ra@'{@dotless{i}}ces en caso de existir varias.

La funci@'on @code{find_root} aplica al principio la
b@'usqueda binaria. Si la expresi@'on es lo suficientemente
suave, entonces @code{find_root} aplicar@'a el m@'etodo
de interpolaci@'on lineal.

La precisi@'on del resultado se controla con @code{find_root_abs} y
@code{find_root_rel}. La b@'usqueda se detiene cuando la funci@'on
alcanza valores menores o iguales a @code{find_root_abs},
o cuando dos soluciones sucesivas @var{x_0} y @var{x_1}
se diferencian en una cantidad menor o igual a
@code{find_root_rel * max(abs(x_0), abs(x_1))}.
Los valores por defecto de @code{find_root_abs} y
@code{find_root_rel} son ambos cero.

@code{find_root} espera que la funci@'on en cuesti@'on tenga signos
diferentes en los extremos del intervalo. Si esto no se verifica,
el comportamiento de @code{find_root} se controla con @code{find_root_error}.
Cuando @code{find_root_error} vale @code{true}, @code{find_root}
devuelve un mensaje de error; en caso contrario, @code{find_root}
devuelve el valor de @code{find_root_error}. El valor por defecto
de @code{find_root_error} es @code{true}.

Si en alg@'un momento del proceso de b@'usqueda @var{f} alcanza un valor
no num@'erico, @code{find_root} devuelve una expresi@'on parcialmente evaluada.

Se ignora el orden de @var{a} y @var{b}; la regi@'on de b@'usqueda es
@math{[min(@var{a}, @var{b}), max(@var{a}, @var{b})]}.


Ejemplos:
@c PREVIOUS EXAMPLE STUFF -- MAY WANT TO BRING TRANSLATE BACK INTO THE EXAMPLE
@c f(x):=(mode_declare(x,float),sin(x)-x/2.0);
@c interpolate(sin(x)-x/2,x,0.1,%pi)       time= 60 msec
@c interpolate(f(x),x,0.1,%pi);            time= 68 msec
@c translate(f);
@c interpolate(f(x),x,0.1,%pi);            time= 26 msec
@c interpolate(f,0.1,%pi);                 time=  5 msec

@c ===beg===
@c f(x) := sin(x) - x/2;
@c find_root (sin(x) - x/2, x, 0.1, %pi);
@c find_root (sin(x) = x/2, x, 0.1, %pi);
@c find_root (f(x), x, 0.1, %pi);
@c find_root (f, 0.1, %pi);
@c find_root (exp(x) = y, x, 0, 100);
@c find_root (exp(x) = y, x, 0, 100), y = 10;
@c log (10.0);
@c ===end===
@example
(%i1) f(x) := sin(x) - x/2;
                                        x
(%o1)                  f(x) := sin(x) - -
                                        2
(%i2) find_root (sin(x) - x/2, x, 0.1, %pi);
(%o2)                   1.895494267033981
(%i3) find_root (sin(x) = x/2, x, 0.1, %pi);
(%o3)                   1.895494267033981
(%i4) find_root (f(x), x, 0.1, %pi);
(%o4)                   1.895494267033981
(%i5) find_root (f, 0.1, %pi);
(%o5)                   1.895494267033981
(%i6) find_root (exp(x) = y, x, 0, 100);
                            x
(%o6)           find_root(%e  = y, x, 0.0, 100.0)
(%i7) find_root (exp(x) = y, x, 0, 100), y = 10;
(%o7)                   2.302585092994046
(%i8) log (10.0);
(%o8)                   2.302585092994046
@end example
@end deffn



@deffn {Funci@'on} newton (@var{expr}, @var{x}, @var{x_0}, @var{eps})
Devuelve una soluci@'on aproximada de @code{@var{expr} = 0} obtenida
por el m@'etodo de Newton, considerando @var{expr} como una funci@'on
de una variable, @var{x}.
La b@'usqueda comienza con @code{@var{x} = @var{x_0}} y contin@'ua
hasta que se verifique @code{abs(@var{expr}) < @var{eps}}, donde
@var{expr} se eval@'ua con el valor actual de @var{x}.

La funci@'on @code{newton} permite que en @var{expr} haya variables
no definidas, siempre y cuando la condici@'on de terminaci@'on
@code{abs(@var{expr}) < @var{eps}} pueda reducirse a un valor
l@'ogico @code{true} o @code{false}; de este modo, no es necesario
que @var{expr} tome un valor num@'erico.

Ejec@'utese @code{load(newton1)} para cargar esta funci@'on.

V@'eanse tambi@'en @code{realroots}, @code{allroots}, @code{find_root} y @code{mnewton}.

Ejemplos:

@c ===beg===
@c load (newton1);
@c newton (cos (u), u, 1, 1/100);
@c ev (cos (u), u = %);
@c assume (a > 0);
@c newton (x^2 - a^2, x, a/2, a^2/100);
@c ev (x^2 - a^2, x = %);
@c ===end===
@example
(%i1) load (newton1);
(%o1) /usr/share/maxima/5.10.0cvs/share/numeric/newton1.mac
(%i2) newton (cos (u), u, 1, 1/100);
(%o2)                   1.570675277161251
(%i3) ev (cos (u), u = %);
(%o3)                 1.2104963335033528E-4
(%i4) assume (a > 0);
(%o4)                        [a > 0]
(%i5) newton (x^2 - a^2, x, a/2, a^2/100);
(%o5)                  1.00030487804878 a
(%i6) ev (x^2 - a^2, x = %);
                                           2
(%o6)                6.098490481853958E-4 a
@end example

@end deffn






@node Funciones y variables para las series de Fourier, , Funciones y variables para los m@'etodos num@'ericos, M@'etodos num@'ericos
@section Funciones y variables para las series de Fourier

@c REPHRASE
@deffn {Funci@'on} equalp (@var{x}, @var{y})
Devuelve @code{true} si @code{equal (@var{x}, @var{y})}, en otro caso devuelve @code{false}. No devuelve el mensaje de error que se obtiene de  @code{equal (x, y)} en un caso como @'este.

@c NEEDS EXAMPLES
@end deffn

@deffn {Funci@'on} remfun (@var{f}, @var{expr})
@deffnx {Funci@'on} remfun (@var{f}, @var{expr}, @var{x})
La llamada @code{remfun (@var{f}, @var{expr})} reemplaza todas las subexpresiones @code{@var{f} (@var{arg})} por @var{arg} en @var{expr}.

La llamada @code{remfun (@var{f}, @var{expr}, @var{x})} reemplaza todas las subexpresiones @code{@var{f} (@var{arg})} por @var{arg} en @var{expr} s@'olo si @var{arg} contiene a la variable @var{x}.

@c NEEDS EXAMPLES
@end deffn

@deffn {Funci@'on} funp (@var{f}, @var{expr})
@deffnx {Funci@'on} funp (@var{f}, @var{expr}, @var{x})
La llamada @code{funp (@var{f}, @var{expr})} devuelve @code{true} si @var{expr} contiene la funci@'on @var{f}.

La llamada @code{funp (@var{f}, @var{expr}, @var{x})} devuelve @code{true} si @var{expr} contiene la funci@'on @var{f} y la variable @var{x} est@'a presente en el argumento de alguna de las presencias de @var{f}.

@c NEEDS EXAMPLES
@end deffn

@deffn {Funci@'on} absint (@var{f}, @var{x}, @var{halfplane})
@deffnx {Funci@'on} absint (@var{f}, @var{x})
@deffnx {Funci@'on} absint (@var{f}, @var{x}, @var{a}, @var{b})
La llamada @code{absint (@var{f}, @var{x}, @var{halfplane})} devuelve la integral indefinida de @var{f} con respecto a 
@var{x} en el semiplano dado (@code{pos}, @code{neg} o @code{both}). La funci@'on @var{f} puede contener expresiones de la forma @code{abs (x)}, @code{abs (sin (x))}, @code{abs (a) * exp (-abs (b) * abs (x))}.

La llamada @code{absint (@var{f}, @var{x})} equivale a @code{absint (@var{f}, @var{x}, pos)}.

La llamada @code{absint (@var{f}, @var{x}, @var{a}, @var{b})} devuelve la integral definida de @var{f} con respecto a  @var{x} de @var{a} a @var{b}.

@c NEEDS EXAMPLES
@end deffn


@deffn {Funci@'on} fourier (@var{f}, @var{x}, @var{p})
Devuelve una lista con los coeficientes de Fourier de 
@code{@var{f}(@var{x})} definida en el intervalo @code{[-p, p]}.

@c NEEDS EXAMPLES
@end deffn

@c NEES EXPANSION. WHAT IS THE ARGUMENT l ??
@deffn {Funci@'on} foursimp (@var{l})
Simplifica @code{sin (n %pi)} a 0 si @code{sinnpiflag} vale @code{true} y
@code{cos (n %pi)} a @code{(-1)^n} si @code{cosnpiflag} vale @code{true}.

@c NEEDS EXAMPLES
@end deffn

@defvr {Variable opcional} sinnpiflag
Valor por defecto: @code{true}

V@'ease @code{foursimp}.

@end defvr

@defvr {Variable opcional} cosnpiflag
Valor por defecto: @code{true}

V@'ease @code{foursimp}.

@end defvr

@c NEEDS EXPANSION. EXPLAIN x AND p HERE (DO NOT REFER SOMEWHERE ELSE)
@deffn {Funci@'on} fourexpand (@var{l}, @var{x}, @var{p}, @var{limit})
Calcula y devuelve la serie de Fourier a partir de la lista de los coeficientes de Fourier @var{l} hasta el t@'ermino @var{limit} (@var{limit} puede ser @code{inf}). Los argumentos @var{x} y @var{p} tienen el mismo significado que en
@code{fourier}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION.
@deffn {Funci@'on} fourcos (@var{f}, @var{x}, @var{p})
Devuelve los coeficientes de los cosenos de Fourier de @code{@var{f}(@var{x})} definida en @code{[0, @var{p}]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION.
@deffn {Funci@'on} foursin (@var{f}, @var{x}, @var{p})
Devuelve los coeficientes de los senos de Fourier de @code{@var{f}(@var{x})} definida en @code{[0, @var{p}]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION.
@deffn {Funci@'on} totalfourier (@var{f}, @var{x}, @var{p})
Devuelve @code{fourexpand (foursimp (fourier (@var{f}, @var{x}, @var{p})), @var{x}, @var{p}, 'inf)}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Funci@'on} fourint (@var{f}, @var{x})
Calcula y devuelve la lista de los coeficientes integrales de Fourier de @code{@var{f}(@var{x})} definida en @code{[minf, inf]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Funci@'on} fourintcos (@var{f}, @var{x})
Devuelve los coeficientes integrales de los cosenos  @code{@var{f}(@var{x})} en @code{[0, inf]}.

@c NEEDS EXAMPLES
@end deffn

@c NEEDS EXPANSION
@deffn {Funci@'on} fourintsin (@var{f}, @var{x})
Devuelve los coeficientes integrales de los senos  @code{@var{f}(@var{x})} en @code{[0, inf]}.

@c NEEDS EXAMPLES
@end deffn
