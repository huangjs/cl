@c version 1.23
@menu
* Introducci@'on a la trigonometr@'{@dotless{i}}a::  
* Funciones y variables para trigonometr@'{@dotless{i}}a:: 
@end menu

@node Introducci@'on a la trigonometr@'{@dotless{i}}a, Funciones y variables para trigonometr@'{@dotless{i}}a, Trigonometr@'{@dotless{i}}a, Trigonometr@'{@dotless{i}}a
@section Introducci@'on a la trigonometr@'{@dotless{i}}a

Maxima reconoce muchas funciones trigonom@'etricas. No est@'an programadas todas las identidades trigonom@'etricas, pero el usuario puede a@~nadir muchas de ellas haciendo uso de las t@'ecnicas basadas en patrones.  Las funciones trigonom@'etricas definidas en Maxima son:  @code{acos},
@code{acosh}, @code{acot}, @code{acoth}, @code{acsc},
@code{acsch}, @code{asec}, @code{asech}, @code{asin}, 
@code{asinh}, @code{atan}, @code{atanh}, @code{cos}, 
@code{cosh}, @code{cot}, @code{coth}, @code{csc}, @code{csch}, 
@code{sec}, @code{sech}, @code{sin}, @code{sinh}, @code{tan} y 
@code{tanh}. Hay tambi@'en un determinado n@'umero de instrucciones especiales para manipular funciones trigonom@'etricas;  v@'eanse a este respecto @code{trigexpand},
@code{trigreduce} y la variable @code{trigsign}.  Dos paquetes adicionales ampl@'{@dotless{i}}an las reglas de simplificaci@'on de Maxima, @code{ntrig} y @code{atrig1}.  Ejec@'utese @code{describe(@var{command})} para m@'as detalles.




@node Funciones y variables para trigonometr@'{@dotless{i}}a,  , Introducci@'on a la trigonometr@'{@dotless{i}}a, Trigonometr@'{@dotless{i}}a
@section Funciones y variables para trigonometr@'{@dotless{i}}a

@defvr {Variable opcional} %piargs
Valor por defecto: @code{true}

Cuando @code{%piargs} vale @code{true}, las funciones trigonom@'etricas
se simplifican a constantes algebraicas cuando el argumento es m@'ultiplo
entero de 
@iftex
@math{\pi}, @math{\pi/2}, @math{\pi/3}, @math{\pi/4} o @math{\pi/6}.
@end iftex
@ifnottex
@math{%pi}, @math{%pi/2}, @math{%pi/3}, @math{%pi/4} o @math{%pi/6}.
@end ifnottex

@iftex
Maxima conoce algunas identidades aplicables cuando @math{\pi}, etc.,
@end iftex
@ifnottex
Maxima conoce algunas identidades aplicables cuando @math{%pi}, etc.,
@end ifnottex
se multiplican por una variable entera (esto es, un s@'{@dotless{i}}mbolo
declarado como entero).

Ejemplo:

@c ===beg===
@c %piargs : false$
@c [sin (%pi), sin (%pi/2), sin (%pi/3)];
@c [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
@c %piargs : true$
@c [sin (%pi), sin (%pi/2), sin (%pi/3)];
@c [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
@c [cos (%pi/3), cos (10*%pi/3), tan (10*%pi/3),
@c        cos (sqrt(2)*%pi/3)];
@c ===end===
@example
(%i1) %piargs : false$
@group
(%i2) [sin (%pi), sin (%pi/2), sin (%pi/3)];
                                %pi       %pi
(%o2)            [sin(%pi), sin(---), sin(---)]
                                 2         3
@end group
@group
(%i3) [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
                      %pi       %pi       %pi
(%o3)            [sin(---), sin(---), sin(---)]
                       4         5         6
@end group
(%i4) %piargs : true$
@group
(%i5) [sin (%pi), sin (%pi/2), sin (%pi/3)];
                                sqrt(3)
(%o5)                    [0, 1, -------]
                                   2
@end group
@group
(%i6) [sin (%pi/4), sin (%pi/5), sin (%pi/6)];
                         1         %pi   1
(%o6)                [-------, sin(---), -]
                      sqrt(2)       5    2
@end group
@group
(%i7) [cos (%pi/3), cos (10*%pi/3), tan (10*%pi/3),
       cos (sqrt(2)*%pi/3)];
                1    1               sqrt(2) %pi
(%o7)          [-, - -, sqrt(3), cos(-----------)]
                2    2                    3
@end group
@end example


@iftex
Se aplican ciertas identidades cuando @math{\pi} o @math{\pi/2} se multiplican por una variable entera.
@end iftex
@ifnottex
Se aplican ciertas identidades cuando @math{%pi} o @math{%pi/2} se multiplican por una variable entera.
@end ifnottex

@c ===beg===
@c declare (n, integer, m, even)$
@c [sin (%pi * n), cos (%pi * m), sin (%pi/2 * m),
@c        cos (%pi/2 * m)];
@c ===end===
@example
(%i1) declare (n, integer, m, even)$
@group
(%i2) [sin (%pi * n), cos (%pi * m), sin (%pi/2 * m),
       cos (%pi/2 * m)];
                                      m/2
(%o2)                  [0, 1, 0, (- 1)   ]
@end group
@end example


@end defvr

@defvr {Variable opcional} %iargs
Valor por defecto: @code{true}

Cuando @code{%iargs} vale @code{true}, las funciones trigonom@'etricas
se simplifican a funciones hiperb@'olicas
@iftex
si el argumento es aparentemente un m@'ultiplo de la unidad imaginaria @math{i}.
@end iftex
@ifnottex
si el argumento es aparentemente un m@'ultiplo de la unidad imaginaria @math{%i}.
@end ifnottex

La simplificaci@'on se lleva a cabo incluso cuando el argumento es manifiestamente real;
@iftex
Maxima s@'olo se fija en si el argumento es un m@'ultiplo literal de @math{i}.
@end iftex
@ifnottex
Maxima s@'olo se fija en si el argumento es un m@'ultiplo literal de @math{%i}.
@end ifnottex

Ejemplos:

@c ===beg===
@c %iargs : false$
@c [sin (%i * x), cos (%i * x), tan (%i * x)];
@c %iargs : true$
@c [sin (%i * x), cos (%i * x), tan (%i * x)];
@c ===end===
@example
(%i1) %iargs : false$
@group
(%i2) [sin (%i * x), cos (%i * x), tan (%i * x)];
(%o2)           [sin(%i x), cos(%i x), tan(%i x)]
@end group
(%i3) %iargs : true$
@group
(%i4) [sin (%i * x), cos (%i * x), tan (%i * x)];
(%o4)           [%i sinh(x), cosh(x), %i tanh(x)]
@end group
@end example


La simplificaci@'on se aplica incluso en el caso de que
el argumento se reduzca a un n@'umero real.

@c ===beg===
@c declare (x, imaginary)$
@c [featurep (x, imaginary), featurep (x, real)];
@c sin (%i * x);
@c ===end===
@example
(%i1) declare (x, imaginary)$
@group
(%i2) [featurep (x, imaginary), featurep (x, real)];
(%o2)                     [true, false]
@end group
@group
(%i3) sin (%i * x);
(%o3)                      %i sinh(x)
@end group
@end example


@end defvr


@deffn {Function} acos (@var{x})
Arco coseno.

@end deffn

@deffn {Funci@'on} acosh (@var{x})
Arco coseno hiperb@'olico.

@end deffn

@deffn {Funci@'on} acot (@var{x})
Arco cotangente.

@end deffn

@deffn {Funci@'on} acoth (@var{x})
Arco cotangente hiperb@'olica.

@end deffn

@deffn {Funci@'on} acsc (@var{x})
Arco cosecante.

@end deffn

@deffn {Funci@'on} acsch (@var{x})
Arco cosecante hiperb@'olica.

@end deffn

@deffn {Funci@'on} asec (@var{x})
Arco secante.

@end deffn

@deffn {Funci@'on} asech (@var{x})
Arco secante hiperb@'olica.

@end deffn

@deffn {Funci@'on} asin (@var{x})
Arco seno.

@end deffn

@deffn {Funci@'on} asinh (@var{x})
Arco seno hiperb@'olico.

@end deffn

@deffn {Funci@'on} atan (@var{x})
Arco tangente.

@end deffn

@deffn {Funci@'on} atan2 (@var{y}, @var{x})
Calcula el valor de @code{atan(@var{y}/@var{x})} en el intervalo de @code{-%pi} a @code{%pi}.

@end deffn

@deffn {Funci@'on} atanh (@var{x})
Arco tangente hiperb@'olica.

@end deffn

@defvr {Paquete} atrig1
El paquete @code{atrig1} contiene ciertas reglas de simplificaci@'on adicionales para las funciones trigonom@'etricas inversas. Junto con las reglas que ya conoce Maxima, los siguientes @'angulos est@'an completamente implementados:
@code{0}, @code{%pi/6}, @code{%pi/4}, @code{%pi/3} y @code{%pi/2}.  
Los @'angulos correspondientes en los otros tres cuadrantes tambi@'en est@'an disponibles.  
Para hacer uso de estas reglas, ejec@'utese @code{load(atrig1);}.

@end defvr

@deffn {Funci@'on} cos (@var{x})
Coseno.

@end deffn

@deffn {Funci@'on} cosh (@var{x})
Coseno hiperb@'olico.

@end deffn

@deffn {Funci@'on} cot (@var{x})
Cotangente.

@end deffn

@deffn {Funci@'on} coth (@var{x})
Cotangente hiperb@'olica.

@end deffn

@deffn {Funci@'on} csc (@var{x})
Cosecante.

@end deffn

@deffn {Funci@'on} csch (@var{x})
Cosecante hiperb@'olica.

@end deffn


@defvr {Variable opcional} halfangles
Valor por defecto: @code{false}

Si @code{halfangles} vale @code{true}, las funciones
trigonom@'etricas con argumentos del tipo @code{@var{expr}/2}
se simplifican a funciones con argumentos @var{expr}.

Para un argumento real @var{x} en el intervalo @code{0 < x < 2*%pi}
el seno del semi@'angulo se simplifica como

@example
                    sqrt(1 - cos(x))
                    ----------------
                        sqrt(2)
@end example

Se necesita un factor relativamente complicado para que esta f@'ormula
sea tambi@'en v@'alida para cualquier argumento complejo @var{z}:

@example
           realpart(z)
     floor(-----------)
              2 %pi
(- 1)                   (1 - unit_step(- imagpart(z))

                      realpart(z)            realpart(z)
                floor(-----------) - ceiling(-----------)
                         2 %pi                  2 %pi
          ((- 1)                                          + 1))
@end example

Maxima reconoce este factor y otros similares para las funciones @code{sin}, 
@code{cos}, @code{sinh} y @code{cosh}. Para valores especiales del argumento
@math{z}, estos factores se simplifican de forma apropiada.

Ejemplos:

@c ===beg===
@c halfangles : false$
@c sin (x / 2);
@c halfangles : true$
@c sin (x / 2);
@c assume(x>0, x<2*%pi)$
@c sin(x / 2);
@c ===end===
@example
(%i1) halfangles:false;
(%o1)                                false
(%i2) sin(x/2);
                                        x
(%o2)                               sin(-)
                                        2
(%i3) halfangles:true;
(%o3)                                true
(%i4) sin(x/2);
                                                    x
                                            floor(-----)
                                                  2 %pi
                      sqrt(1 - cos(x)) (- 1)
(%o4)                 ----------------------------------
                                   sqrt(2)
(%i5) assume(x>0, x<2*%pi)$
(%i6) sin(x/2);
                               sqrt(1 - cos(x))
(%o6)                          ----------------
                                   sqrt(2)
@end example

@end defvr


@defvr {Paquete} ntrig
El paquete @code{ntrig} contiene un conjunto de reglas de simplificaci@'on que se pueden usar para simplificar funciones trigonom@'etricas cuyos argumentos son de la forma
@code{@var{f}(@var{n} %pi/10)} donde @var{f} es cualquiera de las funciones 
@code{sin}, @code{cos}, @code{tan}, @code{csc}, @code{sec} o @code{cot}.
@c NEED TO LOAD THIS PACKAGE ??

@end defvr

@deffn {Funci@'on} sec (@var{x})
Secante.

@end deffn

@deffn {Funci@'on} sech (@var{x})
Secante hiperb@'olica.

@end deffn

@deffn {Funci@'on} sin (@var{x})
Seno.

@end deffn

@deffn {Funci@'on} sinh (@var{x})
Seno hiperb@'olico.

@end deffn

@deffn {Funci@'on} tan (@var{x})
Tangente.

@end deffn

@deffn {Funci@'on} tanh (@var{x})
Tangente hiperb@'olica.

@end deffn

@deffn {Funci@'on} trigexpand (@var{expr})
Expande funciones trigonom@'etricas e hiperb@'olicas de sumas de @'angulos y de m@'ultiplos de @'angulos presentes en @var{expr}.  Para mejorar los resultados, @var{expr} deber@'{@dotless{i}}a expandirse. Para facilitar el control por parte del usuario de las simplificaciones, esta funci@'on tan solo expande un nivel de cada vez, expandiendo sumas de @'angulos o de m@'ultiplos de @'angulos. A fin de obtener una expansi@'on completa en senos y coseno, se le dar@'a a la variable @code{trigexpand} el valor @code{true}.

La funci@'on @code{trigexpand} est@'a controlada por las siguientes variables:

@table @code
@item trigexpand
Si vale @code{true}, provoca la expansi@'on de todas las expresiones que contengan senos y cosenos.
@item trigexpandplus
Controla la regla de la suma para @code{trigexpand}, la expansi@'on de una suma como @code{sin(x + y)} se llevar@'a a cabo s@'olo si @code{trigexpandplus} vale @code{true}.
@item trigexpandtimes
Controla la regla del producto para @code{trigexpand}, la expansi@'on de un producto como @code{sin(2 x)} se llevar@'a a cabo s@'olo si @code{trigexpandtimes} vale @code{true}.
@end table

Ejemplos:

@c ===beg===
@c x+sin(3*x)/sin(x),trigexpand=true,expand;
@c trigexpand(sin(10*x+y));
@c ===end===
@example
@group
(%i1) x+sin(3*x)/sin(x),trigexpand=true,expand;
                         2           2
(%o1)               - sin (x) + 3 cos (x) + x
@end group
@group
(%i2) trigexpand(sin(10*x+y));
(%o2)          cos(10 x) sin(y) + sin(10 x) cos(y)
@end group
@end example

@end deffn

@defvr {Variable optativa} trigexpandplus
Valor por defecto: @code{true}

La variable @code{trigexpandplus} controla la regla de la suma para @code{trigexpand}.  As@'{@dotless{i}}, si la instrucci@'on @code{trigexpand} se utiliza o si la variable @code{trigexpand} vale @code{true}, se realizar@'a la expansi@'on de sumas como @code{sin(x+y)} s@'olo si @code{trigexpandplus} vale @code{true}.

@end defvr

@defvr {Variable optativa} trigexpandtimes
Valor por defecto: @code{true}

La variable @code{trigexpandtimes} controla la regla del producto para @code{trigexpand}.  As@'{@dotless{i}}, si la instrucci@'on @code{trigexpand} se utiliza o si la variable @code{trigexpand} vale @code{true}, se realizar@'a la expansi@'on de productos como @code{sin(2*x)} s@'olo si @code{trigexpandtimes} vale @code{true}.

@end defvr

@defvr {Variable optativa} triginverses
Valor por defecto: @code{true}

La variable @code{triginverses} controla la simplificaci@'on de la composici@'on de funciones trigonom@'etricas e hiperb@'olicas con sus funciones inversas.

Si vale @code{all}, tanto @code{atan(tan(@var{x}))}  como @code{tan(atan(@var{x}))} se reducen a @var{x}.  

Si vale @code{true}, se desactiva la simplificaci@'on de @code{@var{arcfun}(@var{fun}(@var{x}))}.

Si vale @code{false}, se desactivan las simplificaciones de 
@code{@var{arcfun}(@var{fun}(@var{x}))} y 
@code{@var{fun}(@var{arcfun}(@var{x}))}.

@end defvr

@deffn {Funci@'on} trigreduce (@var{expr}, @var{x})
@deffnx {Funci@'on} trigreduce (@var{expr})
Combina productos y potencias de senos y cosenos trigonom@'etricos e hiperb@'olicos de @var{x}, transform@'andolos en otros que son m@'ultiplos de @var{x}.  Tambi@'en intenta eliminar estas funciones cuando aparecen en los denominadores.  Si no se introduce el argumento @var{x}, entonces se utilizan todas las variables de @var{expr}.

V@'ease tambi@'en @code{poissimp}.

@c ===beg===
@c trigreduce(-sin(x)^2+3*cos(x)^2+x);
@c ===end===
@example
@group
(%i1) trigreduce(-sin(x)^2+3*cos(x)^2+x);
               cos(2 x)      cos(2 x)   1        1
(%o1)          -------- + 3 (-------- + -) + x - -
                  2             2       2        2
@end group
@end example


Las rutinas de simplificaci@'on trigonom@'etrica utilizan informaci@'on declarada en algunos casos sencillos. Las declaraciones sobre variables se utilizan como se indica a continuaci@'on:

@c ===beg===
@c declare(j, integer, e, even, o, odd)$
@c sin(x + (e + 1/2)*%pi);
@c sin(x + (o + 1/2)*%pi);
@c ===end===
@example
(%i1) declare(j, integer, e, even, o, odd)$
(%i2) sin(x + (e + 1/2)*%pi);
(%o2)                        cos(x)
(%i3) sin(x + (o + 1/2)*%pi);
(%o3)                       - cos(x)

@end example

@end deffn

@defvr {Variable optativa} trigsign
Valor por defecto: @code{true}

Si @code{trigsign} vale @code{true}, se permite la simplificaci@'on de argumentos negativos en funciones trigonom@'etricas, como en @code{sin(-x)}, que se transformar@'a en @code{-sin(x)} s@'olo si @code{trigsign} vale @code{true}.

@end defvr

@deffn {Funci@'on} trigsimp (@var{expr})
@iftex
Utiliza las identidades
@tex
$\sin\left(x\right)^2 + \cos\left(x\right)^2 = 1$
@end tex
y
@tex
$\cosh\left(x\right)^2 - \sinh\left(x\right)^2 = 1$
@end tex
para simplificar expresiones que contienen @code{tan}, @code{sec},
etc., en expresiones con @code{sin}, @code{cos}, @code{sinh}, @code{cosh}.
@end iftex
@ifnottex
Utiliza las identidades @math{sin(x)^2 + cos(x)^2 = 1} y
@math{cosh(x)^2 - sinh(x)^2 = 1} para simplificar expresiones que contienen @code{tan}, @code{sec},
etc., en expresiones con @code{sin}, @code{cos}, @code{sinh}, @code{cosh}.
@end ifnottex

Las funciones @code{trigreduce}, @code{ratsimp} y @code{radcan} puden seguir siendo @'utiles para continuar el proceso de simplificaci@'on.

La instrucci@'on @code{demo ("trgsmp.dem")} muestra algunos ejemplos de @code{trigsimp}.
@c MERGE EXAMPLES INTO THIS ITEM

@end deffn

@deffn {Funci@'on} trigrat (@var{expr})
Devuelve una forma can@'onica simplificada cuasi-lineal de una expresi@'on trigonom@'etrica; @var{expr} es una fracci@'on racional que contiene @code{sin}, @code{cos} o @code{tan}, cuyos argumentos son formas lineales respecto de ciertas variables (o kernels) y @code{%pi/@var{n}} (@var{n} entero) con coeficientes enteros. El resultado es una fracci@'on simplificada con el numerador y denominador lineales respecto de @code{sin} y @code{cos}.

@c ===beg===
@c trigrat(sin(3*a)/sin(a+%pi/3));
@c ===end===
@example
@group
(%i1) trigrat(sin(3*a)/sin(a+%pi/3));
(%o1)            sqrt(3) sin(2 a) + cos(2 a) - 1
@end group
@end example

El siguiente ejemplo se ha tomado de
Davenport, Siret y Tournier, @i{Calcul Formel}, Masson (o en ingl@'es,
Addison-Wesley), secci@'on 1.5.5, teorema de Morley.

@c ===beg===
@c c : %pi/3 - a - b$
@c bc : sin(a)*sin(3*c)/sin(a+b);
@c ba : bc, c=a, a=c;
@c ac2 : ba^2 + bc^2 - 2*bc*ba*cos(b);
@c trigrat (ac2);
@c ===end===
@example
(%i1) c : %pi/3 - a - b$
@group
(%i2) bc : sin(a)*sin(3*c)/sin(a+b);
                                          %pi
                  sin(a) sin(3 (- b - a + ---))
                                           3
(%o2)             -----------------------------
                           sin(b + a)
@end group
@group
(%i3) ba : bc, c=a, a=c;
                                         %pi
                    sin(3 a) sin(b + a - ---)
                                          3
(%o3)               -------------------------
                                  %pi
                          sin(a - ---)
                                   3
@end group
@group
(%i4) ac2 : ba^2 + bc^2 - 2*bc*ba*cos(b);
         2         2         %pi
      sin (3 a) sin (b + a - ---)
                              3
(%o4) ---------------------------
                2     %pi
             sin (a - ---)
                       3
                                       %pi
 - (2 sin(a) sin(3 a) sin(3 (- b - a + ---)) cos(b)
                                        3
             %pi            %pi
 sin(b + a - ---))/(sin(a - ---) sin(b + a))
              3              3
      2       2              %pi
   sin (a) sin (3 (- b - a + ---))
                              3
 + -------------------------------
                2
             sin (b + a)
@end group
@group
(%i5) trigrat (ac2);
(%o5) - (sqrt(3) sin(4 b + 4 a) - cos(4 b + 4 a)
 - 2 sqrt(3) sin(4 b + 2 a) + 2 cos(4 b + 2 a)
 - 2 sqrt(3) sin(2 b + 4 a) + 2 cos(2 b + 4 a)
 + 4 sqrt(3) sin(2 b + 2 a) - 8 cos(2 b + 2 a) - 4 cos(2 b - 2 a)
 + sqrt(3) sin(4 b) - cos(4 b) - 2 sqrt(3) sin(2 b) + 10 cos(2 b)
 + sqrt(3) sin(4 a) - cos(4 a) - 2 sqrt(3) sin(2 a) + 10 cos(2 a)
 - 9)/4
@end group
@end example

@end deffn
