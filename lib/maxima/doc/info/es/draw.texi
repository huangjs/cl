@c version 1.44
@menu
* Introducci@'on a draw::
* Funciones y variables para draw::
* Funciones y variables para picture::
* Funciones y variables para worldmap::
@end menu





@node Introducci@'on a draw, Funciones y variables para draw, draw, draw
@section Introducci@'on a draw


@code{draw} es un interfaz para comunicar Maxima con Gnuplot.

Tres son las funciones principales a utilizar a nivel de Maxima: 
@code{draw2d}, @code{draw3d} y @code{draw}.

S@'{@dotless{i}}gase este enlace para ver ejemplos m@'as elaborados
de este paquete:

@url{http://www.telefonica.net/web2/biomates/maxima/gpdraw}

Se necesita tener instalado Gnuplot 4.2 para ejecutar este paquete.





@node Funciones y variables para draw, Funciones y variables para picture, Introducci@'on a draw, draw
@section Funciones y variables para draw


@defvr {Opci@'on gr@'afica} proportional_axes
Valor por defecto: @code{none}

Cuando @code{proportional_axes} es igual a @code{xy}, una escena
2D se dibujar@'a con los ejes proporcionales a sus longitudes relativas.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Esta opci@'on s@'olo funciona para gr@'aficos 2D. Una vez se haya
liberado la versi@'on 4.3 de Gnuplot, se extender@'a
@code{proportional_axes} a los gr@'aficos 3D.

Ejemplos:

Gr@'afico sencillo.

@example
(%i1) load(draw)$
(%i2) draw2d(
        ellipse(0,0,1,1,0,360),
        transparent=true,
        color = blue,
        line_width = 4,
        ellipse(0,0,2,1/2,0,360),
        proportional_axes = xy) $
@end example

Multiplot.

@example
(%i1) load(draw)$
(%i2) draw(
        terminal = wxt,
        gr2d(proportional_axes = xy,
             explicit(x^2,x,0,1)),
        gr2d(explicit(x^2,x,0,1),
             xrange = [0,1],
             yrange = [0,2],
             proportional_axes=xy),
        gr2d(explicit(x^2,x,0,1))
@end example

@end defvr




@defvr {Opci@'on gr@'afica} xrange
Valor por defecto: @code{auto}

Cuando @code{xrange} vale @code{auto}, el rango de la coordenada @var{x}
se calcula de forma autom@'atica.

Si el usuario quiere especificar un intervalo para @var{x}, @'este debe
expresarse como una lista de Maxima, como en @code{xrange=[-2, 3]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange = [-3,5],
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{yrange} y @code{zrange}.
@end defvr



@defvr {Opci@'on gr@'afica} xrange_secondary
Valor por defecto: @code{auto}

Cuando @code{xrange_secondary} vale @code{auto}, el rango del eje @var{x}
secundario se calcula de forma autom@'atica.

Si el usuario quiere especificar un intervalo para el eje @var{x} secundario, @'este debe
expresarse como una lista de Maxima, como en @code{xrange_secondary=[-2, 3]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

V@'eanse tambi@'en @code{xrange}, @code{yrange}, @code{zrange} y @code{yrange_secondary}.
@end defvr



@defvr {Opci@'on gr@'afica} yrange
Valor por defecto: @code{auto}

Cuando @code{yrange} vale @code{auto}, el rango de la coordenada @var{y}
se calcula de forma autom@'atica.

Si el usuario quiere especificar un intervalo para @var{y}, @'este debe
expresarse como una lista de Maxima, como en @code{yrange=[-2, 3]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(yrange = [-2,3],
             explicit(x^2,x,-1,1),
             xrange = [-3,3])$
@end example

V@'eanse tambi@'en @code{xrange} y @code{zrange}.
@end defvr


@defvr {Opci@'on gr@'afica} yrange_secondary
Valor por defecto: @code{auto}

Cuando @code{yrange_secondary} vale @code{auto}, el rango del eje @var{y}
secundario se calcula de forma autom@'atica.

Si el usuario quiere especificar un intervalo para el eje @var{y} secundario, @'este debe
expresarse como una lista de Maxima, como en @code{yrange_secondary=[-2, 3]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(
         explicit(sin(x),x,0,10),
         yaxis_secondary = true,
         ytics_secondary = true,
         yrange = [-3, 3],
         yrange_secondary = [-20, 20],
         color = blue,
         explicit(100*sin(x+0.1)+2,x,0,10)) $
@end example

V@'eanse tambi@'en @code{xrange}, @code{yrange} y @code{zrange}.
@end defvr



@defvr {Opci@'on gr@'afica} zrange
Valor por defecto: @code{auto}

Cuando @code{zrange} vale @code{auto}, el rango de la coordenada @var{z}
se calcula de forma autom@'atica.

Si el usuario quiere especificar un intervalo para @var{z}, @'este debe
expresarse como una lista de Maxima, como en @code{zrange=[-2, 3]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(yrange = [-3,3],
             zrange = [-2,5],
             explicit(x^2+y^2,x,-1,1,y,-1,1),
             xrange = [-3,3])$
@end example

V@'eanse tambi@'en @code{xrange} y @code{yrange}.
@end defvr



@defvr {Opci@'on gr@'afica} cbrange
Valor por defecto: @code{auto}

Cuando @code{cbrange} vale @code{auto}, el rango de los valores que se
colorean cuando @code{enhanced3d} es diferente de @code{false} se calcula
autom@'aticamente. Valores fuera del rango utilizan el color del valor
extremo m@'as cercano.

Cuando @code{enhanced3d} o @code{colorbox} vale @code{false}, la 
opci@'on @code{cbrange} no tiene efecto alguno.

Si el usuario quiere especificar un intervalo para los valores a colorear,
@'este debe expresarse como una lista de Maxima, como en @code{cbrange=[-2, 3]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d (
        enhanced3d     = true,
        color          = green,
        cbrange = [-3,10],
        explicit(x^2+y^2, x,-2,2,y,-2,2)) $
@end example

V@'eanse tambi@'en @code{enhanced3d} y @code{cbtics}.
@end defvr



@defvr {Opci@'on gr@'afica} logx
Valor por defecto: @code{false}

Cuando @code{logx} vale @code{true}, el eje @var{x} se dibuja
en la escala logar@'{@dotless{i}}tmica.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(log(x),x,0.01,5),
             logx = true)$
@end example

V@'eanse tambi@'en @code{logy} y @code{logz}.
@end defvr



@defvr {Opci@'on gr@'afica} logy
Valor por defecto: @code{false}

Cuando @code{logy} vale @code{true}, el eje @var{y} se dibuja
en la escala logar@'{@dotless{i}}tmica.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(logy = true,
             explicit(exp(x),x,0,5))$
@end example

V@'eanse tambi@'en @code{logx} y @code{logz}.
@end defvr



@defvr {Opci@'on gr@'afica} logz
Valor por defecto: @code{false}

Cuando @code{logz} vale @code{true}, el eje @var{z} se dibuja
en la escala logar@'{@dotless{i}}tmica.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(logz = true,
             explicit(exp(u^2+v^2),u,-2,2,v,-2,2))$
@end example

V@'eanse tambi@'en @code{logx} y @code{logy}.
@end defvr



@defvr {Opci@'on gr@'afica} logcb
Valor por defecto: @code{false}

Cuando @code{logcb} vale @code{true}, la escala de colores se dibuja 
logar@'{@dotless{i}}tmicamente.

Cuando @code{enhanced3d} o @code{colorbox} vale @code{false}, la 
opci@'on @code{logcb} no tiene efecto alguno.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d (
        enhanced3d = true,
        color      = green,
        logcb = true,
        logz  = true,
        palette = [-15,24,-9],
        explicit(exp(x^2-y^2), x,-2,2,y,-2,2)) $
@end example

V@'eanse tambi@'en @code{enhanced3d}, @code{colorbox} y @code{cbrange}.
@end defvr



@defvr {Opci@'on gr@'afica} terminal
Valor por defecto: @code{screen}

Selecciona el terminal a utilizar por Gnuplot; valores posibles son:
@code{screen} (por defecto), @code{png}, @code{jpg}, @code{eps}, @code{eps_color},
@code{pdf}, @code{pdfcairo}, @code{gif}, @code{animated_gif}, @code{wxt} y @code{aquaterm}.

Los terminales @code{screen}, @code{wxt} y @code{aquaterm} tambi@'en se pueden 
definir como una lista de dos elementos: el propio nombre del terminal y un 
n@'umero entero no negativo. De esta forma se pueden abrir varias ventanas al
mismo tiempo, cada una de ellas con su n@'umero correspondiente. Esta modalidad
no funciona en plataformas Windows.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

pdfcairo necesita Gnuplot 4.3. Actualmente (Nov 2008) Gnuplot 4.3 es una versi@'on en desarrollo.
pdf necesita que Gnuplot 4.2/4.3 haya sido compilado con la opci@'on @code{--enable-pdf} y libpdf debe
estar instalado (@url{http://www.pdflib.com/en/download/pdflib-family/pdflib-lite/}).

Ejemplos:

@example
(%i1) load(draw)$
(%i2) /* screen terminal (default) */
      draw2d(explicit(x^2,x,-1,1))$
(%i3) /* png file */
      draw2d(terminal  = 'png,
             pic_width = 300,
             explicit(x^2,x,-1,1))$
(%i4) /* jpg file */
      draw2d(terminal   = 'jpg,
             pic_width  = 300,
             pic_height = 300,
             explicit(x^2,x,-1,1))$
(%i5) /* eps file */
      draw2d(file_name = "myfile",
             explicit(x^2,x,-1,1),
             terminal  = 'eps)$
(%i6) /* pdf file */
      draw2d(file_name = "mypdf",
             pdf_width = 12.0,
             pdf_height = 8.0,
             explicit(x^2,x,-1,1),
             terminal  = 'pdf)$
(%i7) /* wxwidgets window */
      draw2d(explicit(x^2,x,-1,1),
             terminal  = 'wxt)$
@end example

Ventanas m@'ultiples.
@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^5,x,-2,2), terminal=[screen, 3])$
(%i3) draw2d(explicit(x^2,x,-2,2), terminal=[screen, 0])$
@end example

Un fichero gif animado.
@example
(%i1) load(draw)$
(%i2) draw(
        delay     = 100,
        file_name = "zzz",
        terminal  = 'animated_gif,
        gr2d(explicit(x^2,x,-1,1)),
        gr2d(explicit(x^3,x,-1,1)),
        gr2d(explicit(x^4,x,-1,1)));
End of animation sequence
(%o2)          [gr2d(explicit), gr2d(explicit), gr2d(explicit)]
@end example

La opci@'on @code{delay} s@'olo se activa en caso de gifs animados; se ignora en
cualquier otro caso.

V@'eanse tambi@'en @code{file_name}, @code{pic_width}, @code{pic_height} y @code{delay}.
@end defvr



@defvr {Opci@'on gr@'afica} font
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

Esta opci@'on permite seleccionar el tipo de fuente a utilizar por el
terminal. S@'olo se puede utilizar un tipo de fuente y tama@~no por
gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

V@'ease tambi@'en @code{font_size}.

Gnuplot no puede gestionar por s@'{@dotless{i}} mismo las fuentes,
dejando esta tarea a las librer@'{@dotless{i}}as que dan soporte a los
diferentes terminales, cada uno con su propia manera de controlar
la tipograf@'{@dotless{i}}a. A continuaci@'on un breve resumen:

@itemize @bullet
@item
@i{x11}:
Utiliza el mecanismo habitual para suministrar las fuentes en x11.

Ejemplo:
@example
(%i1) load(draw)$
(%i2) draw2d(font      = "Arial", 
             font_size = 20,
             label(["Arial font, size 20",1,1]))$
@end example

@item
@i{windows}:
El terminal de windows no permite cambiar fuentes desde dentro
del gr@'afico. Una vez se ha creado el gr@'afico, se pueden cambiar las
fuentes haciendo clic derecho en el men@'u de la ventana gr@'afica.

@item
@i{png, jpeg, gif}:
La librer@'{@dotless{i}}a @i{libgd} utiliza la ruta a las fuentes
almacenada en la variable de entorno @code{GDFONTPATH}; en tal caso
s@'olo es necesario darle a la opci@'on @code{font} el nombre de la
fuente. Tambi@'en es posible darle la ruta completa al fichero de la fuente.

Ejemplos:

A la opci@'on @code{font} se le puede dar la ruta completa al fichero de la fuente:
@example
(%i1) load(draw)$
(%i2) path: "/usr/share/fonts/truetype/freefont/" $
(%i3) file: "FreeSerifBoldItalic.ttf" $
(%i4) draw2d(
        font      = concat(path, file), 
        font_size = 20,
        color     = red,
        label(["FreeSerifBoldItalic font, size 20",1,1]),
        terminal  = png)$
@end example

Si la variable de entorno @code{GDFONTPATH} almacena la ruta
a la carpeta donde se alojan las fuentes, es posible darle a la
opci@'on @code{font} s@'olo el nombre de la fuente:
@example
(%i1) load(draw)$
(%i2) draw2d(
        font      = "FreeSerifBoldItalic", 
        font_size = 20,
        color     = red,
        label(["FreeSerifBoldItalic font, size 20",1,1]),
        terminal  = png)$
@end example

@item
@i{Postscript}:
Las fuentes est@'andar de Postscript son: @code{"Times-Roman"}, @code{"Times-Italic"}, @code{"Times-Bold"}, @code{"Times-BoldItalic"}, @code{"Helvetica"}, @code{"Helvetica-Oblique"}, @code{"Helvetica-Bold"}, @code{"Helvetic-BoldOblique"}, @code{"Courier"}, @code{"Courier-Oblique"}, @code{"Courier-Bold"} y @code{"Courier-BoldOblique"}.
  
Ejemplo:
@example
(%i1) load(draw)$
(%i2) draw2d(
        font      = "Courier-Oblique", 
        font_size = 15,
        label(["Courier-Oblique font, size 15",1,1]),
        terminal = eps)$
@end example

@item
@i{pdf}:
Utiliza las mismas fuentes que @i{Postscript}.

@item
@i{pdfcairo}:
Utiliza las mismas fuentes que @i{wxt}.

@item
@i{wxt}:
La librer@'{@dotless{i}}a @i{pango} encuentra las fuentes por medio de la utilidad @code{fontconfig}.

@item
@i{aqua}:
La fuente por defecto es @code{"Times-Roman"}.
@end itemize

La documentaci@'on de gnuplot es una importante fuente de informaci@'on sobre terminales y fuentes.
@end defvr



@defvr {Opci@'on gr@'afica} font_size
Valor por defecto: 12

Esta opci@'on permite seleccionar el tama@~no de la fuente a utilizar por el
terminal. S@'olo se puede utilizar un tipo de fuente y tama@~no por
gr@'afico. @code{font_size} s@'olo se activa cuando la opci@'on @code{font}
tiene un valor diferente de la cadena vac@'{@dotless{i}}a.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

V@'ease tambi@'en @code{font}.
@end defvr



@defvr {Opci@'on gr@'afica} grid
Valor por defecto: @code{false}

Cuando @code{grid} vale @code{true}, se dibujar@'a una rejilla sobre el
plano @var{xy}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(grid = true,
             explicit(exp(u),u,-2,2))$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} title
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

La opci@'on @code{title} almacena una cadena con el 
t@'{@dotless{i}}tulo de la escena. Por defecto, no se escribe
t@'{@dotless{i}}tulo alguno.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(exp(u),u,-2,2),
             title = "Exponential function")$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} xlabel
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

La opci@'on @code{xlabel} almacena una cadena con la
etiqueta del eje @var{x}. Por defecto, el eje no tiene etiqueta.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xlabel = "Time",
             explicit(exp(u),u,-2,2),
             ylabel = "Population")$
@end example

V@'eanse tambi@'en @code{ylabel} y @code{zlabel}.
@end defvr



@defvr {Opci@'on gr@'afica} ylabel
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

La opci@'on @code{ylabel} almacena una cadena con la
etiqueta del eje @var{y}. Por defecto, el eje no tiene etiqueta.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xlabel = "Time",
             ylabel = "Population",
             explicit(exp(u),u,-2,2) )$
@end example

V@'eanse tambi@'en @code{xlabel} y @code{zlabel}.
@end defvr



@defvr {Opci@'on gr@'afica} zlabel
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

La opci@'on @code{zlabel} almacena una cadena con la
etiqueta del eje @var{z}. Por defecto, el eje no tiene etiqueta.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(zlabel = "Z variable",
             ylabel = "Y variable",
             explicit(sin(x^2+y^2),x,-2,2,y,-2,2),
             xlabel = "X variable" )$
@end example

V@'eanse tambi@'en @code{xlabel} y @code{ylabel}.
@end defvr



@defvr {Opci@'on gr@'afica} xtics
Valor por defecto: @code{auto}

Esta opci@'on gr@'afica controla la forma en la que se dibujar@'an las marcas
del eje @var{x}.

@itemize @bullet
@item
Cuando a @code{xtics} se le da el valor @var{auto}, las marcas se dibujar@'an de
forma autom@'atica.

@item
Cuando a @code{xtics} se le da el valor @var{none}, no habr@'a marcas en los ejes.

@item
Cuando a @code{xtics} se le da un valor num@'erico positivo, se interpretar@'a como la
distancia entre dos marcas consecutivas.

@item
Cuando a @code{xtics} se le da una lista de longitud tres de la forma 
@code{[start,incr,end]}, las marcas se dibujar@'an desde @code{start} 
hasta @code{end} a intervalos de longitud @code{incr}.

@item
Cuando a @code{xtics} se le da un conjunto de n@'umeros de la forma
@code{@{n1, n2, ...@}}, las marcas se dibujar@'an exactamente en los valores
@code{n1}, @code{n2}, ...

@item
Cuando a @code{xtics} se le da un conjunto de pares de la forma
@code{@{["label1", n1], ["label2", n2], ...@}}, las marcas correspondientes a los valores
@code{n1}, @code{n2}, ... se etiquetar@'an con @code{"label1"}, @code{"label2"}, ..., respectivamente.
@end itemize

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplos:

Marcas desactivadas.
@example
(%i1) load(draw)$
(%i2) draw2d(xtics = 'none,
             explicit(x^3,x,-1,1)  )$
@end example

Marcas cada 1/4 unidades.
@example
(%i1) load(draw)$
(%i2) draw2d(xtics = 1/4,
             explicit(x^3,x,-1,1)  )$
@end example

Marcas desde -3/4 hasta 3/4 en saltos de 1/8.
@example
(%i1) load(draw)$
(%i2) draw2d(xtics = [-3/4,1/8,3/4],
             explicit(x^3,x,-1,1)  )$
@end example

Marcas en los puntos -1/2, -1/4 y 3/4.
@example
(%i1) load(draw)$
(%i2) draw2d(xtics = @{-1/2,-1/4,3/4@},
             explicit(x^3,x,-1,1)  )$
@end example

Marcas etiquetadas.
@example
(%i1) load(draw)$
(%i2) draw2d(xtics = @{["High",0.75],["Medium",0],["Low",-0.75]@},
             explicit(x^3,x,-1,1)  )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} xtics_secondary
Valor por defecto: @code{auto}

Esta opci@'on gr@'afica controla la forma en la que se dibujar@'an las marcas
del eje @var{x} secundario.

V@'ease @code{xtics} para una descripci@'on completa.
@end defvr



@defvr {Opci@'on gr@'afica} ytics
Valor por defecto: @code{auto}

Esta opci@'on gr@'afica controla la forma en la que se dibujar@'an las marcas
del eje @var{y}.

V@'ease @code{xtics} para una descripci@'on completa.
@end defvr



@defvr {Opci@'on gr@'afica} ytics_secondary
Valor por defecto: @code{auto}

Esta opci@'on gr@'afica controla la forma en la que se dibujar@'an las marcas
del eje @var{y} secundario.

V@'ease @code{xtics} para una descripci@'on completa.
@end defvr



@defvr {Opci@'on gr@'afica} ztics
Valor por defecto: @code{auto}

Esta opci@'on gr@'afica controla la forma en la que se dibujar@'an las marcas
del eje @var{z}.

V@'ease @code{xtics} para una descripci@'on completa.
@end defvr



@defvr {Opci@'on gr@'afica} cbtics
Valor por defecto: @code{auto}

Esta opci@'on gr@'afica controla la forma en la que se dibujar@'an
las marcas en la escala de color cuando la opci@'on @code{enhanced3d}
sea diferente de @code{false}.

Cuando @code{enhanced3d} o @code{colorbox} vale @code{false}, la 
opci@'on @code{cbtics} no tiene efecto alguno.

V@'ease @code{xtics} para una descripci@'on completa.

Ejemplo :

@example
(%i1) load(draw)$
(%i2) draw3d (
        enhanced3d = true,
        color      = green,
        cbtics  = @{["High",10],["Medium",05],["Low",0]@},
        cbrange = [0, 10],
        explicit(x^2+y^2, x,-2,2,y,-2,2)) $
@end example

See also @code{enhanced3d}, @code{colorbox} and @code{cbrange}.
@end defvr


@defvr {Opci@'on gr@'afica} xtics_rotate
Valor por defecto: @code{false}

Si @code{xtics_rotate} vale @code{true}, las marcas del eje @var{x} se giran 
90 grados.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} xtics_rotate_secondary
Valor por defecto: @code{false}

Si @code{xtics_rotate_secondary} vale @code{true}, las marcas del eje @var{x} 
secundario se giran 90 grados.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} ytics_rotate
Valor por defecto: @code{false}

Si @code{ytics_rotate} vale @code{true}, las marcas del eje @var{y} se giran 
90 grados.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} ytics_rotate_secondary
Valor por defecto: @code{false}

Si @code{ytics_rotate_secondary} vale @code{true}, las marcas del eje @var{y} 
secundario se giran 90 grados.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} ztics_rotate
Valor por defecto: @code{false}

Si @code{ztics_rotate} vale @code{true}, las marcas del eje @var{z} se giran 
90 grados.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} xtics_axis
Valor por defecto: @code{false}

Si @code{xtics_axis} vale @code{true}, las marcas y sus etiquetas se dibujan sobre
el propio eje @var{x}, si vale @code{false} las marcas se colocan a lo largo del borde
del gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} xtics_secondary_axis
Valor por defecto: @code{false}

Si @code{xtics_secondary_axis} vale @code{true}, las marcas y sus etiquetas se dibujan sobre
el propio eje @var{x} secundario, si vale @code{false} las marcas se colocan a lo largo del borde
del gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} ytics_axis
Valor por defecto: @code{false}

Si @code{ytics_axis} vale @code{true}, las marcas y sus etiquetas se dibujan sobre
el propio eje @var{y}, si vale @code{false} las marcas se colocan a lo largo del borde
del gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} ytics_secondary_axis
Valor por defecto: @code{false}

Si @code{ytics_secondary_axis} vale @code{true}, las marcas y sus etiquetas se dibujan sobre
el propio eje @var{y} secundario, si vale @code{false} las marcas se colocan a lo largo del borde
del gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} ztics_axis
Valor por defecto: @code{false}

Si @code{ztics_axis} vale @code{true}, las marcas y sus etiquetas se dibujan sobre
el propio eje @var{z}, si vale @code{false} las marcas se colocan a lo largo del borde
del gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr


@defvr {Opci@'on gr@'afica} xaxis
Valor por defecto: @code{false}

Si @code{xaxis} vale @code{true}, se dibujar@'a el eje @var{x}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             xaxis       = true,
             xaxis_color = blue)$
@end example

V@'eanse tambi@'en @code{xaxis_width}, @code{xaxis_type} y @code{xaxis_color}.
@end defvr


@defvr {Opci@'on gr@'afica} xaxis_secondary
Valor por defecto: @code{false}

Si @code{xaxis_secondary} vale @code{true}, los valores de las funciones se pueden representar
respecto del eje @var{x} secundario, el cual se dibuja en la parte superior de la escena.

N@'otese que esta es una opci@'on gr@'afica local que s@'olo afecta a objetos 2d.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(
         key   = "Bottom x-axis",
         explicit(x+1,x,1,2),
         color = red,
         key   = "Above x-axis",
         xtics_secondary = true,
         xaxis_secondary = true,
         explicit(x^2,x,-1,1)) $
@end example

V@'eanse tambi@'en @code{xrange_secondary}, @code{xtics_secondary}, @code{xtics_rotate_secondary},
@code{xtics_axis_secondary} y @code{xaxis_secondary}.

@end defvr



@defvr {Opci@'on gr@'afica} xaxis_width
Valor por defecto: 1

@code{xaxis_width} es el ancho del eje @var{x}.
Su valor debe ser un n@'umero positivo.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             xaxis       = true,
             xaxis_width = 3)$
@end example

V@'eanse tambi@'en @code{xaxis}, @code{xaxis_type} y @code{xaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} xaxis_type
Valor por defecto: @code{dots}

@code{xaxis_type} indica c@'omo se debe dibujar el eje @var{x}; 
valores admisibles son @code{solid} y @code{dots}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             xaxis       = true,
             xaxis_type  = solid)$
@end example

V@'eanse tambi@'en @code{xaxis}, @code{xaxis_width} y @code{xaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} xaxis_color
Valor por defecto: @code{"black"}

@code{xaxis_color} especifica el color para el eje @var{x}. V@'ease
@code{color} para ver c@'omo se definen los colores.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             xaxis       = true,
             xaxis_color = red)$
@end example

V@'eanse tambi@'en @code{xaxis}, @code{xaxis_width} y @code{xaxis_type}.
@end defvr



@defvr {Opci@'on gr@'afica} yaxis
Valor por defecto: @code{false}

Si @code{yaxis} vale @code{true}, se dibujar@'a el eje @var{y}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             yaxis       = true,
             yaxis_color = blue)$
@end example

V@'eanse tambi@'en @code{yaxis_width}, @code{yaxis_type} y @code{yaxis_color}.
@end defvr


@defvr {Opci@'on gr@'afica} yaxis_secondary
Valor por defecto: @code{false}

Si @code{yaxis_secondary} vale @code{true}, los valores de las funciones se pueden representar
respecto del eje @var{y} secundario, el cual se dibuja al lado derecho de la escena.

N@'otese que esta es una opci@'on gr@'afica local que s@'olo afecta a objetos 2d.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(
         explicit(sin(x),x,0,10),
         yaxis_secondary = true,
         ytics_secondary = true,
         color = blue,
         explicit(100*sin(x+0.1)+2,x,0,10));
@end example

V@'eanse tambi@'en @code{yrange_secondary}, @code{ytics_secondary}, @code{ytics_rotate_secondary}
y @code{ytics_axis_secondary}.

@end defvr


@defvr {Opci@'on gr@'afica} yaxis_width
Valor por defecto: 1

@code{yaxis_width} es el ancho del eje @var{y}.
Su valor debe ser un n@'umero positivo.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             yaxis       = true,
             yaxis_width = 3)$
@end example

V@'eanse tambi@'en @code{yaxis}, @code{yaxis_type} y @code{yaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} yaxis_type
Valor por defecto: @code{dots}

@code{yaxis_type} indica c@'omo se debe dibujar el eje @var{y}; 
valores admisibles son @code{solid} y @code{dots}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             yaxis       = true,
             yaxis_type  = solid)$
@end example

V@'eanse tambi@'en @code{yaxis}, @code{yaxis_width} y @code{yaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} yaxis_color
Valor por defecto: @code{"black"}

@code{yaxis_color} especifica el color para el eje @var{y}. V@'ease
@code{color} para ver c@'omo se definen los colores.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^3,x,-1,1),
             yaxis       = true,
             yaxis_color = red)$
@end example

V@'eanse tambi@'en @code{yaxis}, @code{yaxis_width} y @code{yaxis_type}.
@end defvr



@defvr {Opci@'on gr@'afica} zaxis
Valor por defecto: @code{false}

Si @code{zaxis} vale @code{true}, se dibujar@'a el eje @var{z} en
escenas 3D. Esta opci@'on no tiene efecto alguno en escenas 2D.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(x^2+y^2,x,-1,1,y,-1,1),
             zaxis       = true,
             zaxis_type  = solid,
             zaxis_color = blue)$
@end example

V@'eanse tambi@'en @code{zaxis_width}, @code{zaxis_type} y @code{zaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} zaxis_width
Valor por defecto: 1

@code{zaxis_width} es el ancho del eje @var{z}.
Su valor debe ser un n@'umero positivo. Esta opci@'on no tiene efecto alguno en escenas 2D.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(x^2+y^2,x,-1,1,y,-1,1),
             zaxis       = true,
             zaxis_type  = solid,
             zaxis_width = 3)$
@end example

V@'eanse tambi@'en @code{zaxis}, @code{zaxis_type} y @code{zaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} zaxis_type
Valor por defecto: @code{dots}

@code{zaxis_type} indica c@'omo se debe dibujar el eje @var{z}; 
valores admisibles son @code{solid} y @code{dots}.
Esta opci@'on no tiene efecto alguno en escenas 2D.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(x^2+y^2,x,-1,1,y,-1,1),
             zaxis       = true,
             zaxis_type  = solid)$
@end example

V@'eanse tambi@'en @code{zaxis}, @code{zaxis_width} y @code{zaxis_color}.
@end defvr



@defvr {Opci@'on gr@'afica} zaxis_color
Valor por defecto: @code{"black"}

@code{zaxis_color} especifica el color para el eje @var{z}. V@'ease
@code{color} para ver c@'omo se definen los colores.
Esta opci@'on no tiene efecto alguno en escenas 2D.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(x^2+y^2,x,-1,1,y,-1,1),
             zaxis       = true,
             zaxis_type  = solid,
             zaxis_color = red)$
@end example

V@'eanse tambi@'en @code{zaxis}, @code{zaxis_width} y @code{zaxis_type}.
@end defvr



@defvr {Graphic option} xyplane
Valor por defecto: @code{false}

Coloca el plano-xy en escenas 3D. Si @code{xyplane} vale @code{false},
el plano-xy se coloca autom@'aticamente; en cambio, si toma un
valor real, el plano-xy intersectar@'a con el eje @var{z} a ese nivel.
Esta opci@'on no tiene efecto alguno en escenas 2D.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(xyplane = %e-2,
             explicit(x^2+y^2,x,-1,1,y,-1,1))$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} rot_vertical
Valor por defecto: 60

@code{rot_vertical} es el @'angulo (en grados) de la rotaci@'on vertical
(alrededor del eje @var{x}) para situar el punto del observador en las
escenas 3d.

El @'angulo debe pertenecer al intervalo @math{[0, 180]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(rot_vertical = 170,
             explicit(sin(x^2+y^2),x,-2,2,y,-2,2) )$
@end example

V@'ease tambi@'en @code{rot_horizontal}.
@end defvr



@defvr {Opci@'on gr@'afica} rot_horizontal
Valor por defecto: 30

@code{rot_horizontal} es el @'angulo (en grados) de la rotaci@'on horizontal
(alrededor del eje @var{z}) para situar el punto del observador en las
escenas 3d.

El @'angulo debe pertenecer al intervalo @math{[0, 360]}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(rot_vertical = 170,
             rot_horizontal = 360,
             explicit(sin(x^2+y^2),x,-2,2,y,-2,2) )$
@end example

V@'ease tambi@'en @code{rot_vertical}.
@end defvr



@defvr {Opci@'on gr@'afica} xy_file
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

@code{xy_file} es el nombre del fichero donde se almacenar@'an las
coordenadas despu@'es de hacer clic con el bot@'on del rat@'on en un
punto de la imagen y pulsado la tecla 'x'. Por defecto, las 
coordenadas no se almacenan.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.
@end defvr



@defvr {Opci@'on gr@'afica} user_preamble
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

Usuarios expertos en Gnuplot pueden hacer uso de esta opci@'on para
afinar el comportamiento de Gnuplot escribiendo c@'odigo que ser@'a
enviado justo antes de la instrucci@'on @code{plot} o @code{splot}.

El valor dado a esta opci@'on debe ser una cadena alfanum@'erica o
una lista de cadenas (una por l@'{@dotless{i}}nea).

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

El terminal @i{dumb} no est@'a soportado por el paquete @code{draw},
pero es posible activarlo haciendo uso de la opci@'on @code{user_preamble},
@example
(%i1) load(draw)$
(%i2) draw2d(explicit(exp(x)-1,x,-1,1),
             parametric(cos(u),sin(u),u,0,2*%pi),
             user_preamble="set terminal dumb")$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} file_name
Valor por defecto: @code{"maxima_out"}

@code{file_name} es el nombre del fichero en el que los terminales @code{png}, 
@code{jpg}, @code{eps}, @code{pdf} and @code{pdfcairo} y @code{eps_color}
guardar@'an el gr@'afico.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(file_name = "myfile",
             explicit(x^2,x,-1,1),
             terminal  = 'png)$
@end example

V@'eanse tambi@'en @code{terminal}, @code{pic_width} y @code{pic_height}.
@end defvr


@defvr {Opci@'on gr@'afica} gnuplot_file_name
Valor por defecto: @code{"maxout.gnuplot"}

@code{gnuplot_file_name} es el nombre del fichero que 
almacena las instrucciones a ser procesadas por Gnuplot.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(
       file_name = "my_file",
       gnuplot_file_name = "my_commands_for_gnuplot",
       data_file_name    = "my_data_for_gnuplot",
       terminal          = png,
       explicit(x^2,x,-1,1)) $
@end example

V@'ease tambi@'en @code{data_file_name}.

@end defvr


@defvr {Opci@'on gr@'afica} data_file_name
Valor por defecto: @code{"data.gnuplot"}

@code{data_file_name} es el nombre del fichero que almacena
la informaci@'on num@'erica que necesita Gnuplot para crear
el gr@'afico solicitado.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

V@'ease ejemplo en @code{gnuplot_file_name}.

@end defvr



@defvr {Opci@'on gr@'afica} file_bgcolor
Valor por defecto: @code{"xffffff"}

Establece el color de fondo en los terminales png, jpg y gif. 
Los colores deben definirse en c@'odigo hexadecimal @i{rgb}.
Nombres de colores no est@'an permitidos. El color de fondo
por defecto es blanco.
@end defvr



@defvr {Opci@'on gr@'afica} delay
Valor por defecto: 5

Este es el retraso en cent@'esimas de segundo entre im@'agenes
en los ficheros gif animados.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw(
        delay     = 100,
        file_name = "zzz",
        terminal  = 'animated_gif,
        gr2d(explicit(x^2,x,-1,1)),
        gr2d(explicit(x^3,x,-1,1)),
        gr2d(explicit(x^4,x,-1,1)));
End of animation sequence
(%o2)          [gr2d(explicit), gr2d(explicit), gr2d(explicit)]
@end example

La opci@'ob @code{delay} s@'olo se activa en caso de gifs animados; se ignora en
cualquier otro caso.

See also @code{terminal}, @code{pic_width}, and @code{pic_height}.
@end defvr

@defvr {Opci@'on gr@'afica} pic_width
Valor por defecto: 640

@code{pic_width} es la anchura del fichero de imagen de bits generado por
los terminales @code{png} y @code{jpg}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal   = 'png,
             pic_width  = 300,
             pic_height = 300,
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{terminal}, @code{file_name} y @code{pic_height}.
@end defvr



@defvr {Opci@'on gr@'afica} pic_height
Valor por defecto: 640

@code{pic_height} es la altura del fichero de imagen de bits generado por
los terminales @code{png} y @code{jpg}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal   = 'png,
             pic_width  = 300,
             pic_height = 300,
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{terminal}, @code{file_name} y @code{pic_width}.
@end defvr


@defvr {Opci@'on gr@'afica} eps_width
Valor por defecto: 12

@code{eps_width} es el ancho (medido en cm) del archivo Postscript
generado por los terminales @code{eps} y @code{eps_color}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal   = 'eps,
             eps_width  = 3,
             eps_height = 3,
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{terminal}, @code{file_name} y @code{eps_height}.
@end defvr



@defvr {Opci@'on gr@'afica} eps_height
Valor por defecto: 8

@code{eps_height} es la altura (medida en cm) del archivo Postscript
generado por los terminales @code{eps} y @code{eps_color}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal   = 'eps,
             eps_width  = 3,
             eps_height = 3,
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{terminal}, @code{file_name} y @code{eps_width}.
@end defvr



@defvr {Opci@'on gr@'afica} pdf_width
Valor por defecto: 21.0 (ancho A4)

Es el ancho (medida en cm) del documento PDF generado por los
terminales @code{pdf} y @code{pdfcairo}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal   = 'pdf,
             pdf_width  = 3.0,
             pdf_height = 3.0,
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{terminal}, @code{file_name} y @code{pdf_height}.
@end defvr



@defvr {Opci@'on gr@'afica} pdf_height
Valor por defecto: 29.7 (alto A4)

Es el alto (medida en cm) del documento PDF generado por los
terminales @code{pdf} y @code{pdfcairo}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal   = 'pdf,
             pdf_width  = 3.0,
             pdf_height = 3.0,
             explicit(x^2,x,-1,1))$
@end example

V@'eanse tambi@'en @code{terminal}, @code{file_name} y @code{pdf_width}.
@end defvr



@defvr {Opci@'on gr@'afica} axis_bottom
Valor por defecto: @code{true}

Cuando @code{axis_bottom} vale @code{true}, el eje inferior permanece visible en las escenas 2d.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(axis_bottom = false,
             explicit(x^3,x,-1,1))$
@end example

V@'eanse tambi@'en @code{axis_left},  @code{axis_top}, @code{axis_right} y @code{axis_3d}.
@end defvr



@defvr {Opci@'on gr@'afica} axis_left
Valor por defecto: @code{true}

Cuando @code{axis_left} vale @code{true}, el eje izquierdo permanece visible en las escenas 2d.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(axis_left = false,
             explicit(x^3,x,-1,1))$
@end example

V@'eanse tambi@'en @code{axis_bottom},  @code{axis_top}, @code{axis_right} y @code{axis_3d}.
@end defvr



@defvr {Opci@'on gr@'afica} axis_top
Valor por defecto: @code{true}

Cuando @code{axis_top} vale @code{true}, el eje superior permanece visible en las escenas 2d.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(axis_top = false,
             explicit(x^3,x,-1,1))$
@end example

V@'eanse tambi@'en @code{axis_bottom},  @code{axis_left}, @code{axis_right} y @code{axis_3d}.
@end defvr



@defvr {Opci@'on gr@'afica} axis_right
Valor por defecto: @code{true}

Cuando @code{axis_right} vale @code{true}, el eje derecho permanece visible en las escenas 2d.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(axis_right = false,
             explicit(x^3,x,-1,1))$
@end example

V@'eanse tambi@'en @code{axis_bottom},  @code{axis_left}, @code{axis_top} y @code{axis_3d}.
@end defvr



@defvr {Opci@'on gr@'afica} axis_3d
Valor por defecto: @code{true}

Cuando @code{axis_3d} vale @code{true}, los ejes @var{x}, @var{y} y @var{z}
permanecen visibles en las escenas 3d.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(axis_3d = false,
             explicit(sin(x^2+y^2),x,-2,2,y,-2,2) )$
@end example

V@'eanse tambi@'en @code{axis_bottom},  @code{axis_left}, @code{axis_top} y @code{axis_right} for axis in 2d.
@end defvr



@defvr {Opci@'on gr@'afica} palette
Valor por defecto: @code{color}

@code{palette} indica c@'omo transformar los valores reales de una
matriz pasada al objeto @code{image} en componentes crom@'aticas.

@code{palette} es un vector de longitud tres con sus componentes tomando
valores enteros en el rango desde -36 a +36; cada valor es un 
@'{@dotless{i}}ndice para seleccionar una f@'ormula que transforma los niveles
num@'ericos en las componentes crom@'aticas rojo, verde y azul:
@example
 0: 0               1: 0.5           2: 1
 3: x               4: x^2           5: x^3
 6: x^4             7: sqrt(x)       8: sqrt(sqrt(x))
 9: sin(90x)       10: cos(90x)     11: |x-0.5|
12: (2x-1)^2       13: sin(180x)    14: |cos(180x)|
15: sin(360x)      16: cos(360x)    17: |sin(360x)|
18: |cos(360x)|    19: |sin(720x)|  20: |cos(720x)|
21: 3x             22: 3x-1         23: 3x-2
24: |3x-1|         25: |3x-2|       26: (3x-1)/2
27: (3x-2)/2       28: |(3x-1)/2|   29: |(3x-2)/2|
30: x/0.32-0.78125 31: 2*x-0.84     32: 4x;1;-2x+1.84;x/0.08-11.5
33: |2*x - 0.5|    34: 2*x          35: 2*x - 0.5
36: 2*x - 1
@end example
los n@'umeros negativos se interpretan como colores invertidos
de las componentes crom@'aticas.

@code{palette = gray} y @code{palette = color} son atajos para
@code{palette = [3,3,3]} y @code{palette = [7,5,15]}, respectivamente.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplos:

@example
(%i1) load(draw)$
(%i2) im: apply(
           'matrix,
            makelist(makelist(random(200),i,1,30),i,1,30))$
(%i3) /* palette = color, default */
      draw2d(image(im,0,0,30,30))$
(%i4) draw2d(palette = gray, image(im,0,0,30,30))$
(%i5) draw2d(palette = [15,20,-4],
             colorbox=false,
             image(im,0,0,30,30))$
@end example

V@'ease tambi@'en @code{colorbox}.
@end defvr




@defvr {Opci@'on gr@'afica} colorbox
Valor por defecto: @code{true}

Cuando @code{colorbox} vale @code{true}, se dibuja una escala de color al
lado de los objetos @code{image}.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) im: apply('matrix,
                 makelist(makelist(random(200),i,1,30),i,1,30))$
(%i3) draw2d(image(im,0,0,30,30))$
(%i4) draw2d(colorbox=false, image(im,0,0,30,30))$
@end example

V@'ease tambi@'en @code{palette}.
@end defvr



@defvr {Opci@'on gr@'afica} enhanced3d
Valor por defecto: @code{false}

Si @code{enhanced3d} vale @code{false}, no se colorear@'an las superficies
de los gr@'aficos tridimensionales. Si @code{enhanced3d} vale @code{true},
las superficies se colorear@'an activando el modo pm3d de Gnuplot.
Si se da una expresi@'on a @code{enhanced3d}, @'esta se utilizar@'a
para asignar colores de acuerdo con el valor de la opci@'on @code{palette};
las variables de esta expresi@'on deben ser las mismas que luego se
utilicen para la descripci@'on de la superficie.

Ejemplos:

@example
(%i1) load(draw)$
(%i2) draw3d(
         surface_hide = true,
         enhanced3d   = true,
         palette      = gray,
         explicit(20*exp(-x^2-y^2)-10,x,-3,3,y,-3,3))$
(%i3) draw3d(
         surface_hide = true,
         /* mismas variables x e y que */
         /* en explicit mas abajo:     */
         enhanced3d   = sin(x*y),
         explicit(20*exp(-x^2-y^2)-10,x,-3,3,y,-3,3))$
(%i4) draw3d(
         color = blue,
         nticks = 60,
         line_width = 3,
         enhanced3d = (u-1)^2,
         parametric(cos(5*u)^2,sin(7*u),u-2,u,0,2))$
@end example
@end defvr


@defvr {Opci@'on gr@'afica} point_size
Valor por defecto: 1

@code{point_size} establece el tama@~no de los puntos dibujados. Debe
ser un n@'umero no negativo.

Esta opci@'on no tiene efecto alguno cuando a la opci@'on gr@'afica
@code{point_type} se le ha dado el valor @code{dot}.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{points}.

@item
@code{gr3d}: @code{points}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(
        points(makelist([random(20),random(50)],k,1,10)),
        point_size = 5,
        points(makelist(k,k,1,20),makelist(random(30),k,1,20)))$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} point_type
Valor por defecto: 1

@code{point_type} indica c@'omo se van a dibujar los puntos aislados. Los valores
para esta opci@'on pueden ser @'{@dotless{i}}ndices enteros mayores o iguales que -1,
o tambi@'en nombres de estilos: @code{$none} (-1), @code{dot} (0), @code{plus} (1),
@code{multiply} (2), @code{asterisk} (3), @code{square} (4), @code{filled_square} (5),
@code{circle} (6), @code{filled_circle} (7), @code{up_triangle} (8), 
@code{filled_up_triangle} (9), @code{down_triangle} (10), 
@code{filled_down_triangle} (11), @code{diamant} (12) y @code{filled_diamant} (13).

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{points}.

@item
@code{gr3d}: @code{points}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange = [0,10],
             yrange = [0,10],
             point_size = 3,
             point_type = diamant,
             points([[1,1],[5,1],[9,1]]),
             point_type = filled_down_triangle,
             points([[1,2],[5,2],[9,2]]),
             point_type = asterisk,
             points([[1,3],[5,3],[9,3]]),
             point_type = filled_diamant,
             points([[1,4],[5,4],[9,4]]),
             point_type = 5,
             points([[1,5],[5,5],[9,5]]),
             point_type = 6,
             points([[1,6],[5,6],[9,6]]),
             point_type = filled_circle,
             points([[1,7],[5,7],[9,7]]),
             point_type = 8,
             points([[1,8],[5,8],[9,8]]),
             point_type = filled_diamant,
             points([[1,9],[5,9],[9,9]]) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} points_joined
Valor por defecto: @code{false}

Cuando @code{points_joined} vale @code{true}, los puntos se unen con segmentos;
si vale @code{false}, se dibujar@'an puntos aislados. Un tercer valor posible
para esta opci@'on gr@'afica es @code{impulses}; en tal caso, se dibujar@'an
segmentos verticales desde los puntos hasta el eje-x (2D) o hasta el plano-xy (3D).

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{points}.

@item
@code{gr3d}: @code{points}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange        = [0,10],
             yrange        = [0,4],
             point_size    = 3,
             point_type    = up_triangle,
             color         = blue,
             points([[1,1],[5,1],[9,1]]),
             points_joined = true,
             point_type    = square,
             line_type     = dots,
             points([[1,2],[5,2],[9,2]]),
             point_type    = circle,
             color         = red,
             line_width    = 7,
             points([[1,3],[5,3],[9,3]]) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} filled_func
Valor por defecto: @code{false}

La opci@'on @code{filled_func} establece c@'omo se van a rellenar las regiones
limitadas por funciones. Si @code{filled_func} vale @code{true}, la
regi@'on limitada por la funci@'on definida en el objeto @code{explicit}
y el borde inferior del la ventana gr@'afica se rellena con @code{fill_color}.
Si @code{filled_func} guarda la expresi@'on de una funci@'on, entonces la
regi@'on limitada por esta funci@'on y la definida en el objeto @code{explicit}
ser@'a la que se rellene. Por defecto, las funciones expl@'{@dotless{i}}citas
no se rellenan.

Esta opci@'on s@'olo afecta al objeto gr@'afico bidimensional @code{explicit}.

Ejemplo:

Regi@'on limitada por un objeto @code{explicit} y el borde inferior
de la ventana gr@'afica.
@example
(%i1) load(draw)$
(%i2) draw2d(fill_color  = red,
             filled_func = true,
             explicit(sin(x),x,0,10) )$
@end example

Regi@'on limitada por un objeto @code{explicit} y la funci@'on
definida en la opci@'on @code{filled_func}. N@'otese que la 
variable en @code{filled_func} debe ser la misma que la utilizada en 
@code{explicit}.
@example
(%i1) load(draw)$
(%i2) draw2d(fill_color  = grey,
             filled_func = sin(x),
             explicit(-sin(x),x,0,%pi));
@end example

V@'eanse tambi@'en @code{fill_color} y @code{explicit}.
@end defvr


@defvr {Opci@'on gr@'afica} transparent
Valor por defecto: @code{false}

Cuando @code{transparent} vale @code{true}, las regiones internas de 
los pol@'{@dotless{i}}gonos se rellenan de acuerdo con @code{fill_color}.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{polygon}, @code{rectangle} y @code{ellipse}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(polygon([[3,2],[7,2],[5,5]]),
             transparent = true,
             color       = blue,
             polygon([[5,2],[9,2],[7,5]]) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} border
Valor por defecto: @code{true}

Cuando @code{border} vale @code{true}, los bordes de los
pol@'{@dotless{i}}gonos se dibujan de acuerdo con @code{line_type} y
@code{line_width}.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{polygon}, @code{rectangle} y @code{ellipse}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(color       = brown,
             line_width  = 8,
             polygon([[3,2],[7,2],[5,5]]),
             border      = false,
             fill_color  = blue,
             polygon([[5,2],[9,2],[7,5]]) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} head_both
Valor por defecto: @code{false}

Cuando @code{head_both} vale @code{true}, los vectores se dibujan bidireccionales.
Si vale @code{false}, se dibujan unidireccionales.

Esta opci@'on s@'olo es relevante para objetos de tipo @code{vector}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange      = [0,8],
             yrange      = [0,8],
             head_length = 0.7,
             vector([1,1],[6,0]),
             head_both   = true,
             vector([1,7],[6,0]) )$
@end example

V@'eanse tambi@'en @code{head_length}, @code{head_angle} y @code{head_type}. 
@end defvr



@defvr {Opci@'on gr@'afica} head_length
Valor por defecto: 2

@code{head_length} indica, en las unidades del eje @var{x}, la
longitud de las flechas de los vectores.

Esta opci@'on s@'olo es relevante para objetos de tipo @code{vector}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange      = [0,12],
             yrange      = [0,8],
             vector([0,1],[5,5]),
             head_length = 1,
             vector([2,1],[5,5]),
             head_length = 0.5,
             vector([4,1],[5,5]),
             head_length = 0.25,
             vector([6,1],[5,5]))$
@end example

V@'eanse tambi@'en @code{head_both}, @code{head_angle} y @code{head_type}. 
@end defvr



@defvr {Opci@'on gr@'afica} head_angle
Valor por defecto: 45

@code{head_angle} indica el @'angulo, en grados, entre la flecha y el
segmento del vector.

Esta opci@'on s@'olo es relevante para objetos de tipo @code{vector}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange      = [0,10],
             yrange      = [0,9],
             head_length = 0.7,
             head_angle  = 10,
             vector([1,1],[0,6]),
             head_angle  = 20,
             vector([2,1],[0,6]),
             head_angle  = 30,
             vector([3,1],[0,6]),
             head_angle  = 40,
             vector([4,1],[0,6]),
             head_angle  = 60,
             vector([5,1],[0,6]),
             head_angle  = 90,
             vector([6,1],[0,6]),
             head_angle  = 120,
             vector([7,1],[0,6]),
             head_angle  = 160,
             vector([8,1],[0,6]),
             head_angle  = 180,
             vector([9,1],[0,6]) )$
@end example

V@'eanse tambi@'en @code{head_both}, @code{head_length} y @code{head_type}. 
@end defvr



@defvr {Opci@'on gr@'afica} head_type
Valor por defecto: @code{filled}

@code{head_type} se utiliza para especificar c@'omo se habr@'an de
dibujar las flechas de los vectores. Los valores posibles para
esta opci@'on son: @code{filled} (flechas cerradas y rellenas),
@code{empty} (flechas cerradas pero no rellenas) y @code{nofilled}
(flechas abiertas).

Esta opci@'on s@'olo es relevante para objetos de tipo @code{vector}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange      = [0,12],
             yrange      = [0,10],
             head_length = 1,
             vector([0,1],[5,5]), /* default type */
             head_type = 'empty,
             vector([3,1],[5,5]),
             head_type = 'nofilled,
             vector([6,1],[5,5]))$
@end example

V@'eanse tambi@'en @code{head_both}, @code{head_angle} y @code{head_length}. 
@end defvr


@defvr {Opci@'on gr@'afica} unit_vectors
Valor por defecto: @code{false}

Cuando @code{unit_vectors} vale @code{true}, los vectores se dibujan con m@'odulo unidad.
Esta opci@'on es @'util para representar campos vectoriales. Cuando @code{unit_vectors} vale @code{false},
los vectores se dibujan con su longitud original.

Esta opci@'on s@'olo es relevante para objetos de tipo @code{vector}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange      = [-1,6],
             yrange      = [-1,6],
             head_length = 0.1,
             vector([0,0],[5,2]),
             unit_vectors = true,
             color        = red,
             vector([0,3],[5,2]))$
@end example
@end defvr


@defvr {Opci@'on gr@'afica} label_alignment
Valor por defecto: @code{center}

@code{label_alignment} se utiliza para especificar d@'onde se escribir@'an
las etiquetas con respecto a las coordenadas de referencia. Los valores posibles para
esta opci@'on son: @code{center}, @code{left} y @code{right}.

Esta opci@'on s@'olo es relevante para objetos de tipo @code{label}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange          = [0,10],
             yrange          = [0,10],
             points_joined   = true,
             points([[5,0],[5,10]]),
             color           = blue,
             label(["Centered alignment (default)",5,2]),
             label_alignment = 'left,
             label(["Left alignment",5,5]),
             label_alignment = 'right,
             label(["Right alignment",5,8]))$
@end example

V@'eanse tambi@'en @code{label_orientation} y @code{color}. 
@end defvr



@defvr {Opci@'on gr@'afica} label_orientation
Valor por defecto: @code{horizontal}

@code{label_orientation} se utiliza para especificar la orientaci@'on
de las etiquetas. Los valores posibles para esta opci@'on son:
@code{horizontal} y @code{vertical}.

Esta opci@'on s@'olo es relevante para objetos de tipo @code{label}.

Ejemplo:

En este ejemplo, el punto ficticio que se a@~nade sirve para obtener
la imagen, ya que el paquete @code{draw} necesita siempre de datos para
construir la escena.
@example
(%i1) load(draw)$
(%i2) draw2d(xrange     = [0,10],
             yrange     = [0,10],
             point_size = 0,
             points([[5,5]]),
             color      = navy,
             label(["Horizontal orientation (default)",5,2]),
             label_orientation = 'vertical,
             color             = "#654321",
             label(["Vertical orientation",1,5]))$
@end example

V@'eanse tambi@'en @code{label_alignment} y @code{color}. 
@end defvr


@defvr {Opci@'on gr@'afica} color
Valor por defecto: @code{"black"}

@code{color} especifica el color para dibujar l@'{@dotless{i}}neas,
puntos, bordes de pol@'{@dotless{i}}gonos y etiquetas.

Los colores se pueden dar a partir de sus nombres o en
c@'odigo hexadecimal @i{rgb}.

Los nombres de colores disponibles son: 
@code{"white"}, @code{"black"}, @code{"gray0"}, @code{"grey0"}, @code{"gray10"},
@code{"grey10"}, @code{"gray20"}, @code{"grey20"}, @code{"gray30"}, @code{"grey30"},
@code{"gray40"}, @code{"grey40"}, @code{"gray50"}, @code{"grey50"}, @code{"gray60"},
@code{"grey60"}, @code{"gray70"}, @code{"grey70"}, @code{"gray80"}, @code{"grey80"},
@code{"gray90"}, @code{"grey90"}, @code{"gray100"}, @code{"grey100"}, @code{"gray"},
@code{"grey"}, @code{"light-gray"}, @code{"light-grey"}, @code{"dark-gray"},
@code{"dark-grey"}, @code{"red"}, @code{"light-red"}, @code{"dark-red"}, @code{"yellow"},
@code{"light-yellow"}, @code{"dark-yellow"}, @code{"green"}, @code{"light-green"},
@code{"dark-green"}, @code{"spring-green"}, @code{"forest-green"}, @code{"sea-green"},
@code{"blue"}, @code{"light-blue"}, @code{"dark-blue"}, @code{"midnight-blue"}, 
@code{"navy"}, @code{"medium-blue"}, @code{"royalblue"}, @code{"skyblue"}, 
@code{"cyan"}, @code{"light-cyan"}, @code{"dark-cyan"}, @code{"magenta"}, 
@code{"light-magenta"}, @code{"dark-magenta"}, @code{"turquoise"}, 
@code{"light-turquoise"}, @code{"dark-turquoise"}, @code{"pink"}, @code{"light-pink"},
@code{"dark-pink"}, @code{"coral"}, @code{"light-coral"}, @code{"orange-red"},
@code{"salmon"}, @code{"light-salmon"}, @code{"dark-salmon"}, @code{"aquamarine"},
@code{"khaki"}, @code{"dark-khaki"}, @code{"goldenrod"}, @code{"light-goldenrod"},
@code{"dark-goldenrod"}, @code{"gold"}, @code{"beige"}, @code{"brown"}, @code{"orange"},
@code{"dark-orange"}, @code{"violet"}, @code{"dark-violet"}, @code{"plum"} y @code{"purple"}.

Las componentes crom@'aticas en c@'odigo hexadecimal se introducen 
en el formato @code{"#rrggbb"}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^2,x,-1,1), /* default is black */
             color = "red",
             explicit(0.5 + x^2,x,-1,1),
             color = blue,
             explicit(1 + x^2,x,-1,1),
             color = "light-blue", /* double quotes if - is used */
             explicit(1.5 + x^2,x,-1,1),
             color = "#23ab0f",
             label(["This is a label",0,1.2])  )$
@end example

V@'ease tambi@'en @code{fill_color}.
@end defvr



@defvr {Opci@'on gr@'afica} fill_color
Valor por defecto: @code{"red"}

@code{fill_color} especifica el color para rellenar pol@'{@dotless{i}}gonos
y funciones expl@'{@dotless{i}}citas bidimensionales.

V@'ease @code{color} para m@'as informaci@'on sobre c@'omo definir 
colores.
@end defvr


@defvr {Opci@'on gr@'afica} fill_density
Valor por defecto: 0

@code{fill_density} es un n@'umero entre 0 y 1 que especifica
la intensidad del color de relleno (dado por @code{fill_color})
en los objetos @code{bars}.

V@'ease @code{bars} para ejemplos.
@end defvr



@defvr {Opci@'on gr@'afica} line_width
Valor por defecto: 1

@code{line_width} es el ancho de las l@'{@dotless{i}}neas a dibujar.
Su valor debe ser un n@'umero positivo.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{points}, @code{polygon}, @code{rectangle}, 
@code{ellipse}, @code{vector}, @code{explicit}, @code{implicit}, 
@code{parametric} y @code{polar}.

@item
@code{gr3d}: @code{points} y @code{parametric}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(x^2,x,-1,1), /* default width */
             line_width = 5.5,
             explicit(1 + x^2,x,-1,1),
             line_width = 10,
             explicit(2 + x^2,x,-1,1))$
@end example

V@'ease tambi@'en @code{line_type}.
@end defvr



@defvr {Opci@'on gr@'afica} line_type
Valor por defecto: @code{solid}

@code{line_type} indica c@'omo se van a dibujar las l@'{@dotless{i}}neas;
valores posibles son @code{solid} y @code{dots}.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{points}, @code{polygon}, @code{rectangle}, 
@code{ellipse}, @code{vector}, @code{explicit}, @code{implicit}, 
@code{parametric} y @code{polar}.

@item
@code{gr3d}: @code{points}, @code{explicit}, @code{parametric} y @code{parametric_surface}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(line_type = dots,
             explicit(1 + x^2,x,-1,1),
             line_type = solid, /* default */
             explicit(2 + x^2,x,-1,1))$
@end example

V@'ease tambi@'en @code{line_width}.
@end defvr



@defvr {Opci@'on gr@'afica} nticks
Valor por defecto: 29

En 2d, @code{nticks} es el n@'umero de puntos a utilizar por el programa
adaptativo que genera las funciones expl@'{@dotless{i}}citas. Tambi@'en es el n@'umero de
puntos que se representan en las curvas param@'etricas y polares.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{ellipse}, @code{explicit}, @code{parametric} y @code{polar}.

@item
@code{gr3d}: @code{parametric}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(transparent = true,
             ellipse(0,0,4,2,0,180),
             nticks = 5,
             ellipse(0,0,4,2,180,180) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} adapt_depth
Valor por defecto: 10

@code{adapt_depth} es el n@'umero m@'aximo de particiones utilizadas por
la rutina gr@'afica adaptativa.

Esta opci@'on s@'olo es relevante para funciones de tipo @code{explicit} en 2d.
@end defvr



@defvr {Opci@'on gr@'afica} key
Valor por defecto: @code{""} (cadena vac@'{@dotless{i}}a)

@code{key} es la clave de una funci@'on en la leyenda. Si @code{key}
es una cadena vac@'{@dotless{i}}a, las funciones no tendr@'an clave
asociada en la leyenda.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr2d}: @code{points}, @code{polygon}, @code{rectangle},
@code{ellipse}, @code{vector}, @code{explicit}, @code{implicit},
@code{parametric} y @code{polar}.

@item
@code{gr3d}: @code{points}, @code{explicit}, @code{parametric},
y @code{parametric_surface}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(key   = "Sinus",
             explicit(sin(x),x,0,10),
             key   = "Cosinus",
             color = red,
             explicit(cos(x),x,0,10) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} xu_grid
Valor por defecto: 30

@code{xu_grid} es el n@'umero de coordenadas de la primera variable
(@code{x} en superficies explc@'{@dotless{i}}tas y @code{u} en las
param@'etricas) para formar la rejilla de puntos muestrales.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr3d}: @code{explicit} y @code{parametric_surface}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(xu_grid = 10,
             yv_grid = 50,
             explicit(x^2+y^2,x,-3,3,y,-3,3) )$
@end example

V@'ease tambi@'en @code{yv_grid}.
@end defvr



@defvr {Opci@'on gr@'afica} yv_grid
Valor por defecto: 30

@code{yv_grid} es el n@'umero de coordenadas de la segunda variable
(@code{y} en superficies explc@'{@dotless{i}}tas y @code{v} en las
param@'etricas) para formar la rejilla de puntos muestrales.

Esta opci@'on afecta a los siguientes objetos gr@'aficos:
@itemize @bullet
@item
@code{gr3d}: @code{explicit} y @code{parametric_surface}.
@end itemize

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(xu_grid = 10,
             yv_grid = 50,
             explicit(x^2+y^2,x,-3,3,y,-3,3) )$
@end example

V@'ease tambi@'en @code{xu_grid}.
@end defvr



@defvr {Opci@'on gr@'afica} surface_hide
Valor por defecto: @code{false}

Cuando @code{surface_hide} vale @code{true}, las partes ocultas no
se muestran en las superficies de las escenas 3d.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw(columns=2,
           gr3d(explicit(exp(sin(x)+cos(x^2)),x,-3,3,y,-3,3)),
           gr3d(surface_hide = true,
                explicit(exp(sin(x)+cos(x^2)),x,-3,3,y,-3,3)) )$
@end example
@end defvr



@defvr {Opci@'on gr@'afica} contour
Valor por defecto: @code{none}

La opci@'on @code{contour} permite al usuario decidir d@'onde colocar
las l@'{@dotless{i}}neas de nivel.
Valores posibles son:

@itemize @bullet

@item
@code{none}:
no se dibujan l@'{@dotless{i}}neas de nivel.

@item
@code{base}:
las l@'{@dotless{i}}neas de nivel se proyectan sobre el plano xy.

@item
@code{surface}:
las l@'{@dotless{i}}neas de nivel se dibujan sobre la propia superficie.

@item
@code{both}:
se dibujan dos conjuntos de l@'{@dotless{i}}neas de nivel: sobre
la superficie y las que se proyectan sobre el plano xy.

@item
@code{map}:
las l@'{@dotless{i}}neas de nivel se proyectan sobre el plano xy
y el punto de vista del observador se coloca perpendicularmente a @'el.

@end itemize

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(20*exp(-x^2-y^2)-10,x,0,2,y,-3,3),
             contour_levels = 15,
             contour        = both,
             surface_hide   = true) $
@end example

V@'ease tambi@'en @code{contour_levels}.
@end defvr


@defvr {Opci@'on gr@'afica} contour_levels
Valor por defecto: 5

Esta opci@'on gr@'afica controla c@'omo se dibujar@'an las l@'{@dotless{i}}neas
de nivel. A @code{contour_levels} se le puede asignar un n@'umero entero
positivo, una lista de tres n@'umeros o un conjunto num@'erico arbitrario:

@itemize @bullet
@item
Si a @code{contour_levels} se le asigna un entero positivo @var{n},
entonces se dibujar@'an @var{n} l@'{@dotless{i}}neas de nivel a intervalos
iguales. Por defecto, se dibuja@'an cinco isol@'{@dotless{i}}neas.

@item
Si a @code{contour_levels} se le asigna una lista de tres n@'umeros de la
forma @code{[inf,p,sup]}, las isol@'{@dotless{i}}neas se dibujar@'an
desde @code{inf} hasta @code{sup} en pasos de amplitud @code{p}.

@item
Si a @code{contour_levels} se le asigna un conjunto de n@'umeros de la
forma @code{@{n1, n2, ...@}}, entonces se dibujar@'an las
isol@'{@dotless{i}}neas correspondientes a los niveles @code{n1},
@code{n2}, ...
@end itemize

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. 

Ejemplos:

Diez isol@'{@dotless{i}}neas igualmente espaciadas. El n@'umero
real puede ajustarse a fin de poder conseguir etiquetas m@'as
sencillas.
@example
(%i1) load(draw)$
(%i2) draw3d(color = green,
             explicit(20*exp(-x^2-y^2)-10,x,0,2,y,-3,3),
             contour_levels = 10,
             contour        = both,
             surface_hide   = true) $
@end example


Desde -8 hasta 8 en pasos de amplitud 4.
@example
(%i1) load(draw)$
(%i2) draw3d(color = green,
             explicit(20*exp(-x^2-y^2)-10,x,0,2,y,-3,3),
             contour_levels = [-8,4,8],
             contour        = both,
             surface_hide   = true) $
@end example

L@'{@dotless{i}}neas correspondientes a los niveles -7, -6, 0.8 y 5.
@example
(%i1) load(draw)$
(%i2) draw3d(color = green,
             explicit(20*exp(-x^2-y^2)-10,x,0,2,y,-3,3),
             contour_levels = @{-7, -6, 0.8, 5@},
             contour        = both,
             surface_hide   = true) $
@end example

V@'ease tambi@'en @code{contour}.
@end defvr






@defvr {Opci@'on gr@'afica} columns
Valor por defecto: 1

@code{columns} es el n@'umero de columnas en gr@'aficos m@'ultiples.

Puesto que @'esta es una opci@'on global, su posici@'on dentro de la
descripci@'on de la escena no reviste importancia. Tambi@'en puede
usarse como argumento de la funci@'on @code{draw}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) scene1: gr2d(title="Ellipse",
                   nticks=30,
                   parametric(2*cos(t),5*sin(t),t,0,2*%pi))$
(%i3) scene2: gr2d(title="Triangle",
                   polygon([4,5,7],[6,4,2]))$
(%i4) draw(scene1, scene2, columns = 2)$
@end example

@end defvr

@defvr {Opci@'on gr@'afica} ip_grid
Valor por defecto: @code{[50, 50]}

@code{ip_grid} establece la rejilla del primer muestreo para los
gr@'aficos de funciones impl@'{@dotless{i}}citas.

Esta opci@'on s@'olo es relevante para funciones de tipo @code{implicit}.
@end defvr

@defvr {Opci@'on gr@'afica} ip_grid_in
Valor por defecto: @code{[5, 5]}

@code{ip_grid_in} establece la rejilla del segundo muestreo para los
gr@'aficos de funciones impl@'{@dotless{i}}citas.

Esta opci@'on s@'olo es relevante para funciones de tipo @code{implicit}.
@end defvr

@defvr {Opci@'on gr@'afica} x_voxel
Valor por defecto: 10

@code{x_voxel} es el n@'umero de voxels en la direcci@'on x a utilizar
por el algoritmo @i{marching cubes} implementado por el objeto 
@code{implicit} tridimensional.
@end defvr

@defvr {Opci@'on gr@'afica} y_voxel
Valor por defecto: 10

@code{y_voxel} es el n@'umero de voxels en la direcci@'on y a utilizar
por el algoritmo @i{marching cubes} implementado por el objeto 
@code{implicit} tridimensional.
@end defvr

@defvr {Opci@'on gr@'afica} z_voxel
Valor por defecto: 10

@code{z_voxel} es el n@'umero de voxels en la direcci@'on z a utilizar
por el algoritmo @i{marching cubes} implementado por el objeto 
@code{implicit} tridimensional.
@end defvr







@deffn {Funci@'on} set_draw_defaults (@var{Opci@'on gr@'afica}, ..., @var{Opci@'on gr@'afica}, ...)

Establece las opciones gr@'aficas de usuario. Esta funci@'on es @'util 
para dibujar varios gr@'aficos con las mismas opciones. Llamando
a la funci@'on sin argumentos se borran las opciones de usuario por defecto.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) set_draw_defaults(
         xrange = [-10,10],
         yrange = [-2, 2],
         color  = blue,
         grid   = true)$
(%i3) /* dibujo con opciones de usuario */
      draw2d(explicit(((1+x)**2/(1+x*x))-1,x,-10,10))$
(%i4) set_draw_defaults()$
(%i5) /* dibujo con opciones por defecto */
      draw2d(explicit(((1+x)**2/(1+x*x))-1,x,-10,10))$
@end example

Para utilizar esta funci@'on, ejec@'utese primero @code{load(draw)}.
@end deffn




@deffn {Constructor de escena} gr2d (@var{Opci@'on gr@'afica}, ..., @var{graphic_object}, ...)

La funci@'on @code{gr2d} construye un objeto que describe una escena 2d. Los
argumentos son @i{opciones gr@'aficas} y @i{objetos gr@'aficos}. Esta escena
se interpreta secuencialmente: las @i{opciones gr@'aficas} afectan a aquellos
@i{objetos gr@'aficos} colocados a su derecha. Algunas @i{opciones gr@'aficas}
afectan al aspecto global de la escena.

La lista de @i{objetos gr@'aficos} disponibles para escenas en dos
dimensiones: @code{points}, @code{polygon}, @code{rectangle}, @code{ellipse}, @code{label},
@code{vector}, @code{explicit}, @code{implicit}, @code{polar}, @code{parametric},
@code{image} y @code{geomap}.

Para utilizar esta funci@'on, ejec@'utese primero @code{load(draw)}.

V@'eanse tambi@'en las siguientes @i{opciones gr@'aficas}: @code{xrange}, @code{yrange}, 
@code{logx}, @code{logy}, @code{terminal}, @code{grid}, @code{title}, 
@code{xlabel}, @code{ylabel}, @code{xtics}, @code{ytics}, @code{xtics_rotate}, 
@code{ytics_rotate}, @code{xtics_axis}, @code{ytics_axis}, @code{xaxis}, @code{yaxis}, 
@code{xaxis_width}, @code{yaxis_width}, 
@code{xaxis_type}, @code{yaxis_type}, 
@code{xaxis_color}, @code{yaxis_color}, @code{xy_file}, 
@code{file_name}, @code{pic_width}, @code{pic_height}, 
@code{eps_width}, @code{eps_height},
@code{user_preamble}, @code{axis_bottom}, @code{axis_left}, @code{axis_top} 
y @code{axis_right}.
@end deffn


@deffn {Constructor de escena} gr3d (@var{Opci@'on gr@'afica}, ..., @var{graphic_object}, ...)

La funci@'on @code{gr3d} construye un objeto que describe una escena 3d. Los
argumentos son @i{opciones gr@'aficas} y @i{objetos gr@'aficos}. Esta escena
se interpreta secuencialmente: las @i{opciones gr@'aficas} afectan a aquellos
@i{objetos gr@'aficos} colocados a su derecha. Algunas @i{opciones gr@'aficas}
afectan al aspecto global de la escena.

La lista de @i{objetos gr@'aficos} disponibles para escenas en tres
dimensiones: @code{points}, @code{label}, @code{vector}, @code{explicit}, 
@code{implicit}, @code{parametric}, @code{parametric_surface} y @code{geomap}.


V@'eanse tambi@'en las siguientes @i{opciones gr@'aficas}: @code{xrange}, @code{yrange}, 
@code{zrange}, @code{logx}, @code{logy}, @code{logz}, @code{terminal}, 
@code{grid}, @code{title}, @code{xlabel}, @code{ylabel}, @code{zlabel}, 
@code{xtics}, @code{ytics}, @code{ztics}, @code{xtics_rotate}, 
@code{ytics_rotate}, @code{ztics_rotate}, @code{xtics_axis}, @code{ytics_axis}, 
@code{ztics_axis}, @code{xaxis}, @code{yaxis}, @code{zaxis}, 
@code{xaxis_width}, @code{yaxis_width}, @code{zaxis_width}, 
@code{xaxis_type}, @code{yaxis_type}, @code{zaxis_type},
@code{xaxis_color}, @code{yaxis_color}, @code{zaxis_color}, @code{xy_file}, 
@code{user_preamble}, @code{axis_bottom}, @code{axis_left}, 
@code{axis_top}, @code{file_name}, @code{pic_width}, @code{pic_height}, 
@code{eps_width}, @code{eps_height},
@code{axis_right}, @code{rot_vertical}, @code{rot_horizontal}, 
@code{axis_3d}, @code{xu_grid}, @code{yv_grid}, @code{surface_hide}, 
@code{contour}, @code{contour_levels}, @code{palette}, @code{colorbox}
y @code{enhanced3d}.

Para utilizar esta funci@'on, ejec@'utese primero @code{load(draw)}.
@end deffn








@deffn  {Objeto gr@'afico} points ([[@var{x1},@var{y1}], [@var{x2},@var{y2}],...])
@deffnx {Objeto gr@'afico} points ([@var{x1},@var{x2},...], [@var{y1},@var{y2},...])
@deffnx {Objeto gr@'afico} points ([@var{y1},@var{y2},...])
@deffnx {Objeto gr@'afico} points ([[@var{x1},@var{y1},@var{z1}], [@var{x2},@var{y2},@var{z2}],...])
@deffnx {Objeto gr@'afico} points ([@var{x1},@var{x2},...], [@var{y1},@var{y2},...], [@var{z1},@var{z2},...])
@deffnx {Objeto gr@'afico} points (@var{matrix})
@deffnx {Objeto gr@'afico} points (@var{1d_y_array})
@deffnx {Objeto gr@'afico} points (@var{1d_x_array}, @var{1d_y_array})
@deffnx {Objeto gr@'afico} points (@var{1d_x_array}, @var{1d_y_array}, @var{1d_z_array})
@deffnx {Objeto gr@'afico} points (@var{2d_xy_array})
@deffnx {Objeto gr@'afico} points (@var{2d_xyz_array})

Dibuja puntos en 2D y 3D.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{point_size}, 
@code{point_type}, @code{points_joined}, @code{line_width}, @code{key},
@code{line_type} y @code{color}. En modo 3D tambi@'en se ve afectado por @code{enhanced3d}.

@b{2D}

@code{points ([[@var{x1},@var{y1}], [@var{x2},@var{y2}],...])} o 
@code{points ([@var{x1},@var{x2},...], [@var{y1},@var{y2},...])}
dibuja los puntos @code{[@var{x1},@var{y1}]}, @code{[@var{x2},@var{y2}]}, etc. Si no se dan las abscisas,
@'estas se asignan autom@'aticamente a enteros positivos consecutivos, de forma que
@code{points([@var{y1},@var{y2},...])} dibuja los puntos @code{[1,@var{y1}]}, @code{[2,@var{y2}]}, etc.
Si @var{matrix} es una matriz de dos columnas o de dos filas, @code{points (@var{matrix})}
dibuja los puntos asociados.

Si @var{1d_y_array} es un array lisp de n@'umeros en 1D, @code{points (@var{1d_y_array})}
los dibujar@'a asignando las abscisas a n@'umeros enteros consecutivos.
@code{points (@var{1d_x_array}, @var{1d_y_array})} dibuja los puntos cuyas coordenadas
se toman de los dos arrays pasados como argumentos. Si @var{2d_xy_array} es un array lisp
2D de dos filas, o de dos columnas, @code{points (@var{2d_xy_array})} dibuja los correspondientes
puntos del plano.

Ejemplos:

Dos tipos de argumentos para @code{points}, una lista de pares ordenados
y dos listas con las coordenadas separadas.
@example
(%i1) load(draw)$
(%i2) draw2d(
        key = "Small points",
        points(makelist([random(20),random(50)],k,1,10)),
        point_type    = circle,
        point_size    = 3,
        points_joined = true,
        key           = "Great points",
        points(makelist(k,k,1,20),makelist(random(30),k,1,20)),
        point_type    = filled_down_triangle,
        key           = "Automatic abscissas",
        color         = red,
        points([2,12,8]))$
@end example

Dibujando impulsos.
@example
(%i1) load(draw)$
(%i2) draw2d(
        points_joined = impulses,
        line_width    = 2,
        color         = red,
        points(makelist([random(20),random(50)],k,1,10)))$
@end example

Array con ordenadas.
@example
(%i1) load(draw)$
(%i2) a: make_array (flonum, 100) $
(%i3) for i:0 thru 99 do a[i]: random(1.0) $
(%i4) draw2d(points(a)) $
@end example

Dos arrays con coordenadas separadas.
@example
(%i1) load(draw)$
(%i2) x: make_array (flonum, 100) $
(%i3) y: make_array (fixnum, 100) $
(%i4) for i:0 thru 99 do (
        x[i]: float(i/100),
        y[i]: random(10) ) $
(%i5) draw2d(points(x, y)) $
@end example

Un array 2D de dos columnas.
@example
(%i1) load(draw)$
(%i2) xy: make_array(flonum, 100, 2) $
(%i3) for i:0 thru 99 do (
        xy[i, 0]: float(i/100),
        xy[i, 1]: random(10) ) $
(%i4) draw2d(points(xy)) $
@end example

Dibujando un array rellenado con la funci@'on @code{read_array}.
@example
(%i1) load(draw)$
(%i2) a: make_array(flonum,100) $
(%i3) read_array (file_search ("pidigits.data"), a) $
(%i4) draw2d(points(a)) $
@end example

@b{3D}

@code{points ([[@var{x1},@var{y1},@var{z1}], [@var{x2},@var{y2},@var{z2}],...])} o 
@code{points ([@var{x1},@var{x2},...], [@var{y1},@var{y2},...], [@var{z1},@var{z2},...])}
dibuja los puntos @code{[@var{x1},@var{y1},@var{z1}]}, @code{[@var{x2},@var{y2},@var{z2}]}, etc.
Si @var{matrix} es una matriz de tres columnas o de tres filas, @code{points (@var{matrix})}
dibuja los puntos asociados. Si @var{matrix} es una matriz columna o fila, las abscisas 
se asignan autom@'aticamente. 

En caso de que los argumentos sean arrays lisp, @code{points (@var{1d_x_array}, @var{1d_y_array}, @var{1d_z_array})}
toma las coordenadas de los tres arrays unidimensionales. Si @var{2d_xyz_array} es un array 2D de tres columnas,
o de tres filas, entonces @code{points (@var{2d_xyz_array})} dibuja los puntos correspondientes.

Ejemplos:

Una muestra tridimensional,
@example
(%i1) load(draw)$
(%i2) load (numericalio)$
(%i3) s2 : read_matrix (file_search ("wind.data"))$
(%i4) draw3d(title = "Daily average wind speeds",
             point_size = 2,
             points(args(submatrix (s2, 4, 5))) )$
@end example

Dos muestras tridimensionales,
@example
(%i1) load(draw)$
(%i2) load (numericalio)$
(%i3) s2 : read_matrix (file_search ("wind.data"))$
(%i4) draw3d(
         title = "Daily average wind speeds. Two data sets",
         point_size = 2,
         key        = "Sample from stations 1, 2 and 3",
         points(args(submatrix (s2, 4, 5))),
         point_type = 4,
         key        = "Sample from stations 1, 4 and 5",
         points(args(submatrix (s2, 2, 3))) )$
@end example

Arrays unidimensionales,
@example
(%i1) load(draw)$
(%i2) x: make_array (fixnum, 10) $
(%i3) y: make_array (fixnum, 10) $
(%i4) z: make_array (fixnum, 10) $
(%i5) for i:0 thru 9 do (
        x[i]: random(10),
        y[i]: random(10),
        z[i]: random(10) ) $
(%i6) draw3d(points(x,y,z)) $
@end example

Array bidimensional coloreado,
@example
(%i1) load(draw)$
(%i2) xyz: make_array(fixnum, 10, 3) $
(%i3) for i:0 thru 9 do (
        xyz[i, 0]: random(10),
        xyz[i, 1]: random(10),
        xyz[i, 2]: random(10) ) $
(%i4) draw3d(
         enhanced3d = true,
         points_joined = true,
         points(xyz)) $
@end example

@end deffn


@deffn  {Objeto gr@'afico} polygon ([[@var{x1},@var{y1}], [@var{x2},@var{y2}],...])
@deffnx {Objeto gr@'afico} polygon ([@var{x1},@var{x2},...], [@var{y1},@var{y2},...])
Dibuja pol@'{@dotless{i}}gonos en 2D.

@b{2D}

@code{polygon ([[@var{x1},@var{y1}], [@var{x2},@var{y2}],...])} o 
@code{polygon ([@var{x1},@var{x2},...], [@var{y1},@var{y2},...])}:
dibuja en el plano un pol@'{@dotless{i}}gono de v@'ertices 
@code{[@var{x1},@var{y1}]}, @code{[@var{x2},@var{y2}]}, etc..

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{transparent}, 
@code{fill_color}, @code{border}, @code{line_width}, @code{key},
 @code{line_type} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(color      = "#e245f0",
             line_width = 8,
             polygon([[3,2],[7,2],[5,5]]),
             border      = false,
             fill_color  = yellow,
             polygon([[5,2],[9,2],[7,5]]) )$
@end example
@end deffn


@deffn  {Objeto gr@'afico} rectangle ([@var{x1},@var{y1}], [@var{x2},@var{y2}])
Dibuja rect@'angulos en 2D.

@b{2D}

@code{rectangle ([@var{x1},@var{y1}], [@var{x2},@var{y2}])} dibuja un rect@'angulo de v@'ertices opuestos
@code{[@var{x1},@var{y1}]} y @code{[@var{x2},@var{y2}]}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{transparent}, 
@code{fill_color}, @code{border}, @code{line_width}, @code{key},
@code{line_type} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(fill_color  = red,
             line_width  = 6,
             line_type   = dots,
             transparent = false,
             fill_color  = blue,
             rectangle([-2,-2],[8,-1]), /* opposite vertices */
             transparent = true,
             line_type   = solid,
             line_width  = 1,
             rectangle([9,4],[2,-1.5]),
             xrange      = [-3,10],
             yrange      = [-3,4.5] )$
@end example
@end deffn


@deffn  {Objeto gr@'afico} bars ([@var{x1},@var{h1},@var{w1}], [@var{x2},@var{h2},@var{w2}, ...])
Dibuja barras verticales en 2D.

@b{2D}

@code{bars ([@var{x1},@var{h1},@var{w1}], [@var{x2},@var{h2},@var{w2}, ...])} 
dibuja barras centradas en los valores @var{x1}, @var{x2}, ... de alturas @var{h1}, @var{h2}, ...
y anchos @var{w1}, @var{w2}, ...

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{key}, 
@code{fill_color}, @code{fill_density} y @code{line_width}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(
       key          = "Grupo A",
       fill_color   = blue,
       fill_density = 0.2,
       bars([0.8,5,0.4],[1.8,7,0.4],[2.8,-4,0.4]),
       key          = "Grupo B",
       fill_color   = red,
       fill_density = 0.6,
       line_width   = 4,
       bars([1.2,4,0.4],[2.2,-2,0.4],[3.2,5,0.4]),
       xaxis = true);
@end example
@end deffn



@deffn  {Objeto gr@'afico} ellipse (@var{xc}, @var{yc}, @var{a}, @var{b}, @var{ang1}, @var{ang2})
Dibuja elipses y c@'{@dotless{i}}rculos en 2D.


@b{2D}

@code{ellipse (@var{xc}, @var{yc}, @var{a}, @var{b}, @var{ang1}, @var{ang2})}
dibuja una elipse de centro @code{[@var{xc}, @var{yc}]} con semiejes horizontal y vertical
@var{a} y @var{b}, respectivamente, comenzando en el @'angulo @var{ang1} y trazando un arco
de amplitud igual al @'angulo @var{ang2}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{nticks}, 
@code{transparent}, @code{fill_color}, @code{border}, @code{line_width}, 
@code{line_type}, @code{key} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(transparent = false,
             fill_color  = red,
             color       = gray30,
             transparent = false,
             line_width  = 5,
             ellipse(0,6,3,2,270,-270),
             /* center (x,y), a, b, start & end in degrees */
             transparent = true,
             color       = blue,
             line_width  = 3,
             ellipse(2.5,6,2,3,30,-90),
             xrange      = [-3,6],
             yrange      = [2,9] )$
@end example
@end deffn


@deffn  {Objeto gr@'afico} label ([@var{string},@var{x},@var{y}],...)
@deffnx {Objeto gr@'afico} label ([@var{string},@var{x},@var{y},@var{z}],...)
Escribe etiquetas en 2D y 3D.

Las etiquetas coloreadas s@'olo trabajan con Gnuplot 4.3. Este es un fallo conocido del
paquete @code{draw}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{label_alignment}, 
@code{label_orientation} y @code{color}.

@b{2D}

@code{label([@var{string},@var{x},@var{y}])} escribe la cadena de caracteres @var{string} 
en el punto @code{[@var{x},@var{y}]}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(yrange = [0.1,1.4],
             color = "red",
             label(["Label in red",0,0.3]),
             color = "#0000ff",
             label(["Label in blue",0,0.6]),
             color = "light-blue",
             label(["Label in light-blue",0,0.9],
                   ["Another light-blue",0,1.2])  )$
@end example

@b{3D}

@code{label([@var{string},@var{x},@var{y},@var{z}])} escribe la cadena de caracteres @var{string}
en el punto @code{[@var{x},@var{y},@var{z}]}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(exp(sin(x)+cos(x^2)),x,-3,3,y,-3,3),
             color = red,
             label(["UP 1",-2,0,3], ["UP 2",1.5,0,4]),
             color = blue,
             label(["DOWN 1",2,0,-3]) )$
@end example
@end deffn



@deffn  {Objeto gr@'afico} vector ([@var{x},@var{y}], [@var{dx},@var{dy}])
@deffnx {Objeto gr@'afico} vector ([@var{x},@var{y},@var{z}], [@var{dx},@var{dy},@var{dz}])
Dibuja vectores en 2D y 3D.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{head_both}, 
@code{head_length}, @code{head_angle}, @code{head_type}, @code{line_width}, 
@code{line_type}, @code{key} y @code{color}.

@b{2D}

@code{vector ([@var{x},@var{y}], [@var{dx},@var{dy}])} dibuja el vector 
@code{[@var{dx},@var{dy}]} con origen en @code{[@var{x},@var{y}]}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(xrange      = [0,12],
             yrange      = [0,10],
             head_length = 1,
             vector([0,1],[5,5]), /* default type */
             head_type = 'empty,
             vector([3,1],[5,5]),
             head_both = true,
             head_type = 'nofilled,
             line_type = dots,
             vector([6,1],[5,5]))$
@end example

@b{3D}

@code{vector([@var{x},@var{y},@var{z}], [@var{dx},@var{dy},@var{dz}])}
dibuja el vector @code{[@var{dx},@var{dy},@var{dz}]} con 
origen en @code{[@var{x},@var{y},@var{z}]}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(color = cyan,
             vector([0,0,0],[1,1,1]/sqrt(3)),
             vector([0,0,0],[1,-1,0]/sqrt(2)),
             vector([0,0,0],[1,1,-2]/sqrt(6)) )$
@end example
@end deffn


@deffn  {Objeto gr@'afico} explicit (@var{fcn},@var{var},@var{minval},@var{maxval})
@deffnx {Objeto gr@'afico} explicit (@var{fcn},@var{var1},@var{minval1},@var{maxval1},@var{var2},@var{minval2},@var{maxval2})
Dibuja funciones expl@'{@dotless{i}}citas en 2D y 3D.

@b{2D}

@code{explicit (@var{fcn},@var{var},@var{minval},@var{maxval})} dibuja la funci@'on expl@'{@dotless{i}}cita @var{fcn},
con la variable @var{var} tomando valores desde @var{minval} hasta @var{maxval}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{nticks}, 
@code{adapt_depth}, @code{line_width}, @code{line_type}, @code{key}, 
@code{filled_func}, @code{fill_color} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(line_width = 3,
             color      = blue,
             explicit(x^2,x,-3,3) )$
(%i3) draw2d(fill_color  = brown,
             filled_func = true,
             explicit(x^2,x,-3,3) )$
@end example

@b{3D}

@code{explicit (@var{fcn},@var{var1},@var{minval1},@var{maxval1},@var{var2},@var{minval2},@var{maxval2})}
dibuja la funci@'on expl@'{@dotless{i}}cita @var{fcn}, con la variable 
@code{var1} tomando valores desde @var{minval1} hasta @var{maxval1} y 
la variable @var{var2} tomando valores desde @var{minval2} hasta @var{maxval2}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}:  @code{xu_grid}, 
@code{yv_grid}, @code{line_type}, @code{line_width}, @code{key}, @code{enhanced3d}
 y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(key   = "Gauss",
             color = "#a02c00",
             explicit(20*exp(-x^2-y^2)-10,x,-3,3,y,-3,3),
             yv_grid     = 10,
             color = blue,
             key   = "Plane",
             explicit(x+y,x,-5,5,y,-5,5),
             surface_hide = true)$
@end example

V@'ease tambi@'en @code{filled_func} para el relleno de curvas.
@end deffn



@deffn  {Objeto gr@'afico} mesh (@var{mat},@var{x0},@var{y0},@var{width},@var{height})
Dibuja la matriz @var{mat} en 3D. Los valores @var{z} se toman de @var{mat},
las abscisas van desde @var{x0} hasta @math{@var{x0} + @var{width}}
y las ordenadas desde @var{y0} hasta @math{@var{y0} + @var{height}}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{line_type},
@code{line_width}, @code{key}, @code{enhanced3d} y @code{color}.

Este objeto gr@'afico ignora valores de @code{enhanced3d} distintos de @code{true} o @code{false}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) m: apply(
            matrix,
            makelist(makelist(random(10.0),k,1,30),i,1,20)) $
(%i3) draw3d(
         color = blue,
         mesh(m,0,0,3,2),
         xlabel = "x",
         ylabel = "y",
         surface_hide = true);
@end example

@end deffn



@deffn  {Objeto gr@'afico} implicit (@var{fcn},@var{x},@var{xmin},@var{xmax},@var{y},@var{ymin},@var{ymax})
@deffnx {Objeto gr@'afico} implicit (@var{fcn},@var{x},@var{xmin},@var{xmax},@var{y},@var{ymin},@var{ymax},@var{z},@var{zmin},@var{zmax})
Dibuja funciones impl@'{@dotless{i}}citas en 2D y 3D.

@b{2D}

@code{implicit (@var{fcn},@var{x},@var{xmin},@var{xmax},@var{y},@var{ymin},@var{ymax})}
dibuja la funci@'on impl@'{@dotless{i}}cita @var{fcn}, con la variable
@code{x} tomando valores desde @var{xmin} hasta @var{xmax},
y la variable @var{y} tomando valores desde @var{ymin} hasta @var{ymax}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{ip_grid}, 
@code{ip_grid_in}, @code{line_width}, @code{line_type}, @code{key} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(terminal  = eps,
             grid      = true,
             line_type = solid,
             key       = "y^2=x^3-2*x+1",
             implicit(y^2=x^3-2*x+1, x, -4,4, y, -4,4),
             line_type = dots,
             key       = "x^3+y^3 = 3*x*y^2-x-1",
             implicit(x^3+y^3 = 3*x*y^2-x-1, x,-4,4, y,-4,4),
             title     = "Two implicit functions" )$
@end example

@b{3D}

@code{implicit (@var{fcn},@var{x},@var{xmin},@var{xmax}, @var{y},@var{ymin},@var{ymax}, @var{z},@var{zmin},@var{zmax})}
dibuja la funci@'on impl@'{@dotless{i}}cita @var{fcn}, con la variable @var{x} 
tomando valores desde @var{xmin} hasta @var{xmax}, la variable @var{y} tomando 
valores desde @var{ymin} hasta @var{ymax} y la variable @var{z} tomando 
valores desde @var{zmin} hasta @var{zmax}. Este objeto est@'a programado con el 
algoritmo @i{marching cubes}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{x_voxel}, 
@code{y_voxel}, @code{z_voxel}, @code{line_width}, @code{line_type}, @code{key} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(
        color=blue,
        implicit((x^2+y^2+z^2-1)*(x^2+(y-1.5)^2+z^2-0.5)=0.015,
                 x,-1,1,y,-1.2,2.3,z,-1,1),
        surface_hide=true);
@end example
@end deffn


@deffn  {Objeto gr@'afico} polar (@var{radius},@var{ang},@var{minang},@var{maxang})
Dibuja funciones 2D definidas en coordenadas polares.

@b{2D}

@code{polar (@var{radius},@var{ang},@var{minang},@var{maxang})} dibuja la funci@'on
@code{@var{radius}(@var{ang})} definida en coordenadas polares, con la variable 
@var{ang} tomando valores desde @var{minang} hasta @var{maxang}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{nticks}, 
@code{line_width}, @code{line_type}, @code{key} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(user_preamble = "set grid polar",
             nticks        = 200,
             xrange        = [-5,5],
             yrange        = [-5,5],
             color         = blue,
             line_width    = 3,
             title         = "Hyperbolic Spiral",
             polar(10/theta,theta,1,10*%pi) )$
@end example
@end deffn



@deffn  {Objeto gr@'afico} spherical (@var{radius},@var{azi},@var{minazi},@var{maxazi},@var{zen},@var{minzen},@var{maxzen})
Dibuja funciones 3D definidas en coordenadas esf@'ericas.

@b{3D}

@code{spherical (@var{radius},@var{azi},@var{minazi},@var{maxazi},@var{zen},@var{minzen},@var{maxzen})}
dibuja la funci@'on @code{@var{radius}(@var{azi},@var{zen})} definida en coordenadas esf@'ericas, con el @i{azimut}
@var{azi} tomando valores desde @var{minazi} hasta @var{maxazi} y el @i{zenit} @var{zen} tomando valores desde
@var{minzen} hasta @var{maxzen}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{xu_grid}, 
@code{yv_grid}, @code{line_type}, @code{key} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(spherical(1,a,0,2*%pi,z,0,%pi))$
@end example
@end deffn


@deffn  {Objeto gr@'afico} cylindrical (@var{radius},@var{z},@var{minz},@var{maxz},@var{azi},@var{minazi},@var{maxazi})
Dibuja funciones 3D definidas en coordenadas cil@'{@dotless{i}}ndricas.

@b{3D}

@code{cylindrical (@var{radius},@var{z},@var{minz},@var{maxz},@var{azi},@var{minazi},@var{maxazi})}
dibuja la funci@'on @code{@var{radius}(@var{z},@var{azi})} definida en coordenadas cil@'{@dotless{i}}ndricas, con la variable
@var{z} tomando valores desde @var{minz} hasta @var{maxz} y el @i{azimut} @var{azi} tomando valores desde
@var{minazi} hasta @var{maxazi}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{xu_grid}, 
@code{yv_grid}, @code{line_type}, @code{key} y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(cylindrical(1,z,-2,2,az,0,2*%pi))$
@end example
@end deffn


@deffn  {Objeto gr@'afico} parametric (@var{xfun},@var{yfun},@var{par},@var{parmin},@var{parmax})
@deffnx {Objeto gr@'afico} parametric (@var{xfun},@var{yfun},@var{zfun},@var{par},@var{parmin},@var{parmax})
Dibuja funciones param@'etricas en 2D y 3D.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{nticks}, 
@code{line_width}, @code{line_type}, @code{key}, @code{color} y @code{enhanced3d}.

@b{2D}

@code{parametric (@var{xfun},@var{yfun},@var{par},@var{parmin},@var{parmax})} dibuja la funci@'on param@'etrica 
@code{[@var{xfun},@var{yfun}]}, con el par@'ametro @var{par} tomando valores desde 
@var{parmin} hasta @var{parmax}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw2d(explicit(exp(x),x,-1,3),
             color = red,
             key   = "This is the parametric one!!",
             parametric(2*cos(rrr),rrr^2,rrr,0,2*%pi))$
@end example

@b{3D}

@code{parametric (@var{xfun},@var{yfun},@var{zfun},@var{par},@var{parmin},@var{parmax})} 
dibuja la curva param@'etrica @code{[@var{xfun},@var{yfun},@var{zfun}]}, con el par@'ametro
@var{par} tomando valores desde @var{parmin} hasta @var{parmax}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(explicit(exp(sin(x)+cos(x^2)),x,-3,3,y,-3,3),
             color = royalblue,
             parametric(cos(5*u)^2,sin(7*u),u-2,u,0,2),
             color      = turquoise,
             line_width = 2,
             parametric(t^2,sin(t),2+t,t,0,2),
             surface_hide = true,
             title = "Surface & curves" )$
@end example
@end deffn


@deffn  {Objeto gr@'afico} image (@var{im},@var{x0},@var{y0},@var{width},@var{height})
Reproduce una imagen en 2D.

@b{2D}

@code{image (@var{im},@var{x0},@var{y0},@var{width},@var{height})}:
dibuja la imagen @var{im} en la regi@'on rectangular desde el v@'ertice @var{(@var{x0},@var{y0})}
hasta el @code{(x0+@var{width},y0+@var{height})} del plano real. El argumento @var{im} debe ser una
matriz de n@'umeros reales, una matriz de vectores de longitud tres o un objeto
de tipo @code{picture}.

Si @var{im} es una matriz de n@'umeros reales, los valores de los
p@'{@dotless{i}}xeles se interpretan seg@'un indique la opci@'on
gr@'afica @code{palette}, que es un vector de longitud tres con sus componentes tomando
valores enteros en el rango desde -36 a +36; cada valor es un 
@'{@dotless{i}}ndice para seleccionar una f@'ormula que transforma los niveles
num@'ericos en las componentes crom@'aticas rojo, verde y azul:
@example
 0: 0               1: 0.5           2: 1
 3: x               4: x^2           5: x^3
 6: x^4             7: sqrt(x)       8: sqrt(sqrt(x))
 9: sin(90x)       10: cos(90x)     11: |x-0.5|
12: (2x-1)^2       13: sin(180x)    14: |cos(180x)|
15: sin(360x)      16: cos(360x)    17: |sin(360x)|
18: |cos(360x)|    19: |sin(720x)|  20: |cos(720x)|
21: 3x             22: 3x-1         23: 3x-2
24: |3x-1|         25: |3x-2|       26: (3x-1)/2
27: (3x-2)/2       28: |(3x-1)/2|   29: |(3x-2)/2|
30: x/0.32-0.78125 31: 2*x-0.84
32: 4x;1;-2x+1.84;x/0.08-11.5
33: |2*x - 0.5|    34: 2*x          35: 2*x - 0.5
36: 2*x - 1
@end example
los n@'umeros negativos se interpretan como colores invertidos
de las componentes crom@'aticas.

@code{palette = gray} y @code{palette = color} son atajos para
@code{palette = [3,3,3]} y @code{palette = [7,5,15]}, respectivamente.

Si @var{im} es una matriz de vectores de longitud tres, @'estos se
interpretar@'an como las componentes crom@'aticas rojo, verde y azul.

Ejemplos:

Si @var{im} es una matriz de n@'umeros reales, los valores de los
p@'{@dotless{i}}xeles se interpretan seg@'un indique la opci@'on
gr@'afica @code{palette}.
@example
(%i1) load(draw)$
(%i2) im: apply(
           'matrix,
            makelist(makelist(random(200),i,1,30),i,1,30))$
(%i3) /* palette = color, default */
      draw2d(image(im,0,0,30,30))$
(%i4) draw2d(palette = gray, image(im,0,0,30,30))$
(%i5) draw2d(palette = [15,20,-4],
             colorbox=false,
             image(im,0,0,30,30))$
@end example

V@'ease tambi@'en @code{colorbox}.

Si @var{im} es una matriz de vectores de longitud tres, @'estos se
interpretar@'an como las componentes crom@'aticas rojo, verde y azul.
@example
(%i1) load(draw)$
(%i2) im: apply(
            'matrix,
             makelist(
               makelist([random(300),
                         random(300),
                         random(300)],i,1,30),i,1,30))$
(%i3) draw2d(image(im,0,0,30,30))$
@end example

El paquete @code{draw} carga autom@'aticamente el paquete @code{picture}. 
En este ejemplo, una imagen de niveles se define a mano, reproduci@'endola
a continuaci@'on.
@example
(%i1) load(draw)$
(%i2) im: make_level_picture([45,87,2,134,204,16],3,2);
(%o2)       picture(level, 3, 2, @{Array:  #(45 87 2 134 204 16)@})
(%i3) /* default color palette */
      draw2d(image(im,0,0,30,30))$
(%i4) /* gray palette */
      draw2d(palette = gray,
             image(im,0,0,30,30))$
@end example

Se lee un fichero xpm y se reproduce.
@example
(%i1) load(draw)$
(%i2) im: read_xpm("myfile.xpm")$
(%i3) draw2d(image(im,0,0,10,7))$
@end example

V@'eanse tambi@'en @code{make_level_picture}, @code{make_rgb_picture} y @code{read_xpm}.

En @url{http://www.telefonica.net/web2/biomates/maxima/gpdraw/image}
se encuentran ejemplos m@'as elaborados.
@end deffn


@defvr {Global variable} boundaries_array
Valor por defecto: @code{false}

@code{boundaries_array} es donde el objeto gr@'afico @code{geomap} lee
las coordenadas de las l@'{@dotless{i}}neas fronterizas.

Cada componente de @code{boundaries_array} es un array de n@'umeros decimales
en coma flotante representando las coordenadas que definen un segmento
poligonal o l@'{@dotless{i}}nea fronteriza.

V@'ease tambi@'en @code{geomap}.
@end defvr


@deffn  {Objeto gr@'afico} geomap (@var{numlist})
@deffnx {Objeto gr@'afico} geomap (@var{numlist},@var{3Dprojection})
Dibuja mapas cartogr@'aficos en 2D y 3D.

@b{2D}

Esta funci@'on trabaja junto con la variable global @code{boundaries_array}.

El argumento @var{numlist} es una lista de n@'umeros o de listas de 
n@'umeros. Todos estos n@'umeros deben ser enteros mayores o iguales que cero,
representando las componentes del array global @code{boundaries_array}.

Cada componente de @code{boundaries_array} es un array de decimales en
coma flotante, las coordenadas de un segmento poligonal o l@'{@dotless{i}}nea
fronteriza.

@code{geomap (@var{numlist})} toma los enteros de sus argumentos y 
dibuja los segmentos poligonales asociados de @code{boundaries_array}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{line_width}, 
@code{line_type} y @code{color}.

Ejemplos:

Un sencillo mapa hecho a mano:
@example
(%i1) load(draw)$
(%i2) /* Vertices of boundary #0: @{(1,1),(2,5),(4,3)@} */
   ( bnd0: make_array(flonum,6),
     bnd0[0]:1.0, bnd0[1]:1.0, bnd0[2]:2.0,
     bnd0[3]:5.0, bnd0[4]:4.0, bnd0[5]:3.0 )$
(%i3) /* Vertices of boundary #1: @{(4,3),(5,4),(6,4),(5,1)@} */
   ( bnd1: make_array(flonum,8),
     bnd1[0]:4.0, bnd1[1]:3.0, bnd1[2]:5.0, bnd1[3]:4.0,
     bnd1[4]:6.0, bnd1[5]:4.0, bnd1[6]:5.0, bnd1[7]:1.0)$
(%i4) /* Vertices of boundary #2: @{(5,1), (3,0), (1,1)@} */
   ( bnd2: make_array(flonum,6),
     bnd2[0]:5.0, bnd2[1]:1.0, bnd2[2]:3.0,
     bnd2[3]:0.0, bnd2[4]:1.0, bnd2[5]:1.0 )$
(%i5) /* Vertices of boundary #3: @{(1,1), (4,3)@} */
   ( bnd3: make_array(flonum,4),
     bnd3[0]:1.0, bnd3[1]:1.0, bnd3[2]:4.0, bnd3[3]:3.0)$
(%i6) /* Vertices of boundary #4: @{(4,3), (5,1)@} */
   ( bnd4: make_array(flonum,4),
     bnd4[0]:4.0, bnd4[1]:3.0, bnd4[2]:5.0, bnd4[3]:1.0)$
(%i7) /* Pack all together in boundaries_array */
   ( boundaries_array: make_array(any,5),
     boundaries_array[0]: bnd0, boundaries_array[1]: bnd1,
     boundaries_array[2]: bnd2, boundaries_array[3]: bnd3,
     boundaries_array[4]: bnd4 )$
(%i8) draw2d(geomap([0,1,2,3,4]))$
@end example

El paquete auxiliar @code{worldmap} asigna al array global
@code{boundaries_array} l@'{@dotless{i}}neas fronterizas
reales en coordenadas (longitud, latitud). Estos datos son
de dominio p@'ublico y proceden de
@url{http://www-cger.nies.go.jp/grid-e/gridtxt/grid19.html}.
El paquete @code{worldmap} tambi@'en define fronteras 
de pa@'{@dotless{i}}ses, continentes y l@'{@dotless{i}}neas
costeras a partir de las
componentes de @code{boundaries_array} (v@'ease el
fichero @code{share/draw/worldmap.mac} para m@'as
informaci@'on). El paquete @code{worldmap} carga
autom@'aticamente el paquete @code{draw}.
@example
(%i1) load(worldmap)$
(%i2) c1: gr2d(geomap(Canada,United_States,
                      Mexico,Cuba))$
(%i3) c2: gr2d(geomap(Africa))$
(%i4) c3: gr2d(geomap(Oceania,China,Japan))$
(%i5) c4: gr2d(geomap(France,Portugal,Spain,
                      Morocco,Western_Sahara))$
(%i6) draw(columns  = 2,
           c1,c2,c3,c4)$
@end example

@code{worldmap} se puede utilizar para dibujar pa@'{@dotless{i}}ses
como pol@'{@dotless{i}}gonos. En este caso, ya no ser@'a necesario
hacer uso del objeto gr@'afico @code{geomap}, pero s@'{@dotless{i}} de
@code{polygon}. Puesto que en este caso se utilizan listas en lugar de
arrays, los mapas se reproducir@'an de forma m@'as lenta. V@'eanse
tambi@'en @code{make_poly_country} y @code{make_poly_continent} para
comprender el siguiente c@'odigo.
@example
(%i1) load(worldmap)$
(%i2) mymap: append(
   [color      = white],  /* borders are white */
   [fill_color = red],             make_poly_country(Bolivia),
   [fill_color = cyan],            make_poly_country(Paraguay),
   [fill_color = green],           make_poly_country(Colombia),
   [fill_color = blue],            make_poly_country(Chile),
   [fill_color = "#23ab0f"],       make_poly_country(Brazil),
   [fill_color = goldenrod],       make_poly_country(Argentina),
   [fill_color = "midnight-blue"], make_poly_country(Uruguay))$
(%i3) apply(draw2d, mymap)$
@end example

@b{3D}

@code{geomap (@var{numlist})} proyecta los mapas sobre la esfera de radio 1
y centro (0,0,0). Es posible cambiar la esfera o el tipo de proyecci@'on haciendo
uso de @code{geomap (@var{numlist},@var{3Dprojection})}.

Proyecciones 3D disponibles:

@itemize @bullet
@item
@code{[spherical_projection,@var{x},@var{y},@var{z},@var{r}]}: proyecta los mapas sobre la esfera de radio
@var{r} y centro (@var{x},@var{y},@var{z}).
@example
(%i1) load(worldmap)$
(%i2) draw3d(geomap(Australia), /* default projection */
             geomap(Australia,
                    [spherical_projection,2,2,2,3]))$
@end example

@item
@code{[cylindrical_projection,@var{x},@var{y},@var{z},@var{r},@var{rc}]}: re-proyecta mapas esf@'ericos
sobre el cilindro de radio @var{rc} cuyo eje pasa a trav@'es de los polos del globo
de radio @var{r} y centro (@var{x},@var{y},@var{z}).
@example
(%i1) load(worldmap)$
(%i2) draw3d(geomap([America_coastlines,Eurasia_coastlines],
                    [cylindrical_projection,2,2,2,3,4]))$
@end example

@item
@code{[conic_projection,@var{x},@var{y},@var{z},@var{r},@var{alpha}]}: re-proyecta mapas esf@'ericos sobre los
conos de @'angulo @var{alpha}, cuyos ejes pasan a trav@'es de los polos del globo de radio @var{r} 
y centro (@var{x},@var{y},@var{z}). Ambos conos, norte y sur, son tangentes a la esfera.
@example
(%i1) load(worldmap)$
(%i2) draw3d(geomap(World_coastlines,
                    [conic_projection,0,0,0,1,90]))$
@end example
@end itemize

En @url{http://www.telefonica.net/web2/biomates/maxima/gpdraw/geomap}
hay ejemplos m@'as elaborados.
@end deffn




@deffn  {Objeto gr@'afico} parametric_surface (@var{xfun},@var{yfun},@var{zfun},@var{par1},@var{par1min},@var{par1max},@var{par2},@var{par2min},@var{par2max})
Dibuja superficies param@'etricas en 3D.

@b{3D}

@code{parametric_surface (@var{xfun},@var{yfun},@var{zfun},@var{par1},@var{par1min},@var{par1max},@var{par2},@var{par2min},@var{par2max})}
dibuja la superficie param@'etrica @code{[@var{xfun},@var{yfun},@var{zfun}]}, 
con el par@'ametro @var{par1} tomando valores desde @var{par1min} hasta @var{par1max}
y el par@'ametro @var{par2} tomando valores desde @var{par2min} hasta @var{par2max}.

Este objeto se ve afectado por las siguientes @i{opciones gr@'aficas}: @code{xu_grid}, 
@code{yv_grid}, @code{line_type}, @code{line_width}, @code{key}, @code{enhanced3d}
y @code{color}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) draw3d(title          = "Sea shell",
             xu_grid        = 100,
             yv_grid        = 25,
             rot_vertical   = 100,
             rot_horizontal = 20,
             surface_hide   = true,
             parametric_surface(0.5*u*cos(u)*(cos(v)+1),
                           0.5*u*sin(u)*(cos(v)+1),
                           u*sin(v) - ((u+3)/8*%pi)^2 - 20,
                           u, 0, 13*%pi, v, -%pi, %pi) )$
@end example
@end deffn







@deffn {Funci@'on} draw (@var{gr2d}, ..., @var{gr3d}, ..., @var{options}, ...)

Representa gr@'aficamente una serie de escenas; sus argumentos son objetos
@code{gr2d} y/o @code{gr3d}, junto con algunas opciones. Por defecto, 
las escenas se representan en una columna.

La funci@'on @code{draw} acepta las siguientes opciones globales: @code{terminal},
@code{columns}, @code{pic_width}, @code{pic_height}, @code{eps_width},
@code{eps_height}, @code{file_name} y @code{delay}.

Las funciones @code{draw2d} y @code{draw3d} son atajos a utilizar
cuando se quiere representar una @'unica escena en dos o tres
dimensiones, respectivamente.

Para utilizar esta funci@'on, ejec@'utese primero @code{load(draw)}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) scene1: gr2d(title="Ellipse",
                   nticks=30,
                   parametric(2*cos(t),5*sin(t),t,0,2*%pi))$
(%i3) scene2: gr2d(title="Triangle",
                   polygon([4,5,7],[6,4,2]))$
(%i4) draw(scene1, scene2, columns = 2)$
@end example

Las dos sentencias gr@'aficas siguientes son equivalentes:
@example
(%i1) load(draw)$
(%i2) draw(gr3d(explicit(x^2+y^2,x,-1,1,y,-1,1)));
(%o2)                          [gr3d(explicit)]
(%i3) draw3d(explicit(x^2+y^2,x,-1,1,y,-1,1));
(%o3)                          [gr3d(explicit)]
@end example

Un fichero gif animado:
@example
(%i1) load(draw)$
(%i2) draw(
        delay     = 100,
        file_name = "zzz",
        terminal  = 'animated_gif,
        gr2d(explicit(x^2,x,-1,1)),
        gr2d(explicit(x^3,x,-1,1)),
        gr2d(explicit(x^4,x,-1,1)));
End of animation sequence
(%o2)          [gr2d(explicit), gr2d(explicit), gr2d(explicit)]
@end example

V@'eanse tambi@'en @code{gr2d}, @code{gr3d}, @code{draw2d} y @code{draw3d}.
@end deffn


@deffn {Funci@'on} draw2d (@var{option}, @var{graphic_object}, ...)

Esta funci@'on es un atajo para
@code{draw(gr2d(@var{options}, ..., @var{graphic_object}, ...))}.

Puede utilizarse para representar una @'unica escena en 2d.

Para utilizar esta funci@'on, ejec@'utese primero @code{load(draw)}.

V@'eanse tambi@'en @code{draw} y @code{gr2d}.
@end deffn


@deffn {Funci@'on} draw3d (@var{option}, @var{graphic_object}, ...)

Esta funci@'on es un atajo para
@code{draw(gr3d(@var{options}, ..., @var{graphic_object}, ...))}.

Puede utilizarse para representar una @'unica escena en 3d.

Para utilizar esta funci@'on, ejec@'utese primero @code{load(draw)}.

V@'eanse tambi@'en @code{draw} y @code{gr3d}.
@end deffn



@deffn {Funci@'on} draw_file (@var{Opci@'on gr@'afica}, ..., @var{Opci@'on gr@'afica}, ...)

Almacena el gr@'afico actual en un fichero. Las opciones gr@'aficas que
acepta son: @code{terminal}, @code{pic_width}, @code{pic_height}, 
@code{eps_width}, @code{eps_height}, @code{file_name} y @code{file_bgcolor}. 

Ejemplo:

@example
(%i1) load(draw)$
(%i2) /* dibujo en pantalla */
      draw(gr3d(explicit(x^2+y^2,x,-1,1,y,-1,1)))$
(%i3) /* mismo dibujo en formato eps */
      draw_file(terminal  = eps,
                eps_width = 5,
                eps_height = 5) $
@end example
@end deffn



@deffn {Funci@'on} multiplot_mode (@var{term})

Esta funci@'on permite a Maxima trabajar en modo de gr@'aficos m@'ultiples en
una sola ventana del terminal @var{term}; argumentos v@'alidos para esta funci@'on 
son @code{screen}, @code{wxt}, @code{aquaterm} y @code{none}.

Cuando el modo de gr@'aficos m@'ultiples est@'a activo, cada llamada a @code{draw}
env@'{@dotless{i}}a un nuevo gr'afico a la misma ventana, sin borrar los anteriores.
Para desactivar el modo de gr@'aficos m@'ultiples escr@'{@dotless{i}}base
@code{multiplot_mode(none)}.

Cuando el modo de gr@'aficos m@'ultiples est@'a activo, la opci@'on global @code{terminal} 
se bloquea; para desbloquearla y cambiar de terminal es necesario desactivar 
previamente el modo de gr@'aficos m@'ultiples.

Este modo de trabajo no funciona en plataformas Windows.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) set_draw_defaults(
         xrange = [-1,1],
         yrange = [-1,1],
         grid   = true,
         title  = "Step by step plot" )$
(%i3) multiplot_mode(screen)$
(%i4) draw2d(color=blue,  explicit(x^2,x,-1,1))$
(%i5) draw2d(color=red,   explicit(x^3,x,-1,1))$
(%i6) draw2d(color=brown, explicit(x^4,x,-1,1))$
(%i7) multiplot_mode(none)$
@end example
@end deffn







@node Funciones y variables para picture, Funciones y variables para worldmap, Funciones y variables para draw, draw
@section Funciones y variables para picture



@deffn  {Funci@'on} make_level_picture (@var{data})
@deffnx {Funci@'on} make_level_picture (@var{data},@var{width},@var{height})
Devuelve un objeto @code{picture} consistente en una imagen de niveles.
@code{make_level_picture (@var{data})} construye el objeto @code{picture}
a partir de la matriz @var{data}.
@code{make_level_picture (@var{data},@var{width},@var{height})}
construye el objeto a partir de una lista de n@'umeros, en cuyo
caso deben indicarse el ancho @var{width} y la altura @var{height}
en p@'{@dotless{i}}xeles.

El objeto  @code{picture} devuelto contiene los siguientes cuatro
elemento:

@enumerate
@item el s@'{@dotless{i}}mbolo @code{level}
@item anchura de la imagen
@item altura de la imagen
@item un array de enteros con los valores de los p@'{@dotless{i}}xeles
entre 0 y 255. El argumento @var{data} debe contener s@'olo n@'umeros
entre 0 y 255; los cantidades negativas se transforman en ceros y las 
que son mayores de 255 se igualan a este n@'umero.
@end enumerate

Ejemplo:

Imagen de niveles a partir de una matriz.
@example
(%i1) load(draw)$
(%i2) make_level_picture(matrix([3,2,5],[7,-9,3000]));
(%o2)         picture(level, 3, 2, @{Array:  #(3 2 5 7 0 255)@})
@end example

Imagen de niveles a partir de una lista num@'erica.
@example
(%i1) load(draw)$
(%i2) make_level_picture([-2,0,54,%pi],2,2);
(%o2)            picture(level, 2, 2, @{Array:  #(0 0 54 3)@})
@end example
@end deffn


@deffn  {Funci@'on} picturep (@var{x})
Devuelve @code{true} si el argumento es una imagen bien formada,
o @code{false} en caso contrario.
@end deffn


@deffn  {Funci@'on} picture_equalp (@var{x},@var{y})
Devuelve @code{true} si los dos argumentos son im@'agenes id@'enticas,
o @code{false} en caso contrario.
@end deffn


@deffn  {Funci@'on} make_rgb_picture (@var{redlevel},@var{greenlevel},@var{bluelevel})
Devuelve un objeto @var{picture} conteniendo una imagen en color (RGB).
Los tres argumentos deben ser im@'agenes de niveles, para el rojo (R),
verde (G) y azul (B).

El objeto  @var{picture} devuelto contiene los siguientes cuatro
elemento:

@enumerate
@item el s@'{@dotless{i}}mbolo @code{rgb}
@item anchura de la imagen
@item altura de la imagen
@item un array de enteros de @var{3*ancho*alto} con los valores de los p@'{@dotless{i}}xeles
entre 0 y 255. Cada valor de pixel se representa en el array con tres n@'umeros consecutivos
(rojo, verde, azul).
@end enumerate

Ejemplo:

@example
(%i1) load(draw)$
(%i2) red: make_level_picture(matrix([3,2],[7,260]));
(%o2)           picture(level, 2, 2, @{Array:  #(3 2 7 255)@})
(%i3) green: make_level_picture(matrix([54,23],[73,-9]));
(%o3)           picture(level, 2, 2, @{Array:  #(54 23 73 0)@})
(%i4) blue: make_level_picture(matrix([123,82],[45,32.5698]));
(%o4)          picture(level, 2, 2, @{Array:  #(123 82 45 33)@})
(%i5) make_rgb_picture(red,green,blue);
(%o5) picture(rgb, 2, 2, 
              @{Array:  #(3 54 123 2 23 82 7 73 45 255 0 33)@})
@end example
@end deffn


@deffn  {Funci@'on} take_channel (@var{im},@var{color})
Si el argumento @var{color} es @code{red}, @code{green} o @code{blue},
la funci@'on @code{take_channel} devuelve el canal de color correspondiente
de la imagen @var{im}.

Ejemplo:

@example
(%i1) load(draw)$
(%i2) red: make_level_picture(matrix([3,2],[7,260]));
(%o2)           picture(level, 2, 2, @{Array:  #(3 2 7 255)@})
(%i3) green: make_level_picture(matrix([54,23],[73,-9]));
(%o3)           picture(level, 2, 2, @{Array:  #(54 23 73 0)@})
(%i4) blue: make_level_picture(matrix([123,82],[45,32.5698]));
(%o4)          picture(level, 2, 2, @{Array:  #(123 82 45 33)@})
(%i5) make_rgb_picture(red,green,blue);
(%o5) picture(rgb, 2, 2, 
              @{Array:  #(3 54 123 2 23 82 7 73 45 255 0 33)@})
(%i6) take_channel(%,'green);  /* simple quote!!! */
(%o6)           picture(level, 2, 2, @{Array:  #(54 23 73 0)@})
@end example
@end deffn


@deffn  {Funci@'on} negative_picture (@var{pic})
Devuelve el negativo de la imagen, sea @'esta de tipo nivel (@var{level})
o color (@var{rgb}).
@end deffn


@deffn  {Funci@'on} rgb2level (@var{pic})
Transforma una imagen en color @var{rgb} a otra de niveles @var{level}
promediando los niveles.
@end deffn


@deffn  {Funci@'on} get_pixel (@var{pic},@var{x},@var{y})
Devuelve el pixel de la imagen @var{pic}. Las coordenadas @var{x} e @var{y}
van desde 0 hasta @code{ancho-1} y @code{alto-1}, respectivamente.
@end deffn


@deffn  {Funci@'on} read_xpm (@var{xpm_file})
Lee el fichero gr@'afico en formato xpm y devuelve un objeto @code{picture}.
@end deffn








@node Funciones y variables para worldmap,  , Funciones y variables para picture, draw
@section Funciones y variables para worldmap


@deffn  {Funci@'on} region_boundaries (@var{x1},@var{y1},@var{x2},@var{y2})
Detecta los segmentos poligonales almacenados en la variable global
@code{boundaries_array} totalmente contenidos en el rect@'angulo de v@'ertices
(@var{x1},@var{y1}) -superior izquierdo- y (@var{x2},@var{y2})
-inferior derecho-.

Ejemplo:

Devuelve los n@'umeros de los segmentos necesarios para
dibujar el sur de Italia.
@example
(%i1) load(worldmap)$
(%i2) region_boundaries(10.4,41.5,20.7,35.4);
(%o2)                [1846, 1863, 1864, 1881, 1888, 1894]
(%i3) draw2d(geomap(%))$
@end example
@end deffn



@deffn  {Funci@'on} region_boundaries_plus (@var{x1},@var{y1},@var{x2},@var{y2})
Detecta los segmentos poligonales almacenados en la variable global
@code{boundaries_array} con al menos un v@'ertice dentro del rect@'angulo 
definido por los extremos (@var{x1},@var{y1}) -superior izquierdo- y (@var{x2},@var{y2})
-inferior derecho-.

Ejemplo:

@example
(%i1) load(worldmap)$
(%i2) region_boundaries(10.4,41.5,20.7,35.4);
(%o2)                [1846, 1863, 1864, 1881, 1888, 1894]
(%i3) draw2d(geomap(%))$
@end example
@end deffn




@deffn  {Funci@'on} numbered_boundaries (@var{nlist})
Dibuja una lista de segmentos poligonales (l@'{@dotless{i}}neas 
fronterizas), etiquetadas con sus n@'umeros correspondientes
(coordenadas de @code{boundaries_array}). Esta funci@'on es
de mucha ayuda a la hora de definir nuevas entidades
geogr@'aficas.

Ejemplo:

Mapa de Europa con las fronteras y costas etiquetadas con
su componente num@'erica de @code{boundaries_array}.
@example
(%i1) load(worldmap)$
(%i2) european_borders: 
           region_boundaries(-31.81,74.92,49.84,32.06)$
(%i3) numbered_boundaries(european_borders)$
@end example
@end deffn


@deffn  {Funci@'on} make_polygon (@var{nlist})
Devuelve un objeto @code{polygon} a partie de una lista
de l@'{@dotless{i}}neas fronterizas y de costas. El
argumento @var{nlist} debe ser una lista de componentes
de @code{boundaries_array}.

Ejemplo:

La variable Bhutan (But@'an) est@'a definida con los n@'umeros
fronterizos 171, 173 y 1143, de manera que @code{make_polygon([171,173,1143])}
concatena los arrays @code{boundaries_array[171]}, @code{boundaries_array[173]} y
@code{boundaries_array[1143]} y devuelve un objeto @code{polygon}
apto para ser dibujado por @code{draw}. A fin de evitar mensajes
de errores, los arrays deben ser compatibles en el sentido de que dos
de ellos consecutivos deben tener dos coordenadas comunes en los
extremos. En este ejemplo, las dos primeras componentes de 
@code{boundaries_array[171]} son iguales a las dos @'ultimas de
@code{boundaries_array[173]}, y las dos primeras de @code{boundaries_array[173]}
coinciden con las dos primeras de @code{boundaries_array[1143]};
en conclusi@'on, los n@'umeros de segmentos poligonales171, 173 y 1143
(en este orden) son compatibles y el pol@'{@dotless{i}}gono
coloreado se podr@'a dibujar.
@example
(%i1) load(worldmap)$
(%i2) Bhutan;
(%o2)                        [[171, 173, 1143]]
(%i3) boundaries_array[171];
(%o3) @{Array:  
       #(88.750549 27.14727 88.806351 27.25305 88.901367 27.282221
         88.917877 27.321039)@}
(%i4) boundaries_array[173];
(%o4) @{Array:
       #(91.659554 27.76511 91.6008 27.66666 91.598022 27.62499
         91.631348 27.536381 91.765533 27.45694 91.775253 27.4161 
         92.007751 27.471939 92.11441 27.28583 92.015259 27.168051
         92.015533 27.08083 92.083313 27.02277 92.112183 26.920271
         92.069977 26.86194 91.997192 26.85194 91.915253 26.893881
         91.916924 26.85416 91.8358 26.863331 91.712479 26.799999 
         91.542191 26.80444 91.492188 26.87472 91.418854 26.873329
         91.371353 26.800831 91.307457 26.778049 90.682457 26.77417
         90.392197 26.903601 90.344131 26.894159 90.143044 26.75333
         89.98996 26.73583 89.841919 26.70138 89.618301 26.72694 
         89.636093 26.771111 89.360786 26.859989 89.22081 26.81472
         89.110237 26.829161 88.921631 26.98777 88.873016 26.95499
         88.867737 27.080549 88.843307 27.108601 88.750549 
         27.14727)@}
(%i5) boundaries_array[1143];
(%o5) @{Array:  
       #(91.659554 27.76511 91.666924 27.88888 91.65831 27.94805 
         91.338028 28.05249 91.314972 28.096661 91.108856 27.971109
         91.015808 27.97777 90.896927 28.05055 90.382462 28.07972
         90.396088 28.23555 90.366074 28.257771 89.996353 28.32333
         89.83165 28.24888 89.58609 28.139999 89.35997 27.87166 
         89.225517 27.795 89.125793 27.56749 88.971077 27.47361
         88.917877 27.321039)@}
(%i6) Bhutan_polygon: make_polygon([171,173,1143])$
(%i7) draw2d(Bhutan_polygon)$
@end example
@end deffn


@deffn  {Funci@'on} make_poly_country (@var{country_name})
Construye los pol@'{@dotless{i}}gonos necesarios para dibujar
un pa@'{@dotless{i}}s coloreado. En caso de contener islas,
un pa@'{@dotless{i}}s tendr@'a asociados varios pol@'{@dotless{i}}gonos.

Ejemplo:

@example
(%i1) load(worldmap)$
(%i2) make_poly_country(India)$
(%i3) apply(draw2d, %)$
@end example
@end deffn


@deffn  {Funci@'on} make_poly_continent (@var{continent_name})
@deffnx  {Funci@'on} make_poly_continent (@var{country_list})
Construye los pol@'{@dotless{i}}gonos necesarios para dibujar
un continente o lista de pa@'{@dotless{i}}ses coloreados.

Ejemplo:

@example
(%i1) load(worldmap)$
(%i2) /* A continent */
      make_poly_continent(Africa)$
(%i3) apply(draw2d, %)$
(%i4) /* A list of countries */
      make_poly_continent([Germany,Denmark,Poland])$
(%i5) apply(draw2d, %)$
@end example
@end deffn


