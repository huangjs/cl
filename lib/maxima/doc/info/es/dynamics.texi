@c english version 1.13
@menu
* Introducci@'on a dynamics::
* Funciones y variables para dynamics::
@end menu

@node Introducci@'on a dynamics, Funciones y variables para dynamics, dynamics, dynamics
@section Introducci@'on a dynamics

El paquete adicional @code{dynamics} incluye varias funciones para crear
diversas representaciones gr@'aficas de sistemas din@'amicos y fractales,
y adem@'as una implementaci@'on del m@'etodo num@'erico de Runge-Kutta de
cuarto orden, para resolver sistemas de ecuaciones diferenciales.

Para usar las funciones en este paquete ser@'a necesario primero que todo
cargarlo con @code{load("dynamics")}, y las funciones que crean
gr@'aficas necesitan que Xmaxima est@'e instalado.

@node Funciones y variables para dynamics,  , Introducci@'on a dynamics, dynamics
@section Funciones y variables para dynamics

@deffn {Funci@'on} chaosgame (@code{[[}@var{x1}, @var{y1}@code{]}...@code{[}@var{xm}, @var{ym}@code{]]}, @code{[}@var{x0}, @var{y0}@code{]}, @var{b}, @var{n}, ...opciones...);

Usa el m@'etodo llamado juego del caos, para producir fractales: se dibuja
un punto inicial (@var{x0}, @var{y0}) y luego se elije aleatoriamente uno
de los @var{m} puntos @code{[}@var{x1}, @var{y1}@code{]}...@code{[}@var{xm},
@var{ym}@code{]}. Despu@'es se dibuja un nuevo punto que estar@'a en
el segmento entre el @'ultimo punto dibujado y el punto que se acab@'o de
elegir aleatoriamente, a una distancia del punto elegido que ser@'a
@var{b} veces la longitud del segmento. El proceso se repite @var{n} veces.

@end deffn

@deffn {Funci@'on} evolution (@var{F}, @var{y0}, @var{n},...opciones...);

Dibuja @var{n+1} puntos en una gr@'afica bidimensional (serie de
tiempo), en que las coordenadas horizontales de los puntos son los
n@'umeros enteros 0, 1, 2, ..., @var{n}, y las coordenadas verticales
son los valores @var{y(n)} correspondientes, obtenidos a partir de la
relaci@'on de recurrencia
@ifnottex
@example
        y(n+1) = F(y(n))
@end example
@end ifnottex
@tex
$$y_{n+1} = F(y_n)$$
@end tex

Con valor inicial @var{y(0)} igual a @var{y0}. @var{F} deber@'a ser una
expresi@'on que dependa @'unicamente de la variable @var{y} (y no de @var{n}),
@var{y0} deber@'a ser un n@'umero real y @var{n} un n@'umero entero positivo.

@end deffn

@deffn {Funci@'on} evolution2d (@code{[}@var{F}, @var{G}@code{]}, @code{[}@var{x0}, @var{y0}@code{]}, @var{n}, ...opciones...);

Muestra, en una gr@'afica bidimensional, los primeros @var{n+1} puntos de
la sucesi@'on definida a partir del sistema din@'amico discreto con
relaciones de recurrencia:
@ifnottex 
@example
        x(n+1) = F(x(n), y(n))    y(n+1) = G(x(n), y(n))
@end example
@end ifnottex
@tex
$$\cases{x_{n+1} = F(x_n, y_n) &\cr y_{n+1} = G(x_n, y_n)}$$
@end tex

Con valores iniciales @var{x0} y @var{y0}. @var{F} y @var{G} deben ser dos
expresiones que dependan @'unicamente de @var{x} y @var{y}. 

@end deffn

@deffn {Funci@'on} ifs (@code{[}@var{r1},...,@var{rm}@code{]},@code{[}@var{A1},...,@var{Am}@code{]}, @code{[[}@var{x1},@var{y1}@code{]}...@code{[}@var{xm}, @var{ym}@code{]]}, @code{[}@var{x0},@var{y0}@code{]}, @var{n}, ...opciones...);

Usa el m@'etodo del Sistema de Funciones Iteradas (IFS, en ingl@'es
Iterated Function System). Ese m@'etodo es semejante al m@'etodo descrito
en la funci@'on @code{chaosgame}, pero en vez de aproximar el @'ultimo punto
al punto elegido aleatoriamente, las dos coordenadas del @'ultimo punto
se multiplican por una matriz 2 por 2 @var{Ai} correspondiente al punto
que fue elegido aleatoriamente.

La selecci@'on aleatoria de uno de los @var{m} puntos atractivos puede
ser realizada con una funci@'on de probabilidad no uniforme, definida
con los pesos @var{r1},...,@var{rm}. Esos pesos deben ser dados en forma
acumulada; por ejemplo, si se quieren 3 puntos con probabilidades 0.2, 0.5 y
0.3, los pesos @var{r1}, @var{r2} y @var{r3} podr@'{@dotless{i}}an ser 2, 7 y 10, o
cualquier otro grupo de n@'umeros que tengan la misma proporci@'on.

@end deffn

@deffn {Funci@'on} julia (@var{x}, @var{y}, ...@var{opciones}...)

Crea un fichero gr@'afico con la representaci@'on del conjunto de Julia
del n@'umero complejo (@var{x} + i @var{y}). Los par@'ametros @var{x} y
@var{y} deben ser reales. El fichero se crea en el direct@'orio actual o
en el direct@'orio del usuario, usando el formato gr@'afico XPM. El
programa puede demorar varios segundos a ser ejecutado y cuando termina
imprime un mensaje con el nombre del fichero creado.

Se asignan diferentes colores a los puntos que no pertenecen al conjunto
de Julia, de acuerdo con el n@'umero de iteraciones que demore la
secuencia, comenzando en ese punto, a salir fuera del
c@'{@dotless{i}}rculo de convergencia con radio 2. El n@'umero m@'aximo
de iteraciones se define con la opci@'on @var{levels}; despu@'es de
ejecutadas ese n@'umero de iteraciones, si la secuencia aun est@'a
dentro del c@'{@dotless{i}}rculo de convergencia, el punto ser@'a
coloreado con el color definido por la opci@'on @var{color}.

Todos los colores usados para los puntos que no pertenecen al conjunto
de Julia tendr@'an los mismos valores de saturaci@'on (@var{saturation})
y valor (@var{value}), pero con diferentes @'angulos de tonalidad,
distribuidos uniformemente en el intervalo entre @var{hue} y (@var{hue}
+ @var{huerange}).

Se puede dar a la funci@'on una secuencia de opciones. La lista de
posibles opciones aparece en una secci@'on m@'as al frente.

@end deffn

@deffn {Funci@'on} mandelbrot (@var{options})

Crea un fichero gr@'afico con la representaci@'on del conjunto de
Mandelbrot. El fichero se crea en el direct@'orio actual o en el
direct@'orio del usuario, usando el formato gr@'afico XPM. El programa
puede demorar varios segundos a ser ejecutado y cuando termina imprime
un mensaje con el nombre del fichero creado.

Se asignan diferentes colores a los puntos que no pertenecen al conjunto
de Mandelbrot, de acuerdo con el n@'umero de iteraciones que demore la
secuencia generada por ese punto a salir fuera del c@'{@dotless{i}}rculo
de convergencia con radio 2. El n@'umero m@'aximo de iteraciones se
define con la opci@'on @var{levels}; despu@'es de ejecutadas ese
n@'umero de iteraciones, si la secuencia aun est@'a dentro del
c@'{@dotless{i}}rculo de convergencia, el punto ser@'a coloreado con el
color definido por la opci@'on @var{color}.

Todos los colores usados para los puntos que no pertenecen al conjunto
de Mandelbrot tendr@'an los mismos valores de saturaci@'on
(@var{saturation}) y valor (@var{value}), pero con diferentes @'angulos
de tonalidad, distribuidos uniformemente en el intervalo entre @var{hue}
y (@var{hue} + @var{huerange}).

Se puede dar a la funci@'on una secuencia de opciones. La lista de
posibles opciones aparece en una secci@'on m@'as al frente.

@end deffn

@deffn {Funci@'on} orbits (@var{F}, @var{y0}, @var{n1}, @var{n2}, [@var{x}, @var{x0}, @var{xf}, @var{xstep}], ...opciones...);

Dibuja el diagrama de @'orbitas de una familia de sistemas din@'amicos
discretos unidimensionales, con un par@'ametro @var{x}; ese tipo de diagrama
se usa para mostrar las bifurcaciones de un sistema discreto unidimensional.

La funci@'on @var{F(y)} define una secuencia que comienza con un valor
inicial @var{y0}, igual que en el caso de la funci@'on @code{evolution}, pero
en este caso la funci@'on tambi@'en depender@'a del par@'ametro @var{x},
el cual tomar@'a valores comprendidos en el intervalo de @var{x0} a @var{xf},
con incrementos @var{xstep}. Cada valor usado para el par@'ametro @var{x} se
muestra en el eje horizontal. En el eje vertical se mostrar@'an @var{n2}
valores de la sucesi@'on @var{y(n1+1)},..., @var{y(n1+n2+1)}, obtenidos
despu@'es de dejarla evolucionar durante @var{n1} iteraciones iniciales.

@end deffn

@deffn {Funci@'on} rk (EDO, var, inicial, dominio)
@deffnx {Funci@'on} rk ([EDO1,...,EDOm], [v1,...,vm], [inic1,...,inicm], dominio)

La primera forma se usa para resolver num@'ericamente una ecuaci@'on
diferencial ordinaria de primer orden (EDO), y la segunda forma resuelve
num@'ericamente un sistema de @var{m} de esas ecuaciones, usando el m@'etodo
de Runge-Kutta de cuarto orden. @var{var} representa la variable dependiente.
EDO debe ser una expresi@'on que dependa @'unicamente de las variables
independiente y dependente, y define la derivada de la variable dependiente
en funci@'on de la variable independiente.

La variable independiente se representa con @var{dominio}, que debe ser
una lista con cuatro elementos, como por ejemplo:
@example
[t, 0, 10, 0.1]
@end example
el primer elemento de la lista identifica la variable independiente, el
segundo y tercer elementos son los valores inicial y final para esa
variable, y el @'ultimo elemento da el valor de los incrementos que
deber@'an ser usados dentro de ese intervalo.

Si se van a resolver @var{m} ecuaciones, deber@'a haber @var{m}
variables dependientes @var{v1}, @var{v2}, ..., @var{vm}. Los valores
iniciales para esas variables ser@'an @var{inic1},
@var{inic2}, ..., @var{inicm}. Continuar@'a existiendo apenas una
variable independiente definida por la lista @var{domain}, como en
el caso anterior. @var{EDO1}, ..., @var{EDOm} son las expresiones que
definen las derivadas de cada una de las variables dependientes en
funci@'on de la variable independiente. Las @'unicas variables que
pueden aparecer en cada una de esas expresiones son la variable
independiente y cualquiera de las variables dependientes. Es importante
que las derivadas @var{EDO1}, ..., @var{EDOm} sean colocadas en la lista
en el mismo orden en que fueron agrupadas las variables dependientes;
por ejemplo, el tercer elemento de la lista ser@'a interpretado como la
derivada de la tercera variable dependiente.

El programa intenta integrar las ecuaciones desde el valor inicial de la
variable independiente, hasta el valor final, usando incrementos
fijos. Si en alg@'un paso una de las variables dependientes toma un
valor absoluto muy grande, la integraci@'on ser@'a suspendida en ese
punto.  El resultado ser@'a una lista con un n@'umero de elementos igual
al n@'umero de iteraciones realizadas. Cada elemento en la lista de
resultados es tambi@'en una lista con @var{m}+1 elementos: el valor de
la variable independiente, seguido de los valores de las variables
dependientes correspondientes a ese punto.

@end deffn

@deffn {Funci@'on} staircase (@var{F}, @var{y0}, @var{n}, ...opciones...);

Dibuja un diagrama de escalera (o diagrama de red) para la sucesi@'on
definida por la ecuaci@'on de recurrencia
@ifnottex
@example
        y(n+1) = F(y(n))
@end example
@end ifnottex
@tex
$$y_{n+1} = F(y_n)$$
@end tex

La interpretaci@'on y valores permitidos de los par@'ametros de entrada
es la misma que para la funci@'on @code{evolution}. Un diagrama de
escalera consiste en una gr@'afica de la funci@'on @var{F(y)}, junto con
la recta @var{G(y)} @code{=} @var{y}. Se comienza por dibujar un
segmento vertical desde el punto (@var{y0}, @var{y0}) en la recta, hasta
el punto de intersecci@'on con la funci@'on @var{F}. En seguida, desde
ese punto se dibuja un segmento horizontal hasta el punto de
intersecci@'on con la recta, (@var{y1}, @var{y1}); el procedimiento se
repite @var{n} veces hasta alcanzar el punto (@var{yn}, @var{yn}).

@end deffn

@b{Opciones}

Cada opci@'on es una lista con dos o m@'as elementos. El primer elemento
en la lista es el nombre de la opci@'on y el resto consiste en los
argumentos para esa opci@'on.

Las opciones aceptadas por las funciones evolution, evolution2,
staircase, orbits, ifs y chaosgame son las siguientes:

@itemize @bullet
@item
@dfn{domain} especifica los valores m@'{@dotless{i}}nimo y m@'aximo de la
variable independiente para la gr@'afica de la funci@'on @var{F}
representada por @code{staircase}.

@item
@dfn{pointsize} define el radio de cada punto dibujado, en unidades de
puntos.  El valor por omisi@'on es 1.

@item
@dfn{xaxislabel} es la etiqueta que se escribir@'a en el eje horizontal.

@item
@dfn{xcenter} es la coordenada x del punto que deber@'a aparecer en el
centro de la gr@'afica. Esta opci@'on no es usada por la funci@'on
@code{orbits}.

@item
@dfn{xradius} es mitad de la longitud del intervalo de valores de x que
ser@'a representado. Esta opci@'on no es usada por la funci@'on
@code{orbits}.

@item
@dfn{yaxislabel} es la etiqueta que se escribir@'a en el eje vertical.

@item
@dfn{ycenter} es la coordenada y del punto que deber@'a aparecer en el
centro de la gr@'afica.

@item
@dfn{yradius} es mitad de la longitud del intervalo de valores de y que
ser@'a representado.

@end itemize

Las opciones aceptadas por los programas julia y mandelbrot son las
siguientes:

@itemize @bullet
@item
@dfn{size} acepta uno o dos argumentos. Si se da solo un argumento, el
ancho y la altura del fichero gr@'afico creado ser@'an iguales a ese
valor en pixels. Si se dan dos argumentos, esos dos valores ser@'an
usados para el ancho y la altura. El valor por omisi@'on es 400 pixels
tanto para el ancho como para la altura. Si los dos valores no son
iguales, el conjunto aparecer@'a distorcionado.

@item
@dfn{levels} define el n@'umero m@'aximo de iteraciones, que es
tambi@'en el n@'umero de colores usado para los puntos que no pertenecem
al conjunto. El valor por omisi@'on es 12; valores mayores implican
tiempos de procesamiento m@'as elevados.

@item
@dfn{huerange} define el intervalo de @'angulos usados para la tonalidad
de los puntos que no pertenecen al conjunto. El valor por omisi@'on es
360, que hace que los colores usados abarcar@'an todo el rango de
tonalidades. Valores mayores que 360 implican repetici@'on de algunos
valores de la tonalidad, y pueden usarse valores negativos para que el
@'angulo de tonalidad sea menor a medida que el n@'umero de iteraciones
aumente.

@item
@dfn{hue} define la tonalidad, en grados, del primer color usado para
representar los puntos que no pertenecen al conjunto.  Su valor por
omisi@'on es 300 grados, que corresponde al color magenta; el color
correspondiente para otros valores estandar es rojo 0, naranja 45,
amarillo 60, verde 120, cian 180 y azul 240. Consulte tambi@'en la
opci@'on @var{huerange}.

@item
@dfn{saturation} define el nivel de saturaci@'on que ser@'a usado para
los colores de los puntos que no pertenecen al conjunto. Debe ser un valor
entre 0 y 1. El valor por omisi@'on es 0.46.

@item
@dfn{value} define el valor de los colores usados para puntos que no
pertenezcan al conjunto. Debe estar comprendido entre 0 y 1; cuanto
mayor sea, mas brilhantes ser@'an los colores. Su valor por omisi@'on es
0.96.

@item
@dfn{color} debe ir seguido de tres par@'ametros que definen la
tonalidad, saturaci@'on y valor del color que ser@'a usado para los
puntos del conjunto. El valor por omisi@'on es 0 para los tres
par@'ametros, que corresponde al negro. Consulte las explicaci@'on sobre
el rango de valores aceptados en la explicaci@'on de las opciones
@var{hue}, @var{saturation} y @var{value}.

@item
@dfn{center} deber@'a tener dos par@'ametros reales que dan las
coordenadas, en el plano complejo, del punto en el centro de la regi@'on
representada. El valor por omisi@'on es 0 para las dos coordenadas (el
origen).

@item
@dfn{radius} es el radio de el mayor c@'{@dotless{i}}rculo que
cabe dentro de la regi@'on quadrada que ser@'a representada. El valor
por omisi@'on es 2.

@item
@dfn{filename} da el nombre del fichero donde se guardar@'a la gr@'afica
producida. A ese nombre se le acrecentar@'a la terminaci@'on .xpm. Si el
fichero ya existe, ser@'a substituido por el fichero producido por la
funci@'on. El valor por omisi@'on es julia para el conjunto de Julia y
mandelbrot para el conjunto de Mandelbrot.

@end itemize

@b{Ejemplos}

Representaci@'on gr@'afica y diagrama de escalera de la secuencia:
2, cos(2), cos(cos(2)),...

@example
(%i1) load("dynamics")$
(%i2) evolution(cos(y), 2, 11, [yaxislabel, "y"], [xaxislabel,"n"]);
(%i3) staircase(cos(y), 1, 11, [domain, 0, 1.2]);
@end example

@ifnotinfo
@image{../figures/dynamics1,8cm}
@image{../figures/dynamics2,8cm}
@end ifnotinfo

Si su procesador es lento, tendr@'a que reducir el n@'umero de
iteraciones usado en los ejemplos siguientes. Y el valor de
@var{pointsize} que da mejores resultados depende del monitor y de la
resoluci@'on que use. Tendr@'a que experimentar con diferentes valores.

Diagrama de @'orbitas para el mapa cuadr@'atico
@ifnottex
@example
        y(n+1) = x + y(n)^2
@end example
@end ifnottex
@tex
$$y_{n+1} = x + y_n^2$$
@end tex

@example
(%i4) orbits(y^2+x, 0, 50, 200, [x, -2, 0.25, 0.01], [pointsize, 0.9]);
@end example

@ifnotinfo
@image{../figures/dynamics3,8cm}
@end ifnotinfo

Para ampliar la regi@'on alrededor de la bifurcaci@'on en la parte de
abajo, cerca de x @code{=} -1.25, use el comando:
@example
(%i5) orbits(x+y^2, 0, 100, 400, [x,-1,-1.53,-0.001], [pointsize,0.9],
             [ycenter,-1.2], [yradius,0.4]);
@end example

@ifnotinfo
@image{../figures/dynamics4,8cm}
@end ifnotinfo

Evoluci@'on de un sistema en dos dimensiones, que conduce a un fractal:

@example
(%i6) f: 0.6*x*(1+2*x)+0.8*y*(x-1)-y^2-0.9$
(%i7) g: 0.1*x*(1-6*x+4*y)+0.1*y*(1+9*y)-0.4$
(%i8) evolution2d([f,g],[-0.5,0],50000,[pointsize,0.7]);
@end example

@ifnotinfo
@image{../figures/dynamics5,8cm}
@end ifnotinfo

Y una ampliaci@'on de una peque@~na regi@'on en el fractal:

@example
(%i9) evolution2d([f,g],[-0.5,0],300000,[pointsize,0.7], [xcenter,-0.7],
                  [ycenter,-0.3],[xradius,0.1],[yradius,0.1]);
@end example

@ifnotinfo
@image{../figures/dynamics6,8cm}
@end ifnotinfo

Una gr@'afica del triangulo de Sierpinsky, obtenida con el juego del caos:

@example
(%i9) chaosgame([[0, 0], [1, 0], [0.5, sqrt(3)/2]], [0.1, 0.1], 1/2,
                 30000, [pointsize,0.7]);
@end example

@ifnotinfo
@image{../figures/dynamics7,8cm}
@end ifnotinfo

El helecho de Barnsley, obtenido con el Sistema de Funciones Iteradas:

@example
(%i10) a1: matrix([0.85,0.04],[-0.04,0.85])$
(%i11) a2: matrix([0.2,-0.26],[0.23,0.22])$
(%i12) a3: matrix([-0.15,0.28],[0.26,0.24])$
(%i13) a4: matrix([0,0],[0,0.16])$
(%i14) p1: [0,1.6]$
(%i15) p2: [0,1.6]$
(%i16) p3: [0,0.44]$
(%i17) p4: [0,0]$
(%i18) w: [85,92,99,100]$
(%i19) ifs(w,[a1,a2,a3,a4],[p1,p2,p3,p4],[5,0],50000,[pointsize,0.9]);
@end example

@ifnotinfo
@image{../figures/dynamics8,8cm}
@end ifnotinfo

Para crear un fichero llamado @emph{dinamica9.xpm} con la
representaci@'on gr@'afica del conjunto de Mandelbrot, con 12 colores,
use el comando:

@example
mandelbrot([filename,"dinamica9"])$
@end example

@ifnotinfo
@image{../figures/dynamics9,8cm}
@end ifnotinfo

y el conjunto de Julia del n@'umero (-0.55 + i 0.6) puede ser obtenido con:
@example
julia(-0.55, 0.6, [levels, 36], [center, 0, 0.6], [radius, 0.3],
      [hue, 240], [huerange, -180], [filename, "dinamica10"])$
@end example

la gr@'afica se guardar@'a en el fichero @emph{dinamica10.xpm} y
mostrar@'a la regi@'on desde -0.3 hasta 0.3 en la direcci@'on x, y desde
0.3 hasta 0.9 en la direcci@'on y. Ser@'an usados 36 colores, comenzando
con azul e terminando con amarillo.

@ifnotinfo
@image{../figures/dynamics10,8cm}
@end ifnotinfo

Para resolver num@'ericamente la ecuaci@'on diferencial

@ifnottex
@example
          dx/dt = t - x^2
@end example
@end ifnottex
@tex
$${{dx}\over{dt}} = t - x^2$$ 
@end tex

Con valor inicial x(t=0) = 1, en el intervalo de t desde 0 hasta 8, y
con incrementos de 0.1, se usa:

@example
(%i20) resultados: rk(t-x^2,x,1,[t,0,8,0.1])$
@end example

los resultados quedar@'an guardados en la lista resultados.

Para resolver num@'ericamente el sistema:

@ifnottex
@example
        dx/dt = 4-x^2-4*y^2     dy/dt = y^2-x^2+1
@end example
@end ifnottex
@tex
$$\cases{{\displaystyle{dx}\over\displaystyle{dt}} = 4-x^2-4y^2 &\cr &\cr {\displaystyle{dy}\over\displaystyle{dt}} = y^2-x^2+1}$$
@end tex

para t entre 0 y 4, con valores iniciales -1.25 y 0.75 para (x, y) en t=0:

@example
(%i21) sol: rk([4-x^2-4*y^2,y^2-x^2+1],[x,y],[-1.25,0.75],[t,0,4,0.02])$
@end example
