@c English version 1.3
@menu
* Funciones y variables para mnewton::
@end menu


@node Funciones y variables para mnewton,  , mnewton, mnewton
@section Funciones y variables para mnewton


@defvr {Variable opcional} newtonepsilon
Valor por defecto:  @code{10.0^(-fpprec/2)}

Precisi@'on que determina cuando la funci@'on @code{mnewton} ha conseguido una convergencia aceptable.

V@'ease tambi@'en @code{mnewton}.
@end defvr


@defvr {Variable opcional} newtonmaxiter
Valor por defecto:  @code{50}

N@'umero m@'aximo de iteraciones para la funci@'on @code{mnewton} en caso de que no se produzca convergencia, o de que @'esta se haga muy lenta.

V@'ease tambi@'en @code{mnewton}.
@end defvr


@deffn {Funci@'on} mnewton (@var{FuncList},@var{VarList},@var{GuessList})
Resoluci@'on de sistemas de ecuaciones no lineales por el m@'etodo de Newton.
@var{FuncList} es la lista de ecuaciones a resolver,
@var{VarList} es la lista con los nombres de las inc@'ognitas y
@var{GuessList} es la lista de aproximaciones iniciales.

La soluci@'on se devuelve en el mismo formato que lo hace la funci@'on @code{solve()}.
Si no se le encuentra soluci@'on al sistema, se obtiene @code{[]} como respuesta.

Esta funci@'on se controla con las variables globales @code{newtonepsilon} y @code{newtonmaxiter}.

@example
(%i1) load("mnewton")$

(%i2) mnewton([x1+3*log(x1)-x2^2, 2*x1^2-x1*x2-5*x1+1],
              [x1, x2], [5, 5]);
(%o2) [[x1 = 3.756834008012769, x2 = 2.779849592817897]]
(%i3) mnewton([2*a^a-5],[a],[1]);
(%o3)             [[a = 1.70927556786144]]
(%i4) mnewton([2*3^u-v/u-5, u+2^v-4], [u, v], [2, 2]);
(%o4) [[u = 1.066618389595407, v = 1.552564766841786]]
@end example

Antes de hacer uso de esta funci@'on ejec@'utese  @code{load("mnewton")}. V@'eanse tambi@'en @code{newtonepsilon} y @code{newtonmaxiter}.
@end deffn


