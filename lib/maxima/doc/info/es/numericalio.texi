@c English version 1.6
@menu
* Introducci@'on a numericalio::
* Funciones y variables para entrada y salida en formato texto::
* Funciones y variables para entrada y salida en formato binario::
@end menu

@node Introducci@'on a numericalio, Funciones y variables para entrada y salida en formato texto, numericalio, numericalio
@section Introducci@'on a numericalio

El paquete @code{numericalio} define funciones para leer y escribir ficheros de datos
y flujos. Las funciones de entrada y salida en formato texto pueden leer y escribir
n@'umeros (enteros, decimales o decimales grandes), s@'{@dotless{i}}mbolos y cadenas.
Las funciones de entrada y salida en formato binario s@'olo pueden leer y escribir
n@'umeros decimales.

Si ya existe una lista, matriz o array para almacenar los datos de entrada,
las funciones de entrada de @code{numericalio} pueden escribir los datos
directamente en estos objetos. En caso contrario, @code{numericalio} tratar@'a
de generar el objeto apropiado para almacenar estos datos.

@subsection Entrada y salida en formato texto

In plain-text input and output,
it is assumed that each item to read or write is an atom:

En la entrada y salida de datos en formato texto se supone que cada dato es un @'atomo:
un n@'umero entero, decimal, decimal grande, una cadena o un s@'{@dotless{i}}mbolo;
no se admiten fracciones, n@'umeros complejos o cualquier otra expresi@'on no
at@'omica. Estas funciones pueden llegar a realizar operaciones v@'alidas con
expresiones no at@'omicas, pero estos resultados no se documentan y est@'an sujetos
a cambios ulteriores.

Los @'atomos, tanto en los ficheros de entrada como en los de salida, tienen el 
mismo formato que en los ficheros por lotes de Maxima o en la consola
interactiva. En particular, las cadenas deben encerrarse entre comillas
dobles, la barra invertida @code{\} evita cualquier interpretaci@'on
especial del car@'acter siguiente, y el s@'{@dotless{i}}mbolo de
interrogaci@'on @code{?} se reconoce como el comienzo de un 
s@'{@dotless{i}}mbolo de Lisp. No se reconoce ning@'un car@'acter de
continuaci@'on de l@'{@dotless{i}}nea interrumpida.

@subsection Separadores v@'alidos para lectura


Las funciones para la entrada y salida de datos en formato texto tiene un 
argumento opcional, @var{separator_flag}, para indicar qu@'e car@'acter
se utiliza como separador.

Para la entrada de texto se reconocen los siguientes valores de la
variable @var{separator_flag}: @code{comma} para los valores separados por
comas, @code{pipe} para los valores separados por el car@'acter de la barra
vertical @code{|}, @code{semicolon} para los valores separados por punto y
coma @code{;}, y @code{space} para cuando los valores se separan por espacios
o tabulaciones. Si el nombre del fichero tiene extensi@'on @code{.csv} y no se
especifica el argumento @var{separator_flag}, se tomar@'a por defecto @code{comma}.
Si el fichero tiene cualquier otra extensi@'on diferente de @code{.csv} y no se
especifica @code{separator_flag}, se usar@'a por defecto @code{space}.

En la entrada de texto, varios espacios y tabulaciones sucesivos cuentan como un
@'unico separador. Sin embargo, varias comas, barras verticales o punto y comas 
sucesivos se interpretan que tienen el s@'{@dotless{i}}mbolo @code{false} entre
ellos; por ejemplo, @code{1234,,Foo} se interpreta lo mismo que si fuese
@code{1234,false,Foo}. En la salida, los @'atomos @code{false} deben
escribirse expl@'{@dotless{i}}citamente, por lo que la lista 
@code{[1234, false, Foo]} debe escribirse @code{1234,false,Foo}.

@subsection Separadores v@'alidos para escritura

Para la entrada de texto se acepta @code{tab} como valor de @var{separator_flag}
 para datos separados por tabuladores, as@'{@dotless{i}} como
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.

En la escritura de texto, el @'atomo@code{false} se escribe tal cual y
una lista @code{[1234, false, Foo]} se escribe @code{1234,false,Foo}.






@subsection Entrada y salida de decimales en formato binario

Las funciones de @code{numericalio} pueden leer y escribir n@'umeros decimales en
coma flotante de 8 bytes del est@'andar IEEE 754. Estos n@'umeros se pueden escribir
empezando por el byte menos significativo o por el m@'as significativo, seg@'un lo
indique la variable global @code{assume_external_byte_order}. Por defecto, @code{numericalio}
los almacena con el byte m@'as significativo primero.

Cualesquiera otros tipos de decimales son transformados a 8 bytes. El paquete
@code{numericalio} no puede leer ni escribir datos binarios no num@'ericos.

Ciertos entornos Lisp no reconocen valores especiales del est@'andar IEEE 754
(m@'as o menos infinito, valores no num@'ericos, valores no normales). El efecto
que pueda producir la lectura de tales valores por parte de @code{numericalio}
es imprevisible.

@code{numericalio} incluye funciones para abrir un flujo de lectura o escritura 
de flujos de bytes.


@node Funciones y variables para entrada y salida en formato texto, Funciones y variables para entrada y salida en formato binario, Introducci@'on a numericalio, numericalio
@section Funciones y variables para entrada y salida en formato texto

@deffn {Funci@'on} read_matrix (@var{S})
@deffnx {Funci@'on} read_matrix (@var{S}, @var{M})
@deffnx {Funci@'on} read_matrix (@var{S}, @var{separator_flag})
@deffnx {Funci@'on} read_matrix (@var{S}, @var{M}, @var{separator_flag})

@code{read_matrix(@var{S})} lee la fuente @var{S} y devuelve su contenido completo en forma
de matriz. El tama@~no de la matriz se deduce de los datos de entrada: 
cada fila del fichero forma una fila de la matriz. Si hay filas con diferente n@'umero de elementos,
@code{read_matrix} emite un mensaje de error.

@code{read_matrix(@var{S}, @var{M})} lee la fuente @var{S} y va almacenando su contenido
en la matriz @var{M}, hasta que @var{M} est@'e llena o hasta que se consuma la fuente.
Los datos se almacenan fila a fila. Los datos de entrada no necesitan tener el
mismo n@'umero de filas y columnas que @var{M}.

La fuente @var{S} puede ser el nombre de un fichero o de un flujo.

Los valores aceptados para @var{separator_flag} son:
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.
Si no se especifica un valor para @var{separator_flag},
se supone que los datos est@'an separados por espacios.

@end deffn

@deffn {Funci@'on} read_array (@var{S}, @var{A})
@deffnx {Funci@'on} read_array (@var{S}, @var{A}, @var{separator_flag})

Guarda el contenido de la fuente @var{S} en el array @var{A},
hasta que @var{A} est@'e lleno o hasta que se consuma la fuente.
Los datos se almacenan fila a fila. Los datos de entrada no necesitan tener el
mismo n@'umero de filas y columnas que @var{A}.

La fuente @var{S} puede ser el nombre de un fichero o de un flujo.

Los valores aceptados para @var{separator_flag} son:
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.
Si no se especifica un valor para @var{separator_flag},
se supone que los datos est@'an separados por espacios.

@end deffn


@deffn {Funci@'on} read_hashed_array (@var{S}, @var{A})
@deffnx {Funci@'on} read_hashed_array (@var{S}, @var{A}, @var{separator_flag})

Lee la fuente @var{S} y devuelve su contenido completo en forma de array de claves.
La fuente @var{S} puede ser el nombre de un fichero o de un flujo.

@code{read_hashed_array} interpreta el primer elemento de cada fila como una clave,
asociando el resto de la fila, en formato de lista, a la clave. Por ejemplo,
la secuencia @code{567 12 17 32 55} equivale a @code{A[567]: [12, 17, 32, 55]$}.
Las filas no necesitan tener todas ellas el mismo n@'umero de elementos.

Los valores aceptados para @var{separator_flag} son:
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.
Si no se especifica un valor para @var{separator_flag},
se supone que los datos est@'an separados por espacios.
@end deffn

@deffn {Funci@'on} read_nested_list (@var{S})
@deffnx {Funci@'on} read_nested_list (@var{S}, @var{separator_flag})

Lee la fuente @var{S} y devuelve su contenido completo en forma de lista anidada.
La fuente @var{S} puede ser el nombre de un fichero o de un flujo.

@code{read_nested_list} devuelve una lista que tiene una sublista por cada fila
de entrada. Los filas de entrada no necesitan tener todas ellas el mismo n@'umero
de elementos. Las filas en blanco no se ignoran, sino que se convierten 
en listas vac@'{@dotless{i}}as

Los valores aceptados para @var{separator_flag} son:
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.
Si no se especifica un valor para @var{separator_flag},
se supone que los datos est@'an separados por espacios.
@end deffn

@deffn {Funci@'on} read_list (@var{S})
@deffnx {Funci@'on} read_list (@var{S}, @var{L})
@deffnx {Funci@'on} read_list (@var{S}, @var{separator_flag})
@deffnx {Funci@'on} read_list (@var{S}, @var{L}, @var{separator_flag})

@code{read_list(@var{S})} lee la fuente @var{S} y devuelve su contenido como una lista simple.

@code{read_list(@var{S}, @var{L})} guarda el contenido de la fuente @var{S} en la lista @var{L},
hasta que @var{L} est@'e llena o hasta que se consuma la fuente.

La fuente @var{S} puede ser el nombre de un fichero o de un flujo.

Los valores aceptados para @var{separator_flag} son:
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.
Si no se especifica un valor para @var{separator_flag},
se supone que los datos est@'an separados por espacios.
@end deffn

@deffn {Funci@'on} write_data (@var{X}, @var{D})
@deffnx {Funci@'on} write_data (@var{X}, @var{D}, @var{separator_flag})

Escribe el objeto @var{X} en el destino @var{D}.

@code{write_data} escribe una matriz fila a fila; cada l@'{@dotless{i}}nea de
entrada se corresponde con una fila.

@code{write_data} escribe un array creado por @code{array} o @code{make_array}
fila a fila, con una nueva l@'{@dotless{i}}nea al final de cada bloque de datos.
Los bloques de mayores dimensiones se separan con l@'{@dotless{i}}neas adicionales.

@code{write_data} escribe un array de claves con cada clave seguida de su lista
asociada en una sola l@'{@dotless{i}}nea.

@code{write_data} escribe una lista anidada con una sublista por l@'{@dotless{i}}nea.

@code{write_data} escribe una lista simple en una @'unica fila.

El destino @var{D} puede ser el nombre de un fichero o un flujo; en el primer caso,
la variable global @code{file_output_append} controla si el fichero de salida es
ampliado con la nueva informaci@'on o si se borra antes; en el segundo caso,
no se realiza ning@'un tipo de acci@'on por parte de @code{write_data} despu@'es
de que se hayan escrito los datos; en particular, el flujo se mantiene abierto.

Los valores aceptados para @var{separator_flag} son:
@code{comma}, @code{pipe}, @code{semicolon} y @code{space}.
Si no se especifica un valor para @var{separator_flag},
se supone que los datos est@'an separados por espacios.
@end deffn




@node Funciones y variables para entrada y salida en formato binario, , Funciones y variables para entrada y salida en formato texto, numericalio
@section Funciones y variables para entrada y salida en formato binario

@deffn {Funci@'on} assume_external_byte_order (@var{byte_order_flag})

Le indica a @code{numericalio} el orden de los bytes en que debe leer y escribir los datos.
Los valores que reconoce @var{byte_order_flag} son dos:
@code{lsb}, que indica que el byte menos significativo debe ser el primero, y @code{msb},
que indica que el byte m@'as significativo es el que debe ir en primer lugar.

En caso de no hacer ninguna selecci@'on, @code{numericalio} interpreta que es el byte
m@'as significativo el que se debe leer o escribir primero.
@end deffn

@deffn {Funci@'on} openr_binary (@var{file_name})
Devuelve un flujo de entrada de bytes no signados para la lectura del fichero de nombre @var{file_name}.

@end deffn

@deffn {Funci@'on} openw_binary (@var{file_name})
Devuelve un flujo de entrada de bytes no signados para la escritura en el fichero de nombre @var{file_name}.

@end deffn

@deffn {Funci@'on} opena_binary (@var{file_name})
Devuelve un flujo de entrada de bytes no signados para a@~nadir datos al fichero de nombre @var{file_name}.

@end deffn

@deffn {Funci@'on} read_binary_matrix (@var{S}, @var{M})
Lee n@'umeros decimales en coma flotante de 8 bytes desde la fuente @var{S} y los
va almacenando en la matriz @var{M}, bien hasta que @var{M} se llene, o bien hasta que
la fuente se haya consumido. La matriz @var{M} se rellena fila a fila.

La fuente @var{S} puede ser el nombre de un fichero o un flujo.

El orden de los bytes de los datos procedentes de la fuente se especifican
mediante @code{assume_external_byte_order}.

@end deffn

@deffn {Funci@'on} read_binary_array (@var{S}, @var{A})
Lee n@'umeros decimales en coma flotante de 8 bytes desde la fuente @var{S} y los
va almacenando en el array @var{A}, bien hasta que @var{A} se llene, o bien hasta que
la fuente se haya consumido. @var{A} debe ser un array creado por @code{array}
o por @code{make_array}. El array @var{A} se rellena fila a fila.

La fuente @var{S} puede ser el nombre de un fichero o un flujo.

El orden de los bytes de los datos procedentes de la fuente se especifican
mediante @code{assume_external_byte_order}.

@end deffn

@deffn {Funci@'on} read_binary_list (@var{S})
@deffnx {Funci@'on} read_binary_list (@var{S}, @var{L})
@code{read_binary_list(@var{S})} lee el contenido completo de la fuente de datos @var{S}
como una secuencia de n@'umeros decimales en coma flotante de 8 bytes en formato binario,
devolvi@'endolos en forma de lista.

La fuente @var{S} puede ser el nombre de un fichero o un flujo.

@code{read_binary_list(@var{S}, @var{L})} lee n@'umeros decimales en coma flotante de 8 bytes en
formato binario desde la fuente @var{S} y los almacena en la lista @var{L}, bien hasta que
@'esta est@'e llena, o bien hasta que se consuman los datos de la fuente.

El orden de los bytes de los datos procedentes de la fuente se especifican
mediante @code{assume_external_byte_order}.
@end deffn

@deffn {Funci@'on} write_binary_data (@var{X}, @var{D})

Escribe el objeto @var{X}, que contiene n@'umeros decimales en
coma flotante de 8 bytes del est@'andar IEEE 754, en el destino @var{D}.
Cualesquiera otros tipos de decimales son transformados a 8 bytes. 
@code{write_binary_data} no puede escribir datos no num@'ericos.

El objeto @var{X} puede ser una lista, una lista anidada, una matriz, o un
array creado con @code{array} o @code{make_array}; @var{X} no puede ser
ni un array no declarado ni cualquier otro tipo de objeto distinto a los citados.
@code{write_binary_data} escribe las listas anidadas, las matrices y los arrays
fila a fila.

El destino @var{D} puede ser el nombre de un fichero o un flujo; en el primer caso,
la variable global @code{file_output_append} controla si el fichero de salida es
ampliado con la nueva informaci@'on o si se borra antes; en el segundo caso,
no se realiza ning@'un tipo de acci@'on por parte de @code{write_binary_data} despu@'es
de que se hayan escrito los datos; en particular, el flujo se mantiene abierto.

El orden de los bytes de los datos procedentes de la fuente se especifican
mediante @code{assume_external_byte_order}.

@end deffn

