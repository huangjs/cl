@c English version 1.2
@menu
* Funciones y variables para opsubst::
@end menu

@node Funciones y variables para opsubst,  , opsubst, opsubst
@section Funciones y variables para opsubst


@deffn {Funci@'on} opsubst (@var{f},@var{g},@var{e})
@deffnx {Funci@'on} opsubst (@var{g}=@var{f},@var{e})
@deffnx {Funci@'on} opsubst ([@var{g1}=@var{f1},@var{g2}=@var{f2},..., @var{gn}=@var{fn}],@var{e})
La funci@'on @code{opsubst} es similar a la funci@'on @code{subst},
excepto por el hecho de que @code{opsubst}  tan solo hace sustituciones
de operadores en las expresiones. En general, si @var{f} es un operador en
la expresi@'on @var{e}, lo cambia por @var{g} en la expresi@'on @var{e}.

Para determinar el operador, @code{opsubst} asigna a @code{inflag} 
el valor @code{true}, lo cual significa que @code{opsubst} sustituye
el operador interno de la expresi@'on, no el mostrado en la salida
formateada.

Ejemplo:
@example
(%i1) load (opsubst)$

(%i2) opsubst(f,g,g(g(x)));
(%o2)                     f(f(x))
(%i3) opsubst(f,g,g(g));
(%o3)                       f(g)
(%i4) opsubst(f,g[x],g[x](z));
(%o4)                       f(z)
(%i5) opsubst(g[x],f, f(z));
(%o5)                      g (z)
                            x
(%i6) opsubst(tan, sin, sin(sin));
(%o6)                     tan(sin)
(%i7) opsubst([f=g,g=h],f(x));
(%o7)                       h(x)
@end example

Internamente, Maxima no hace uso de los operadores de negaci@'on unaria,
de divisi@'on ni de la resta, por lo que:
@example
(%i8) opsubst("+","-",a-b);
(%o8)                     a - b
(%i9) opsubst("f","-",-a);
(%o9)                      - a
(%i10) opsubst("^^","/",a/b);
                             a
(%o10)                       -
                             b
@end example

La representaci@'on interna de -a*b es *(-1,a,b), de modo que
@example
(%i11) opsubst("[","*", -a*b);
(%o11)                  [- 1, a, b]
@end example

Si alguno de los operadores no es un s@'{@dotless{i}}mbolo de Maxima,
se emitir@'a un mensaje de error:
@example
(%i12) opsubst(a+b,f, f(x));

Improper name or value in functional position:
b + a
 -- an error.  Quitting.  To debug this try debugmode(true);
@end example

Sin embargo se permiten operadores subindicados:
@example
(%i13) opsubst(g[5],f, f(x));
(%o13)                     g (x)
                            5
@end example

Antes de hacer uso de esta funci@'on ejec@'utese  @code{load("opsubst")}.
@end deffn

