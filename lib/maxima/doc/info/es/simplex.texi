@c english version 1.5
@menu
* Introducci@'on a simplex::
* Funciones y variables para simplex::
@end menu

@node Introducci@'on a simplex, Funciones y variables para simplex, simplex, simplex
@section Introducci@'on a simplex

El paquete @code{simplex} utiliza el algoritmo simplex para programaci@'on lineal.

Ejemplo:

@c ===beg===
@c load("simplex")$
@c minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);
@c ===end===
@example
(%i1) load("simplex")$
(%i2) minimize_lp(x+y, [3*x+2*y>2, x+4*y>3]);
                       9        7       1
(%o2)                 [--, [y = --, x = -]]
                       10       10      5
@end example

@node Funciones y variables para simplex,  , Introducci@'on a simplex, simplex
@section Funciones y variables para simplex

@defvr {Variable opcional} epsilon_lp
Valor por defecto: @code{10^-8}

Error epsilon utilizado en los c@'alculos num@'ericos de @code{linear_program}.

V@'ease tambi@'en @code{linear_program}.

@end defvr

@deffn {Funci@'on} linear_program (@var{A}, @var{b}, @var{c})

La funci@'on @code{linear_program} es una implementaci@'on del algoritmo
simplex. La instrucci@'on @code{linear_program(A, b, c)} calcula un 
vector @var{x} tal que minimiza @code{c.x} bajo las restricciones @code{A.x = b}
y @code{x >= 0}. El argumento @var{A} es una matriz y los argumentos @var{b} y
@var{c} son listas.

La funci@'on @code{linear_program} devuelve una lista que contiene el vector
soluci@'on @var{x} y el valor m@'{@dotless{i}}nimo de @code{c.x}.
Si el problema no est@'a acotado, devuelve el mensaje "Problem not bounded!"
y si el problema no es factible, devuelve el mensaje "Problem not feasible!".

Para usar esta funci@'on, c@'arguese primero el paquete con la
instrucci@'on @code{load(simplex);}.

Ejemplo:


@c ===beg===
@c A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$
@c b: [1,1,6]$
@c c: [1,-2,0,0]$
@c linear_program(A, b, c);
@c ===end===
@example
(%i2) A: matrix([1,1,-1,0], [2,-3,0,-1], [4,-5,0,0])$
(%i3) b: [1,1,6]$
(%i4) c: [1,-2,0,0]$
(%i5) linear_program(A, b, c);
                   13     19        3
(%o5)            [[--, 4, --, 0], - -]
                   2      2         2
@end example

V@'eanse tambi@'en @code{minimize_lp}, @code{scale_lp} y @code{epsilon_lp}.

@end deffn

@deffn {Funci@'on} maximize_lp (@var{obj}, @var{cond}, [@var{pos}])

Maximiza la funci@'on objetivo lineal @var{obj} sujeta a ciertas restricciones
lineales @var{cond}. V@'ease @code{minimize_lp} para una descripci@'on detallada
de los argumentos y de la respuesta dada por esta funci@'on.

@end deffn

@deffn {Funci@'on} minimize_lp (@var{obj}, @var{cond}, [@var{pos}])

Minimiza la funci@'on objetivo lineal @var{obj} sujeta a ciertas restricciones
lineales @var{cond}, siendo @'esta una lista de ecuaciones o inecuaciones lineales.
En las inecuaciones estrictas se reemplaza @code{>} por @code{>=} y @code{<}
por @code{<=}. El argumento opcional @var{pos} es una lista de variables de
decisi@'on que se suponen positivas.

Si el m@'{@dotless{i}}nimo existe, @code{minimize_lp} devuelve una lista que
contiene el valor m@'{@dotless{i}}nimo de la funci@'on objetivo y una lista 
de valores para las variables de decisi@'on con los que se alcanza el 
m@'{@dotless{i}}nimo. 
Si el problema no est@'a acotado, devuelve el mensaje "Problem not bounded!"
y si el problema no es factible, devuelve el mensaje "Problem not feasible!".

Las variables de decisi@'on no se suponen no negativas. Si todas las 
variables de decisi@'on son no negativas, as@'{@dotless{i}}gnese el valor
@code{true} a la variable @code{nonegative_lp}. Si s@'olo algunas de las
variables de decisi@'on son positivas, l@'{@dotless{i}}stense
en el argumento opcional @var{pos}, lo cual es m@'as eficiente que 
a@~nadir restricciones.

La funci@'on @code{minimize_lp} utiliza el algoritmo simplex implementado
en la funci@'on @code{linear_program} de Maxima.

Para usar esta funci@'on, c@'arguese primero el paquete con la
instrucci@'on @code{load(simplex);}.

Ejemplos:

@c ===beg===
@c minimize_lp(x+y, [3*x+y=0, x+2*y>2]);
@c minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;
@c minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;
@c minimize_lp(x+y, [3*x+y>0]);
@c ===end===
@example
(%i1) minimize_lp(x+y, [3*x+y=0, x+2*y>2]);
                      4       6        2
(%o1)                [-, [y = -, x = - -]]
                      5       5        5
(%i2) minimize_lp(x+y, [3*x+y>0, x+2*y>2]), nonegative_lp=true;
(%o2)                [1, [y = 1, x = 0]]
(%i3) minimize_lp(x+y, [3*x+y=0, x+2*y>2]), nonegative_lp=true;
(%o3)                Problem not feasible!
(%i4) minimize_lp(x+y, [3*x+y>0]);
(%o4)                Problem not bounded!
@end example


V@'eanse tambi@'en @code{maximize_lp}, @code{nonegative_lp} y @code{epsilon_lp}.

@end deffn

@defvr {Variable opcional} nonegative_lp
Valor por defecto: @code{false}

Si @code{nonegative_lp} vale @code{true} todas las variables de decisi@'on
pasadas a @code{minimize_lp} y a @code{maximize_lp} se suponen positivas.

V@'ease tambi@'en @code{minimize_lp}.

@end defvr
