@c end concepts Symmetries
@menu
* Definitions for Symmetries::  
@end menu

@node Definitions for Symmetries,  , Symmetries, Symmetries
@section Definitions for Symmetries

@deffn {Function} comp2pui (@var{n}, @var{l})
re'alise le passage des fonctions syme'triques
comple`tes, donnee's dans la liste @var{l}, aux fonctions 
syme'triques e'le'mentaires de 0 a` @var{n}. Si la liste
@var{l} contient moins de @code{@var{n}+1} e'le'ments les valeurs formelles viennent
la completer. Le premier e'le'ment de la liste @var{l} donne le cardinal
de l'alphabet si il existe, sinon on le met e'gal a @var{n}.

@c GENERATED FROM THE FOLLOWING
@c comp2pui (3, [4, g]);
@example
(%i1) comp2pui (3, [4, g]);
                        2                    2
(%o1)    [4, g, 2 h2 - g , 3 h3 - g h2 + g (g  - 2 h2)]
@end example

@end deffn

@deffn {Function} cont2part (@var{pc}, @var{lvar})
rend le polyno^me partitionne' associe' 
a` la forme  contracte'e @var{pc} dont les variables sont dans @var{lvar}.

@c GENERATED FROM THE FOLLOWING
@c pc: 2*a^3*b*x^4*y + x^5;
@c cont2part (pc, [x, y]);
@example
(%i1) pc: 2*a^3*b*x^4*y + x^5;
                           3    4      5
(%o1)                   2 a  b x  y + x
(%i2) cont2part (pc, [x, y]);
                                   3
(%o2)              [[1, 5, 0], [2 a  b, 4, 1]]
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Function} contract (@var{psym}, @var{lvar})
rend une forme contracte'e (i.e. un mono^me
par orbite sous l'action du groupe syme'trique) du polyno^me @var{psym}
en les variables contenues dans la liste @var{lvar}. La fonction @code{explose}
re'alise l'ope'ration inverse. La fonction @code{tcontract} teste en plus
la syme'trie du polyno^me.

@c GENERATED FROM THE FOLLOWING
@c psym: explose (2*a^3*b*x^4*y, [x, y, z]);
@c contract (psym, [x, y, z]);
@example
(%i1) psym: explose (2*a^3*b*x^4*y, [x, y, z]);
         3      4      3      4      3    4        3    4
(%o1) 2 a  b y z  + 2 a  b x z  + 2 a  b y  z + 2 a  b x  z

                                           3      4      3    4
                                      + 2 a  b x y  + 2 a  b x  y
(%i2) contract (psym, [x, y, z]);
                              3    4
(%o2)                      2 a  b x  y
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Function} direct ([@var{p_1}, ..., @var{p_n}], @var{y}, @var{f}, [@var{lvar_1}, ..., @var{lvar_n}])
calcul l'image
directe (voir M. GIUSTI, D. LAZARD et A. VALIBOUZE, ISSAC 1988, Rome)
associe'e a` la fonction @var{f}, en les listes de variables @var{lvar_1}, ..., @var{lvar_n},
et aux polyno^mes @var{p_1}, ..., @var{p_n} d'une variable @var{y}. l'arite' de la fonction
@var{f} est importante pour le calcul. Ainsi, si l'expression de @var{f} ne depend
pas d'une variable, non seulement il est inutile de donner cette
variable mais cela diminue conside'rablement lees calculs si on ne le
fait pas.

@c GENERATED FROM THE FOLLOWING
@c direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
@c               z, b*v + a*u, [[u, v], [a, b]]);
@c ratsimp (%);
@c ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
@c               z, b*v + a*u, [[u, v], [a, b]]));
@example
(%i1) direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
              z, b*v + a*u, [[u, v], [a, b]]);
       2
(%o1) y  - e1 f1 y

                                 2            2             2   2
                  - 4 e2 f2 - (e1  - 2 e2) (f1  - 2 f2) + e1  f1
                + -----------------------------------------------
                                         2
(%i2) ratsimp (%);
              2                2                   2
(%o2)        y  - e1 f1 y + (e1  - 4 e2) f2 + e2 f1
(%i3) ratsimp (direct ([z^3-e1*z^2+e2*z-e3,z^2  - f1* z + f2],
              z, b*v + a*u, [[u, v], [a, b]]));
       6            5         2                        2    2   4
(%o3) y  - 2 e1 f1 y  + ((2 e1  - 6 e2) f2 + (2 e2 + e1 ) f1 ) y

                          3                               3   3
 + ((9 e3 + 5 e1 e2 - 2 e1 ) f1 f2 + (- 2 e3 - 2 e1 e2) f1 ) y

         2       2        4    2
 + ((9 e2  - 6 e1  e2 + e1 ) f2

                    2       2       2                   2    4
 + (- 9 e1 e3 - 6 e2  + 3 e1  e2) f1  f2 + (2 e1 e3 + e2 ) f1 )

  2          2                      2     3          2
 y  + (((9 e1  - 27 e2) e3 + 3 e1 e2  - e1  e2) f1 f2

                 2            2    3                5
 + ((15 e2 - 2 e1 ) e3 - e1 e2 ) f1  f2 - 2 e2 e3 f1 ) y

           2                   3           3     2   2    3
 + (- 27 e3  + (18 e1 e2 - 4 e1 ) e3 - 4 e2  + e1  e2 ) f2

         2      3                   3    2   2
 + (27 e3  + (e1  - 9 e1 e2) e3 + e2 ) f1  f2

                   2    4        2   6
 + (e1 e2 e3 - 9 e3 ) f1  f2 + e3  f1
@end example

Recherche du polyno^me dont les racines sont les somme a+u ou a est
racine de z^2  - e1* z + e2 et u est racine de z^2  - f1* z + f2

@c GENERATED FROM THE FOLLOWING
@c ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
@c                           z, a + u, [[u], [a]]));
@example
(%i1) ratsimp (direct ([z^2  - e1* z + e2, z^2  - f1* z + f2],
                          z, a + u, [[u], [a]]));
       4                    3             2
(%o1) y  + (- 2 f1 - 2 e1) y  + (2 f2 + f1  + 3 e1 f1 + 2 e2

     2   2                              2               2
 + e1 ) y  + ((- 2 f1 - 2 e1) f2 - e1 f1  + (- 2 e2 - e1 ) f1

                  2                     2            2
 - 2 e1 e2) y + f2  + (e1 f1 - 2 e2 + e1 ) f2 + e2 f1  + e1 e2 f1

     2
 + e2
@end example

@code{direct} peut prendre deux drapeaux possibles : @code{elementaires} et
@code{puissances} (valeur par de'faut) qui permettent de de'composer
les polyno^mes syme'triques apparaissant dans ce calcul par
les fonctions syme'triques e'le'mentaires ou les fonctions puissances
respectivement.

Fonctions de @code{sym} utilis'ees dans cette fonction :

@code{multi_orbit} (donc @code{orbit}), @code{pui_direct}, @code{multi_elem}
(donc @code{elem}), @code{multi_pui} (donc @code{pui}), @code{pui2ele}, @code{ele2pui}
(si le drapeau @code{direct} est a` @code{puissances}).

@end deffn

@deffn {Function} ele2comp (@var{m}, @var{l})
passe des fonctions syme'triques e'le'mentaires
aux fonctions comple`tes. Similaire a` @code{comp2ele} et @code{comp2pui}.

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2pui}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Function} ele2polynome (@var{l}, @var{z})
donne le polyno^me en @var{z} dont les fonctions
syme'triques e'le'mentaires des racines sont dans la liste @var{l}.
@code{@var{l} = [@var{n}, @var{e_1}, ..., @var{e_n}]} ou` @var{n} est le degre' du polyno^me
et @var{e_i} la @var{i}-ie`me
fonction syme'trique e'le'mentaire.

@c GENERATED FROM THE FOLLOWING
@c ele2polynome ([2, e1, e2], z);
@c polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
@c ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
@example
(%i1) ele2polynome ([2, e1, e2], z);
                          2
(%o1)                    z  - e1 z + e2
(%i2) polynome2ele (x^7 - 14*x^5 + 56*x^3  - 56*x + 22, x);
(%o2)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
(%i3) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                  7       5       3
(%o3)            x  - 14 x  + 56 x  - 56 x + 22
@end example

@noindent
   
La re'ciproque: @code{polynome2ele (@var{P}, @var{z})}

Autres fonctions a` voir :

@code{polynome2ele}, @code{pui2polynome}.


@end deffn

@deffn {Function} ele2pui (@var{m}, @var{l})
passe des fonctions syme'triques e'le'mentaires
aux fonctions comple`tes. Similaire a` @code{comp2ele} et @code{comp2pui}.

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{elem}, @code{mon2schur}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Function} elem (@var{ele}, @var{sym}, @var{lvar})
de'compose le polyno^me syme'trique @var{sym}, en les variables
contenues de la liste @var{lvar}, par les fonctions syme'triques e'le'mentaires
contenues dans la liste @var{ele}. Si le premier e'le'ment de @var{ele} est donne'
ce sera le cardinal de l'alphabet sinon on prendra le degre' du polyno^me
@var{sym}. Si il manque des valeurs a` la liste @var{ele} des valeurs formelles
du type "ei" sont rajoute'es. Le polyno^me @var{sym} peut etre donne'
sous 3 formes diffe'rentes : contracte'e (@code{elem} doit alors valoir 1 sa valeur
par de'faut), partitionne'e (@code{elem} doit alors valoir 3) ou e'tendue (i.e. le
polyno^me en entier) (@code{elem} doit alors valoir 2). L'utilsation
de la fonction @code{pui} se re'alise sur le me^me mode`le.

Sur un alphabet de cardinal 3 avec e1, la premie`re fonction syme'trique
e'le'mentaire, valant 7, le polyno^me syme'trique en 3 variables dont
la forme contracte'e (ne de'pendant ici que de deux de ses variables)
est x^4-2*x*y se de'compose ainsi en les fonctions syme'triques 
e'le'mentaires :

@c GENERATED FROM THE FOLLOWING
@c elem ([3, 7], x^4 - 2*x*y, [x, y]);
@c ratsimp (%);
@example
(%i1) elem ([3, 7], x^4 - 2*x*y, [x, y]);
(%o1) 7 (e3 - 7 e2 + 7 (49 - e2)) + 21 e3

                                         + (- 2 (49 - e2) - 2) e2
(%i2) ratsimp (%);
                              2
(%o2)             28 e3 + 2 e2  - 198 e2 + 2401
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui},
@code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.


@end deffn

@deffn {Function} explose (@var{pc}, @var{lvar})
rend le polyno^me syme'trique associe' a` la forme 
contracte'e @var{pc}. La liste @var{lvar} contient les variables.

@c GENERATED FROM THE FOLLOWING
@c explose (a*x + 1, [x, y, z]);
@example
(%i1) explose (a*x + 1, [x, y, z]);
(%o1)                  a z + a y + a x + 1
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{part2cont}, @code{partpol}, @code{tcontract}, @code{tpartpol}.

@end deffn

@deffn {Function} kostka (@var{part_1}, @var{part_2})
e'crite par P. ESPERET, calcule le nombre de
Kostka associe' aux partition @var{part_1} et @var{part_2}.

@c GENERATED FROM THE FOLLOWING
@c kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
@example
(%i1) kostka ([3, 3, 3], [2, 2, 2, 1, 1, 1]);
(%o1)                           6
@end example

@end deffn

@deffn {Function} lgtreillis (@var{n}, @var{m})
rend la liste des partitions de poids @var{n} et de longueur @var{m}.

@c GENERATED FROM THE FOLLOWING
@c lgtreillis (4, 2);
@example
(%i1) lgtreillis (4, 2);
(%o1)                   [[3, 1], [2, 2]]
@end example

Voir e'galement : @code{ltreillis}, @code{treillis} et @code{treinat}.


@end deffn

@deffn {Function} ltreillis (@var{n}, @var{m})
rend la liste des partitions de poids @var{n} et de longueur 
infe'rieure ou e'gale a` @var{m}.

@c GENERATED FROM THE FOLLOWING
@c ltreillis (4, 2);
@example
(%i1) ltreillis (4, 2);
(%o1)               [[4, 0], [3, 1], [2, 2]]
@end example

@noindent
Voir e'galement : @code{lgtreillis}, @code{treillis} et @code{treinat}.

@end deffn

@c NOT REALLY HAPPY ABOUT MATH NOTATION HERE
@deffn {Function} mon2schur (@var{l})
la liste @var{l} repre'sente la fonction de Schur S_@var{l}:
 On a @var{l} = [@var{i_1}, @var{i_2}, ..., @var{i_q}]
avec @var{i_1} <= @var{i_2} <= ... <= @var{i_q}.
La fonction de Schur est S_[@var{i_1}, @var{i_2}, ..., @var{i_q}]
est le mineur de la matrice infinie (h_@{i-j@}) @var{i} >= 1, @var{j} >= 1 compose'
des q premie`res lignes et des colonnes @var{i_1} + 1, @var{i_2} + 2, ..., @var{i_q} + @var{q}.

On e'crit cette fonction de Schur en fonction des
formes monomiales en utilisant les fonctions @code{treinat} et @code{kostka}. La forme
rendue est un polyno^me syme'trique dans une de ses repre'sentations
contracte'es avec les variables @var{x_1}, @var{x_2}, ....
 
@c GENERATED FROM THE FOLLOWING
@c mon2schur ([1, 1, 1]);
@c mon2schur ([3]);
@c mon2schur ([1, 2]);
@example
(%i1) mon2schur ([1, 1, 1]);
(%o1)                       x1 x2 x3
(%i2) mon2schur ([3]);
                                  2        3
(%o2)                x1 x2 x3 + x1  x2 + x1
(%i3) mon2schur ([1, 2]);
                                      2
(%o3)                  2 x1 x2 x3 + x1  x2
@end example

@noindent
ce qui veut dire que pour 3 variables cela donne :

@c UM, FROM WHAT ARGUMENTS WAS THE FOLLOWING GENERATED ??
@example
   2 x1 x2 x3 + x1^2 x2 + x2^2 x1 + x1^2 x3 + x3^2 x1
    + x2^2 x3 + x3^2 x2
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{multi_elem},
@code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Function} multi_elem (@var{l_elem}, @var{multi_pc}, @var{l_var})
de'compose un polyno^me 
multi-syme'trique sous la forme multi-contracte'e @var{multi_pc} en les groupes
de variables contenue dans la liste de listes @var{l_var} sur les
groupes de fonctions syme'triques e'le'mentaires contenues dans @var{l_elem}.

@c GENERATED FROM THE FOLLOWING
@c multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
@c ratsimp (%);
@example
(%i1) multi_elem ([[2, e1, e2], [2, f1, f2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
                                                  3
(%o1)         - 2 f2 + f1 (f1 + e1) - 3 e1 e2 + e1
(%i2) ratsimp (%);
                         2                       3
(%o2)         - 2 f2 + f1  + e1 f1 - 3 e1 e2 + e1
@end example

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_pui}, @code{pui}, @code{pui2comp}, @code{pui2ele},
@code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Function} multi_orbit (@var{P}, [@var{lvar_1}, @var{lvar_2}, ..., @var{lvar_p}])
@var{P} est un polyno^me en l'ensemble
des variables contenues dans les listes @var{lvar_1}, @var{lvar_2}, ..., @var{lvar_p}. 
Cette fonction rame`ne l'orbite du polyno^me @var{P} sous l'action du produit 
des groupes syme'triques des ensembles de variables repre'sente's par 
ces @var{p} listes.

@c GENERATED FROM THE FOLLOWING
@c multi_orbit (a*x + b*y, [[x, y], [a, b]]);
@c multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
@example
(%i1) multi_orbit (a*x + b*y, [[x, y], [a, b]]);
(%o1)                [b y + a x, a y + b x]
(%i2) multi_orbit (x + y + 2*a, [[x, y], [a, b, c]]);
(%o2)        [y + x + 2 c, y + x + 2 b, y + x + 2 a]
@end example

@noindent
Voir e'galement : @code{orbit} pour l'action d'un seul groupe syme'trique.

@end deffn

@c WHAT ARE THE ARGUMENTS FOR THIS FUNCTION ??
@deffn {Function} multi_pui
est a` la fonction @code{pui} ce que la fonction @code{multi_elem} est
a` la fonction @code{elem}.

@c GENERATED FROM THE FOLLOWING
@c multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
@example
(%i1) multi_pui ([[2, p1, p2], [2, t1, t2]], a*x + a^2 + x^3, [[x, y], [a, b]]);
                                            3
                                3 p1 p2   p1
(%o1)              t2 + p1 t1 + ------- - ---
                                   2       2
@end example

@end deffn

@deffn {Function} multinomial (@var{r}, @var{part})
ou` @var{r} est le poids de la partition @var{part}. Cette
fonction rame`ne le coefficient multinomial associe' : si les
parts de la partitions part sont @var{i_1}, @var{i_2}, ..., @var{i_k}, le re'sultat de
@code{multinomial} est @code{@var{r}!/(@var{i_1}! @var{i_2}! ... @var{i_k}!)}.

@end deffn

@deffn {Function} multsym (@var{ppart_1}, @var{ppart_2}, @var{n})
re'alise le produit de deux polyno^mes
syme'triques de @var{n} variables en ne travaillant que modulo l'action du
groupe syme'trique d'ordre @var{n}. Les polyno^mes sont dans leur repre'sentation
partitionne'e. 

Soient les 2 polyno^mes syme'triques en @code{x}, @code{y}: @code{3*(x + y) + 2*x*y} et @code{5*(x^2 + y^2)}
dont les formes partitionne'es sont respectivement @code{[[3, 1], [2, 1, 1]]} et @code{[[5, 2]]},
alors leur produit sera donne' par :

@c GENERATED FROM THE FOLLOWING
@c multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
@example
(%i1) multsym ([[3, 1], [2, 1, 1]], [[5, 2]], 2);
(%o1)         [[10, 3, 1], [15, 3, 0], [15, 2, 1]]
@end example

@noindent
soit @code{10*(x^3*y + y^3*x) + 15*(x^2*y + y^2*x) + 15*(x^3 + y^3)}.

Fonctions de changements de repre'sentations d'un polyno^me syme'trique :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont},
@code{partpol}, @code{tcontract}, @code{tpartpol}.

@end deffn

@deffn {Function} orbit (@var{P}, @var{lvar})
calcul l'orbite du polyno^me @var{P} en les variables de la liste
@var{lvar} sous l'action du groupe syme'trique de l'ensemble des variables contenues
dans la liste @var{lvar}.
 
@c GENERATED FROM THE FOLLOWING
@c orbit (a*x + b*y, [x, y]);
@c orbit (2*x + x^2, [x, y]);
@example
(%i1) orbit (a*x + b*y, [x, y]);
(%o1)                [a y + b x, b y + a x]
(%i2) orbit (2*x + x^2, [x, y]);
                        2         2
(%o2)                 [y  + 2 y, x  + 2 x]
@end example

@noindent
Voir e'galement : @code{multi_orbit} pour l'action d'un produit de groupes 
syme'triques sur un polyno^me.


@end deffn

@deffn {Function} part2cont (@var{ppart}, @var{lvar})
passe de la forme partitionne'e a` la forme contracte'e
d'un polyno^me syme'trique. La forme contracte'e est rendue avec les variables
contenues dans @var{lvar}.

@c GENERATED FROM THE FOLLOWING
@c part2cont ([[2*a^3*b, 4, 1]], [x, y]);
@example
(%i1) part2cont ([[2*a^3*b, 4, 1]], [x, y]);
                              3    4
(%o1)                      2 a  b x  y
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{partpol}, @code{tcontract}, @code{tpartpol}.


@end deffn

@deffn {Function} partpol (@var{psym}, @var{lvar})
@var{psym} est un polyno^me syme'trique en les variables 
de @var{lvar}. Cette fonction rame`ne sa repre'sentation partitionne'e.

@c GENERATED FROM THE FOLLOWING
@c partpol (-a*(x + y) + 3*x*y, [x, y]);
@example
(%i1) partpol (-a*(x + y) + 3*x*y, [x, y]);
(%o1)               [[3, 1, 1], [- a, 1, 0]]
@end example

@noindent
Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{tcontract}, @code{tpartpol}.

@end deffn

@deffn {Function} permut (@var{l})
rame`ne la liste des permutations de la liste @var{l}.


@end deffn

@deffn {Function} polynome2ele (@var{P}, @var{x})
donne la liste @code{@var{l} = [@var{n}, @var{e_1}, ..., @var{e_n}]} ou` @var{n} est le degre'
du polyno^me @var{P} en la variable @var{x} et @var{e_i} la @var{i}-ieme fonction syme'trique 
e'le'mentaire des racines de @var{P}.

@c GENERATED FROM THE FOLLOWING
@c polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
@c ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
@example
(%i1) polynome2ele (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x);
(%o1)          [7, 0, - 14, 0, 56, 0, - 56, - 22]
(%i2) ele2polynome ([7, 0, -14, 0, 56, 0, -56, -22], x);
                  7       5       3
(%o2)            x  - 14 x  + 56 x  - 56 x + 22
@end example

@noindent
La re'ciproque : @code{ele2polynome (@var{l}, @var{x})}

@end deffn

@deffn {Function} prodrac (@var{l}, @var{k})
@var{l} est une liste contenant les fonctions syme'triques 
e'le'mentaires sur un ensemble @var{A}. @code{prodrac} rend le polyno^me dont
les racines sont les produits @var{k} a` @var{k} des e'le'ments de @var{A}.

@end deffn

@c HMM, pui IS A VARIABLE AS WELL
@deffn {Function} pui (@var{l}, @var{sym}, @var{lvar})
de'compose le polyno^me syme'trique @var{sym}, en les variables
contenues de la liste @var{lvar}, par les fonctions puissances
contenues dans la liste @var{l}. Si le premier e'le'ment de @var{l} est donne'
ce sera le cardinal de l'alphabet sinon on prendra le degre' du polyno^me
@var{sym}. Si il manque des valeurs a` la liste @var{l}, des valeurs formelles
du type "pi" sont rajoute'es. Le polyno^me sym peut etre donne'
sous 3 formes diffe'rentes : contracte'e (@code{pui} doit alors valoir 1 sa valeur
par de'faut), partitionne'e (@code{pui} doit alors valoir 3) ou e'tendue (i.e. le
polyno^me en entier) (@code{pui} doit alors valoir 2). La fonction @code{elem}
s'utilise de la me^me manie`re.

@c GENERATED FROM THE FOLLOWING
@c pui;
@c pui ([3, a, b], u*x*y*z, [x, y, z]);
@c ratsimp (%);
@example
(%i1) pui;
(%o1)                           1
(%i2) pui ([3, a, b], u*x*y*z, [x, y, z]);
                       2
                   a (a  - b) u   (a b - p3) u
(%o2)              ------------ - ------------
                        6              3
(%i3) ratsimp (%);
                                       3
                      (2 p3 - 3 a b + a ) u
(%o3)                 ---------------------
                                6
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem}, @code{mon2schur},
@code{multi_elem}, @code{multi_pui}, @code{pui2comp}, @code{pui2ele}, @code{puireduc},
@code{schur2comp}.

@end deffn

@deffn {Function} pui2comp (@var{n}, @var{lpui})
rend la liste des @var{n} premie`res fonctions comple`tes
(avec en te^te le cardinal) en fonction des fonctions puissance donne'es dans
la liste @var{lpui}. Si la liste @var{lpui} est vide le cardinal est N sinon 
c'est son premier e'le'ment similaire a` @code{comp2ele} et @code{comp2pui}.

@c GENERATED FROM THE FOLLOWING
@c pui2comp (2, []);
@c pui2comp (3, [2, a1]);
@c ratsimp (%);
@example
(%i1) pui2comp (2, []);
                                       2
                                p2 + p1
(%o1)                   [2, p1, --------]
                                   2
(%i2) pui2comp (3, [2, a1]);
                                            2
                                 a1 (p2 + a1 )
                         2  p3 + ------------- + a1 p2
                  p2 + a1              2
(%o2)     [2, a1, --------, --------------------------]
                     2                  3
(%i3) ratsimp (%);
                            2                     3
                     p2 + a1   2 p3 + 3 a1 p2 + a1
(%o3)        [2, a1, --------, --------------------]
                        2               6
@end example

@noindent
Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2ele},
@code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Function} pui2ele (@var{n}, @var{lpui})
re'alise le passage des fonctions puissances aux
fonctions syme'triques e'le'mentaires.
Si le drapeau @code{pui2ele} est @code{girard}, on re'cupe`re la liste des fonctions 
syme'triques e'le'mentaires de 1 a` @var{n}, et s'il est e'gal a` @code{close}, 
la @var{n}-ie`me fonction syme'trique e'le'mentaire.

Autres fonctions de changements de bases :

@code{comp2ele}, @code{comp2pui}, @code{ele2comp}, @code{ele2pui}, @code{elem},
@code{mon2schur}, @code{multi_elem}, @code{multi_pui}, @code{pui}, @code{pui2comp},
@code{puireduc}, @code{schur2comp}.

@end deffn

@deffn {Function} pui2polynome (@var{x}, @var{lpui})
calcul le polyno^me en @var{x} dont les fonctions puissances
des racines sont donne'es dans la liste @var{lpui}.

@c GENERATED FROM THE FOLLOWING
@c polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
@c ele2pui (3, %);
@c pui2polynome (x, %);
@example
(%i1) pui;
(%o1)                           1
(%i2) kill(labels);
(%o0)                         done
(%i1) polynome2ele (x^3 - 4*x^2 + 5*x - 1, x);
(%o1)                     [3, 4, 5, 1]
(%i2) ele2pui (3, %);
(%o2)                     [3, 4, 6, 7]
(%i3) pui2polynome (x, %);
                        3      2
(%o3)                  x  - 4 x  + 5 x - 1
@end example

@noindent
Autres fonctions a` voir :
@code{polynome2ele}, @code{ele2polynome}.

@end deffn

@deffn {Function} pui_direct (@var{orbite}, [@var{lvar_1}, ..., @var{lvar_n}], [@var{d_1}, @var{d_2}, ..., @var{d_n}])

Soit @var{f} un polynome en @var{n} blocs de variables @var{lvar_1}, ..., @var{lvar_n}.
Soit @var{c_i} le nombre de variables dans @var{lvar_i} . Et @var{SC} le produit des @var{n}
groupes syme'triques de degre' @var{c_1}, ..., @var{c_n}. Ce groupe agit
naturellement sur @var{f}.
La liste @var{orbite} est l'orbite, note'e @code{@var{SC}(@var{f})}, de la fonction @var{f} sous 
l'action de @var{SC}. (Cette liste peut e^tre obtenue avec la fonction : 
@code{multi_orbit}).
Les di sont des entiers tels que @var{c_1} <= @var{d_1}, @var{c_2} <= @var{d_2}, ..., @var{c_n} <= @var{d_n}.
Soit @var{SD} le produit des groupes syme'triques @var{S_d1} x @var{S_d2} x ... x @var{S_dn}.

La fonction @code{pui_direct} rame`ne les @var{n} premie`res fonctions puissances de @code{@var{SD}(@var{f})}
de'duites des fonctions puissances de @code{@var{SC}(@var{f})} ou` @var{n} est le cardinal de @code{@var{SD}(@var{f})}.

Le re'sultat est rendue sous forme multi-contracte'e par rapport a @var{SD}.
i.e. on ne conserve qu'un e'le'ment par orbite sous l'action de @var{SD}).

@c GENERATED FROM THE FOLLOWING
@c l: [[x, y], [a, b]];
@c pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
@c pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
@c pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [2, 3]);
@example
(%i1) l: [[x, y], [a, b]];
(%o1)                   [[x, y], [a, b]]
(%i2) pui_direct (multi_orbit (a*x + b*y, l), l, [2, 2]);
                                       2  2
(%o2)               [a x, 4 a b x y + a  x ]
(%i3) pui_direct (multi_orbit (a*x + b*y, l), l, [3, 2]);
                             2  2     2    2        3  3
(%o3) [2 a x, 4 a b x y + 2 a  x , 3 a  b x  y + 2 a  x , 

    2  2  2  2      3    3        4  4
12 a  b  x  y  + 4 a  b x  y + 2 a  x , 

    3  2  3  2      4    4        5  5
10 a  b  x  y  + 5 a  b x  y + 2 a  x , 

    3  3  3  3       4  2  4  2      5    5        6  6
40 a  b  x  y  + 15 a  b  x  y  + 6 a  b x  y + 2 a  x ]
(%i4) pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [2, 3]);
                             2              2
(%o4) [3 x + 2 a, 6 x y + 3 x  + 4 a x + 4 a , 

                 2                   3        2       2        3
              9 x  y + 12 a x y + 3 x  + 6 a x  + 12 a  x + 8 a ]
@end example
@c THIS NEXT FUNCTION CALL TAKES A VERY LONG TIME (SEVERAL MINUTES)
@c SO LEAVE IT OUT TIL PROCESSORS GET A LITTLE FASTER ...
@c pui_direct ([y + x + 2*c, y + x + 2*b, y + x + 2*a], [[x, y], [a, b, c]], [3, 4]);

@end deffn

@deffn {Function} puireduc (@var{n}, @var{lpui})
@var{lpui} est une liste dont le premier e'le'ment est un entier
@var{m}. @code{puireduc} donne les @var{n} premie`res fonctions puissances en fonction 
des @var{m} premie`res.

@c GENERATED FROM THE FOLLOWING
@c puireduc (3, [2]);
@example
(%i1) puireduc (3, [2]);
                                         2
                                   p1 (p1  - p2)
(%o1)          [2, p1, p2, p1 p2 - -------------]
                                         2
(%i2) ratsimp (%);
                                           3
                               3 p1 p2 - p1
(%o2)              [2, p1, p2, -------------]
                                     2
@end example

@end deffn

@deffn {Function} resolvante (@var{P}, @var{x}, @var{f}, [@var{x_1}, ..., @var{x_d}])
calcule la re'solvante du polyno^me @var{P}
de la variable @var{x} et de degre' @var{n} >= @var{d} par la fonction @var{f} exprime'e en
les variables @var{x_1}, ..., @var{x_d}. Il est important pour l'efficacite' des
calculs de ne pas mettre dans la liste @code{[@var{x_1}, ..., @var{x_d}]} les variables
n'intervenant pas dans la fonction de transformation @var{f}.

Afin de rendre plus efficaces les calculs on peut mettre des drapeaux
a` la variable @code{resolvante} afin que des algorithmes ade'quates soient
utilise's :

Si la fonction @var{f} est unitaire :
@itemize @bullet
@item
un polyno^me d'une variable,
@item
  line'aire ,
@item
  alterne'e,
@item
  une somme de variables,
@item
  syme'trique en les variables qui apparaissent dans son expression,
@item
  un produit de variables,
@item
la fonction de la re'solvante de Cayley (utilisable qu'en degre' 5)

@c WHAT IS THIS ILLUSTRATING EXACTLY ??
@example
(x1*x2 + x2*x3 + x3*x4 + x4*x5 + x5*x1 -
     (x1*x3 + x3*x5 + x5*x2 + x2*x4 + x4*x1))^2
@end example

  generale,
@end itemize
le drapeau de @code{resolvante} pourra e^tre respectivement :
@itemize @bullet
@item
  unitaire,
@item
  lineaire,
@item
  alternee,
@item
  somme,
@item
  produit,
@item
  cayley,
@item
  generale.
@end itemize

@c GENERATED FROM THE FOLLOWING
@c resolvante: unitaire$
@c resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1, [x]);
@c resolvante: lineaire$
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);
@c resolvante: general$
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);
@c resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);
@c direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
@c resolvante :lineaire$
@c resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);
@c resolvante: symetrique$
@c resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);
@c resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);
@c resolvante: alternee$
@c resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);
@c resolvante: produit$
@c resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);
@c resolvante: symetrique$
@c resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);
@c resolvante: cayley$
@c resolvante (x^5 - 4*x^2 + x + 1, x, a, []);
@example
(%i1) resolvante: unitaire$
(%i2) resolvante (x^7 - 14*x^5 + 56*x^3 - 56*x + 22, x, x^3 - 1, [x]);

" resolvante unitaire " [7, 0, 28, 0, 168, 0, 1120, - 154, 7840, - 2772, 56448, - 33880, 

413952, - 352352, 3076668, - 3363360, 23114112, - 30494464, 

175230832, - 267412992, 1338886528, - 2292126760] 
  3       6      3       9      6      3
[x  - 1, x  - 2 x  + 1, x  - 3 x  + 3 x  - 1, 

 12      9      6      3       15      12       9       6      3
x   - 4 x  + 6 x  - 4 x  + 1, x   - 5 x   + 10 x  - 10 x  + 5 x

       18      15       12       9       6      3
 - 1, x   - 6 x   + 15 x   - 20 x  + 15 x  - 6 x  + 1, 

 21      18       15       12       9       6      3
x   - 7 x   + 21 x   - 35 x   + 35 x  - 21 x  + 7 x  - 1] 
[- 7, 1127, - 6139, 431767, - 5472047, 201692519, - 3603982011] 
       7      6        5         4          3           2
(%o2) y  + 7 y  - 539 y  - 1841 y  + 51443 y  + 315133 y

                                              + 376999 y + 125253
(%i3) resolvante: lineaire$
(%i4) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

" resolvante lineaire " 
       24       20         16            12             8
(%o4) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i5) resolvante: general$
(%i6) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3]);

" resolvante generale " 
       24       20         16            12             8
(%o6) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i7) resolvante (x^4 - 1, x, x1 + 2*x2 + 3*x3, [x1, x2, x3, x4]);

" resolvante generale " 
       24       20         16            12             8
(%o7) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i8) direct ([x^4 - 1], x, x1 + 2*x2 + 3*x3, [[x1, x2, x3]]);
       24       20         16            12             8
(%o8) y   + 80 y   + 7520 y   + 1107200 y   + 49475840 y

                                                    4
                                       + 344489984 y  + 655360000
(%i9) resolvante :lineaire$
(%i10) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

" resolvante lineaire " 
                              4
(%o10)                       y  - 1
(%i11) resolvante: symetrique$
(%i12) resolvante (x^4 - 1, x, x1 + x2 + x3, [x1, x2, x3]);

" resolvante symetrique " 
                              4
(%o12)                       y  - 1
(%i13) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

" resolvante symetrique " 
                           6      2
(%o13)                    y  - 4 y  - 1
(%i14) resolvante: alternee$
(%i15) resolvante (x^4 + x + 1, x, x1 - x2, [x1, x2]);

" resolvante alternee " 
            12      8       6        4        2
(%o15)     y   + 8 y  + 26 y  - 112 y  + 216 y  + 229
(%i16) resolvante: produit$
(%i17) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

" resolvante produit "
        35      33         29        28         27        26
(%o17) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

         24           23          22            21           20
 + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

          19           18             17              15
 - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

             14              12             11            10
 - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

              9            8            7             6
 - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

            5             3
 - 3720087 y  + 26040609 y  + 14348907
(%i18) resolvante: symetrique$
(%i19) resolvante (x^7 - 7*x + 3, x, x1*x2*x3, [x1, x2, x3]);

" resolvante symetrique " 
        35      33         29        28         27        26
(%o19) y   - 7 y   - 1029 y   + 135 y   + 7203 y   - 756 y

         24           23          22            21           20
 + 1323 y   + 352947 y   - 46305 y   - 2463339 y   + 324135 y

          19           18             17              15
 - 30618 y   - 453789 y   - 40246444 y   + 282225202 y

             14              12             11            10
 - 44274492 y   + 155098503 y   + 12252303 y   + 2893401 y

              9            8            7             6
 - 171532242 y  + 6751269 y  + 2657205 y  - 94517766 y

            5             3
 - 3720087 y  + 26040609 y  + 14348907
(%i20) resolvante: cayley$
(%i21) resolvante (x^5 - 4*x^2 + x + 1, x, a, []);

" resolvante de Cayley "
        6       5         4          3            2
(%o21) x  - 40 x  + 4080 x  - 92928 x  + 3772160 x  + 37880832 x

                                                       + 93392896
@end example

Pour la re'solvante de Cayley, les 2 derniers arguments sont neutres
et le polyno^me donne' en entre'e doit ne'cessairement e^tre de degre' 5.

Voir e'galement :

@code{resolvante_bipartite}, @code{resolvante_produit_sym},
@code{resolvante_unitaire}, @code{resolvante_alternee1}, @code{resolvante_klein}, 
@code{resolvante_klein3}, @code{resolvante_vierer}, @code{resolvante_diedrale}. 

@end deffn

@deffn {Function} resolvante_alternee1 (@var{P}, @var{x})
calcule la transformation de 
@c UMM, I THINK THE TEX STUFF SHOULD BE REPLACED BY @code
@code{@var{P}(@var{x})} de degre @var{n} par la fonction $\prod_@{1\leq i<j\leq n-1@} (x_i-x_j)$.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_bipartite}.

@end deffn

@deffn {Function} resolvante_bipartite (@var{P}, @var{x})
calcule la transformation de 
@code{@var{P}(@var{x})} de degre @var{n} (@var{n} pair) par la fonction 
@c UMM, I THINK THE TEX STUFF SHOULD BE REPLACED BY @code
$x_1x_2\ldots x_@{n/2@}+x_@{n/2+1@}\ldotsx_n$

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante} , @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}, @code{resolvante_alternee1}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_bipartite (x^6 + 108, x);
@example
(%i1) resolvante_bipartite (x^6 + 108, x);
              10        8           6             4
(%o1)        y   - 972 y  + 314928 y  - 34012224 y
@end example

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale},
@code{resolvante_alternee1}.

@end deffn

@deffn {Function} resolvante_diedrale (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fonction @code{@var{x_1} @var{x_2} + @var{x_3} @var{x_4}}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_diedrale (x^5 - 3*x^4 + 1, x);
@example
(%i1) resolvante_diedrale (x^5 - 3*x^4 + 1, x);
       15       12       11       10        9         8         7
(%o1) x   - 21 x   - 81 x   - 21 x   + 207 x  + 1134 x  + 2331 x

        6         5          4          3          2
 - 945 x  - 4970 x  - 18333 x  - 29079 x  - 20745 x  - 25326 x

 - 697
@end example

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante}.

@end deffn

@deffn {Function} resolvante_klein (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fonction @code{@var{x_1} @var{x_2} @var{x_4} + @var{x_4}}.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Function} resolvante_klein3 (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fonction @code{@var{x_1} @var{x_2} @var{x_4} + @var{x_4}}.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Function} resolvante_produit_sym (@var{P}, @var{x})
calcule la liste toutes les 
r\'esolvantes produit du polyn\^ome @code{@var{P}(@var{x})}.

@c GENERATED FROM THE FOLLOWING
@c resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
@c resolvante: produit$
@c resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);
@example
(%i1) resolvante_produit_sym (x^5 + 3*x^4 + 2*x - 1, x);
        5      4             10      8       7       6       5
(%o1) [y  + 3 y  + 2 y - 1, y   - 2 y  - 21 y  - 31 y  - 14 y

    4       3      2       10      8       7    6       5       4
 - y  + 14 y  + 3 y  + 1, y   + 3 y  + 14 y  - y  - 14 y  - 31 y

       3      2       5      4
 - 21 y  - 2 y  + 1, y  - 2 y  - 3 y - 1, y - 1]
(%i2) resolvante: produit$
(%i3) resolvante (x^5 + 3*x^4 + 2*x - 1, x, a*b*c, [a, b, c]);

" resolvante produit "
       10      8       7    6        5       4       3     2
(%o3) y   + 3 y  + 14 y  - y  - 14 y  - 31 y  - 21 y  - 2 y  + 1
@end example
@c INPUT %i3 TICKLES A MINOR BUG IN resolvante: 
@c " resolvante produit " IS PRINTED FROM SOMEWHERE IN THE BOWELS OF resolvante
@c AND IT GOOFS UP THE DISPLAY OF THE EXPONENTS OF %o3 -- I THREW IN A LINE BREAK TO ADJUST

Voir e'galement :

@code{resolvante}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Function} resolvante_unitaire (@var{P}, @var{Q}, @var{x})
calcule la r\'esolvante du 
polyn\^ome @code{@var{P}(@var{x})} par le polyn\^ome @code{@var{Q}(@var{x})}.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante_vierer}, @code{resolvante_diedrale}.

@end deffn

@deffn {Function} resolvante_vierer (@var{P}, @var{x})
calcule la transformation de
@code{@var{P}(@var{x})} par la fonction @code{@var{x_1} @var{x_2} - @var{x_3} @var{x_4}}.

Voir e'galement :

@code{resolvante_produit_sym}, @code{resolvante_unitaire},
@code{resolvante_alternee1}, @code{resolvante_klein}, @code{resolvante_klein3},
@code{resolvante}, @code{resolvante_diedrale}.

@end deffn

@deffn {Function} schur2comp (@var{P}, @var{l_var})
@var{P} est un polyno^mes en les variables contenues dans 
la liste @var{l_var}. Chacune des variables de @var{l_var} repre'sente une fonction
syme'trique comple`te. On repre'sente dans @var{l_var} la ie`me fonction syme'trique
comple`te comme la concate'nation de la lettre @code{h} avec l'entier @var{i} : @code{h@var{i}}.
Cette fonction donne l'expression de @var{P} en fonction des fonctions
de Schur.

@c GENERATED FROM THE FOLLOWING
@c schur2comp (h1*h2 - h3, [h1, h2, h3]);
@c schur2comp (a*h3, [h3]);
@example
(%i1) schur2comp (h1*h2 - h3, [h1, h2, h3]);
(%o1)                         s
                               1, 2
(%i2) schur2comp (a*h3, [h3]);
(%o2)                         s  a
                               3
@end example

@end deffn

@deffn {Function} somrac (@var{l}, @var{k})
la liste @var{l} contient les fonctions syme'triques e'le'mentaires
d'un polyno^me @var{P} . On calcul le polyno^mes dont les racines sont les sommes 
@var{K} a` @var{K} distinctes des racines de @var{P}. 

Voir e'galement @code{prodrac}.


@end deffn

@deffn {Function} tcontract (@var{pol}, @var{lvar})
teste si le polyno^me pol est syme'trique en les
variables contenues dans la liste @var{lvar}. Si oui il rend une forme contracte'e
comme la fonction @code{contract}.

Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tpartpol}.


@end deffn

@deffn {Function} tpartpol (@var{pol}, @var{lvar})
teste si le polyno^me pol est syme'trique en les
variables contenues dans la liste @var{lvar}. Si oui il rend sa forme partionne'e
comme la fonction @code{partpol}.

Autres fonctions de changements de repre'sentations :

@code{contract}, @code{cont2part}, @code{explose}, @code{part2cont}, @code{partpol}, @code{tcontract}.


@end deffn

@deffn {Function} treillis (@var{n})
rame`ne toutes les partitions de poids @var{n}.

@c GENERATED FROM THE FOLLOWING
@c treillis (4);
@example
(%i1) treillis (4);
(%o1)    [[4], [3, 1], [2, 2], [2, 1, 1], [1, 1, 1, 1]]
@end example

Voir e'galement : @code{lgtreillis}, @code{ltreillis} et @code{treinat}.

@end deffn

@deffn {Function} treinat (@var{part})
rame`ne la liste des partitions infe'rieures a` la partition
@var{part} pour l'ordre naturel.

@c GENERATED FROM THE FOLLOWING
@c treinat ([5]);
@c treinat ([1, 1, 1, 1, 1]);
@c treinat ([3, 2]);
@example
(%i1) treinat ([5]);
(%o1)                         [[5]]
(%i2) treinat ([1, 1, 1, 1, 1]);
(%o2) [[5], [4, 1], [3, 2], [3, 1, 1], [2, 2, 1], [2, 1, 1, 1], 

                                                 [1, 1, 1, 1, 1]]
(%i3) treinat ([3, 2]);
(%o3)                 [[5], [4, 1], [3, 2]]
@end example

Voir e'galement : @code{lgtreillis}, @code{ltreillis} et @code{treillis}.

@end deffn
