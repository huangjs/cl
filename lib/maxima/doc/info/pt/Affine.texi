@c /Affine.texi/1.12/Sat Nov 19 06:51:23 2005/-ko/
@c end concepts Affine
@menu
* Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Afins::      
@end menu

@node Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Afins,  , Fun@value{cedilha}@~oes Afins, Fun@value{cedilha}@~oes Afins
@section Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Afins

@deffn {Fun@value{cedilha}@~ao} fast_linsolve ([@var{expr_1}, ..., @var{expr_m}], [@var{x_1}, ..., @var{x_n}])
Resolve equa@value{cedilha}@~oes lineares simult@^aneas @var{expr_1},
..., @var{expr_m} para as vari@'aveis @var{x_1}, ..., @var{x_n}.  Cada
@var{expr_i} pode ser uma equa@value{cedilha}@~ao ou uma express@~ao
geral; se for dada como uma express@~ao geral, ser@'a tratada como uma
equa@value{cedilha}@~ao na forma @code{@var{expr_i} = 0}.

O valor de retorno @'e uma lista de equa@value{cedilha}@~oes da forma
@code{[@var{x_1} = @var{a_1}, ..., @var{x_n} = @var{a_n}]} onde
@var{a_1}, ..., @var{a_n} s@~ao todas livres de @var{x_1}, ...,
@var{x_n}.

@code{fast_linsolve} @'e mais r@'apido que @code{linsolve} para sistemas
de equa@value{cedilha}@~oes que s@~ao esparsas.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} grobner_basis ([@var{expr_1}, ..., @var{expr_m}])
Retorna uma base de Groebner para as equa@value{cedilha}@~oes @var{expr_1}, ..., @var{expr_m}.
A fun@value{cedilha}@~a @code{polysimp} pode ent@~ao
ser usada para simplificar outras fun@value{cedilha}@~oes relativas @`as equa@value{cedilha}@~oes.

@example
grobner_basis ([3*x^2+1, y*x])$

polysimp (y^2*x + x^3*9 + 2) ==> -3*x + 2
@end example

@code{polysimp(f)} produz 0 se e somente se @var{f} est@'a no ideal gerado por
@var{expr_1}, ..., @var{expr_m}, isto @'e,
se e somente se @var{f} for uma combina@value{cedilha}@~ao polinomial dos elementos de
@var{expr_1}, ..., @var{expr_m}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@c NEEDS CLARIFICATION IN A SERIOUS WAY
@deffn {Fun@value{cedilha}@~ao} set_up_dot_simplifications (@var{eqns}, @var{check_through_degree})
@deffnx {Fun@value{cedilha}@~ao} set_up_dot_simplifications (@var{eqns})
As @var{eqns} s@~ao
equa@value{cedilha}@~oes polinomiais em vari@'aveis n@~ao comutativas.
O valor de @code{current_variables}  @'e uma 
lista de vari@'aveis usadas para calcular graus.  As equa@value{cedilha}@~oes podem ser
homog@'eneas, de forma a que o procedimento termine.  

Se tiver optado por sobreposi@value{cedilha}@~ao de simplifica@value{cedilha}@~oes
em @code{dot_simplifications} acima do grau de @var{f}, ent@~ao o
seguinte @'e verdadeiro: @code{dotsimp (@var{f})} retorna 0 se, e
somente se, @var{f} est@'a no ideal gerado pelas
equa@value{cedilha}@~oes, i.e., se e somente se @var{f} for uma
combina@value{cedilha}@~ao polinomial dos elementos das
equa@value{cedilha}@~oes.

O grau @'e aquele retornado por @code{nc_degree}.  Isso por sua vez @'e
influenciado pelos pesos das vari@'aveis individuais.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} declare_weights (@var{x_1}, @var{w_1}, ..., @var{x_n}, @var{w_n})
Atribui pesos @var{w_1}, ..., @var{w_n} to @var{x_1}, ..., @var{x_n}, respectivamente.
Esses s@~ao pesos usados em c@'alculos @code{nc_degree}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} nc_degree (@var{p})
Retorna o grau de um polin@'omio n@~ao comutativo @var{p}.  Veja @code{declare_weights}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@c NEEDS CLARIFICATION -- TO WHICH EQUATIONS DOES THIS DESCRIPTION REFER ??
@deffn {Fun@value{cedilha}@~ao} dotsimp (@var{f})
Retorna 0 se e somente se @var{f} for um ideal gerado pelas equa@value{cedilha}@~oes, i.e.,
se e somente se @var{f} for uma combina@value{cedilha}@~ao polinomial dos elementos das equa@value{cedilha}@~oes.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} fast_central_elements ([@var{x_1}, ..., @var{x_n}], @var{n})
Se @code{set_up_dot_simplifications} tiver sido feito previamente, ache o polin@'omio central
nas vari@'aveis @var{x_1}, ..., @var{x_n} no grau dado, @var{n}.

Por exemplo:
@example
set_up_dot_simplifications ([y.x + x.y], 3);
fast_central_elements ([x, y], 2);
[y.y, x.x];
@end example

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@c THIS IS NOT AT ALL CLEAR
@deffn {Fun@value{cedilha}@~ao} check_overlaps (@var{n}, @var{add_to_simps})
Verifica as sobreposi@value{cedilha}@~oes atrav@'es do grau @var{n}, garantindo
que tem regras de simplifica@value{cedilha}@~o suficientes em cada grau,
para @code{dotsimp} trabalhar correctamente.  Esse processo pode ser mais
r@'apido se souber de antem@~ao a dimens@~ao do espa@value{cedilha}o de
mon@'omios.  Se for de dimens@~ao global finita, ent@~ao @code{hilbert}
pode ser usada.  Se n@~ao conhece as dimens@~oes monomiais, n@~ao
especifique nenhum @code{rank_function}.  Um terceiro argumento
opcional, @code{reset}, @code{false} diz para n@~ao se incomodar em
perguntar sobre reiniciar coisas.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} mono ([@var{x_1}, ..., @var{x_n}], @var{n})
Retorna a lista de mon@'omios independentes
relativamente @`a simplifica@value{cedilha}@~ao actual do grau @var{n}
nas vari@'aveis @var{x_1}, ..., @var{x_n}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} monomial_dimensions (@var{n})
Calcula a s@'erie de Hilbert atrav@'es do grau @var{n} para a algebra corrente.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} extract_linear_equations ([@var{p_1}, ..., @var{p_n}], [@var{m_1}, ..., @var{m_n}])

Faz uma lista dos coeficientes dos polin@'omios n@~ao comutativos @var{p_1}, ..., @var{p_n}
dos monomios n@~ao comutatvos @var{m_1}, ..., @var{m_n}.
Os coeficientes podem ser escalares.   Use @code{list_nc_monomials} para construir a lista dos
mon@'omios.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} list_nc_monomials ([@var{p_1}, ..., @var{p_n}])
@deffnx {Fun@value{cedilha}@~ao} list_nc_monomials (@var{p})

Retorna uma lista de mon@'omios n@~ao comutativos que ocorrem em um polin@'omio @var{p}
ou em uma lista de polin@'omios @var{p_1}, ..., @var{p_n}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(affine)}.
@end deffn

@c THIS FUNCTION DOESN'T SEEM TO BE APPROPRIATE IN USER-LEVEL DOCUMENTATION
@c PRESERVE THIS DESCRIPTION PENDING FURTHER DECISION
@c @defun pcoeff (poly monom [variables-to-exclude-from-cof (list-variables monom)])
@c 
@c This function is called from Lisp level, and uses internal poly format.
@c @example
@c 
@c CL-MAXIMA>>(setq me (st-rat #$x^2*u+y+1$))
@c (#:Y 1 1 0 (#:X 2 (#:U 1 1) 0 1))
@c 
@c CL-MAXIMA>>(pcoeff me (st-rat #$x^2$))
@c (#:U 1 1)
@c @end example
@c @noindent
@c 
@c Rule: if a variable appears in monom it must be to the exact power,
@c and if it is in variables to exclude it may not appear unless it was
@c in monom to the exact power.  (pcoeff pol 1 ..) will exclude variables
@c like substituting them to be zero.
@c 
@c @end defun

@c THIS FUNCTION DOESN'T SEEM TO BE APPROPRIATE IN USER-LEVEL DOCUMENTATION
@c PRESERVE THIS DESCRIPTION PENDING FURTHER DECISION
@c @defun new-disrep (poly)
@c 
@c From Lisp this returns the general Maxima format for an arg which is
@c in st-rat form:
@c 
@c @example
@c (displa(new-disrep (setq me (st-rat #$x^2*u+y+1$))))
@c 
@c        2
@c y + u x  + 1
@c @end example
@c 
@c @end defun

@defvr {Vari@'avel de op@value{cedilha}@~ao} all_dotsimp_denoms
Valor por omiss@~ao: @code{false}

Quando @code{all_dotsimp_denoms} @'e uma lista,
os denominadores encontrados por @code{dotsimp} s@~ao adicionados ao final da lista.
@code{all_dotsimp_denoms} pode ser iniciado como uma lista vazia @code{[]}
antes chamando @code{dotsimp}.

Por padr@~ao, denominadores n@~ao s@~ao colectados por @code{dotsimp}.

@end defvr



