@c /Bugs.texi/1.10/Sat Nov 25 04:02:06 2006//
@menu
* Defini@value{cedilha}@~oes para Detec@value{cedilha}@~ao e Relato de Erros::  
@end menu

@node Defini@value{cedilha}@~oes para Detec@value{cedilha}@~ao e Relato de Erros
@section Defini@value{cedilha}@~oes para Detec@value{cedilha}@~ao e Relato de Erros
@deffn {Fun@value{cedilha}@~ao} run_testsuite ()
@deffnx {Fun@value{cedilha}@~ao} run_testsuite (@var{boolean})
@deffnx {Fun@value{cedilha}@~ao} run_testsuite (@var{boolean}, @var{boolean})
@deffnx {Fun@value{cedilha}@~ao} run_testsuite (@var{boolean}, @var{boolean}, @var{list})
Executa o conjunto de testes do Maxima.  Testes que produzem a resposta desejada s@~ao
considerados ``passes,'' e testes que n@~ao produzem a resposta
desejada, s@~ao marcados como erros conhecidos.

@code{run_testsuite ()} mostra somente testes que n@~ao s@~ao aprovados.

@code{run_testsuite (true)} mostra somente testes que s@~ao marcados como erros conhecidos, bem
como as falhas.

@code{run_testsuite (true, true)} mostra todos os testes.

Se o terceiro argumento opcional for dado, um subconjunto de testes @'e executado.
O subconjunto de testes para executar @'e dado como uma lista de nomes dos
testes.  O conjunto completo de testes @'e especificado por @code{testsuite_files}.

@code{run_testsuite} altera a vari@'avel de ambiente Maxima.
Tipicamente um script de teste executa @code{kill} para estabelecer uma vari@'avel de ambiente
(uma a saber sem fun@value{cedilha}@~oes definidas pelo utilizador e vari@'aveis)
e ent@~ao define fun@value{cedilha}@~oes e vari@'aveis apropriadamente para o teste.

@code{run_testsuite} retorna @code{done}.
@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} testsuite_files
     
@code{testsuite_files} @'e o conjunto de testes a ser executado por
@code{run_testsuite}.  Isso @'e uma lista de nomes de ficheiros contendo
os testes a executar.  Se alguns dos testes em um ficheiro falha de forma conhecida,
ent@~ao em lugar de listar o nome do ficheiro, uma lista contendo o
nome do ficheiro e o n@'umero dos testes que falharam @'e usada.

por exemplo, a linha adinate @'e uma parte do conjunto de testes padr@~ao:

@example
 ["rtest13s", ["rtest14", 57, 63]]
@end example

Essa linha especifica a suite de testes que consiste dos ficheiros "rtest13s" e
"rtest14", mas "rtest14" cont@'em dois testes que falham de forma conhecida: 57
e 63.
@end defvr

@deffn {Fun@value{cedilha}@~ao} bug_report ()
Imprime os n@'umeros de vers@~ao do Maxima e do Lisp, e chama o link
para a p@'agina web de informa@value{cedilha}@~ao de erros do projeto Maxima.
A informa@value{cedilha}@~ao da vers@~ao @'e a mesma reportada por @code{build_info}.

Quando um erro @'e informado, @'e muito @'util copiar a vers@~ao do Maxima
e do Lisp dentro da informa@value{cedilha}@~ao do erro.

@code{bug_report} retorna uma sequ@^encia de caracteres vazia @code{""}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} build_info ()
Imprime um sum@'ario de par@^ametros da compila@value{cedilha}@~ao do Maxima.

@code{build_info} retorna uma sequ@^encia de caracteres vazia @code{""}.
@end deffn
