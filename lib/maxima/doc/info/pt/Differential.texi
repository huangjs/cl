@c English version: 1.9
@menu
* Introdu@value{cedilha}@~ao @`as Equa@value{cedilha}@~oes Diferenciais::
* Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais::  
@end menu

@node Introdu@value{cedilha}@~ao @`as Equa@value{cedilha}@~oes Diferenciais, Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais, Equa@value{cedilha}@~oes Diferenciais, Equa@value{cedilha}@~oes Diferenciais
@section Introdu@value{cedilha}@~ao @`as Equa@value{cedilha}@~oes Diferenciais

Esta sec@,{c}@~ao descreve as fun@,{c}@~oes dispon@'{@dotless{i}}veis no
Maxima para obter a solu@,{c}@~ao anal@'{@dotless{i}}tica de alguns
tipos espec@'{@dotless{i}}ficos de equa@,{c}@~oes diferencias de
primeira e segunda ordem. Para obter a solu@,{c}@~ao num@'erica dum
sistema de equa@,{c}@~oes diferenciais, consulte o pacote adicional
@code{dynamics}. Para obter representa@,{c}@~oes gr@'aficas no
espa@,{c}o de fase, consulte o pacote adicional @code{plotdf}.

@node Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais, , Introdu@value{cedilha}@~ao @`as Equa@value{cedilha}@~oes Diferenciais, Equa@value{cedilha}@~oes Diferenciais
@section Defini@value{cedilha}@~oes para Equa@value{cedilha}@~oes Diferenciais


@deffn {Fun@value{cedilha}@~ao} bc2 (@var{solu@value{cedilha}@~ao}, @var{xval1}, @var{yval1}, @var{xval2}, @var{yval2})
Resolve um problema de valores fronteira para uma equa@,{c}@~ao
diferencial de segunda ordem.  Aqui: @var{solu@value{cedilha}@~ao} @'e
uma solu@value{cedilha}@~ao geral para a equa@value{cedilha}@~ao,
calculada por @code{ode2}; @var{xval1} define o valor da vari@'avel
independente, num primeiro ponto, na forma @code{@var{x} = @var{x1}}, e
@var{yval1} define o valor da vari@'avel dependente, no mesmo ponto, na
forma @code{@var{y} = @var{y1}}. As express@~oes @var{xval2} e
@var{yval2} definem os valores das mesmas vari@'aveis, num segundo
ponto, usando a mesma forma.

Veja um exemplo da sua utiliza@,{c}@~ao na documenta@,{c}@~ao de
@code{ode2}.

@end deffn


@deffn {Fun@value{cedilha}@~ao} desolve (@var{eqn}, @var{x})
@deffnx {Fun@value{cedilha}@~ao} desolve ([@var{eqn_1}, ..., @var{eqn_n}], [@var{x_1}, ..., @var{x_n}])
A fun@value{cedilha}@~ao @code{dsolve} resolve sistemas de
equa@,{c}@~oes diferenciais ordin@'arias lineares usando transformada de
Laplace. Aqui as express@~oes @var{eqn} s@~ao equa@,{c}@~oes
diferenciais nas vari@'aveis dependentes @var{x_1}, ..., @var{x_n}.  A
rela@,{c}@~ao funcional de @var{x_1}, ..., @var{x_n} na vari@'avel
independente deve ser indicada explicitamente nas vari@'aveis e nas suas
derivadas. Por exemplo, esta forma de definir as equa@,{c}@~oes n@~ao
seria correcta:

@example
eqn_1: 'diff(f,x,2) = sin(x) + 'diff(g,x);
eqn_2: 'diff(f,x) + x^2 - f = 2*'diff(g,x,2);
@end example

A forma correcta seria:

@example
eqn_1: 'diff(f(x),x,2) = sin(x) + 'diff(g(x),x);
eqn_2: 'diff(f(x),x) + x^2 - f(x) = 2*'diff(g(x),x,2);
@end example

Assim, a chamada @`a fun@,{c}@~ao @code{desolve} seria:
@example
desolve([eqn_1, eqn_2], [f(x),g(x)]);
@end example

Se as condi@,{c}@~oes iniciais em @code{x=0} forem conhecidas, poder@~ao
ser fornecidas antes de usar @code{desolve}, atrav@'es de
@code{atvalue}.

@c ===beg===
@c 'diff(f(x),x)='diff(g(x),x)+sin(x);
@c 'diff(g(x),x,2)='diff(f(x),x)-cos(x);
@c atvalue('diff(g(x),x),x=0,a);
@c atvalue(f(x),x=0,1);
@c desolve([%o1,%o2],[f(x),g(x)]);
@c [%o1,%o2],%o5,diff;
@c ===end===
@example
(%i1) @b{@t{'diff(f(x),x)='diff(g(x),x)+sin(x);}}
                 d           d
(%o1)            -- (f(x)) = -- (g(x)) + sin(x)
                 dx          dx
(%i2) @b{@t{'diff(g(x),x,2)='diff(f(x),x)-cos(x);}}
                  2
                 d            d
(%o2)            --- (g(x)) = -- (f(x)) - cos(x)
                   2          dx
                 dx
(%i3) @b{@t{atvalue('diff(g(x),x),x=0,a);}}
(%o3)                           a
(%i4) @b{@t{atvalue(f(x),x=0,1);}}
(%o4)                           1
(%i5) @b{@t{desolve([%o1,%o2],[f(x),g(x)]);}}
                  x
(%o5) [f(x) = a %e  - a + 1, g(x) = 

                                                x
                                   cos(x) + a %e  - a + g(0) - 1]
(%i6) @b{@t{[%o1,%o2],%o5,diff;}}
             x       x      x                x
(%o6)   [a %e  = a %e , a %e  - cos(x) = a %e  - cos(x)]

@end example

Se @code{desolve} n@~ao pode obter uma solu@,{c}@~ao, retorna @code{false}.

@end deffn


@deffn {Fun@,{c}@~ao} ic1 (@var{solu@,{c}@~ao}, @var{xval}, @var{yval})
Resolve problemas de valor inicial para equa@,{c}@~oes diferenciais de
primeira ordem.  Aqui @var{solu@,{c}@~ao} @'e uma solu@,{c}@~ao geral
para a equa@,{c}@~ao, na forma dada por @code{ode2}, @var{xval} d@'a um
valor inicial para a vari@'avel independente, na forma @code{@var{x} =
@var{x0}}, e @var{yval} d@'a o valor inicial para a vari@'avel
dependente, na forma @code{@var{y} = @var{y0}}.

Veja um exemplo da sua utiliza@,{c}@~ao na documenta@,{c}@~ao de
@code{ode2}.

@end deffn

@deffn {Fun@,{c}@~ao} ic2 (@var{solu@,{c}@~ao}, @var{xval}, @var{yval}, @var{dval})
Resolve problemas de valores iniciais para equa@,{c}@~oes diferenciais
de segunda ordem. Aqui @var{solu@,{c}@~ao} @'e uma solu@,{c}@~ao geral
para a equa@,{c}@~ao, na forma dada por @code{ode2}, @var{xval} d@'a um
valor inicial para a vari@'avel independente, na forma @code{@var{x} =
@var{x0}}, @var{yval} d@'a o valor inicial para a vari@'avel dependente,
na forma @code{@var{y} = @var{y0}} e @var{dval} d@'a o valor inicial
para a primeira derivada da vari@'avel dependente, em fun@,{c}@~ao da
vari@'avel independente, na forma @code{diff(@var{y},@var{x}) =
@var{dy0}} (@code{diff} n@~ao tem que ser precedido por ap@'ostrofo).

Veja um exemplo da sua utiliza@,{c}@~ao na documenta@,{c}@~ao de
@code{ode2}.

@end deffn

@deffn {Fun@,{c}@~ao} ode2 (@var{eqn}, @var{dvar}, @var{ivar})
A fun@,{c}@~ao @code{ode2} resolve uma equa@,{c}@~ao diferencial
ordin@'aria (EDO) de primeira ou de segunda ordem.  Precisa de tr@^es
argumentos: uma EDO dada por @var{eqn}, a vari@'avel dependente
@var{dvar}, e a vari@'avel independente @var{ivar}.  Quando conseguir,
retorna uma solu@,{c}@~ao para a vari@'avel dependente, na forma
expl@'{@dotless{i}}cita ou impl@'{@dotless{i}}cita. @code{%c} @'e usado
para representar a constante de integra@,{c}@~ao no caso de
equa@,{c}@~oes de primeira ordem, e @code{%k1} e @code{%k2} as
constantes para equa@,{c}@~oes de segunda ordem. A depend@^encia da
vari@'avel dependente na vari@'avel independente n@~ao tem que ser
escrita em forma expl@'{@dotless{i}}cita, como no caso de
@code{desolve}, mas a vari@'avel independente dever@'a ser indicada
sempre no terceiro argumento.

Se por alguma raz@~ao @code{ode2} n@~ao conseguir encontrar a
solu@,{c}@~ao, retornar@'a @code{false}, ap@'os talvez mostrar uma
mensagem de erro. Os m@'etodos implementados para equa@,{c}@~oes
diferenciais de primeira ordem, na ordem em que ser@~ao testados, s@~ao:
linear, separ@'avel, exacta - talvez requerendo um factor de
integra@,{c}@~ao, homog@'enea, equa@,{c}@~ao de Bernoulli, homog@'enea
generalizada. Os tipos de equa@,{c}@~oes de segunda ordem que podem ser
resolvidas s@~ao: coeficientes constantes, exactas, linear homog@'eneas
com coeficientes n@~ao-constantes que possam ser transformados para
constates, equa@,{c}@~ao de Euler ou equi-dimensional, equa@,{c}@~oes que
possam ser resolvidas pelo m@'etodo de varia@,{c}@~ao dos par@^ametros,
e equa@,{c}@~oes que n@~ao dependam ou da vari@'avel independente ou da
vari@'avel dependente de modo que possam ser reduzidas a duas
equa@,{c}@~oes lineares de primeira ordem a serem resolvidas
sequ@^encialmente.

Durante o processo de resolu@,{c}@~ao da EDO, ser@~ao dados valores a
v@'arias vari@'aveis locais, com fins puramente informativos:
@code{m@'etodo} denota o m@'etodo de solu@,{c}@~ao usado (por exemplo,
@code{linear}), @code{intfactor} denota qualquer factor integrante
utilizado, @code{odeindex} denota o @'{@dotless{i}}ndice para o m@'etodo
de Bernoulli ou para o m@'etodo homog@'eneo generalizado, e @code{yp}
denota a solu@,{c}@~ao particular no m@'etodo de varia@,{c}@~ao dos
par@^ametros.

Para resolver problemas de valores iniciais (PVI) est@~ao
dispon@'{i}veis as fun@,{c}@~oes @code{ic1} e @code{ic2}e, para
equa@,{c}@~oes de primeira e segunda ordem, e para resolver problemas de
valores fronteira (PVF) de segunda ordem pode usar-se a fun@,{c}@~ao
@code{bc2}.

Exemplo:

@c ===beg===
@c x^2*'diff(y,x) + 3*y*x = sin(x)/x;
@c ode2(%,y,x);
@c ic1(%o2,x=%pi,y=0);
@c 'diff(y,x,2) + y*'diff(y,x)^3 = 0;
@c ode2(%,y,x);
@c ratsimp(ic2(%o5,x=0,y=0,'diff(y,x)=2));
@c bc2(%o5,x=0,y=1,x=1,y=3);
@c ===end===
@example
(%i1) @b{@t{x^2*'diff(y,x) + 3*y*x = sin(x)/x;}}
                      2 dy           sin(x)
(%o1)                x  -- + 3 x y = ------
                        dx             x
(%i2) @b{@t{ode2(%,y,x);}}
                             %c - cos(x)
(%o2)                    y = -----------
                                  3
                                 x
(%i3) @b{@t{ic1(%o2,x=%pi,y=0);}}
                              cos(x) + 1
(%o3)                   y = - ----------
                                   3
                                  x
(%i4) @b{@t{'diff(y,x,2) + y*'diff(y,x)^3 = 0;}}
                         2
                        d y      dy 3
(%o4)                   --- + y (--)  = 0
                          2      dx
                        dx
(%i5) @b{@t{ode2(%,y,x);}}
                      3
                     y  + 6 %k1 y
(%o5)                ------------ = x + %k2
                          6
(%i6) @b{@t{ratsimp(ic2(%o5,x=0,y=0,'diff(y,x)=2));}}
                             3
                          2 y  - 3 y
(%o6)                   - ---------- = x
                              6
(%i7) @b{@t{bc2(%o5,x=0,y=1,x=1,y=3);}}
                         3
                        y  - 10 y       3
(%o7)                   --------- = x - -
                            6           2

@end example

@end deffn
