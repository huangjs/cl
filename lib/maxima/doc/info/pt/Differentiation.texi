@c /Differentiation.texi/1.19/Sun Jun 12 19:13:47 2005/-ko/
@c end concepts Differentiation
@menu
* Defini@value{cedilha}@~oes para Diferencia@value{cedilha}@~ao::  
@end menu

@node Defini@value{cedilha}@~oes para Diferencia@value{cedilha}@~ao,  , Diferencia@value{cedilha}@~ao, Diferencia@value{cedilha}@~ao
@section Defini@value{cedilha}@~oes para Diferencia@value{cedilha}@~ao

@deffn {Fun@value{cedilha}@~ao} antid (@var{expr}, @var{x}, @var{u(x)}) 
Retorna uma lista de dois elementos,
tais que uma antiderivada de @var{expr} com rela@value{cedilha}@~ao a @var{x}
pode ser constu@'{@dotless{i}}da a partir da lista.
A express@~ao @var{expr} pode conter uma fun@value{cedilha}@~ao desconhecida @var{u} e suas derivadas.

Tome @var{L}, uma lista de dois elementos, como sendo o valor de retorno de @code{antid}.
Ent@~ao @code{@var{L}[1] + 'integrate (@var{L}[2], @var{x})}
@'e uma antiderivada de @var{expr} com rela@value{cedilha}@~ao a @var{x}.

Quando @code{antid} obt@'em sucesso inteiramente,
o segundo elemento do valor de retorno @'e zero.
De outra forma, o segundo elemento @'e n@~ao zero,
e o primeiro elemento n@~ao zero ou zero.
Se @code{antid} n@~ao pode fazer nenhum progresso,
o primeiro elemento @'e zero e o segundo n@~ao zero.

@code{load ("antid")} chama essa fun@value{cedilha}@~ao.
O pacote @code{antid} tamb@'em define as fun@value{cedilha}@~oes @code{nonzeroandfreeof} e @code{linear}.

@code{antid} est@'a relacionada a @code{antidiff} como segue.
Tome @var{L}, uma lista de dois elementos, que @'e o valor de retorno de @code{antid}.
Ent@~ao o valor de retorno de @code{antidiff} @'e igual a @code{@var{L}[1] + 'integrate (@var{L}[2], @var{x})}
onde @var{x} @'e a vari@'avel de integra@value{cedilha}@~ao.

Exemplos:
@c FOLLOWING EXAMPLES GENERATED FROM THESE INPUTS
@c load ("antid")$
@c expr: exp (z(x)) * diff (z(x), x) * y(x);
@c a1: antid (expr, x, z(x));
@c a2: antidiff (expr, x, z(x));
@c a2 - (first (a1) + 'integrate (second (a1), x));
@c antid (expr, x, y(x));
@c antidiff (expr, x, y(x));
@c THERE IS A DEMO FILE share/integration/antid.dem, EXECUTED BY demo('antid)
@c BUT I THINK THE FOLLOWING ILLUSTRATES THE BASIC FUNCTIONALITY MORE CLEARLY
@c MAYBE MERGE IN THE DEMO PROBLEMS LATER

@example
(%i1) load ("antid")$
(%i2) expr: exp (z(x)) * diff (z(x), x) * y(x);
                            z(x)  d
(%o2)                y(x) %e     (-- (z(x)))
                                  dx
(%i3) a1: antid (expr, x, z(x));
                       z(x)      z(x)  d
(%o3)          [y(x) %e    , - %e     (-- (y(x)))]
                                       dx
(%i4) a2: antidiff (expr, x, z(x));
                            /
                     z(x)   [   z(x)  d
(%o4)         y(x) %e     - I %e     (-- (y(x))) dx
                            ]         dx
                            /
(%i5) a2 - (first (a1) + 'integrate (second (a1), x));
(%o5)                           0
(%i6) antid (expr, x, y(x));
                             z(x)  d
(%o6)             [0, y(x) %e     (-- (z(x)))]
                                   dx
(%i7) antidiff (expr, x, y(x));
                  /
                  [        z(x)  d
(%o7)             I y(x) %e     (-- (z(x))) dx
                  ]              dx
                  /
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} antidiff (@var{expr}, @var{x}, @var{u}(@var{x}))
Retorna uma antiderivada de @var{expr} com rela@value{cedilha}@~ao a @var{x}.
A express@~ao @var{expr} pode conter uma fun@value{cedilha}@~ao desconhecida @var{u} e suas derivadas.

Quando @code{antidiff} obt@'em sucesso inteiramente,
a express@~ao resultante @'e livre do sinal de integral (isto @'e, livre do substantivo @code{integrate}).
De outra forma, @code{antidiff} retorna uma express@~ao
que @'e parcialmente ou inteiramente dentro de um sinal de um sinal de integral.
Se @code{antidiff} n@~ao pode fazer qualquer progresso,
o valor de retorno @'e inteiramente dentro de um sinal de integral.

@code{load ("antid")} chama essa fun@value{cedilha}@~ao.
O pacote @code{antid} tamb@'em define as fun@value{cedilha}@~oes @code{nonzeroandfreeof} e @code{linear}.

@code{antidiff} @'e relacionada a @code{antid} como segue.
Tome @var{L}, uma lista de dois elementos, como sendo o valor de retorno de @code{antid}.
Ent@~ao o valor de retorno de @code{antidiff} @'e igual a @code{@var{L}[1] + 'integrate (@var{L}[2], @var{x})}
onde @var{x} @'e a vari@'avel de integra@value{cedilha}@~ao.

Exemplos:
@c FOLLOWING EXAMPLES GENERATED FROM THESE INPUTS
@c load ("antid")$
@c expr: exp (z(x)) * diff (z(x), x) * y(x);
@c a1: antid (expr, x, z(x));
@c a2: antidiff (expr, x, z(x));
@c a2 - (first (a1) + 'integrate (second (a1), x));
@c antid (expr, x, y(x));
@c antidiff (expr, x, y(x));
@c THERE IS A DEMO FILE share/integration/antid.dem, EXECUTED BY demo('antid)
@c BUT I THINK THE FOLLOWING ILLUSTRATES THE BASIC FUNCTIONALITY MORE CLEARLY
@c MAYBE MERGE IN THE DEMO PROBLEMS LATER

@example
(%i1) load ("antid")$
(%i2) expr: exp (z(x)) * diff (z(x), x) * y(x);
                            z(x)  d
(%o2)                y(x) %e     (-- (z(x)))
                                  dx
(%i3) a1: antid (expr, x, z(x));
                       z(x)      z(x)  d
(%o3)          [y(x) %e    , - %e     (-- (y(x)))]
                                       dx
(%i4) a2: antidiff (expr, x, z(x));
                            /
                     z(x)   [   z(x)  d
(%o4)         y(x) %e     - I %e     (-- (y(x))) dx
                            ]         dx
                            /
(%i5) a2 - (first (a1) + 'integrate (second (a1), x));
(%o5)                           0
(%i6) antid (expr, x, y(x));
                             z(x)  d
(%o6)             [0, y(x) %e     (-- (z(x)))]
                                   dx
(%i7) antidiff (expr, x, y(x));
                  /
                  [        z(x)  d
(%o7)             I y(x) %e     (-- (z(x))) dx
                  ]              dx
                  /
@end example

@end deffn

@c I SUSPECT THERE IS MORE TO BE SAID HERE
@defvr propriedade atomgrad

@code{atomgrad} @'e a propriedade do gradiente at@^omico de uma express@~ao.
Essa propriedade @'e atribu@'{@dotless{i}}da por @code{gradef}.

@c NEED EXAMPLE HERE
@end defvr

@deffn {Fun@value{cedilha}@~ao} atvalue (@var{expr}, [@var{x_1} = @var{a_1}, ..., @var{x_m} = @var{a_m}], @var{c})
@deffnx {Fun@value{cedilha}@~ao} atvalue (@var{expr}, @var{x_1} = @var{a_1}, @var{c})
Atribui o valor @var{c} a @var{expr} no ponto @code{@var{x} = @var{a}}.
Tipicamente valores de extremidade s@~ao estabelecidos por esse mecanismo.

@var{expr} @'e a fun@value{cedilha}@~ao de avalia@value{cedilha}@~ao,
@code{@var{f}(@var{x_1}, ..., @var{x_m})},
ou uma derivada,
@code{diff (@var{f}(@var{x_1}, ..., @var{x_m}), @var{x_1}, @var{n_1}, ..., @var{x_n}, @var{n_m})}
@c HMM, WHAT IS THIS NEXT PHRASE GETTING AT ??
@c DOES IT INTEND TO IMPLY THAT IMPLICIT DEPENDENCIES ARE IGNORED ??
na qual os argumentos da fun@value{cedilha}@~ao explicitamente aparecem.
@var{n_i} @'e a ordem de diferencia@value{cedilha}@~ao com rela@value{cedilha}@~ao a @var{x_i}.

O ponto no qual o @code{atvalue} @'e estabelecido @'e dado pela lista de equa@value{cedilha}@~oes
@code{[@var{x_1} = @var{a_1}, ..., @var{x_m} = @var{a_m}]}.
Se existe uma vari@'avel simples @var{x_1},
uma @'unica equa@value{cedilha}@~ao pode ser dada sem ser contida em uma lista.

@code{printprops ([@var{f_1}, @var{f_2}, ...], atvalue)} mostra os @code{atvalues} das
fun@value{cedilha}@~oes @code{@var{f_1}, @var{f_2}, ...}
como especificado por chamadas a @code{atvalue}.
@code{printprops (@var{f}, atvalue)} mostra os @code{atvalues} de uma fun@value{cedilha}@~ao @var{f}.
@code{printprops (all, atvalue)} mostra os @code{atvalue}s de todas as fun@value{cedilha}@~oes para as quais @code{atvalue}s s@~ao definidos.

Os simbolos @code{@@1}, @code{@@2}, ... representam as 
vari@'aveis @var{x_1}, @var{x_2}, ... quando @code{atvalue}s s@~ao mostrados.

@code{atvalue} avalia seus argumentos.
@code{atvalue} retorna @var{c}, o @code{atvalue}.

Exemplos:
@c FOLLOWING ADAPTED FROM example (atvalue)
@c atvalue (f(x,y), [x = 0, y = 1], a^2);
@c atvalue ('diff (f(x,y), x), x = 0, 1 + y);
@c printprops (all, atvalue);
@c diff (4*f(x,y)^2 - u(x,y)^2, x);
@c at (%, [x = 0, y = 1]);

@example
(%i1) atvalue (f(x,y), [x = 0, y = 1], a^2);
                                2
(%o1)                          a
(%i2) atvalue ('diff (f(x,y), x), x = 0, 1 + y);
(%o2)                        @@2 + 1
(%i3) printprops (all, atvalue);
                                !
                  d             !
                 --- (f(@@1, @@2))!       = @@2 + 1
                 d@@1            !
                                !@@1 = 0

                                     2
                          f(0, 1) = a

(%o3)                         done
(%i4) diff (4*f(x,y)^2 - u(x,y)^2, x);
                  d                          d
(%o4)  8 f(x, y) (-- (f(x, y))) - 2 u(x, y) (-- (u(x, y)))
                  dx                         dx
(%i5) at (%, [x = 0, y = 1]);
                                         !
              2              d           !
(%o5)     16 a  - 2 u(0, 1) (-- (u(x, y))!            )
                             dx          !
                                         !x = 0, y = 1
@end example

@end deffn

@c LOOKS LIKE cartan IS THE NAME OF A PACKAGE AND NOT A FUNCTION OR VARIABLE
@c PROBABLY SHOULD SPLIT OUT cartan AND ITS CONTENTS INTO ITS OWN TEXINFO FILE
@c ext_diff AND lie_diff NOT DOCUMENTED (OTHER THAN HERE)
@deffn {Fun@value{cedilha}@~ao} cartan  -
O c@'alculo exterior de formas diferenciais @'e uma ferramenta b@'asica
de geometria diferencial desenvolvida por Elie Cartan e tem importantes
aplica@value{cedilha}@~oes na teoria das equa@value{cedilha}@~oes diferenciais parciais.
O pacote @code{cartan}
implementa as fun@value{cedilha}@~oes @code{ext_diff} e @code{lie_diff},
juntamente com os operadores @code{~} (produto da cunha) e @code{|} (contra@value{cedilha}@~ao
de uma forma com um vector.)
Digite @code{demo (tensor)} para ver uma breve
descri@value{cedilha}@~ao desses comandos juntamente com exemplos.

@code{cartan} foi implementado por F.B. Estabrook e H.D. Wahlquist.

@end deffn

@deffn {Fun@value{cedilha}@~ao} del (@var{x})
@code{del (@var{x})} representa a diferencial da vari@'avel @math{x}.

@code{diff} retorna uma express@~ao contendo @code{del}
se uma vari@'avel independente n@~ao for especificada.
Nesse caso, o valor de retorno @'e a ent@~ao chamada "diferencial total".

Exemplos:
@c GENERATED FROM THE FOLLOWING
@c diff (log (x));
@c diff (exp (x*y));
@c diff (x*y*z);

@example
(%i1) diff (log (x));
                             del(x)
(%o1)                        ------
                               x
(%i2) diff (exp (x*y));
                     x y              x y
(%o2)            x %e    del(y) + y %e    del(x)
(%i3) diff (x*y*z);
(%o3)         x y del(z) + x z del(y) + y z del(x)
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} delta (@var{t})
A fun@value{cedilha}@~ao Delta de Dirac.

Correntemente somente @code{laplace} sabe sobre a fun@value{cedilha}@~ao @code{delta}.

Exemplo:

@example
(%i1) laplace (delta (t - a) * sin(b*t), t, s);
Is  a  positive, negative, or zero?

p;
                                   - a s
(%o1)                   sin(a b) %e
@end example

@end deffn

@defvr {Vari@'avel} dependencies
Valor por omiss@~ao: @code{[]}

@code{dependencies} @'e a lista de @'atomos que possuem depend@^encias
funcionais, atribu@'{@dotless{i}}das por @code{depends} ou @code{gradef}.
A lista @code{dependencies} @'e cumulativa:
cada chamada a @code{depends} ou a @code{gradef} anexa @'{@dotless{i}}tens adicionais.

Veja @code{depends} e @code{gradef}.

@end defvr

@deffn {Fun@value{cedilha}@~ao} depends (@var{f_1}, @var{x_1}, ..., @var{f_n}, @var{x_n})
Declara depend@^ecias funcionais entre vari@'aveis para o prop@'osito de calcular derivadas.
Na aus@^encia de depend@^ecias declaradas,
@code{diff (f, x)} retorna zero.
Se @code{depends (f, x)} for declarada,
@code{diff (f, x)} retorna uma derivada simb@'olica (isto @'e, um substantivo @code{diff}).

Cada argumento @var{f_1}, @var{x_1}, etc., pode ser o nome de uma vari@'avel ou array,
ou uma lista de nomes.
Todo elemento de @var{f_i} (talvez apenas um elemento simples)
@'e declarado para depender
de todo elemento de @var{x_i} (talvez apenas um elemento simples).
Se algum @var{f_i} for o nome de um array ou cont@'em o nome de um array,
todos os elementos do array dependem de @var{x_i}.

@code{diff} reconhece depend@^encias indirectas estabelecidas por @code{depends}
e aplica a regra da cadeia nesses casos.

@code{remove (@var{f}, dependency)} remove todas as depend@^encias declaradas para @var{f}.

@code{depends} retorna uma lista de depend@^encias estabelecidas.
As depend@^encias s@~ao anexadas @`a vari@'avel global @code{dependencies}.
@code{depends} avalia seus argumentos.

@code{diff} @'e o @'unico comando Maxima que reconhece depend@^encias estabelecidas por @code{depends}.
Outras fun@value{cedilha}@~oes (@code{integrate}, @code{laplace}, etc.)
somente reconhecem depend@^encias explicitamente representadas por seus argumentos.
Por exemplo, @code{integrate} n@~ao reconhece a depend@^encia de @code{f} sobre @code{x}
a menos que explicitamente representada como @code{integrate (f(x), x)}.

@c GENERATED BY THE FOLLOWING
@c depends ([f, g], x);
@c depends ([r, s], [u, v, w]);
@c depends (u, t);
@c dependencies;
@c diff (r.s, u);
@example
(%i1) depends ([f, g], x);
(%o1)                     [f(x), g(x)]
(%i2) depends ([r, s], [u, v, w]);
(%o2)               [r(u, v, w), s(u, v, w)]
(%i3) depends (u, t);
(%o3)                        [u(t)]
(%i4) dependencies;
(%o4)      [f(x), g(x), r(u, v, w), s(u, v, w), u(t)]
(%i5) diff (r.s, u);
                         dr           ds
(%o5)                    -- . s + r . --
                         du           du
@end example

@c GENERATED BY THE FOLLOWING
@c diff (r.s, t);
@example
(%i6) diff (r.s, t);
                      dr du           ds du
(%o6)                 -- -- . s + r . -- --
                      du dt           du dt
@end example

@c GENERATED BY THE FOLLOWING
@c remove (r, dependency);
@c diff (r.s, t);
@example
(%i7) remove (r, dependency);
(%o7)                         done
(%i8) diff (r.s, t);
                                ds du
(%o8)                       r . -- --
                                du dt
@end example

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} derivabbrev
Valor por omiss@~ao: @code{false}

Quando @code{derivabbrev} for @code{true},
derivadas simb@'olicas (isto @'e, substantivos @code{diff}) s@~ao mostradas como subscritos.
De outra forma, derivadas s@~ao mostradas na nota@value{cedilha}@~ao de Leibniz @code{dy/dx}.

@c NEED EXAMPLES HERE
@end defvr

@c SEEMS LIKE THIS STATEMENT COULD BE LESS CLUMSY
@deffn {Fun@value{cedilha}@~ao} derivdegree (@var{expr}, @var{y}, @var{x})
Retorna o maior grau de uma derivada
da vari@'avel dependente @var{y} com rela@value{cedilha}@~ao @`a vari@'avel independente
@var{x} ocorrendo em @var{expr}.

Exemplo:
@c GENERATED FROM THE FOLLOWING
@c 'diff (y, x, 2) + 'diff (y, z, 3) + 'diff (y, x) * x^2;
@c derivdegree (%, y, x);
@example
(%i1) 'diff (y, x, 2) + 'diff (y, z, 3) + 'diff (y, x) * x^2;
                         3     2
                        d y   d y    2 dy
(%o1)                   --- + --- + x  --
                          3     2      dx
                        dz    dx
(%i2) derivdegree (%, y, x);
(%o2)                           2
@end example

@end deffn

@c I HAVE NO IDEA WHAT THIS DOES
@deffn {Fun@value{cedilha}@~ao} derivlist (@var{var_1}, ..., @var{var_k})
Causa somente diferencia@value{cedilha}@~oes com rela@value{cedilha}@~ao @`as
vari@'aveis indicadas, dentro do comando @code{ev}.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} derivsubst
Valor por omiss@~ao: @code{false}

Quando @code{derivsubst} for @code{true}, uma substiru@'{@dotless{i}}@value{cedilha}@~ao n@~ao sint@'atica tais como
@code{subst (x, 'diff (y, t), 'diff (y, t, 2))} retorna @code{'diff (x, t)}.

@end defvr

@deffn {Fun@value{cedilha}@~ao} diff (@var{expr}, @var{x_1}, @var{n_1}, ..., @var{x_m}, @var{n_m})
@deffnx {Fun@value{cedilha}@~ao} diff (@var{expr}, @var{x}, @var{n})
@deffnx {Fun@value{cedilha}@~ao} diff (@var{expr}, @var{x})
@deffnx {Fun@value{cedilha}@~ao} diff (@var{expr})
Retorna uma derivada ou diferencial de @var{expr} com rela@value{cedilha}@~ao a alguma ou todas as vari@'aveis em @var{expr}.

@code{diff (@var{expr}, @var{x}, @var{n})} retorna a @var{n}'@'esima derivada de @var{expr}
com rela@value{cedilha}@~ao a @var{x}.

@code{diff (@var{expr}, @var{x_1}, @var{n_1}, ..., @var{x_m}, @var{n_m})}
retorna a derivada parcial mista de @var{expr} com rela@value{cedilha}@~ao a @var{x_1}, ..., @var{x_m}.
Isso @'e equivalente a @code{diff (... (diff (@var{expr}, @var{x_m}, @var{n_m}) ...), @var{x_1}, @var{n_1})}.

@code{diff (@var{expr}, @var{x})}
retorna a primeira derivada de @var{expr} com rela@value{cedilha}@~ao a
uma vari@'avel @var{x}.

@code{diff (@var{expr})} retorna a diferencial total de @var{expr},
isto @'e, a soma das derivadas de @var{expr} com rela@value{cedilha}@~ao a cada uma de suas vari@'aveis
vezes a diferencial @code{del} de cada vari@'avel.
@c WHAT DOES THIS NEXT STATEMENT MEAN, EXACTLY ??
Nenhuma simplifica@value{cedilha}@~ao adicional de @code{del} @'e oferecida.

A forma substantiva de @code{diff} @'e requerida em alguns contextos,
tal como declarando uma equa@value{cedilha}@~ao diferencial.
Nesses casos, @code{diff} pode ser colocado ap@'ostrofo (com @code{'diff}) para retornar a forma substantiva
em lugar da realiza@value{cedilha}@~ao da diferencia@value{cedilha}@~ao.

Quando @code{derivabbrev} for @code{true}, derivadas s@~ao mostradas como subscritos.
De outra forma, derivadas s@~ao mostradas na nota@value{cedilha}@~ao de Leibniz, @code{dy/dx}.

Exemplos:
@c GENERATED FROM THE FOLLOWING
@c diff (exp (f(x)), x, 2);
@c derivabbrev: true$
@c 'integrate (f(x, y), y, g(x), h(x));
@c diff (%, x);

@example
(%i1) diff (exp (f(x)), x, 2);
                     2
              f(x)  d               f(x)  d         2
(%o1)       %e     (--- (f(x))) + %e     (-- (f(x)))
                      2                   dx
                    dx
(%i2) derivabbrev: true$
(%i3) 'integrate (f(x, y), y, g(x), h(x));
                         h(x)
                        /
                        [
(%o3)                   I     f(x, y) dy
                        ]
                        /
                         g(x)
(%i4) diff (%, x);
       h(x)
      /
      [
(%o4) I     f(x, y)  dy + f(x, h(x)) h(x)  - f(x, g(x)) g(x)
      ]            x                     x                  x
      /
       g(x)
@end example

Para o pacote tensor, as seguintes modifica@value{cedilha}@~oes foram
incorporadas:

(1) As derivadas de quaisquer objectos indexados em @var{expr} ter@~ao as
vari@'aveis @var{x_i} anexadas como argumentos adicionais.  Ent@~ao todos os
@'{@dotless{i}}ndices de derivada ser@~ao ordenados.

(2) As vari@'aveis @var{x_i} podem ser inteiros de 1 at@'e o valor de uma vari@'avel
@code{dimension} [valor padr@~ao: 4].  Isso far@'a com que a diferencia@value{cedilha}@~ao
seja conclu@'{@dotless{i}}da com rela@value{cedilha}@~ao aos @var{x_i}'@'esimos membros da lista @code{coordinates} que
pode ser escolhida para uma lista de nomes de coordenadas, e.g.,
@code{[x, y, z, t]}. Se @code{coordinates} for associada a uma vari@'avel at@^omica, ent@~ao aquela
vari@'avel subscrita por @var{x_i} ser@'a usada para uma vari@'avel de
diferencia@value{cedilha}@~ao.  Isso permite um array de nomes de coordenadas ou
nomes subscritos como @code{X[1]}, @code{X[2]}, ... sejam usados.  Se @code{coordinates} n@~ao
foram atribu@'{@dotless{i}}das um valor, ent@~ao as vari@'aveis seram tratadas como em (1)
acima.

@c NEED EXAMPLES FOR TENSOR STUFF
@end deffn

@c MERGE THIS INTO @defun diff
@defvr {S@'{@dotless{i}}mbolo especial} diff

Quando @code{diff} est@'a presente como um @code{evflag} em chamadas para @code{ev},
Todas as diferencia@value{cedilha}@~oes indicadas em @code{expr} s@~ao realizdas.

@c NEED EXAMPLE HERE
@end defvr

@c NOT SURE HOW THIS IS SUPPOSED TO WORK
@deffn {Fun@value{cedilha}@~ao} dscalar (@var{f})
Aplica o d'Alembertiano escalar para a fun@value{cedilha}@~ao escalar @var{f}.

@c APPARENTLY dscalar DOESN'T EXIST IN THE CORE FILES ANYMORE
@c ctensor HAS THE ONLY DEFN I FOUND (OUTSIDE OF archive/)
@code{load ("ctensor")} chama essa fun@value{cedilha}@~ao.

@c FOLLOWING EXAMPLE DOESN'T WORK; I GET dscalar (field) ==> 0
@c (I GET 0 FOR THE ctensor VERSION OF dscalar, AND SAME FOR
@c THE DEFN OF dscalar GIVEN IN archive/share/lisp/ctensr.trl)
@c INCIDENTALLY dependencies IS DOCUMENTED ONLY AS A VARIABLE

@c @example
@c (%i41) dependencies(field(r));
@c (%o41)                           [field(r)]
@c (%i42) dscalar(field);
@c (%o43)
@c     -m
@c   %e  ((field  n - field  m + 2 field   ) r + 4 field )
@c              r  r       r  r         r r             r
@c 
@c - -----------------------------------------------------
@c                              2 r
@c @end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} express (@var{expr})
@c HERE IS THE PREVIOUS TEXT. WHAT IS THE POINT ABOUT depends ?? I'M NOT GETTING IT
@c The result uses the noun form of any
@c derivadas arising from expansion of the vector differential
@c operators.  To force evaluation of these derivadas, the built-in @code{ev}
@c fun@value{cedilha}@~ao can be used together with the @code{diff} evflag, after using the
@c built-in @code{depends} fun@value{cedilha}@~ao to establish any new implicit depend@^encias.

Expande o substantivo do operador diferencial em express@~oes em termos de derivadas parciais.
@code{express} reconhece os operadores @code{grad}, @code{div}, @code{curl}, @code{laplacian}.
@code{express} tamb@'em expande o produto do X @code{~}.

Derivadas simb@'olicas (isto @'e, substantivos @code{diff})
no valor de retorno de @code{express} podem ser avaliadas inclu@'{@dotless{i}}ndo @code{diff}
na chamada @`a fun@value{cedilha}@~ao @code{ev} ou na linha de comando.
Nesse contexto, @code{diff} age como uma @code{evfun}.

@code{load ("vect")} chama essa fun@value{cedilha}@~ao.
@c IN POINT OF FACT, express IS A SIMPLIFICATION RULE, AND express1 IS THE FCN WHICH DOES ALL THE WORK

Exemplos:
@c GENERATED FROM THE FOLLOWING
@c load ("vect")$
@c grad (x^2 + y^2 + z^2);
@c express (%);
@c ev (%, diff);
@c div ([x^2, y^2, z^2]);
@c express (%);
@c ev (%, diff);
@c curl ([x^2, y^2, z^2]);
@c express (%);
@c ev (%, diff);
@c laplacian (x^2 * y^2 * z^2);
@c express (%);
@c ev (%, diff);
@c [a, b, c] ~ [x, y, z];
@c express (%);

@example
(%i1) load ("vect")$
(%i2) grad (x^2 + y^2 + z^2);
                              2    2    2
(%o2)                  grad (z  + y  + x )
(%i3) express (%);
       d    2    2    2   d    2    2    2   d    2    2    2
(%o3) [-- (z  + y  + x ), -- (z  + y  + x ), -- (z  + y  + x )]
       dx                 dy                 dz
(%i4) ev (%, diff);
(%o4)                    [2 x, 2 y, 2 z]
(%i5) div ([x^2, y^2, z^2]);
                              2   2   2
(%o5)                   div [x , y , z ]
(%i6) express (%);
                   d    2    d    2    d    2
(%o6)              -- (z ) + -- (y ) + -- (x )
                   dz        dy        dx
(%i7) ev (%, diff);
(%o7)                    2 z + 2 y + 2 x
(%i8) curl ([x^2, y^2, z^2]);
                               2   2   2
(%o8)                   curl [x , y , z ]
(%i9) express (%);
       d    2    d    2   d    2    d    2   d    2    d    2
(%o9) [-- (z ) - -- (y ), -- (x ) - -- (z ), -- (y ) - -- (x )]
       dy        dz       dz        dx       dx        dy
(%i10) ev (%, diff);
(%o10)                      [0, 0, 0]
(%i11) laplacian (x^2 * y^2 * z^2);
                                  2  2  2
(%o11)                laplacian (x  y  z )
(%i12) express (%);
         2                2                2
        d     2  2  2    d     2  2  2    d     2  2  2
(%o12)  --- (x  y  z ) + --- (x  y  z ) + --- (x  y  z )
          2                2                2
        dz               dy               dx
(%i13) ev (%, diff);
                      2  2      2  2      2  2
(%o13)             2 y  z  + 2 x  z  + 2 x  y
(%i14) [a, b, c] ~ [x, y, z];
(%o14)                [a, b, c] ~ [x, y, z]
(%i15) express (%);
(%o15)          [b z - c y, c x - a z, a y - b x]
@end example

@end deffn

@c COMMENTING OUT THIS TEXT PENDING RESOLUTION OF BUG REPORT # 836704:
@c "gendiff is all bugs: should be deprecated"
@c @defun gendiff
@c Sometimes @code{diff(e,x,n)} can be reduced even though N is
@c symbolic.
@c 
@c @example
@c batch("gendif")$
@c @end example
@c 
@c and you can try, for example,
@c 
@c @example
@c diff(%e^(a*x),x,q)
@c @end example
@c 
@c by using @code{gendiff} rather than @code{diff}.  Unevaluable
@c items come out quoted.  Some items are in terms of @code{genfact}, which
@c see.
@c
@c @end defun

@deffn {Fun@value{cedilha}@~ao} gradef (@var{f}(@var{x_1}, ..., @var{x_n}), @var{g_1}, ..., @var{g_m})
@deffnx {Fun@value{cedilha}@~ao} gradef (@var{a}, @var{x}, @var{expr})
Define as derivadas parciais (i.e., os componentes do gradiente) da fun@value{cedilha}@~ao @var{f}
ou vari@'avel @var{a}.

@code{gradef (@var{f}(@var{x_1}, ..., @var{x_n}), @var{g_1}, ..., @var{g_m})}
define @code{d@var{f}/d@var{x_i}} como @var{g_i}, 
onde @var{g_i} @'e uma express@~ao; @var{g_i} pode ser uma chamada de fun@value{cedilha}@~ao, mas n@~ao o nome de uma fun@value{cedilha}@~ao.
O n@'umero de derivadas parciais @var{m} pode ser menor que o n@'umero de argumentos @var{n},
nesses casos derivadas s@~ao definidas com rela@value{cedilha}@~ao a @var{x_1} at@'e @var{x_m} somente.

@code{gradef (@var{a}, @var{x}, @var{expr})} define uma derivada de vari@'avel @var{a}
com rela@value{cedilha}@~ao a @var{x} como @var{expr}.
Isso tamb@'em estabelece a depend@^encia de @var{a} sobre @var{x} (via @code{depends (@var{a}, @var{x})}).

O primeiro argumento @code{@var{f}(@var{x_1}, ..., @var{x_n})} ou @var{a} @'e acompanhado de ap@'ostrofo,
mas os argumentos restantes @var{g_1}, ..., @var{g_m} s@~ao avaliados.
@code{gradef} retorna a fun@value{cedilha}@~ao ou vari@'avel para as quais as derivadas parciais s@~ao definidas.

@code{gradef} pode redefinir as derivadas de fun@value{cedilha}@~oes internas do Maxima.
Por exemplo, @code{gradef (sin(x), sqrt (1 - sin(x)^2))} redefine uma derivada de @code{sin}.

@code{gradef} n@~ao pode definir derivadas parciais para um fun@value{cedilha}@~ao subscrita.

@code{printprops ([@var{f_1}, ..., @var{f_n}], gradef)} mostra as derivadas parciais
das fun@value{cedilha}@~oes @var{f_1}, ..., @var{f_n}, como definidas por @code{gradef}.

@code{printprops ([@var{a_n}, ..., @var{a_n}], atomgrad)} mostra as derivadas parciais
das vari@'aveis @var{a_n}, ..., @var{a_n}, como definidas por @code{gradef}.

@code{gradefs} @'e a lista de fun@value{cedilha}@~oes
para as quais derivadas parciais foram definidas por @code{gradef}.
@code{gradefs} n@~ao inclui quaisquer vari@'aveis
para quais derivadas parciais foram definidas por @code{gradef}.

@c REPHRASE THIS NEXT BIT
Gradientes s@~ao necess@'arios quando, por exemplo, uma fun@value{cedilha}@~ao n@~ao @'e conhecida
explicitamente mas suas derivadas primeiras s@~ao e isso @'e desejado para obter
derivadas de ordem superior.

@c NEED EXAMPLES HERE
@end deffn

@defvr {Vari@'avel de sistema} gradefs
Valor por omiss@~ao: @code{[]}

@code{gradefs} @'e a lista de fun@value{cedilha}@~oes
para as quais derivadas parciais foram definidas por @code{gradef}.
@code{gradefs} n@~ao inclui quaisquer vari@'aveis
para as quais derivadas parciais foram deinidas por @code{gradef}.

@end defvr

@deffn {Fun@value{cedilha}@~ao} laplace (@var{expr}, @var{t}, @var{s})
Tenta calcular a transformada de Laplace de @var{expr} com rela@value{cedilha}@~ao a uma vari@'avel @var{t}
e par@^ametro de transforma@value{cedilha}@~ao @var{s}.
Se @code{laplace} n@~ao pode achar uma solu@value{cedilha}@~ao, um substantivo @code{'laplace} @'e retornado.

@code{laplace} reconhece em @var{expr} as fun@value{cedilha}@~oes
@code{delta}, @code{exp}, @code{log}, @code{sin}, @code{cos}, @code{sinh}, @code{cosh}, e @code{erf},
tamb@'em @code{derivative}, @code{integrate}, @code{sum}, e @code{ilt}.
Se algumas outras fun@value{cedilha}@~oes estiverem presente,
@code{laplace} pode n@~ao ser habilitada a calcular a tranformada.

@c REPHRASE THIS
@var{expr} pode tamb@'em ser uma equa@value{cedilha}@~ao linear, diferencial de coeficiente contante no
qual caso o @code{atvalue} da vari@'avel dependente @'e usado.
@c "used" -- USED HOW ??
O requerido @code{atvalue} pode ser fornecido ou antes ou depois da transformada ser calculada.
Uma vez que as condi@value{cedilha}@~oes iniciais devem ser especificadas em zero, se um teve condi@value{cedilha}@~oes
de limite impostas em qualquer outro lugar ele pode impor essas sobre a solu@value{cedilha}@~ao
geral e eliminar as constantes resolvendo a solu@value{cedilha}@~ao geral
para essas e substituindo seus valores de volta.

@code{laplace} reconhece integrais de convolu@value{cedilha}@~ao da forma
@code{integrate (f(x) * g(t - x), x, 0, t)};
outros tipos de convolu@value{cedilha}@~oes n@~ao s@~ao reconhecidos.

Rela@value{cedilha}@~oes funcionais devem ser explicitamente representadas em @var{expr};
rela@value{cedilha}@~oes impl@'{@dotless{i}}citas, estabelecidas por @code{depends}, n@~ao s@~ao reconhecidas.
Isto @'e, se @var{f} depende de @var{x} e @var{y},
@code{f (x, y)} deve aparecer em @var{expr}.

Veja tamb@'em @code{ilt}, a transformada inversa de Laplace.

Exemplos:
@c GENERATED FROM THE FOLLOWING:
@c laplace (exp (2*t + a) * sin(t) * t, t, s);
@c laplace ('diff (f (x), x), x, s);
@c diff (diff (delta (t), t), t);
@c laplace (%, t, s);

@example
(%i1) laplace (exp (2*t + a) * sin(t) * t, t, s);
                            a
                          %e  (2 s - 4)
(%o1)                    ---------------
                           2           2
                         (s  - 4 s + 5)
(%i2) laplace ('diff (f (x), x), x, s);
(%o2)             s laplace(f(x), x, s) - f(0)
(%i3) diff (diff (delta (t), t), t);
                          2
                         d
(%o3)                    --- (delta(t))
                           2
                         dt
(%i4) laplace (%, t, s);
                            !
               d            !         2
(%o4)        - -- (delta(t))!      + s  - delta(0) s
               dt           !
                            !t = 0
@end example

@end deffn
