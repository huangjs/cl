@c /Miscellaneous.texi/1.20/Mon Jan  1 07:27:14 2007/-ko/
@menu
* Introdu@value{cedilha}@~ao a Op@value{cedilha}@~oes Diversas::  
* Compartilhado::                       
* Defini@value{cedilha}@~oes para Op@value{cedilha}@~oes Diversas::  
@end menu

@node Introdu@value{cedilha}@~ao a Op@value{cedilha}@~oes Diversas, Compartilhado, Op@value{cedilha}@~oes Diversas, Op@value{cedilha}@~oes Diversas
@section Introdu@value{cedilha}@~ao a Op@value{cedilha}@~oes Diversas

Nessa sec@value{cedilha}@~ao v@'arias op@value{cedilha}@~oes s@~ao tratadas pelo facto de possuirem um efeito global
sobre a opera@value{cedilha}@~ao do Maxima.   Tamb@'em v@'arias listas tais como a lista de todas as
fun@value{cedilha}@~oes definidas pelo utilizador, s@~ao discutidas.

@node Compartilhado, Defini@value{cedilha}@~oes para Op@value{cedilha}@~oes Diversas, Introdu@value{cedilha}@~ao a Op@value{cedilha}@~oes Diversas, Op@value{cedilha}@~oes Diversas
@section Compartilhado
O direct@'orio "share" do Maxima cont@'em programas e outros ficheiros 
de interesse para os utilizadors do Maxima, mas que n@~ao s@~ao parte da implementa@value{cedilha}@~ao do n@'ucleo do Maxima.
Esses programas s@~ao tipicamente chamados via @code{load} ou @code{setup_autoload}.

@code{:lisp *maxima-sharedir*} mostra a localiza@value{cedilha}@~ao do direct@'orio compartilhado
dentro do sistema de ficheiros do utilizador.

@c FIXME FIXME FIXME -- WE REALLY NEED AN UP-TO-DATE LIST OF SHARE PACKAGES !!
@code{printfile ("share.usg")} imprime uma lista de pacotes desactualizados dos pacotes compartilhados.
Usu@'arios podem encontrar isso de forma mais detalhada navegando no direct@'orio compartilhado usando um navegador de sistema de ficheiro.


@node Defini@value{cedilha}@~oes para Op@value{cedilha}@~oes Diversas,  , Compartilhado, Op@value{cedilha}@~oes Diversas
@section Defini@value{cedilha}@~oes para Op@value{cedilha}@~oes Diversas

@defvr {Vari@'avel de sistema} aliases
Valor por omiss@~ao: @code{[]}

@code{aliases} @'e a lista de @'atomos que possuem um alias definido pelo utilizador (escolhido atrav@'es
das fun@value{cedilha}@~oes @code{alias}, @code{ordergreat}, @code{orderless} ou atrav@'es da declara@value{cedilha}@~ao do @'atomo como sendo um
@code{noun} (substantivo) com @code{declare}).
@end defvr


@defvr {Declara@value{cedilha}@~ao} alphabetic
@code{alphabetic} @'e uma declara@value{cedilha}@~ao reconhecida por @code{declare}.
A express@~ao @code{declare(@var{s}, alphabetic)} diz ao Maxima para reconhecer
como alfab@'etico todos os caracteres em @var{s}, que deve ser uma sequ@^encia de caracteres.
 
Veja tamb@'em @emph{Identificadores}.

Exemplo:

@c ===beg===
@c xx\~yy\`\@ : 1729;
@c declare ("~`@", alphabetic);
@c xx~yy`@ + @yy`xx + `xx@@yy~;
@c listofvars (%);
@c ===end===

@example
(%i1) xx\~yy\`\@@ : 1729;
(%o1)                         1729
(%i2) declare ("~`@@", alphabetic);
(%o2)                         done
(%i3) xx~yy`@@ + @@yy`xx + `xx@@@@yy~;
(%o3)               `xx@@@@yy~ + @@yy`xx + 1729
(%i4) listofvars (%);
(%o4)                  [@@yy`xx, `xx@@@@yy~]
@end example


@end defvr

@c REPHRASE
@c DOES apropos RETURN THE SAME THING AS THE LIST SHOWN BY describe ??
@deffn {Fun@value{cedilha}@~ao} apropos (@var{string})
Procura por nomes Maxima que possuem @var{string} aparecendo em qualquer lugar dentro
de seu nome.  Dessa forma, @code{apropos (exp)} retorna uma lista de todos os sinalizadores
e fun@value{cedilha}@~oes que possuem @code{exp} como parte de seus nomes, tais como @code{expand},
@code{exp}, e @code{exponentialize}.  Dessa forma, se lembrar apenas uma
parte do nome
de alguma coisa, pode usar este comando para achar o restante do nome.
Similarmente, pode dizer @code{apropos (tr_)} para achar uma lista de muitos dos
comutadores relatando para o tradutor, muitos dos quais come@value{cedilha}am com @code{tr_}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} args (@var{expr})
Retorna a lista de argumentos de @code{expr},
que pode ser de qualquer tipo de express@~ao outra como um @'atomo.
Somente os argumentos do operador de n@'{@dotless{i}}vel mais alto s@~ao extra@'{@dotless{i}}dos;
subexpress@~oes de @code{expr} aparecem como elementos ou subexpress@~oes de elementos
da lista de argumentos.

A ordem dos @'{@dotless{i}}tens na lista pode depender do sinalizador global @code{inflag}.

@code{args (@var{expr})} @'e equivalente a @code{substpart ("[", @var{expr}, 0)}.
Veja tamb@'em @code{substpart}.

Veja tamb@'em @code{op}.

@c NEEDS EXAMPLES
@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} genindex
Valor por omiss@~ao: @code{i}

@code{genindex} @'e o prefixo usado para gerar a
pr@'oxima vari@'avel do somat@'orio quando necess@'ario.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} gensumnum
Valor por omiss@~ao: 0

@code{gensumnum} @'e o sufixo num@'erico usado para gerar vari@'avel seguinte
do somat@'orio.  Se isso for escolhido para @code{false} ent@~ao o @'{@dotless{i}}ndice  consistir@'a somente
de @code{genindex} com um sufixo num@'erico.

@end defvr

@c NEEDS EXPANSION AND EXAMPLES
@defvr {Constante} inf
Infinito positivo real.

@end defvr

@c NEEDS EXPANSION AND EXAMPLES
@defvr {Constante} infinity
Infinito complexo, uma magnitude infinita de @^angulo de fase
arbitr@'aria.  Veja tamb@'em @code{inf} e @code{minf}.

@end defvr

@defvr {Vari@'avel de sistema} infolists
Valor por omiss@~ao: @code{[]}

@code{infolists} @'e uma lista dos nomes de todas as listas de
informa@value{cedilha}@~ao no Maxima. S@~ao elas:

@table @code
@item labels
Todos associam @code{%i}, @code{%o}, e r@'otulos @code{%t}.
@item values
Todos associam @'atomos que s@~ao vari@'aveis de utilizador, n@~ao op@value{cedilha}@~oes do
Maxima ou comutadores, criados atrav@'es de @code{:} ou @code{::} ou associando funcionalmente.
@c WHAT IS INTENDED BY "FUNCTIONAL BINDING" HERE ??

@item functions
Todas as fun@value{cedilha}@~oes definidas pelo utilizador, criadas atrav@'es de @code{:=} ou @code{define}.

@item arrays
Todos os arrays declarados e n@~ao declarados, criados atrav@'es de @code{:}, @code{::}, ou @code{:=}.
@c AREN'T THERE OTHER MEANS OF CREATING ARRAYS ??
@item macros
Todas as macros definidas pelo utilizador.

@item myoptions
Todas as op@value{cedilha}@~oes alguma vez alteradas pelo utilizador (mesmo que tenham ou n@~ao elas
tenham mais tarde retornadas para seus valores padr@~ao).

@item rules
Todos os modelos definidos pelo utilizador que coincidirem e regras de simplifica@value{cedilha}@~ao, criadas
atrav@'es de @code{tellsimp}, @code{tellsimpafter}, @code{defmatch}, ou @code{defrule}.

@item aliases
Todos os @'atomos que possuem um alias definido pelo utilizador, criado atrav@'es das fun@value{cedilha}@~oes
@code{alias}, @code{ordergreat}, @code{orderless} ou declarando os @'atomos como um @code{noun}
com @code{declare}.

@item dependencies
Todos os @'atomos que possuem depend@^encias funcionais, criadas atrav@'es das
fun@value{cedilha}@~oes @code{depends} ou @code{gradef}.

@item gradefs
Todas as fun@value{cedilha}@~oes que possuem derivadas definidas pelo utilizador, cridas atrav@'es da
fun@value{cedilha}@~ao @code{gradef}.

@c UMM, WE REALLY NEED TO BE SPECIFIC -- WHAT DOES "ETC" CONTAIN HERE ??
@item props
Todos os @'atomos que possuem quaisquer propriedades outras que n@~ao essas mencionadas
acima, tais como propriedades estabelecidas por @code{atvalue} , @code{matchdeclare}, etc., tamb@'em propriedades
estabelecidas na fun@value{cedilha}@~ao @code{declare}.

@item let_rule_packages
Todos os pacote de r@'egras em uso definidos pelo utilizador
mais o pacote especial @code{default_let_rule_package}.
(@code{default_let_rule_package} @'e o nome do pacote de r@'egras usado quando
um n@~ao est@'a explicitamente escolhido pelo utilizador.)

@end table

@end defvr

@deffn {Fun@value{cedilha}@~ao} integerp (@var{expr})
Retorna @code{true} se @var{expr} @'e um inteiro num@'erico literal, de outra forma retorna @code{false}.

@code{integerp} retorna falso se seu argumento for um s@'{@dotless{i}}mbolo,
mesmo se o argumento for declarado inteiro.

Exemplos:

@example
(%i1) integerp (0);
(%o1)                         true
(%i2) integerp (1);
(%o2)                         true
(%i3) integerp (-17);
(%o3)                         true
(%i4) integerp (0.0);
(%o4)                         false
(%i5) integerp (1.0);
(%o5)                         false
(%i6) integerp (%pi);
(%o6)                         false
(%i7) integerp (n);
(%o7)                         false
(%i8) declare (n, integer);
(%o8)                         done
(%i9) integerp (n);
(%o9)                         false
@end example

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} m1pbranch
Valor por omiss@~ao: @code{false}

@code{m1pbranch} @'e principal descendente de @code{-1} a um expoente.
Quantidades tais como @code{(-1)^(1/3)} (isto @'e, um expoente racional "@'{@dotless{i}}mpar") e 
@code{(-1)^(1/4)} (isto @'e, um expoente racional "par") s@~ao manuseados como segue:

@c REDRAW THIS AS A TABLE
@example
              domain:real
                            
(-1)^(1/3):      -1         
(-1)^(1/4):   (-1)^(1/4)   

             domain:complex              
m1pbranch:false          m1pbranch:true
(-1)^(1/3)               1/2+%i*sqrt(3)/2
(-1)^(1/4)              sqrt(2)/2+%i*sqrt(2)/2
@end example

@end defvr

@deffn {Fun@value{cedilha}@~ao} numberp (@var{expr})
Retorna @code{true} se @var{expr} for um inteiro literal, n@'umero racional, 
n@'umero em ponto flutuante, ou um grande n@'umero em ponto flutuante, de outra forma retorna @code{false}.

@code{numberp} retorna falso se seu argumento for um s@'{@dotless{i}}mbolo,
mesmo se o argumento for um n@'umero simb@'olico tal como @code{%pi} ou @code{%i},
ou declarado ser 
par, @'{@dotless{i}}mpar, inteiro, racional, irracional, real, imagin@'ario, ou complexo.

Exemplos:

@example
(%i1) numberp (42);
(%o1)                         true
(%i2) numberp (-13/19);
(%o2)                         true
(%i3) numberp (3.14159);
(%o3)                         true
(%i4) numberp (-1729b-4);
(%o4)                         true
(%i5) map (numberp, [%e, %pi, %i, %phi, inf, minf]);
(%o5)      [false, false, false, false, false, false]
(%i6) declare (a, even, b, odd, c, integer, d, rational,
     e, irrational, f, real, g, imaginary, h, complex);
(%o6)                         done
(%i7) map (numberp, [a, b, c, d, e, f, g, h]);
(%o7) [false, false, false, false, false, false, false, false]
@end example

@end deffn

@c CROSS REF TO WHICH FUNCTION OR FUNCTIONS ESTABLISH PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} properties (@var{a})
Retorna uma lista de nomes de todas as
propriedades associadas com o @'atomo @var{a}.

@end deffn

@c CROSS REF TO WHICH FUNCTION OR FUNCTIONS ESTABLISH PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c WHAT IS HIDDEN IN THE "etc" HERE ??
@defvr {S@'{@dotless{i}}mbolo especial} props
@code{props} s@~ao @'atomos que possuem qualquer propriedade outra como essas explicitamente
mencionadas em @code{infolists}, tais como atvalues, matchdeclares, etc., tamb@'em
propriedades especificadas na fun@value{cedilha}@~ao  @code{declare}.

@end defvr

@c CROSS REF TO WHICH FUNCTION OR FUNCTIONS ESTABLISH PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} propvars (@var{prop})
Retorna uma lista desses @'atomos sobre a lista @code{props} que
possui a propriedade indicada atrav@'es de @var{prop}.  Dessa forma @code{propvars (atvalue)}
retorna uma lista de @'atomos que possuem atvalues.

@end deffn

@c CROSS REF TO OTHER FUNCTIONS WHICH PUT/GET PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c ARE PROPERTIES ESTABLISHED BY put THE SAME AS PROPERTIES ESTABLISHED BY declare OR OTHER FUNCTIONS ??
@c IS put (foo, true, integer) EQUIVALENT TO declare (foo, integer) FOR EXAMPLE ??
@deffn {Fun@value{cedilha}@~ao} put (@var{@'atomo}, @var{valor}, @var{indicador})
Atribui @var{valor} para a propriedade (especificada atrav@'es de @var{indicador}) do @var{@'atomo}.
@var{indicador} pode ser o nome de qualquer propriedade, n@~ao apenas uma propriedade definida pelo sistema.

@code{put} avalia seus argumentos. 
@code{put} retorna @var{valor}.

Exemplos:

@example
(%i1) put (foo, (a+b)^5, expr);
                                   5
(%o1)                       (b + a)
(%i2) put (foo, "Hello", str);
(%o2)                         Hello
(%i3) properties (foo);
(%o3)            [[user properties, str, expr]]
(%i4) get (foo, expr);
                                   5
(%o4)                       (b + a)
(%i5) get (foo, str);
(%o5)                         Hello
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} qput (@var{@'atomo}, @var{valor}, @var{indicador})
Atribui @var{valor} para a propriedade (especificada atrav@'es de @var{indicador}) do @var{@'atomo}.
Isso @'e o mesmo que @code{put},
excepto que os argumentos n@~a s@~ao avaliados.

Exemplo:

@example
(%i1) foo: aa$ 
(%i2) bar: bb$
(%i3) baz: cc$
(%i4) put (foo, bar, baz);
(%o4)                          bb
(%i5) properties (aa);
(%o5)                [[user properties, cc]]
(%i6) get (aa, cc);
(%o6)                          bb
(%i7) qput (foo, bar, baz);
(%o7)                          bar
(%i8) properties (foo);
(%o8)            [value, [user properties, baz]]
(%i9) get ('foo, 'baz);
(%o9)                          bar
@end example

@end deffn

@c CROSS REF TO OTHER FUNCTIONS WHICH PUT/GET PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c HOW DOES THIS INTERACT WITH declare OR OTHER PROPERTY-ESTABLISHING FUNCTIONS ??
@c HOW IS THIS DIFFERENT FROM remove ??
@deffn {Fun@value{cedilha}@~ao} rem (@var{@'atomo}, @var{indicador})
Remove a propriedade indicada atrav@'es de @var{indicador} do @var{@'atomo}.

@end deffn

@c CROSS REF TO OTHER FUNCTIONS WHICH PUT/GET PROPERTIES !! (VERY IMPORTANT)
@c NEEDS EXPANSION, CLARIFICATION, AND EXAMPLES
@c HOW DOES THIS INTERACT WITH declare OR OTHER PROPERTY-ESTABLISHING FUNCTIONS ??
@c HOW IS THIS DIFFERENT FROM rem ??
@deffn {Fun@value{cedilha}@~ao} remove (@var{a_1}, @var{p_1}, ..., @var{a_n}, @var{p_n})
@deffnx {Fun@value{cedilha}@~ao} remove ([@var{a_1}, ..., @var{a_m}], [@var{p_1}, ..., @var{p_n}], ...)
@deffnx {Fun@value{cedilha}@~ao} remove ("@var{a}", operator)
@deffnx {Fun@value{cedilha}@~ao} remove (@var{a}, transfun)
@deffnx {Fun@value{cedilha}@~ao} remove (all, @var{p})
Remove propriedades associadas a @'atomos.

@code{remove (@var{a_1}, @var{p_1}, ..., @var{a_n}, @var{p_n})}
remove a propriedade @code{p_k} do @'atomo @code{a_k}.

@code{remove ([@var{a_1}, ..., @var{a_m}], [@var{p_1}, ..., @var{p_n}], ...)}
remove as propriedades @code{@var{p_1}, ..., @var{p_n}}
dos @'atomos @var{a_1}, ..., @var{a_m}.
Pode existir mais que um par de listas.

@c VERIFY THAT THIS WORKS AS ADVERTISED
@code{remove (all, @var{p})} remove a propriedade @var{p} de todos os @'atomos que a possuem.

@c SHOULD REFER TO A LIST OF ALL SYSTEM-DEFINED PROPERTIES HERE.
A propriedade removida pode ser definida pelo sistema tal como
@code{function}, @code{macro} ou @code{mode_declare}, ou propriedades definidas pelo utilizador.

@c VERIFY THAT THIS WORKS AS ADVERTISED
@c IS transfun PECULIAR TO remove ?? IF SO, SHOW SPECIAL CASE AS @defunx
uma propriedade pode ser @code{transfun} para remover
a vers@~ao traduzida Lisp de uma fun@value{cedilha}@~ao.
Ap@'os executar isso, a vers@~ao Maxima da fun@value{cedilha}@~ao @'e executada
em lugar da vers@~ao traduzida.

@code{remove ("@var{a}", operator)} ou, equivalentemente, @code{remove ("@var{a}", op)}
remove de @var{a} as propriedades @code{operator} declaradas atrav@'es de
@code{prefix}, @code{infix}, @code{nary}, @code{postfix}, @code{matchfix}, ou @code{nofix}.
Note que o nome do operador deve ser escrito como uma sequ@^encia de caracteres com ap@'ostofo.

@code{remove} sempre retorna @code{done} se um @'atomo possui ou n@~ao uma propriedade especificada.
Esse comportamento @'e diferente das fun@value{cedilha}@~oes remove mais espec@'{@dotless{i}}ficas
@code{remvalue}, @code{remarray}, @code{remfunction}, e @code{remrule}.

@c IN SERIOUS NEED OF EXAMPLES HERE
@end deffn

@c NEEDS EXAMPLES
@deffn {Fun@value{cedilha}@~ao} remvalue (@var{nome_1}, ..., @var{nome_n})
@deffnx {Fun@value{cedilha}@~ao} remvalue (all)
Remove os valores de Vari@'aveis de utilizador @var{nome_1}, ..., @var{nome_n}
(que podem ser subscritas) do sistema.

@code{remvalue (all)} remove os valores de todas as vari@'aveis em @code{values},
a lista de todas as vari@'aveis nomeadas atrav@'es do utilizador
(em oposi@value{cedilha}@~ao a essas que s@~ao automaticamente atribu@'{@dotless{i}}das atrav@'es do Maxima).

Veja tamb@'em @code{values}.

@end deffn

@c NEEDS EXAMPLES
@deffn {Fun@value{cedilha}@~ao} rncombine (@var{expr})
Transforma @var{expr} combinando todos os termos de @var{expr} que possuem
denominadores id@^enticos ou denominadores que diferem de cada um dos outros apenas por
factores num@'ericos somente.  Isso @'e ligeiramente diferente do comportamento de
de @code{combine}, que colecta termos que possuem denominadores id@^enticos.

Escolhendo @code{pfeformat: true} e usando @code{combine} retorna resultados similares
a esses que podem ser obtidos com @code{rncombine}, mas @code{rncombine} pega o
passo adicional de multiplicar cruzado factores num@'erios do denominador.
Esses resultados em forma ideal, e a possibilidade de reconhecer alguns
cancelamentos.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(rncomb)}.
@end deffn

@c NEEDS CLARIFICATION AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} scalarp (@var{expr})
Retorna @code{true} se @var{expr} for um n@'umero, constante, ou vari@'avel
declarada @code{scalar} com @code{declare}, ou composta inteiramente de n@'umeros, constantes, e tais
Vari@'aveis, bmas n@~ao contendo matrizes ou listas.

@end deffn

@deffn {Fun@value{cedilha}@~ao} setup_autoload (@var{nomeficheiro}, @var{fun@value{cedilha}@~ao_1}, ..., @var{fun@value{cedilha}@~ao_n})
Especifica que
se qualquer entre @var{fun@value{cedilha}@~ao_1}, ..., @var{fun@value{cedilha}@~ao_n} for referenciado e n@~ao ainda definido,
@var{nomedeqrquivo} @'e chamado via @code{load}.
@var{nomeficheiro} usualmente cont@'em defini@value{cedilha}@~oes para as fun@value{cedilha}@~oes especificadas,
embora isso n@~ao seja obrigat@'orio.

@code{setup_autoload} n@~ao trabalha para fun@value{cedilha}@~oes array.

@code{setup_autoload} n@~ao avalia seus argumentos.

Exemplo:

@c EXAMPLE GENERATED FROM FOLLOWING INPUT
@c legendre_p (1, %pi);
@c setup_autoload ("specfun.mac", legendre_p, ultraspherical);
@c ultraspherical (2, 1/2, %pi);
@c legendre_p (1, %pi);
@c legendre_q (1, %pi);
@example
(%i1) legendre_p (1, %pi);
(%o1)                  legendre_p(1, %pi)
(%i2) setup_autoload ("specfun.mac", legendre_p, ultraspherical);
(%o2)                         done
(%i3) ultraspherical (2, 1/2, %pi);
Warning - you are redefining the Macsyma fun@value{cedilha}@~ao ultraspherical
Warning - you are redefining the Macsyma fun@value{cedilha}@~ao legendre_p
                            2
                 3 (%pi - 1)
(%o3)            ------------ + 3 (%pi - 1) + 1
                      2
(%i4) legendre_p (1, %pi);
(%o4)                          %pi
(%i5) legendre_q (1, %pi);
                              %pi + 1
                      %pi log(-------)
                              1 - %pi
(%o5)                 ---------------- - 1
                             2
@end example

@end deffn
