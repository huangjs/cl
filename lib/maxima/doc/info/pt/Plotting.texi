@c Language: Portuguese
@c source: Plotting.texi (en) 1.36
@menu
* Defini@value{cedilha}@~oes para Cria@value{cedilha}@~ao de Gr@'aficos::    
@end menu

@node Defini@value{cedilha}@~oes para Cria@value{cedilha}@~ao de Gr@'aficos,  , Cria@value{cedilha}@~ao de Gr@'aficos, Cria@value{cedilha}@~ao de Gr@'aficos
@section Defini@value{cedilha}@~oes para Cria@value{cedilha}@~ao de Gr@'aficos

@c INSPECTING src/plot.lisp AND TRYING SOME EXAMPLES,
@c IT APPEARS THAT in_netmath HAS NO EFFECT ON plot2d
@c AND ONLY EFFECT ON plot3d IS TO CAUSE OPENMATH OUTPUT TO BE WRITTEN TO CONSOLE
@c WHEN [plot_format, openmath] IS SET.
@c NOT CONVINCED WE REALLY WANT TO DOCUMENT THIS VARIABLE
@defvr {Vari@'avel} in_netmath
Valor por omiss@~ao: @code{false}

Quando @code{in_netmath} @'e @code{true}, @code{plot3d} imprime uma
sa@'{@dotless{i}}da OpenMath para a consola se @code{plot_format} @'e
@code{openmath}; caso contr@'ario @code{in_netmath} (mesmo se for
@code{true}) n@~ao tem efeito. @code{in_netmath} n@~ao tem efeito
sobre @code{plot2d}.

@end defvr

@deffn {Fun@,{c}@~ao} plot2d (@var{expr}, @var{intervalo_x}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot2d ([@var{expr_1}, ..., @var{expr_n}], ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot2d ([@var{expr_1}, ..., @var{expr_n}], @var{intervalo_x},..., @var{op@,{c}@~oes}, ...)

Onde @var{expr}, @var{expr_1}, ..., @var{expr_n} podem ser
express@~oes, fun@,{c}@~oes ou operadores do Maxima ou do Lisp, ou ainda
uma lista da forma @code{[discrete, [@var{x1}, ..., @var{xn}],
[@var{y1}, ..., @var{yn}]]}, @code{[discrete, [[@var{x1}, @var{y1}],
..., [@var{xn}, ..., @var{yn}]]} ou @code{[parametric, @var{expr_x},
@var{expr_y}, @var{intervalo_t}]}.

Mostra o gr@'afico de uma ou mais express@~oes em fun@,{c}@~ao de uma
vari@'avel.

@code{plot2d} produz o gr@'afico de uma express@~ao @var{expr} ou de
v@'arias express@~oes @code{[@var{expr_1}, ..., @var{expr_n}]}. As
express@~oes que n@~ao forem do tipo param@'etrico ou discreto, dever@~ao
depender todas de uma @'unica vari@'avel @var{var} e ser@'a
obrigat@'orio usar @var{intervalo_x} para indicar o nome dessa
vari@'avel, e os seus valores m@'{@dotless{i}}nimo e m@'aximo, usando a
sintaxe: @code{[@var{var}, @var{min}, @var{max}]}. O gr@'afico
mostrar@'a o eixo horizontal delimitado pelos valores @var{min} e
@var{max}.

Uma express@~ao a ser representada no gr@'afico pode ser dada tamb@'em
na forma discreta, ou param@'etrica. Nomeadamente, por meio de uma lista
a come@,{c}ar pela palavra ``discrete'' ou ``parametric''. A palavra
chave @var{discrete} dever@'a ir seguida por duas listas, ambas do mesmo
comprimento, que ser@~ao as coordenadas horizontais e verticais de um
conjunto de pontos; em alternativa, as coordenadas de cada ponto podem
ser colocadas numa lista de dois valores, e todas essas coordenadas
dever@~ao estar dentro de outra lista. A palavra chave @var{parametric}
dever@'a ir seguida por duas express@~oes @var{expr_x} e @var{expr_y}, e
um intervalo @var{intervalo_t} da forma @code{[@var{param}, @var{min},
@var{max}]}. As duas express@~oes dever@~ao depender unicamente no
par@^ametro @var{param}, e o gr@'afico mostrar@'a o percurso seguido
pelo ponto com coordenadas (@var{expr_x}, @var{expr_y}) @`a medida que
@var{param} aumenta desde @var{min} at@'e @var{max}.

O intervalo de valores no eixo vertical n@~ao @'e obrigat@'orio. @'E
mais uma das op@,{c}@~oes do comando, com a sintaxe: @code{[y,
@var{min}, @var{max}]}. Se essa op@,{c}@~ao for usada, o gr@'afico
apresentar@'a esse intervalo completo, inclusivamente quando as
express@~oes n@~ao cheguem a atingir esses valores. De outra forma, se
n@~ao for indicado um intervalo no eixo vertical por meio de
@code{set_plot_option}, as fronteiras do eixo vertical ser@~ao
seleccionadas automaticamente.

Todas as outras op@,{c}@~oes dever@~ao ser listas, a come@,{c}ar pelo
nome da op@,{c}@~ao. A op@,{c}@~ao @var{xlabel} pode ser usada para dar
um texto que identificar@'a o eixo horizontal; se essa op@,{c}@~ao n@~ao for
usada, o eixo ser@'a identificado com o nome da vari@'avel indicada em
@var{intervalo_x}, ou com a express@~ao @var{expr_x}, se houver
unicamente uma express@~ao param@'etrica, ou caso contr@'ario ficar@'a
em branco.

O texto para identificar o eixo vertical pode ser indicado com a
op@,{c}@~ao @var{ylabel}. Se s@'o houver uma @'unica express@~ao a ser
representada, e a op@,{c}@~ao @var{ylabel} n@~ao tiver sido usada, o
eixo vertical ser@'a identificado com essa express@~ao, a menos que for
muito comprido, ou com a express@~ao @var{expr_y}, se a express@~ao for
param@'etrica, ou com o texto ``discrete data'' se a express@~ao for
discreta.

As op@,{c}@~oes @var{logx} e @var{logy} n@~ao precisam de quaisquer
para@^ametros. Fazem com que os eixos horizontal e vertical sejam
apresentados em forma logar@'{@dotless{i}}tmica.

Se houver v@'a rias express@~oes a serem representadas, ser@'a escrita
uma legenda para identificar cada uma dessas express@~oes. O texto que
dever@'a ser usado nessa legenda pode ser indicado por meio da
op@,{c}@~ao @var{legend}. Se essa op@,{c}@~ao n@~ao for usada, Maxima
criar@'a textos para identificar cada express@~ao.

Por omiss@~ao, as express@~oes dadas ser@~ao representadas por pequenos
segmentos de recta a ligarem pontos adjacentes num conjunto de pontos
que, ou @'e dado usando a forma @var{discrete}, ou @'e calculado
automaticamente a partir das express@~oes dadas, por meio de um
algoritmo com ajuste autom@'atico dos intervalos entre pontos, usando
como estimativa inicial do n@'umero de pontos o valor indicado pela
op@,{c}@~ao @var{nticks}. A op@,{c}@~ao @var{style} serve para fazer com
que alguma das express@~oes seja representada por pontos isolados ou por
pontos mais segmentos de recta.
 
Existem v@'arias op@,{c}@~oes globais, armazenadas na lista
@var{plot_options}, quu podem ser modificadas usando a fun@,{c}@~ao
@code{set_plot_option}; qualquer uma dessad op@,{c}@~oes pode ser
contrariada pelos valores locais dados no comando @var{plot2d}.

Uma fun@,{c}@~ao a ser representada poder@'a ser identificada pelo nome
de uma fun@,{c}@~ao ou operador do Maxima ou do Lisp, por meio duma
express@~ao lambda do Maxima, ou como uma express@~ao geral do Maxima.
Se for especificada como um nome ou como express@~ao lambda, a
respectiva fun@,{c}@~ao dever@'a depender dum @'unico argumento.

@c PUT EXAMPLES FOR PRECEDING SIMPLE FORMS OF plot2d HERE
@b{Exemplos:}

Gr@'aficos de fun@,{c}@~oes ordin@'arias.

@c ===beg===
@c plot2d (sin(x), [x, -5, 5])$
@c plot2d (sec(x), [x, -2, 2], [y, -20, 20], [nticks, 200])$
@c ===end===
@example
(%i1) plot2d (sin(x), [x, -5, 5])$

(%i2) plot2d (sec(x), [x, -2, 2], [y, -20, 20], [nticks, 200])$
@end example

@ifnotinfo
@image{../figures/plotting2,8cm}
@image{../figures/plotting3,8cm}
@end ifnotinfo

Gr@'afico de fun@,{c}@~oes identificadas pelo seu nome.

@c ===beg===
@c F(x) := x^2 $
@c :lisp (defun |$g| (x) (m* x x x))
@c H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $
@c plot2d (F, [u, -1, 1])$
@c plot2d ([F, G, H], [u, -1, 1], [y, -1.5, 1.5])$
@c ===end===
@example
(%i3) F(x) := x^2 $

(%i4) :lisp (defun |$g| (x) (m* x x x))

$g
(%i5) H(x) := if x < 0 then x^4 - 1 else 1 - x^5 $

(%i6) plot2d (F, [u, -1, 1])$

(%i7) plot2d ([F, G, H], [u, -1, 1], [y, -1.5, 1.5])$
@end example

@ifnotinfo
@image{../figures/plotting4,8cm}
@image{../figures/plotting5,8cm}
@end ifnotinfo

Podemos representar um c@'{@dotless{i}}rculo por meio de um gr@'afico
param@'etrico com um par@^ametro @var{t}. No caso dos gr@'aficos
param@'etricos n@~ao @'e necess@'ario indicar o intervalo da vari@'avel
na horizontal, j@'a que o intervalo do par@^ametro @var{t} determina o
dom@'{@dotless{i}}nio. No entanto, como os gr@'aficos s@~ao
representados numa propor@,{c}@~ao de 4 para 3 entre os eixos horizontal
e vertical, usaremos a op@,{c}@~ao @var{xrange} para obter a mesma
escala nos dois eixos:

@c ===beg===
@c plot2d ([parametric, cos(t), sin(t), [t, -%pi, %pi], [nticks, 80]], [x, -4/3, 4/3])$
@c ===end===
@example
(%i8) plot2d ([parametric, cos(t), sin(t), [t,-%pi,%pi], [nticks,80]],
           [x, -4/3, 4/3])$
@end example

@ifnotinfo
@image{../figures/plotting6,8cm}
@end ifnotinfo

Se repetirmos esse gr@'afico com apenas 8 pontos e etndendo o intevalo
do par@^ametro para que fa@,{c}a duas voltas, obteremos um desenho de
uma estrela:

@c ===beg===
@c plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2], [nticks, 8]], [x, -2, 2], [y, -1.5, 1.5])$
@c ===end===
@example
(%i9) plot2d ([parametric, cos(t), sin(t), [t, -%pi*2, %pi*2],
        [nticks, 8]], [x, -2, 2], [y, -1.5, 1.5])$
@end example

@ifnotinfo
@image{../figures/plotting7,8cm}
@end ifnotinfo

Combina@,{c}@~ao dum gr@'afico ordin@'ario de um polin@'omio c@'ubico
com o gr@'afico param@'etrico de um c@'{@dotless{i}}:

@c ===beg===
@c plot2d ([x^3+2, [parametric, cos(t), sin(t), [t, -5, 5], [nticks, 80]]], [x, -3, 3])$
@c ===end===
@example
(%i10) plot2d ([x^3+2, [parametric, cos(t), sin(t), [t, -5, 5],
        [nticks, 80]]], [x, -3, 3])$
@end example

@ifnotinfo
@image{../figures/plotting8,8cm}
@end ifnotinfo

Para mostrar alguns exemplos de gr@'aficos discretos, come@,{c}aremos
por introduzir as coordenadas de 5 pontos, usando os dois m@'etodos que
podem ser usados:

@c ===beg===
@c xx:[10, 20, 30, 40, 50]$
@c yy:[.6, .9, 1.1, 1.3, 1.4]$
@c xy:[[10,.6], [20,.9], [30,1.1], [40,1.3], [50,1.4]]$
@c ===end===
@example
(%i12) xx:[10, 20, 30, 40, 50]$
(%i13) yy:[.6, .9, 1.1, 1.3, 1.4]$
(%i14) xy:[[10,.6], [20,.9], [30,1.1], [40,1.3], [50,1.4]]$
@end example

Para apresentar esses pontos, ligados por segmentos de recta, usaremos:
@c ===beg===
@c plot2d([discrete,xx,yy])$
@c ===end===
@example
(%i15) plot2d([discrete,xx,yy])$
@end example

@ifnotinfo
@image{../figures/plotting10,8cm}
@end ifnotinfo

A seguir obteremos o gr@'afico mostrando @'unicamente os pontos, e
aproveitando para mostrar o uso do segundo m@'etodo para indicar as
coordenadas dos pontos:

@c ===beg===
@c plot2d([discrete, xy], [style, points])$
@c ===end===
@example
(%i16) plot2d([discrete, xy], [style, points])$
@end example

@ifnotinfo
@image{../figures/plotting11,8cm}
@end ifnotinfo

O gr@'afico dos pontos dos dados pode ser apresentado junto com o
gr@'afico de uma fun@,{c}@~ao te@'orica que explica esses resultados:

@c ===beg===
@c plot2d([[discrete,xy], 2*%pi*sqrt(l/980)], [l,0,50], [style, [points,3,5], [lines,1,3]], [legend,"experiment","theory"], [xlabel,"pendulum's length (cm)"], [ylabel,"period (s)"])$
@c ===end===
@example
(%i17) plot2d([[discrete,xy], 2*%pi*sqrt(l/980)], [l,0,50],
        [style, [points,3,5], [lines,1,3]], [legend,"experiment","theory"],
        [xlabel,"pendulum's length (cm)"], [ylabel,"period (s)"])$
@end example

@ifnotinfo
@image{../figures/plotting12,8cm}
@end ifnotinfo

Veja tamb@'em @code{plot_options}, que descreve as op@,{c}@~oes das
fun@,{c}@~oes gr@'aficas e mostra mais exemplos.

@end deffn

@deffn {Fun@,{c}@~ao}  xgraph_curves (@var{lista})
Desenha o gr@'afico da lista de `grupos de pontos' dados em lista,
usando xgraph. Se o programa externo xgraph n@~ao estiver instalado, o
comando falha.

Uma lista de grupos de pontos pode ser da forma

@example
[x0, y0, x1, y1, x2, y2, ...]
@end example
ou
@example
[[x0, y0], [x1, y1], ...]
@end example
Um grupo de pontos pode tamb@'em conter s@'{@dotless{i}}mbolos que
fornecem r@'otulos ou outra informa@,{c}@~ao.

@example
xgraph_curves ([pontos1, pontos2, pontos3]);
@end example

desenha o gr@'afico das tr@^es curvas que passam pelos tr@^es grupos
de pontos.

@example
pt_set: append (["NoLines: True", "LargePixels: true"],
                          [x0, y0, x1, y1, ...]);
@end example

@noindent
faz com que o grupo de pontos (e os grupos de pontos que virem a
seguir) sejam desenhados sem linhas a ligar os pontos, e que sejam
usados pixels grandes.  Consulte outras op@,{c}@~oes que podem ser
usadas, na p@'agina de manual do programa xgraph.

@example
pt_set: append ([concat ("\"", "x^2+y")], [x0, y0, x1, y1, ...]);
@end example

@noindent
faz com que esse grupo de pontos em particular seja identificado com a
legenda "x^2+y". As aspas, @code{"}, no in@'{@dotless{i}}cio
indicam ao programa xgraph que se trata de uma legenda.

@example
pt_set: append ([concat ("TitleText: Dados da Amostra")], [x0, ...])$
@end example

@noindent
faz com que o t@'{@dotless{i}}tulo do gr@'afico seja "Dados da
Amostra" e n@~ao o habitual "Maxima Plot".

        Para fazer um gr@'afico de barras, com largura de 0.2 unidades,
mostrando duas possibilidades diferentes dessas barras:
@example
(%i1) xgraph_curves ([append (["BarGraph: true", "NoLines: true",
      "BarWidth: .2"], create_list ([i - .2, i^2], i, 1, 3)),
      append (["BarGraph: true", "NoLines: true", "BarWidth: .2"],
      create_list ([i + .2, .7*i^2], i, 1, 3))]);
@end example

@ifnotinfo
@image{../figures/plotting13,8cm}
@end ifnotinfo

@noindent

Esta fun@,{c}@~ao usa um ficheiro tempor@'ario @file{xgraph-out}.

@end deffn

@defvr {Vari@'avel de sistema} plot_options
Os elementos desta lista estabelecem os valores por omissa@~ao para as
op@,{c}@~oes usadas na elabora@,{c}@~ao de gr@'aficos. Se uma
op@,{c}@~ao estiver presente numa chamada a @code{plot2d} ou
@code{plot3d}, esse valor ter@'a preced@^encia sobre o valor por
omiss@,{c}@~ao. De outra forma, ser@'a usado o valor em
@code{plot_options}. Os valores por omiss@,{c}@~ao das op@,{c}@~oes
podem ser modificados usando @code{set_plot_option}.

Cada elemento de @code{plot_options} @'e uma lista de dois ou mais
@'{@dotless{i}}tens.  O primeiro item @'e o nome de uma op@,{c}@~ao, e
os restantes compreendem o valor ou valores atribu@'{@dotless{i}}dos
@`a op@,{c}@~ao.  Em alguns casos, o valor atribu@'{@dotless{i}}do @'e
uma lista, que pode compreender muitos itens.

As op@,{c}@~oes globais que s@~ao reconhecidas por @code{plot2d} e
@code{plot3d} s@~ao as seguintes:

@itemize @bullet
@item
Op@,{c}@~ao: @code{plot_format}

Determina a interface gr@'afica que ser@'a usada por @code{plot2d} e
@code{plot3d}.

@itemize @bullet
@item
Valor por omiss@~ao: @code{gnuplot}

Gnuplot @'e o pcote gr@'afico mais avan@,{c}ado entre os
dispon@'{@dotless{i}}veis no Maxima. Ser@'a preciso que o pacote externo
gnuplot esteja instalado.
@item
Valor: @code{mgnuplot}

Mgnuplot @'e uma interface Tk para o gnuplot. Vem inclu@'{@dotless{i}}da
na distribu@'{@dotless{i}}@,{c}@~ao do Maxima. Mgnuplot oferece uma GUI
rudimentar para o gnuplot, mas tem menos recursos em geral que a
interface padr@~ao do gnuplot.  Mgnuplot precisa que os pacotes externos
gnuplot e Tcl/Tk estejam instalados.
@item
Valor: @code{openmath}

Openmath @'e um programa gr@'afico escrito em Tcl/Tk. Este formato @'e
fornecido pelo pacote Xmaxima, que @'e distribuido com Maxima. Se quiser
usar este formato instalar o pacote Xmaxima, que funcionar@'a n@~ao s@'o
a partir do pr@'oprio Xmaxima mas tamb@'em a partir da linha de comandos
de outras GUI para o Maxima.

@end itemize

@item
Op@,{c}@~ao: @code{run_viewer}

Controla se ser@'a executado ou n@~ao o visualizador apropriado para o
formato do gr@'afico.

@itemize @bullet
@item
@c DOES FALSE IMPLY THE OUTPUT FILE IS GENERATED AND NOT SHOWN ?? OR IS NOTHING GENERATED ??
Valor por omiss@~ao: @code{true}

Executa-se o programa visualizador.
@item
Valor: @code{false}

N@~ao se executa o programa visualizador.
@end itemize

@item
Op@,{c}@~ao: @code{y}

O intervalo vertical do gr@'afico.

Exemplo:
@example
[y, - 3, 3]
@end example
Faz com que o intervalo vertical seja [-3, 3].

@item
Op@,{c}@~ao: @code{plot_realpart}

Quando @code{plot_realpart} for @code{true}, nos pontos onde o valor a
ser representado no eixo vertical for complexo, ser@'a apresentada a
sua parte real @var{x}; isso @'e equivalente a mostrar
@code{realpart(@var{x})} em lugar de @var{x}. De outra forma, somente
valores com a parte imagin@'aria igual a 0 s@~ao mostrados no
gr@'afico, e os valores complexos ser@~ao ignorados.

Exemplo:
@example
plot2d (log(x), [x, -5, 5], [plot_realpart, false]);
plot2d (log(x), [x, -5, 5], [plot_realpart, true]);
@end example
O valor por omiss@~ao @'e @code{false}.

@item
Op@,{c}@~ao: @code{nticks}

No plot2d, @'e o n@'umero de pontos usados, inicialmente, pela rotina
gr@'afica adaptativa. @'E tamb@'em o n@'umero de pontos que ser@~ao
apresentados num gr@'afico param@'etrico.

Exemplo:
@example
[nticks, 20]
@end example
O valor por omiss@~ao para @code{nticks} @'e 10.

@item
Op@,{c}@~ao: @code{adapt_depth}

O n@'umero maximo de subdivis@~oes usadas pela rotina gr@'afica adaptativa.

Exemplo:
@example
[adapt_depth, 5]
@end example
O valor por omiss@~ao para @code{adapt_depth} @'e 10.

@item
Op@,{c}@~ao: @code{xlabel}

O texto que identifica o eixo horizontal num gr@'afico a 2d.

Exemplo:
@example
[xlabel, "Tempo em segundos"]
@end example

@item
Op@,{c}@~ao: @code{ylabel}

O texto que identifica o eixo vertical num gr@'afico a 2d.


Exemplo:
@example
[ylabel, "Temperatura"]
@end example

@item
Op@,{c}@~ao: @code{logx}

Faz com que o eixo horizontal num gr@'afico a 2d seja representado em
escala logar@'{@dotless{i}}tmica. N@~ao precisa de nenhum par@^ametro
adicional. 

@item
Op@,{c}@~ao: @code{logy}

Faz com que o eixo vertical num gr@'afico a 2d seja representado em
escala logar@'{@dotless{i}}tmica. N@~ao precisa de nenhum par@^ametro
adicional. 

@item
Op@,{c}@~ao: @code{legend}

Os textos para identificar as diversas express@~oes num gr@'afico a 2d
com muitas express@~oes. Se existirem mais express@~oes do que os textos
dados, ser@~ao repetidos. Por omiss@~ao, sera@~ao usados os nomes das
express@~oes ou das fun@,{c}@~oes, ou as palavras discrete1, discrete2,
..., no caso de conjuntos discretos de pontos.

Exemplo:
@example
[legend, "Grupo 1", "Grupo 2", "Grupo 3"]
@end example

@item
Op@,{c}@~ao: @code{style}

Os estilos que ser@~ao usados para as diversas fun@,{c}@~oes ou
conjuntos discretos de pontos, num gr@'afico a 2d. A palavra @var{style}
dever@'a ir seguida por um ou mais estilos. Se houver mais fun@,{c}@~oes
e conjuntos de dados do que os estilos definidos, ser@~ao repetidos
estilos. Cada estilo poder@'a ser @var{lines} para segmentos de recta,
@var{points} para pontos isolados, @var{linespoints} para segmentos e
pontos, ou @var{dots} para pequenos pontos isolados. O Gnuplot tamb@'em
aceita o estilo @var{impulses}.

Cada um dos estilos poder@'a ser incorporado numa lista, seguido de
alguns par@^ametros adicionais. @var{lines} admite um ou dois n@'umeros:
a largura da linha e um inteiro que identifica uma cor. @var{points}
admite um ou dois n@'umeros; o primeiro n@'umero @'e o raio dos pontos,
e o segundo n@'umero @'e um inteiro que no Gnuplot permite seleccionar
diferentes formas e cores para os pontos e no Openmath muda a cor dos
pontos usados. @var{linesdots} admite at@'e quatro n@'umeros; os dois
primeiros s@~ao os mesmos do que para @var{lines} e os dois @'ultimos
s@~ao os mesmos do que para @var{points}.

Exemplo:
@example
[style,[lines,2,3],[points,1,4]]
@end example

No Gnuplot, isso faz com que a primeira (e terceira, quinta, etc)
express@~ao seja apresentada com segmentos de recta azuis de largura 2,
e a segunda (quarta, sexta, etc) express@~ao com quadrados verdes de
tamanho 1. No Openmath, a primeira express@~ao ser@'a apresentada com
rectas magenta de largura 2, e a segunda com pontos laranja de raio 1;
repare que openmath_color(3) e openmath_color(4) produzem ``magenta'' e
``orange''.

O estilo por omiss@~ao @'e segmentos de recta, com largura 1, e com
diferentes cores.

@item
Op@,{c}@~ao: @code{grid}

Define o n@'umero de pontos nas dire@,{c}@~oes x e y, na grelha usada nos
gr@'aficos tridimensionais.

Exemplo:
@example
[grid, 50, 50]
@end example
Define uma grelha de 50 por 50 pontos. A grelha padr@~ao @'e 30 por 30.

@item
Op@,{c}@~ao: @code{transform_xy}

Permite a aplica@,{c}@~ao de transforma@,{c}@~oes nos gr@'aficos
tridimensionais.

Exemplo:
@example
[transform_xy, false]
@end example
O valor por omiss~ao de @code{transform_xy} @'e @code{false}. Se n@~ao for
@code{false}, dever@'a ser o resultado produzido por

@example
make_transform ([x, y, z], f1(x, y, z), f2(x, y, z), f3(x, y, z))$
@end example
A transforma@,{c}@~ao @code{polar_xy} est@'a previamente definida no
Maxima. @'E igual ao resultado da transforma@,{c}@~ao
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example
@end itemize

@b{Op@,{c}@~oes do Gnuplot:}

Existem muitas op@,{c}@~oes espec@'{@dotless{i}}ficas para o
Gnuplot. Muitas dessas op@,{c}@~oes s@~ao comandos pr@'oprios do
Gnuplot, especificados como sequ@^encias de caracteres. Consulte a
documenta@,{c}@~ao do gnuplot para mais pormenores.

@itemize @bullet
@item
@code{gnuplot_term}

Define o tipo terminal de sa@'{@dotless{i}}da para gnuplot.
@itemize @bullet
@item
Valor por omiss@~ao: @code{default}

A sa@'{@dotless{i}}da do Gnuplot @'e mostrada em uma janela gr@'afica
separada.

@item
Valor: @code{dumb}

A sa@'{@dotless{i}}da do Gnuplot @'e mostrada na consola do Maxima,
usando uma aproxima@,{c}@~ao "arte ASCII" para gr@'aficos.

@item
Valor: @code{ps}

Gnuplot gera comandos na linguagem PostScript de descri@,{c}@~ao de
p@'aginas.  Se @`a op@,{c}@~ao @code{gnuplot_out_file} tiver sido dada o
nome de um ficheiro, gnuplot escrever@'a os comandos PostScript nesse
ficheiro.  De outra forma, os comandos PostScript ser@~ao gravados no
ficheiro @code{maxplot.ps}.

@item
Valor: qualquer outro tipo de terminal aceite pelo gnuplot

Gnuplot pode produzir gr@'aficos em muitos outros formatos gr@'aficos
tais como png, jpeg, svg, etc. Para criar gr@'aficos em algum desses
dever@'a dar-se a @code{gnuplot_term} um (s@'{@dotless{i}}mbolo)
suportado pelo gnuplot ou uma especifica@,{c}@~ao completa de terminal
do gnuplot com op@,{c}@~oes v@'alidas (sequ@^encia de caracteres).  Por
exemplo @code{[gnuplot_term,png]} cria gr@'aficos no formato PNG
(Portable Network Graphics) enquanto @code{[gnuplot_term,"png size
1000,1000"]} cria gr@'aficos no formato PNG com tamanho de 1000x1000
pixels. Se @`a op@,{c}@~ao @code{gnuplot_out_file} for dado o nome de um
ficheiro, gnuplot gravar@'a o gra@'afico nesse ficheiro. De outra forma,
o gr@'afico @'e gravado no ficheiro @code{maxplot.@var{term}}, onde
@var{term} @'e o nome do terminal do gnuplot.

@end itemize

@item
Op@,{c}@~ao: @code{gnuplot_out_file}

Grava o gr@'afico criado por gnuplot para um ficheiro.

@itemize @bullet
@item
Valor por omiss@~ao: @code{false}

Nenhum ficheiro de sa@'{@dotless{i}}da especificado.
@item
Valor: @var{filename}

Exemplo: @code{[gnuplot_out_file, "myplot.ps"]}
Quando usada em conjunto com o terminal PostScript do gnuplot, neste
exemplo o gr@'afico ser@'a gravado em formato PostScript no ficheiro
@code{myplot.ps}, .
@c DOES OUTPUT FILE != FALSE IMPLY DON'T RUN THE VIEWER ??
@c WHAT HAPPENS IF OUTPUT FILE IS SPEFICIED BUT TERMINAL IS NOT PS ??
@end itemize

@item
Op@,{c}@~ao: @code{gnuplot_pm3d}

Controla o uso do modo PM3D, que possui recursos avan@,{c}ados em 3D. O
modo PM3D est@'a somente dispon@'{@dotless{i}}vel nas vers@~oes de
gnuplot posteriores a 3.7. O valor padr@~ao para @code{gnuplot_pm3d} @'e
@code{false}.

Exemplo:
@example
[gnuplot_pm3d, true]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_preamble}

Insere comandos antes que o gr@'afico seja desenhado. Quaisquer comandos
v@'alidos para o gnuplot podem ser usados. Multiplos comandos podem ser
separados com um ponto e v@'{@dotless{i}}rgula. O exemplo mostrado
produz uma escala logar@'{@dotless{i}}tmica no gr@'afico. O valor
padr@~ao para @code{gnuplot_preamble} @'e uma sequ@^encia de caracteres
vazia @code{""}.

Exemplo:
@example
[gnuplot_preamble, "set log y"]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_curve_titles}

Controla os t@'{@dotless{i}}tulos dados na legenda do gr@'afico. O valor
padr@~ao @'e @code{[default]}, que escolhe automaticamente um
t@'{@dotless{i}}tulo para fun@,{c}@~ao cujo gr@'afico est@'a a ser
desenhado. Se n@~ao for igual a @code{[default]},
@code{gnuplot_curve_titles} poder@'a conter uma lista de sequ@^encias de
caracteres, cada uma das quais @'e @code{"title '@var{nome}'"}.  (Para
desabilitar a legenda do gr@'afico, adicione @code{"set nokey"} a
@code{gnuplot_preamble}.)

Exemplo:
@example
[gnuplot_curve_titles,
["title 'Minha primeira fun@,{c}@~ao'", "title 'Minha segunda fun@,{c}@~ao'"]]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_curve_styles}

Uma lista de sequ@^encias de caracteres a ser enviada para o gnuplot
para controlar a apar@^encia das curvas, nomeadamente, cor, largura,
brilho, etc.  O valor padr@~ao @'e @code{["with lines 3", "with lines
1", "with lines 2", "with lines 5", "with lines 4", "with lines 6",
"with lines 7"]}, que circula atrav@'es de diferentes cores. Consulte a
documenta@,{c}@~ao de @code{plot} no manual do gnuplot para mais
informa@,{c}@~oes.

Exemplo:
@example
[gnuplot_curve_styles, ["with lines 7", "with lines 2"]]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_default_term_command}

O comando do Gnuplot para escolher o tipo de terminal gr@'afico. O valor
padr@~ao @'e a sequ@^encia de caracteres vazia @code{""}, nomeadamente,
usar-se-@'a o formato padr@~ao do gnuplot.

Exemplo:
@example
[gnuplot_default_term_command, "set term x11"]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_dumb_term_command}

O comando gnuplot para escolher o tipo de terminal n@~ao gr@'afico. O
valor padr@~ao @'e @code{"set term dumb 79 22"}, que produz
sa@'{@dotless{i}}da em texto com 79 por 22 caracteres.

Exemplo:
@example
[gnuplot_dumb_term_command, "set term dumb 132 50"]
@end example

@item
Op@,{c}@~ao: @code{gnuplot_ps_term_command}

O comando gnuplot para escolher o tipo de terminal para o terminal
PostScript. O valor padr@~ao @'e @code{"set size 1.5, 1.5;set term
postscript eps enhanced color solid 24"}, que escolhe o tamanho para 1.5
vezes o padr@~ao do gnuplot, e o tamanho da fonte para 24, al@'em de
outras coisas. Para mais informa@,{c}@~ao, consulte a documenta@,{c}@~ao
de @code{set term postscript} no manual do gnuplot.

Exemplo:

Toda as figuras nos exemplos para a fun@,{c}@~ao @var{plot2d} neste
manual forma obtidas a partir de ficheiros Postscript que foram
produzidos ap@'os ter mudado @code{gnuplot_ps_term_command} par:

@example
[gnuplot_ps_term_command,
"set size 1.3, 1.3; set term postscript eps color solid lw 2.5 30"]
@end example

@end itemize

@b{Exemplos:}

@itemize @bullet
@item
Grava um gr@'afico de @code{sin(x)} para o ficheiro @code{sin.eps}.
@end itemize
@example
(%i1) plot2d (sin(x), [x, 0, 2*%pi], [gnuplot_term, ps],
                        [gnuplot_out_file, "sin.eps"])$
@end example

@itemize @bullet
@item
Usa a op@,{c}@~ao y para eliminar singularidades e a op@,{c}@~ao
gnuplot_preamble para colocar a legenda na parte inferior do gr@'afico
em lugar de no topo.
@end itemize
@example
(%i2) plot2d ([gamma(x), 1/gamma(x)], [x, -4.5, 5], [y, -10, 10],
                     [gnuplot_preamble, "set key bottom"])$
@end example

@ifnotinfo
@image{../figures/plotting14,8cm}
@end ifnotinfo

@itemize @bullet
@item
Usa um @code{gnuplot_preamble} muito complicado para produzir
r@'otulos melhores para o eixo x.  (Repare que a sequ@^encia de
caracteres fornecida a @code{gnuplot_preamble} n@~ao pode ter qualquer
quebra de linha.)
@end itemize
@example
(%i3) my_preamble: "set xzeroaxis; set xtics ('-2pi' -6.283, \
'-3pi/2' -4.712, '-pi' -3.1415, '-pi/2' -1.5708, '0' 0, \
'pi/2' 1.5708, 'pi' 3.1415,'3pi/2' 4.712, '2pi' 6.283)"$

(%i4) plot2d([cos(x), sin(x), tan(x), cot(x)],
       [x, -2*%pi, 2.1*%pi], [y, -2, 2],
       [gnuplot_preamble, my_preamble]);
@end example

@ifnotinfo
@image{../figures/plotting15,8cm}
@end ifnotinfo

@itemize @bullet
@item
Usa um @code{gnuplot_preamble} muito complicado para produzir
r@'otulos melhores para o eixo x, e produzir sa@'{@dotless{i}}da
PostScript que utiliza o formato de texto avan@,{c}ado
dispon@'{@dotless{i}}vel no gnuplot. (Repare que a sequ@^encia de
caracteres fornecida a @code{gnuplot_preamble} n@~ao pode ter qualquer
quebra de linha.)
@end itemize
@example
(%i5) my_preamble: "set xzeroaxis; set xtics ('-2@{/Symbol p@}' \
-6.283, '-3@{/Symbol p@}/2' -4.712, '-@{/Symbol p@}' -3.1415, \
'-@{/Symbol p@}/2' -1.5708, '0' 0,'@{/Symbol p@}/2' 1.5708, \
'@{/Symbol p@}' 3.1415,'3@{/Symbol p@}/2' 4.712, '2@{/Symbol p@}' \
6.283)"$

(%i6) plot2d ([cos(x), sin(x), tan(x)], [x, -2*%pi, 2*%pi],
    [y, -2, 2], [gnuplot_preamble, my_preamble],
    [gnuplot_term, ps], [gnuplot_out_file, "trig.eps"]);
@end example

@itemize @bullet
@item
Um gr@'afico tridimensional usando o terminal pm3d do gnuplot.
@end itemize
@example
(%i7) plot3d (atan (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
        [grid, 50, 50], [gnuplot_pm3d, true])$
@end example

@ifnotinfo
@image{../figures/plotting16,8cm}
@end ifnotinfo

@itemize @bullet
@item
Um gr@'afico tridimensional sem a gralha e com contornos projetados no
plano inferior.
@end itemize
@example
(%i8) my_preamble: "set pm3d at s;unset surface;set contour;\
set cntrparam levels 20;unset key"$
(%i9) plot3d(atan(-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [grid, 50, 50], [gnuplot_pm3d, true],
    [gnuplot_preamble, my_preamble])$
@end example

@ifnotinfo
@image{../figures/plotting17,8cm}
@end ifnotinfo

@itemize @bullet
@item
Um gr@'afico onde o eixo z @'e representado apenas por cores.  (Note
que a sequ@^encia de caracteres fornecida a @code{gnuplot_preamble}
n@~ao pode ter qualquer quebra de linha.)
@end itemize
@example
(%i10) plot3d (cos (-x^2 + y^3/4), [x, -4, 4], [y, -4, 4],
    [gnuplot_preamble, "set view map; unset surface"],
    [gnuplot_pm3d, true], [grid, 150, 150])$
@end example

@ifnotinfo
@image{../figures/plotting18,8cm}
@end ifnotinfo

@end defvr

@deffn {Fun@,{c}@~ao} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot3d (@var{expr}, @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot3d (@var{name}, @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)
@deffnx {Fun@,{c}@~ao} plot3d ([@var{expr_1}, @var{expr_2}, @var{expr_3}], @var{x_rge}, @var{y_rge})
@deffnx {Fun@,{c}@~ao} plot3d ([@var{nome_1}, @var{nome_2}, @var{nome_3}], @var{x_range}, @var{y_range}, ..., @var{op@,{c}@~oes}, ...)

Mostra o gr@'afico de uma ou tr@^es express@~oes como fun@,{c}@~oes
de duas vari@'aveis.

@example
(%i1) plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -7, 7]);
@end example

@ifnotinfo
@image{../figures/plotting19,8cm}
@end ifnotinfo

desenha o gr@'afico de @code{z = 2^(-u^2+v^2)} com @code{u} e @code{v}
a variar nos intervalos fechados [-3,3] e [-2,2], respectivamente, e
com @var{u} sobre o eixo x, e @code{v} sobre o eixo y.

O mesmo gr@'afico pode ser visualizado usando openmath (se Xmaxima
estiver instalado):

@example
(%i2)  plot3d (2^(-u^2 + v^2), [u, -3, 3], [v, -2, 2],
               [plot_format, openmath]);
@end example

@ifnotinfo
@image{../figures/plotting25,8cm}
@end ifnotinfo

@noindent
neste caso o rato pode ser usado para rodar a
superf@'{@dotless{i}}cie, mostrando o seu aspecto desde diferentes
pontos de observa@,{c}@~ao.

Um exemplo do terceiro modelo de argumento @'e

@example
(%i3) plot3d ([cos(x)*(3 + y*cos(x/2)), sin(x)*(3 + y*cos(x/2)),
   y*sin(x/2)], [x, -%pi, %pi], [y, -1, 1], ['grid, 50, 15]);
@end example

@ifnotinfo
@image{../figures/plotting20,8cm}
@end ifnotinfo

que desenha o gr@'afico da fita de Moebius, parametrizada por tr@^es
express@~oes fornecidas como o primeiro argumento para @code{plot3d}.
Um argumento adicional e opcional @code{['grid, 50, 15]} define o
n@'umero de rect@^agulos da grelha nas dire@,{c}@~oes x e y.

A fun@,{c}@~ao a ser representada graficamente pode ser especificada
como o nome de uma fun@,{c}@~ao ou operador, do Maxima ou do Lisp,
como uma express@~ao lambda do Maxima, ou como uma express@~ao geral
do Maxima. Se especificada como um nome ou como express@~ao lambda, a
fun@,{c}@~ao deve ser uma fun@,{c}@~ao de um argumento.

O exemplo seguinte mostra o gr@'afico da parte real de @code{z^1/3}.

@example
(%i4) plot3d (r^.33*cos(th/3), [r, 0, 1], [th, 0, 6*%pi],
      ['grid, 12, 80], ['transform_xy, polar_to_xy]);
@end example

@ifnotinfo
@image{../figures/plotting21,8cm}
@end ifnotinfo

Outros exemplos s@~ao uma superf@'{@dotless{i}}cie de Klein:

@example
(%i5) expr_1: 5*cos(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y)
      + 3.0) - 10.0$
(%i6) expr_2: -5*sin(x)*(cos(x/2)*cos(y) + sin(x/2)*sin(2*y)
      + 3.0)$
(%i7) expr_3: 5*(-sin(x/2)*cos(y) + cos(x/2)*sin(2*y))$

(%i8) plot3d ([expr_1, expr_2, expr_3], [x, -%pi, %pi],
      [y, -%pi, %pi], ['grid, 40, 40]);
@end example

@ifnotinfo
@image{../figures/plotting22,8cm}
@end ifnotinfo

e um toro

@example
+(%i9) expr_1: cos(y)*(10.0+6*cos(x))$
+(%i10) expr_2: sin(y)*(10.0+6*cos(x))$
+(%i11) expr_3: -6*sin(x)$
+(%i12) plot3d ([expr_1, expr_2, expr_3], [x, 0, 2*%pi],       [y, 0, 2*%pi], ['grid, 40, 40]);
@end example

@ifnotinfo
@image{../figures/plotting23,8cm}
@end ifnotinfo

Algumas vezes ser@'a necess@'ario definir uma fun@,{c}@~ao para
desenhar o gr@'afico da express@~ao. Todos os argumentos para plot3d
s@~ao avaliados antes de serem passados para plot3d; assim, pode ser
dif@,{@dotless{i}}cil escrever uma express@~ao que faza apenas o que
for preciso; ser@'a mais f@'acil criar uma fun@,{c}@~ao.

@example
(%i13) M: matrix([1, 2, 3, 4], [1, 2, 3, 2], [1, 2, 3, 4],
       [1, 2, 3, 3])$
(%i14) f(x, y) := float (M [?round(x), ?round(y)])$
(%i15) plot3d (f, [x, 1, 4], [y, 1, 4], ['grid, 4, 4])$
@end example

@ifnotinfo
@image{../figures/plotting24,8cm}
@end ifnotinfo

Veja @code{plot_options} para mais exemplos.

@end deffn


@deffn {Fun@,{c}@~ao}  make_transform (@var{vars}, @var{fx}, @var{fy}, @var{fz})
Produz uma fun@,{c}@~ao adequada para a fun@,{c}@~ao
transforma@,{c}@~ao em plot3d. Usa-se conjuntamente com a op@,{c}@~ao
gr@'afica @code{transform_xy}.
@example
make_transform ([r, th, z], r*cos(th), r*sin(th), z)$
@end example
@'e uma transforma@value{cedilha}@~ao para coordenadas polares.
@end deffn

@deffn {Fun@,{c}@~ao}  set_plot_option (@var{op@,{c}@~ao})
Atribui valores @`as op@,{c}@~oes globais para impress@~ao.
@var{op@,{c}@~ao} @'e especificada como uma lista de dois ou mais
elementos, na qual o primeiro elemeto @'e uma das palavras chave
dentro da lista @code{plot_options}.

O argumento dado a @code{set_plot_option} @'e avaliado e
@code{set_plot_option} retorna a lista completa @code{plot_options} 
(ap@'os modificar um desses elementos).

Veja tamb@'em @code{plot_options}, @code{plot2d} e @code{plot3d}.

Exemplos:

Modifica a gralha (@code{grid}) e o intervalo de @code{x}.  Quando uma
palavra chave em @code{plot_options} tiver um valor
atribu@'{@dotless{i}}do, colocar um ap@'ostrofo evita que seja
avaliado.

@c ===beg===
@c set_plot_option ([grid, 30, 40]);
@c x: 42;
@c set_plot_option (['x, -100, 100]);
@c ===end===

@example
(%i1) set_plot_option ([grid, 30, 40]);
(%o1) [[x, - 1.755559702014E+305, 1.755559702014E+305], 
[y, - 1.755559702014E+305, 1.755559702014E+305], [t, - 3, 3], 
[grid, 30, 40], [transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
(%i2) x: 42;
(%o2)                          42
(%i3) set_plot_option (['x, -100, 100]);
(%o3) [[x, - 100.0, 100.0], [y, - 1.755559702014E+305, 
1.755559702014E+305], [t, - 3, 3], [grid, 30, 40], 
[transform_xy, false], [run_viewer, true], 
[plot_format, gnuplot], [gnuplot_term, default], 
[gnuplot_out_file, false], [nticks, 10], [adapt_depth, 10], 
[gnuplot_pm3d, false], [gnuplot_preamble, ], 
[gnuplot_curve_titles, [default]], 
[gnuplot_curve_styles, [with lines 3, with lines 1, 
with lines 2, with lines 5, with lines 4, with lines 6, 
with lines 7]], [gnuplot_default_term_command, ], 
[gnuplot_dumb_term_command, set term dumb 79 22], 
[gnuplot_ps_term_command, set size 1.5, 1.5;set term postscript #
eps enhanced color solid 24]]
@end example

@end deffn

