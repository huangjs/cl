@c /Simplification.texi/1.17/Tue Jan  9 09:30:23 2007/-ko/
@c end concepts Simplification
@iftex
@hyphenation{di-fe-ren-te-men-te}
@end iftex
@menu
* Defini@value{cedilha}@~oes para Simplifica@value{cedilha}@~ao::  
@end menu

@node Defini@value{cedilha}@~oes para Simplifica@value{cedilha}@~ao,  , Simplifica@value{cedilha}@~ao, Simplifica@value{cedilha}@~ao
@section Defini@value{cedilha}@~oes para Simplifica@value{cedilha}@~ao

@c After studying src/compar.lisp, it appears that askexp would
@c work as advertised, except that it doesn't appear to be possible
@c to open a break prompt with ^A or any other character.
@c What should we do about askexp ???
@defvr {Vari@'avel de sistema} askexp
Quando @code{asksign} @'e chamada, @code{askexp} @'e a express@~ao que
@code{asksign} est@'a a testar.

Antigamente, era poss@'{@dotless{i}}vel para um utilizador inspecionar
@code{askexp} parando o Maxima com control-A.
@end defvr

@c THERE IS PROBABLY MORE TO THE STORY THAN WHAT IS INDICATED HERE ...
@deffn {Fun@value{cedilha}@~ao} askinteger (@var{expr}, integer)
@deffnx {Fun@value{cedilha}@~ao} askinteger (@var{expr})
@deffnx {Fun@value{cedilha}@~ao} askinteger (@var{expr}, even)
@deffnx {Fun@value{cedilha}@~ao} askinteger (@var{expr}, odd)

@code{askinteger (@var{expr}, integer)} tenta determinar a partir da
base de dados do @code{assume} se @var{expr} @'e um inteiro. Se n@~ao conseguir,
@code{askinteger} perguntar@'a ao utilizador, na linha de comandos,
@c UMM, askinteger AND asksign DO NOT APPEAR TO HAVE ANY EFFECT ON THE assume DATABASE !!!
e inserir@'a essa informa@value{cedilha}@~ao na base de dados do
@code{assume}, se for poss@'{@dotless{i}}vel.  @code{askinteger
(@var{expr})} @'e equivalente a @code{askinteger (@var{expr}, integer)}.

Da mesma forma, @code{askinteger (@var{expr}, even)} e @code{askinteger
(@var{expr}, odd)} tentam determinar se @var{expr} @'e um inteiro par ou
inteiro @'{@dotless{i}}mpar, respectivamente.

@end deffn

@c THERE IS PROBABLY MORE TO THE STORY THAN WHAT IS INDICATED HERE ...
@deffn {Fun@value{cedilha}@~ao} asksign (@var{expr})
Primeiro tenta determinar se a express@~ao especificada @'e positiva,
negativa, ou zero. Se isso n@~ao for poss@'{@dotless{i}}vel,
@code{asksign} perguntar@'a ao utilizador as quest@~oes necess@'arias
para completar a sua dedu@value{cedilha}@~ao. As respostas do utilizador
ser@~ao guardadas na base de dados pelo tempo que durar a c@'alculo
actual. O valor de retorno de @code{asksign} ser@'a @code{pos},
@code{neg}, ou @code{zero}.

@end deffn

@c NEEDS CLARIFICATION, EXAMPLES
@deffn {Fun@value{cedilha}@~ao} demoivre (@var{expr})
@deffnx {Vari@'avel de op@value{cedilha}@~ao} demoivre

A fun@value{cedilha}@~ao @code{demoivre (expr)} transforma uma
express@~ao sem modificar a vari@'avel global @code{demoivre}.

Quando a vari@'avel @code{demoivre} for @code{true}, as exponenciais
complexas ser@~ao convertidas em express@~oes equivalentes em termos das
fun@value{cedilha}@~oes circulares: @code{exp (a + b*%i)} simplifica
para @code{%e^a * (cos(b) + %i*sin(b))} se @code{b} n@~ao incluir
@code{%i}.  @code{a} e @code{b} n@~ao ser@~ao expandidos.

O valor padr@~ao de @code{demoivre} @'e @code{false}.

@code{exponentialize} converte fun@value{cedilha}@~oes circulares e
hiperb@'olicas para a forma exponencial.  @code{demoivre} e
@code{exponentialize} n@~ao podem ambas serem @code{true} ao mesmo
tempo.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} domain
Valor por omiss@~ao: @code{real}

Quando a @code{domain} for dado o valor @code{complex}, @code{sqrt(x^2)}
permanecer@'a @code{sqrt (x^2)} em lugar de retornar @code{abs(x)}.

@c PRESERVE EDITORIAL COMMENT -- MAY HAVE SOME SIGNIFICANCE NOT YET UNDERSTOOD !!!
@c The notion of a "domain" of simplification is still in its infancy,
@c and controls little more than this at the moment.

@end defvr

@c NEEDS WORK
@deffn {Fun@value{cedilha}@~ao} expand (@var{expr})
@deffnx {Fun@value{cedilha}@~ao} expand (@var{expr}, @var{p}, @var{n})
Expande a express@~ao @var{expr}.  Nos rodutos de somas e exponenciais
de somas s@~ao expandidos os produtos, os numeradores de express@~oes
racionais que incluirem somas ser@~ao quebrados nas suas respectivas
parcelas, e os produtos (comutativos e n@~ao comutativos) s@~ao
distribu@'{@dotless{i}}dos sobre as somas em todos os
n@'{@dotless{i}}veis de @var{expr}.

Para polin@'omios se pode usar frequ@^entemente @code{ratexpand} que
possui um algoritmo mais eficiente.

@code{maxnegex} e @code{maxposex} controlam o m@'aximo expoente negativo
e o m@'aximo expoente positivo, respectivamente, que ir@~ao expandir.

@code{expand (@var{expr}, @var{p}, @var{n})} expande @var{expr}, usando
@var{p} para @code{maxposex} e @var{n} para @code{maxnegex}.  Isso @'e
@'util para expandir partes numa express@~ao mas n@~ao toda.

@code{expon} - o expoente da maior pot@^encia negativa que @'e
automaticamente expandida (independente de chamadas a @code{expand}).
Por Exemplo se @code{expon} for 4 ent@~ao @code{(x+1)^(-5)} n@~ao ser@'a
automaticamente expandido.

@code{expop} - o maior expoente positivo que @'e automaticamente
expandido.  Dessa forma @code{(x+1)^3}, quando digitado, ser@'a
automaticamente expandido somente se @code{expop} for maior que ou igual
a 3.  Se quiser que @code{(x+1)^n} seja expandido onde @code{n} for
maior que @code{expop}, ent@~ao @code{expand ((x+1)^n)} funcionar@'a
unicamente se @code{maxposex} n@~ao for menor que @code{n}.

O sinalizador @code{expand} usado com @code{ev} causa expans@~ao.

O ficheiro @file{simplification/facexp.mac}
@c I should really use a macro which expands to something like
@c @uref{file://...,,simplification/facexp.mac}.  But texi2html
@c currently supports @uref only with one argument.
@c Worse, the `file:' scheme is OS and browser dependent.
cont@'em muitas fun@value{cedilha}@~oes relacionadas (em particular
@code{facsum}, @code{factorfacsum} e @code{collectterms}, que s@~ao
carregadas automaticamente) e as vari@'aveis (@code{nextlayerfactor} e
@code{facsum_combine}) que fornecem ao utilizador a possibilidade de
estruturar express@~oes por expans@~ao controlada.
@c MERGE share/simplification/facexp.usg INTO THIS FILE OR CREATE NEW FILE facexp.texi
Uma descri@value{cedilha}@~ao breve das fun@value{cedilha}@~ao
encontra-se no ficheiro @file{simplification/facexp.usg}.  H@'a tamb@'em
uma demonstra@,{c}@~ao dispon@'{@dotless{i}}vel com o comando
@code{demo("facexp")}.

@end deffn

@c NEEDS EXAMPLES
@deffn {Fun@value{cedilha}@~ao} expandwrt (@var{expr}, @var{x_1}, ..., @var{x_n})
Expande a express@~ao @code{expr} com rela@value{cedilha}@~ao @`as
vari@'aveis @var{x_1}, ..., @var{x_n}.  Todos os produtos que encvolvam
as vari@'aveis aparecer@~ao explicitamente. O resultado estar@'a livre
de produtos de somas de express@~oes que n@~ao estejam livres das
vari@'aveis.  @var{x_1}, ..., @var{x_n} podem ser vari@'aveis,
operadores, ou express@~oes.

Por omiss@~ao, os denominadores n@~ao s@~ao expandidos, mas isso pode ser
controlado atrav@'es da vari@'avel @code{expandwrt_denom}.

Esta fun@value{cedilha}@~ao @'e carregada automaticamente a partir de
@file{simplification/stopex.mac}.

@end deffn


@defvr {Vari@'avel de op@value{cedilha}@~ao} expandwrt_denom
Valor por omiss@~ao: @code{false}

@code{expandwrt_denom} controla a simplifica@,{c}@~ao de express@~oes
racionais feita por @code{expandwrt}. Se tiver valor @code{true},
ent@~ao tanto o numerador como o denominador da express@~ao ser@~ao
expandidos conforme os argumentos de @code{expandwrt}, mas se
@code{expandwrt_denom} for @code{false}, ent@~ao somente o numerador
ser@'a expandido.

@end defvr

@c NEEDS A STAND-ALONE DESCRIPTION (NOT "IS SIMILAR TO")
@c NEEDS EXAMPLES
@deffn {Fun@value{cedilha}@~ao} expandwrt_factored (@var{expr}, @var{x_1}, ..., @var{x_n})
@'e similar a @code{expandwrt}, mas trata os produtos numa forma
diferente.  @code{expandwrt_factored} expande somente sobre esses
factores de @code{expr} que contiverem as vari@'aveis @var{x_1}, ...,
@var{x_n}.

@c NOT SURE WHY WE SHOULD MENTION THIS HERE
Esta fun@value{cedilha}@~ao @'e carregada automaticamente a partir de
@file{simplification/stopex.mac}.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} expon
Valor por omiss@~ao: 0

@code{expon} @'e o expoente da maior pot@^encia negativa que @'e
automaticamente expandido (independente de chamadas a @code{expand}).
Por exemplo, se @code{expon} for 4 ent@~ao @code{(x+1)^(-5)} n@~ao
ser@'a automaticamente expandido.

@end defvr

@deffn {Fun@value{cedilha}@~ao} exponentialize (@var{expr})
@deffnx {Vari@'avel de op@value{cedilha}@~ao} exponentialize

A fun@value{cedilha}@~ao @code{exponentialize (expr)} converte as
fun@value{cedilha}@~oes circulares e hiperb@'olicas em @var{expr} para
exponenciais, sem modificar a vari@'avel global @code{exponentialize}.

Quando a vari@'avel @code{exponentialize} for @code{true}, todas as
fun@value{cedilha}@~oes circulares e hiperb@'olicas s@~ao convertidas
para a forma exponencial. O valor por omiss@~ao @'e @code{false}.

@code{demoivre} converte exponenciais complexas em
fun@value{cedilha}@~oes circulares.  @code{exponentialize} e
@code{demoivre} n@~ao podem ambas serem @code{true} ao mesmo tempo.

@end deffn

@c NEEDS CLARIFICATION
@c NEEDS EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} expop
Valor por omiss@~ao: 0

@code{expop} - o maior expoente positivo que @'e automaticamente
expandido.  Dessa forma @code{(x+1)^3}, ser@'a automaticamente expandido
somente se @code{expop} for maior que ou igual a 3.  Se quiser que
@code{(x+1)^n} seja expandido onde @code{n} for maior que @code{expop},
ent@~ao @code{expand ((x+1)^n)} funcionar@'a somente se @code{maxposex}
n@~ao for menor que @code{n}.

@end defvr

@c NEEDS EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} factlim
Valor por omiss@~ao: -1

@code{factlim} especifica o maior factorial que @'e automaticamente
expandido. Se for -1 ent@~ao todos os inteiros s@~ao expandidos.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@deffn {Fun@value{cedilha}@~ao} intosum (@var{expr})
Move factores multiplicativos fora de um somat@'orio para dentro.  Se um
@'{@dotless{i}}ndice for usado na express@~ao de fora, ent@~ao a
fun@value{cedilha}@~ao tentar@'a achar um @'{@dotless{i}}ndice
razo@'avel, o mesmo que @'e feito para @code{sumcontract}.  Isto @'e
essencialmente a ideia inversa da propriedade @code{outative} de
somat@'orios, mas repare que n@~ao elimina essa propriedade, apenas faz
com que seja ignorada.

@c WHAT ARE THESE CASES ??
Em alguns casos, poder@'a ser necess@'ario um
@code{scanmap(multthru,@var{expr})} antes de @code{intosum}.

@end deffn

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Declara@value{cedilha}@~ao} lassociative
@code{declare (g, lassociative)} diz ao simplificador do Maxima que
@code{g} @'e associativa @`a esquerda.  E.g., @code{g (g (a, b), g (c,
d))} ir@'a simplificar para @code{g (g (g (a, b), c), d)}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@c WHAT'S UP WITH THE QUOTE MARKS ??
@defvr {Declara@value{cedilha}@~ao} linear
Uma das propriedades operativas do Maxima. As fun@value{cedilha}@~oes de
uma @'unica vari@'avel @code{f} assim declaradas fazem com que a
express@~ao @code{f(x + y)} seja expandida em @code{f(x) + f(y)}, a
express@~ao @code{f(a*x)} transforma-se em @code{a*f(x)} se @code{a} for
uma constante. Para fun@value{cedilha}@~oes de dois ou mais argumentos,
a linearidade define-se igual que no caso de @code{sum} ou
@code{integrate}, isto @'e, @code{f (a*x + b, x)} retorna @code{a*f(x,x)
+ b*f(1,x)}, se @code{a} e @code{b} forem independentesx de @code{x}.

@code{linear} @'e equivalente a @code{additive} e @code{outative}.
Veja tamb@'em @code{opproperties}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Declara@value{cedilha}@~ao} mainvar
Permite declarar vari@'aveis do tipo @code{mainvar} (vari@'avel
principal).  A escala de ordena@value{cedilha}@~ao para @'atomos @'e
essencialmente: n@'umeros < constantes (e.g., @code{%e}, @code{%pi}) <
escalares < outras vari@'aveis < mainvars.  Por exemplo, compare
@code{expand ((X+Y)^4)} com @code{(declare (x, mainvar), expand
((x+y)^4))}.  (Nota: este recurso dever@'a ser usado com cautela. Por
exemplo, se subtrair uma express@~ao, na qual @code{x} for uma
@code{mainvar}, da mesma express@~ao, mas onde @code{x} n@~ao for
@code{mainvar}, poder@'a precisar de resimplifica@value{cedilha}@~ao,
por exemplo, com @code{ev (expr, simp)}, para que sejam canceladas.
Tamb@'em, se grava uma express@~ao na qual @code{x} for uma
@code{mainvar}, provavelmente dever@'a tamb@'em gravar @code{x}.)

@end defvr

@c NEEDS EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} maxapplydepth
Valor por omiss@~ao: 10000

@code{maxapplydepth} @'e a profundidade m@'axima ate a qual @code{apply1}
e @code{apply2} dever@~ao descer.

@end defvr

@c NEEDS EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} maxapplyheight
Valor por omiss@~ao: 10000

@code{maxapplyheight} @'e n@'{@dotless{i}}vel m@'aximo a ser atingido
por @code{applyb1} antes de abandonar.

@end defvr

@c NEEDS EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} maxnegex
Valor por omiss@~ao: 1000

@code{maxnegex} @'e o maior expoente negativo que ser@'a expandido pelo
comando @code{expand} (veja tamb@'em @code{maxposex}).

@end defvr

@c NEEDS EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} maxposex
Valor por omiss@~ao: 1000

@code{maxposex} @'e o maior expoente que ser@'a expandido com o comando
@code{expand} (veja tamb@'em @code{maxnegex}).

@end defvr

@c NEEDS EXAMPLES
@defvr {Declara@value{cedilha}@~ao} multiplicative
@code{declare (f, multiplicative)} diz ao simplificador do Maxima que
@code{f} @'e multiplicativa.

@enumerate
@item
Se @code{f} for uma fun@value{cedilha}@~ao de uma @'unica vari@'avel,
sempre que o simplificador encontrar @code{f} aplicada a um produto,
@code{f} ser@'a distribuida nesse produto.  Por exemplo, @code{f(x*y)}
simplifica para @code{f(x)*f(y)}.
@item
Se @code{f} for uma fun@value{cedilha}@~ao de 2 ou mais argumentos, a
multiplicatividade entende-se como multiplicatividade no primeiro
argumento de @code{f}. Por exemplo, @code{f (g(x) * h(x), x)} simplifica
para @code{f (g(x) ,x) * f (h(x), x)}.
@end enumerate

Esta simplifica@value{cedilha}@~ao n@~ao @'e feita quando @code{f} for
aplicada a express@~oes da forma @code{product (x[i], i, m, n)}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} negdistrib
Valor por omiss@~ao: @code{true}

Quando @code{negdistrib} for @code{true}, -1 distribue sobre uma
express@~ao. Por exemplo, @code{-(x + y)} transforma-se em @code{- y -
x}.  Mudando o valor de @code{negdistrib} para @code{false} permitir@'a
que @code{- (x + y)} seja mostrado como foi escrito. Embora isso possa
ser @'util, tenha muito cuidado: esta vari@'avel e a vari@'avel
@code{simp} n@~ao deveriam ser escolhidas sempre como @code{false},
excepto em forma local no seu Maxima.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} negsumdispflag
Valor por omiss@~ao: @code{true}

Quando @code{negsumdispflag} for @code{true}, @code{x - y} @'e mostrado
como @code{x - y} em lugar de como @code{- y + x}. Mudando para
@code{false} faz com que n@~ao seja feita a verifica@value{cedilha}@~ao
especial para a apresenta@,{c}@~ao da diferen@value{cedilha}a entre duas
express@~oes.  Uma aplica@value{cedilha}@~ao @'e para que @code{a +
%i*b} e @code{a - %i*b} sejam mostrados na mesma forma.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@c NEED TO MENTION THIS IS AN evflag
@defvr {S@'{@dotless{i}}mbolo especial} noeval
@code{noeval} suprime a fase de avalia@value{cedilha}@~ao de @code{ev}.
Isso @'e @'util conjuntamente com outras condi@,{c}@~oes e para fazer com
que express@~oes sejam simplificadas sem serem reavaliadas.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Declara@value{cedilha}@~ao} noun
@code{noun} @'e uma das op@value{cedilha}@~oes do comando
@code{declare}.  Faz com que as fun@,{c}@~oes assim declaradas sejam
substantivos (noun), implicando que n@~ao sejam avaliadas
automaticamente.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} noundisp
Valor por omiss@~ao: @code{false}

Quando @code{noundisp} for @code{true}, os substantivos (nouns) s@~ao
mostrados com um ap@'ostrofo. Sempre que se mostra a
defini@value{cedilha}@~ao de uma fun@value{cedilha}@~ao, essa vari@'avel
@'e igual a @code{true}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {S@'{@dotless{i}}mbolo especial} nouns
@code{nouns} @'e um @code{evflag} (sinalizador de
avalia@value{cedilha}@~ao). Quando usado como uma op@value{cedilha}@~ao
para o comando @code{ev}, @code{nouns} converte todas as formas
substantivas (noun), na express@~ao a ser avaliada, para verbos
("verbs"), isto @'e, avalia essas express@~oes. Veja tamb@'em
@code{noun}, @code{nounify}, @code{verb}, e @code{verbify}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@c WHAT ARE THE FUNCTIONS WHICH ARE EVALUATED IN FLOATING POINT ??
@c WHAT IS A "NUMERVAL" ?? (SOMETHING DIFFERENT FROM A NUMERIC VALUE ??)
@c NEED TO MENTION THIS IS AN evflag
@defvr {S@'{@dotless{i}}mbolo especial} numer
@code{numer} faz com que algumas fun@value{cedilha}@~oes matem@'aticas
(incluindo exponencia@value{cedilha}@~ao) com argumentos num@'ericos
sejam avaliadas em ponto flutuante. Isto faz com que vari@'aveis em
@code{expr} que tiverem valores num@'ericos sejam
substitu@'{@dotless{i}}das pelos seus valores correspondentes.
@code{numer} tamb@'em activa a op@,{c}@~ao @code{float}.

@end defvr


@c NEEDS CLARIFICATION, EXAMPLES
@c HOW TO FIND ALL VARIABLES WHICH HAVE NUMERVALS ??
@deffn {Fun@value{cedilha}@~ao} numerval (@var{x_1}, @var{expr_1}, ..., @var{var_n}, @var{expr_n})
Declara as vari@'aveis @code{x_1}, ..., @var{x_n} com valores
num@'ericos iguais a @code{expr_1}, ..., @code{expr_n}.  O valor
num@'erico @'e avaliado e substituido para a vari@'avel em quaisquer
express@~oes em que a vari@'avel aparecer, se o sinalizador @code{numer}
for igual a @code{true}. Veja tamb@'em @code{ev}.

As express@~oes @code{expr_1}, ..., @code{expr_n} podem ser quaisquer,
n@~ao necessariamente num@'ericas.
@end deffn


@defvr {Vari@'avel de sistema} opproperties

@code{opproperties} @'e a lista de propriedades de operadores especiais
reconhecidas pelo simplificador do Maxima: @code{linear},
@code{additive}, @code{multiplicative}, @code{outative}, @code{evenfun},
@code{oddfun}, @code{commutative}, @code{symmetric},
@code{antisymmetric}, @code{nary}, @code{lassociative},
@code{rassociative}.

@end defvr


@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} opsubst
Valor por omiss@~ao: @code{true}

Quando @code{opsubst} for @code{false}, @code{subst} n@~ao tenta
substituir dentro de um operador de uma express@~ao.  Por exemplo, 
@code{(opsubst: false, subst (x^2, r, r+r[0]))}.

@end defvr

@c NEEDS EXAMPLES
@defvr {Declara@value{cedilha}@~ao} outative
@code{declare (f, outative)} diz ao simplificador do Maxima que factores
constantes no argumento de @code{f} podem ser puxados para fora.

@enumerate
@item
Se @code{f} for uma fun@value{cedilha}@~ao de uma @'unica vari@'avel,
sempre que o simplificador encontrar @code{f} aplicada a um produto, os
factores que forem constantes nesse produto ser@~ao puxados para
fora. Por exemplo, @code{f(a*x)} simplificar@'a para @code{a*f(x)} se
@code{a} for uma constante.  Factores de constantes n@~ao at@^omicas
n@~ao ser@~ao puxados para fora.
@item
Se @code{f} for uma fun@value{cedilha}@~ao de 2 ou mais argumentos, a
coloca@value{cedilha}@~ao para fora @'e definida como no caso de
@code{sum} ou @code{integrate}, isto @'e, @code{f (a*g(x), x)} ir@'a
simplificar para @code{a * f(g(x), x)} se @code{a} n@~ao depender de
@code{x}.
@end enumerate

@code{sum}, @code{integrate}, e @code{limit} s@~ao todas do tipo
@code{outative}.

@end defvr

@c NEEDS EXAMPLES
@defvr {Declara@value{cedilha}@~ao} posfun
@code{declare (f, posfun)} declara @code{f} como fun@value{cedilha}@~ao
positiva.  @code{is (f(x) > 0)} retorna @code{true}.

@end defvr

@deffn {Fun@value{cedilha}@~ao} radcan (@var{expr})
Simplifica @var{expr}, que pode conter logaritmos,
exponenciais, e radicais, convertendo essa express@~ao numa forma
can@'onica sobre uma ampla classe de express@~oes e com uma dada
ordena@value{cedilha}@~ao de vari@'aveis; isto @'e, todas as formas
funcionalmente equivalentes s@~ao mapeadas numa @'unica forma.  Para uma
classe ampla de express@~oes, @code{radcan} produz uma forma regular.
Duas express@~oes equivalentes nessa classe n@~ao possuem
necess@'ariamente a mesma apar@^encia, mas as suas diferen@,{c}as podem
ser simplificadas por @code{radcan} para zero.

Para algumas express@~oes @code{radcan} demora muito tempo. Esse @'e o
custo de explorar as real@,{c}@~oes entre as componentes da express@~ao
para simplificar expoentes usando factoriza@,{c}@~ao e expans@~ao em
fra@,{c}@~oes parciais.

@c %e_to_numlog NEEDS ITS OWN @defvar !!!
@c DOESN'T APPEAR TO AFFECT radcan !!!
Quando @code{%e_to_numlog} for @code{true}, @code{%e^(r*log(expr))}
simplifica para @code{expr^r} se @code{r} for um n@'umero racional.

Quando @code{radexpand} for @code{false}, certas
transforma@value{cedilha}@~oes s@~ao inibidas.  @code{radcan (sqrt
(1-x))} permanece @code{sqrt (1-x)} e n@~ao @'e simplificada para
@code{%i sqrt (x-1)}.  @code{radcan (sqrt (x^2 - 2*x + 11))} permanece
@code{sqrt (x^2 - 2*x + 1)} e n@~ao @'e simplificada para @code{x - 1}.

@c MERGE EXAMPLES INTO THIS FILE
@code{example (radcan)} mostra alguns exemplos.

@end deffn

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} radexpand
Valor por omiss@~ao: @code{true}

@code{radexpand} controla algumas simplifica@value{cedilha}@~oes de
radicais.

Quando @code{radexpand} for @code{all}, todos os factores que forem
pot@^encias de ordem n, dentro de uma raiz de ordem n, ser@~ao puxados
para fora do radical. Por exemplo, se @code{radexpand} for @code{all},
@code{sqrt (16*x^2)} simplifica para @code{4*x}.

@c EXPRESS SIMPLIFICATON RULES IN GENERAL CASE, NOT SPECIAL CASE
Mais particularmente, considere @code{sqrt (x^2)}.
@itemize @bullet
@item
Se @code{radexpand} for @code{all} ou @code{assume (x > 0)} tiver sido
executado, @code{sqrt(x^2)} simplifica para @code{x}.
@item
Se @code{radexpand} for @code{true} e @code{domain} for @code{real}
(valores usados por omiss@~ao), @code{sqrt(x^2)} simplifica para
@code{abs(x)}.
@item
Se @code{radexpand} for @code{false}, ou @code{radexpand} for
@code{true} e @code{domain} for @code{complex}, @code{sqrt(x^2)} n@~ao
@'e simplificado.
@end itemize

@c CORRECT STATEMENT HERE ???
Note que, neste exemplo, @code{domain} somente interessa quando
@code{radexpand} for @code{true}.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} radsubstflag
Valor por omiss@~ao: @code{false}

Se @code{radsubstflag} for @code{true}, permite a @code{ratsubst} fazer
substitui@value{cedilha}@~oes tais como @code{u} por @code{sqrt (x)} em
@code{x}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Declara@value{cedilha}@~ao} rassociative
@code{declare (g, rassociative)} diz ao simplificador do Maxima que
@code{g} @'e associativa @`a direita, isto @'e, @code{g(g(a, b), g(c, d))}
simplifica para @code{g(a, g(b, g(c, d)))}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@deffn {Fun@value{cedilha}@~ao} scsimp (@var{expr}, @var{rule_1}, ..., @var{rule_n})
Simplifica@value{cedilha}@~ao Sequ@^encial Comparativa (m@'etodo devido
a Stoute).  @code{scsimp} tenta simplificar @var{expr} conforme as
regras @var{rule_1}, ..., @var{rule_n}.  Se uma express@~ao pequena for
obtida, o processo repete-se.  De outra forma ap@'os todas as
simplifica@value{cedilha}@~oes serem tentadas, @code{scsimp} retorna a
resposta original.

@c MERGE EXAMPLES INTO THIS FILE
@code{example (scsimp)} mostra alguns exemplos.

@end deffn

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Vari@'avel de op@value{cedilha}@~ao} simpsum
Valor por omiss@~ao: @code{false}

Quando @code{simpsum} for @code{true}, o resultado de um comando
@code{sum} @'e simplificado.  Essa simplifica@value{cedilha}@~ao pode
algumas vezes produzir uma forma fechada.  Se @code{simpsum} for
@code{false}, ou se a forma com ap@'ostrofo @code{'sum} for usada, o
valor @'e uma forma substantiva aditiva que @'e uma
representa@value{cedilha}@~ao da nota@value{cedilha}@~ao sigma usada em
matem@'atica.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@deffn {Fun@value{cedilha}@~ao} sumcontract (@var{expr})
Combina v@'arios somat@'orios que possuem limites superiores e inferiores
que diferem por constantes. O resultado @'e uma express@~ao que cont@'em
apenas um somat@'orio mais todos os termos adicionais que tiveram de ser
extra@'{@dotless{i}}dos para obter essa forma.  @code{sumcontract}
combina todas as somas compat@'{@dotless{i}}veis e usa os indices de uma
das somas, se puder, ou tenta formar um @'{@dotless{i}}ndice razo@'avel
se n@~ao poder usar nenhum dos que foram fornecidos.

@c WHEN IS intosum NECESSARY BEFORE sumcontract ??
Poder@'a ser necess@'ario usar @code{intosum (@var{expr})} antes de
@code{sumcontract}.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} sumexpand
Valor por omiss@~ao: @code{false}

Quando @code{sumexpand} for @code{true}, produtos de somas e somas
exponeciadas simplificam para somas aninhadas.

Veja tamb@'em @code{cauchysum}.

Exemplos:

@example
(%i1) sumexpand: true$
(%i2) sum (f (i), i, 0, m) * sum (g (j), j, 0, n);
                     m      n
                    ====   ====
                    \      \
(%o2)                >      >     f(i1) g(i2)
                    /      /
                    ====   ====
                    i1 = 0 i2 = 0
(%i3) sum (f (i), i, 0, m)^2;
                     m      m
                    ====   ====
                    \      \
(%o3)                >      >     f(i3) f(i4)
                    /      /
                    ====   ====
                    i3 = 0 i4 = 0
@end example

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} sumsplitfact
Valor por omiss@~ao: @code{true}

Quando @code{sumsplitfact} for @code{false},
@c "IS APPLIED" -- UNDER WHAT CIRCUMSTANCES EXACTLY ??
@code{minfactorial} @'e aplicado ap@'os @code{factcomb}.

@end defvr

@c NEEDS CLARIFICATION, EXAMPLES
@defvr {Declara@value{cedilha}@~ao} symmetric
@code{declare (h, symmetric)} diz ao simplificador do Maxima que
@code{h} @'e uma fun@value{cedilha}@~ao sim@'etrica.  Nomeadamente,
@code{h (x, z, y)} simplifica para @code{h (x, y, z)}.

@code{commutative} @'e sin@^onimo de @code{symmetric}.

@end defvr


@deffn {Fun@value{cedilha}@~ao} unknown (@var{expr})
Retorna @code{true} se e somente se @var{expr} cont@'em um operador ou
fun@value{cedilha}@~ao n@~ao reconhecida pelo simplificador do Maxima.

@end deffn
