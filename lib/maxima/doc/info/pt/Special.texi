@c /Special.texi/1.27/Mon Jan 15 06:08:56 2007/-ko/
@menu
* Introdu@value{cedilha}@~ao a Fun@value{cedilha}@~oes Especiais::  
* Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Especiais::  
@end menu

@node Introdu@value{cedilha}@~ao a Fun@value{cedilha}@~oes Especiais, Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Especiais, Fun@value{cedilha}@~oes Especiais, Fun@value{cedilha}@~oes Especiais
@section Introdu@value{cedilha}@~ao a Fun@value{cedilha}@~oes Especiais

A nota@value{cedilha}@~ao de fun@value{cedilha}@~ao especial segue adiante:

@example
bessel_j (index, expr)         Fun@value{cedilha}@~ao de Bessel, primeiro tipo
bessel_y (index, expr)         Fun@value{cedilha}@~ao de Bessel, segundo tipo
bessel_i (index, expr)         Fun@value{cedilha}@~ao de Bessel modificada, primeiro tipo
bessel_k (index, expr)         Fun@value{cedilha}@~ao de Bessel modificada, segundo tipo
%he[n] (z)                     Polin@'omio de Hermite (Note bem: @code{he}, n@~ao @code{h}. Veja A&S 22.5.18)
%p[u,v] (z)                    Fun@value{cedilha}@~ao de Legendre
%q[u,v] (z)                    Fun@value{cedilha}@~ao de Legendre, segundo tipo
hstruve[n] (z)                 Fun@value{cedilha}@~ao H de Struve H
lstruve[n] (z)                 Fun@value{cedilha}@~ao de L Struve
%f[p,q] ([], [], expr)         Fun@value{cedilha}@~ao Hipergeom@'etrica Generalizada
gamma()                        Fun@value{cedilha}@~ao Gamma
gammagreek(a,z)                Fun@value{cedilha}@~ao gama incompleta
gammaincomplete(a,z)           Final da fun@value{cedilha}@~ao gama incompleta
@c IS slommel THE "LOMMEL" FUNCTION ?? NOT OTHERWISE MENTIONED IN TEXINFO FILES
slommel
%m[u,k] (z)                    Fun@value{cedilha}@~ao de Whittaker, primeiro tipo
%w[u,k] (z)                    Fun@value{cedilha}@~ao de Whittaker, segundo tipo
erfc (z)                       Complemento da fun@value{cedilha}@~ao erf (fun@value{cedilha}@~ao de erros - integral da distribui@value{cedilha}@~ao normal)
ei (z)                         Integral de exponencial (?)
kelliptic (z)                  integral eliptica completa de primeiro tipo (K)
%d [n] (z)                     Fun@value{cedilha}@~ao cil@'{@dotless{i}}ndrica parab@'olica
@end example

@node Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Especiais,  , Introdu@value{cedilha}@~ao a Fun@value{cedilha}@~oes Especiais, Fun@value{cedilha}@~oes Especiais
@section Defini@value{cedilha}@~oes para Fun@value{cedilha}@~oes Especiais

@deffn {Fun@value{cedilha}@~ao} airy_ai (@var{x})
A fun@value{cedilha}@~ao de Airy Ai, como definida em Abramowitz e Stegun,
@i{Handbook of Mathematical Functions}, Sess@~ao 10.4. 

A equa@value{cedilha}@~ao de Airy @code{diff (y(x), x, 2) - x y(x) = 0} tem duas 
solu@value{cedilha}@~oes linearmente independentes, @code{y = Ai(x)} e @code{y = Bi(x)}.
A derivada de @code{diff (airy_ai(x), x)} @'e @code{airy_dai(x)}.

Se o argumento @code{x} for um n@'umero real ou um n@'umero complexo qualquer deles em ponto
flutuante , o valor num@'erico de @code{airy_ai} @'e retornado 
quando poss@'{@dotless{i}}vel.

Veja tamb@'em @code{airy_bi}, @code{airy_dai}, @code{airy_dbi}.
@end deffn


@deffn {Fun@value{cedilha}@~ao} airy_dai (@var{x})
A derivada da fun@value{cedilha}@~ao de Airy Ai @code{airy_ai(x)}. 

Veja @code{airy_ai}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} airy_bi (@var{x})
A fun@value{cedilha}@~ao de Airy Bi, como definida em Abramowitz e Stegun,
@i{Handbook of Mathematical Functions}, Sess@~ao 10.4, 
@'e a segunda solu@value{cedilha}@~ao da equa@value{cedilha}@~ao de Airy
@code{diff (y(x), x, 2) - x y(x) = 0}.

Se o argumento @code{x} for um n@'umero real ou um n@'umero complexo qualquer deles em ponto flutuante,
o valor num@'erico de @code{airy_bi} @'e retornado quando poss@'{@dotless{i}}vel.
Em outros casos a express@~ao n@~ao avaliada @'e retornada.

A derivada de @code{diff (airy_bi(x), x)} @'e @code{airy_dbi(x)}.

Veja @code{airy_ai}, @code{airy_dbi}.
@end deffn


@deffn {Fun@value{cedilha}@~ao} airy_dbi (@var{x})
A derivada de fun@value{cedilha}@~ao de Airy Bi @code{airy_bi(x)}.

Veja @code{airy_ai} e @code{airy_bi}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} asympa
@code{asympa} @'e um pacote para an@'alise assint@'otica. O pacote cont@'em
fun@value{cedilha}@~oes de simplifica@value{cedilha}@~ao para an@'alise assint@'otica, incluindo as fun@value{cedilha}@~oes 
``grande O'' e ``pequeno o'' que s@~ao largamente usadas em an@'alises de complexidade e
an@'alise num@'erica.

@code{load ("asympa")} chama esse pacote.

@end deffn

@deffn {Fun@value{cedilha}@~ao} bessel (@var{z}, @var{a}) 
A fun@value{cedilha}@~ao de Bessel de primeiro tipo.

Essa fun@value{cedilha}@~ao est@'a desactualizada.  Escreva @code{bessel_j (@var{z}, @var{a})} em lugar dessa.

@end deffn


@deffn {Fun@value{cedilha}@~ao} bessel_j (@var{v}, @var{z})
A fun@value{cedilha}@~ao de Bessel do primeiro tipo de ordem @math{v} e argumento @math{z}.

@code{bessel_j} calcula o array @code{besselarray} tal que
@code{besselarray [i] = bessel_j [i + v - int(v)] (z)} para @code{i} de zero a @code{int(v)}.

@code{bessel_j} @'e definida como
@ifhtml
@example
                inf
                ====       k  - v - 2 k  v + 2 k
                \     (- 1)  2          z
                 >    --------------------------
                /        k! gamma(v + k + 1)
                ====
                k = 0
@end example
@end ifhtml
@ifinfo
@example
                inf
                ====       k  - v - 2 k  v + 2 k
                \     (- 1)  2          z
                 >    --------------------------
                /        k! gamma(v + k + 1)
                ====
                k = 0
@end example
@end ifinfo

@tex
$$\sum_{k=0}^{\infty }{{{\left(-1\right)^{k}\,\left(z\over 2\right)^{v+2\,k}
 }\over{k!\,\Gamma\left(v+k+1\right)}}}$$
@end tex

todavia s@'eries infinitas n@~ao s@~ao usadas nos c@'alculos.

@end deffn


@deffn {Fun@value{cedilha}@~ao} bessel_y (@var{v}, @var{z})
A fun@value{cedilha}@~ao de Bessel do segundo tipo de ordem @math{v} e argumento @math{z}.

@code{bessel_y} calcula o array @code{besselarray} tal que
@code{besselarray [i] = bessel_y [i + v - int(v)] (z)} para @code{i} de zero a @code{int(v)}.

@code{bessel_y} @'e definida como
@ifhtml
@example
              cos(%pi v) bessel_j(v, z) - bessel_j(-v, z)
              -------------------------------------------
                             sin(%pi v)
@end example
@end ifhtml
@ifinfo
@example
              cos(%pi v) bessel_j(v, z) - bessel_j(-v, z)
              -------------------------------------------
                             sin(%pi v)
@end example
@end ifinfo

@tex
$${{\cos \left(\pi\,v\right)\,J_{v}(z)-J_{-v}(z)}\over{
 \sin \left(\pi\,v\right)}}$$
@end tex

quando @math{v} n@~ao for um inteiro.  Quando @math{v} for um inteiro @math{n},
o limite com @math{v} aprocimando-se de @math{n} @'e tomado.

@end deffn


@deffn {Fun@value{cedilha}@~ao} bessel_i (@var{v}, @var{z})
A fun@value{cedilha}@~ao de Bessel modificada de primeiro tipo de ordem @math{v} e argumento @math{z}.

@code{bessel_i} calcula o array @code{besselarray} tal que
@code{besselarray [i] = bessel_i [i + v - int(v)] (z)} para @code{i} de zero a @code{int(v)}.

@code{bessel_i} @'e definida como
@ifhtml
@example
                    inf
                    ====   - v - 2 k  v + 2 k
                    \     2          z
                     >    -------------------
                    /     k! gamma(v + k + 1)
                    ====
                    k = 0
@end example
@end ifhtml
@ifinfo
@example
                    inf
                    ====   - v - 2 k  v + 2 k
                    \     2          z
                     >    -------------------
                    /     k! gamma(v + k + 1)
                    ====
                    k = 0
@end example
@end ifinfo

@tex
$$\sum_{k=0}^{\infty } {{1\over{k!\,\Gamma
 \left(v+k+1\right)}} {\left(z\over 2\right)^{v+2\,k}}}$$
@end tex

todavia s@'eries infinitas n@~ao s@~ao usadas nos c@'alculos.

@end deffn


@deffn {Fun@value{cedilha}@~ao} bessel_k (@var{v}, @var{z})
A fun@value{cedilha}@~ao de Bessel modificada de segundo tipo de ordem @math{v} e argumento @math{z}.

@code{bessel_k} calcula o array @code{besselarray} tal que
@code{besselarray [i] = bessel_k [i + v - int(v)] (z)} para @code{i} de zero a @code{int(v)}.

@code{bessel_k} @'e definida como
@ifhtml
@example
           %pi csc(%pi v) (bessel_i(-v, z) - bessel_i(v, z))
           -------------------------------------------------
                                  2
@end example
@end ifhtml
@ifinfo
@example
           %pi csc(%pi v) (bessel_i(-v, z) - bessel_i(v, z))
           -------------------------------------------------
                                  2
@end example
@end ifinfo
@tex
$${{\pi\,\csc \left(\pi\,v\right)\,\left(I_{-v}(z)-I_{v}(z)\right)}\over{2}}$$
@end tex

quando @math{v} n@~ao for inteiro.  Se @math{v} for um inteiro @math{n},
ent@~ao o limite  com @math{v} aproximando-se de @math{n} @'e tomado.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} besselexpand
Valor por omiss@~ao: @code{false}

@c REPHRASE
Expans@~oes de controle de fun@value{cedilha}@~oes de Bessel quando a ordem for a metade de
um inteiro @'{@dotless{i}}mpar.  Nesse caso, as fun@value{cedilha}@~oes de Bessel podem ser expandidas
em termos de outras fun@value{cedilha}@~oes elementares.  Quando @code{besselexpand} for @code{true},
a fun@value{cedilha}@~ao de Bessel @'e expandida.

@example
(%i1) besselexpand: false$
(%i2) bessel_j (3/2, z);
                                    3
(%o2)                      bessel_j(-, z)
                                    2
(%i3) besselexpand: true$
(%i4) bessel_j (3/2, z);
                          2 z   sin(z)   cos(z)
(%o4)                sqrt(---) (------ - ------)
                          %pi      2       z
                                  z
@end example
@end defvr

@deffn {Fun@value{cedilha}@~ao} scaled_bessel_i (@var{v}, @var{z}) 

A fun@value{cedilha}@~ao homot@'etica modificada de Bessel de primeiro tipo de ordem
@math{v} e argumento @math{z}.  Isto @'e, @math{scaled_bessel_i(v,z) =
exp(-abs(z))*bessel_i(v, z)}. Essa fun@value{cedilha}@~ao @'e particularmente @'util
para calcular @math{bessel_i} para grandes valores de @math{z}.
Todavia, maxima n@~ao conhece outra forma muito mais sobre essa fun@value{cedilha}@~ao.  Para
computa@value{cedilha}@~ao simb@'olica, @'e provavelmete prefer@'{@dotless{i}}vel trabalhar com a express@~ao
@code{exp(-abs(z))*bessel_i(v, z)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} scaled_bessel_i0 (@var{z}) 

Id@^entica a @code{scaled_bessel_i(0,z)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} scaled_bessel_i1 (@var{z}) 

Id@^entica a @code{scaled_bessel_i(1,z)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} beta (@var{x}, @var{y})
A fun@value{cedilha}@~ao beta, definida como @code{gamma(x) gamma(y)/gamma(x + y)}.
@c SEEMS LIKE THERE SHOULD BE MORE TO SAY HERE
@c ANY SIMPLIFICATION RULES FOR THIS FUNCTION ??

@end deffn

@deffn {Fun@value{cedilha}@~ao} gamma (@var{x})
A fun@value{cedilha}@~ao gama.

@c SEEMS POINTLESS TO MENTION THE FOLLOWING IDENTITY, 
@c AS MAXIMA DOESN'T SEEM TO CARRY OUT THIS SIMPLIFICATION
@c GAMMA(I)=(I-1)!  for I a positive integer.

Veja tamb@'em @code{makegamma}.

A vari@'avel @code{gammalim} controla a simplifica@value{cedilha}@~ao da fun@value{cedilha}@~ao gama.

A constante de Euler-Mascheroni @'e @code{%gamma}.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} gammalim
Valor por omiss@~ao: 1000000

@c REPHRASE
@code{gammalim} controla a simplifica@value{cedilha}@~ao da fun@value{cedilha}@~ao
gama para integral e argumentos na forma de n@'umeros racionais.  Se o valor
absoluto do argumento n@~ao for maior que @code{gammalim}, ent@~ao
a simplifica@value{cedilha}@~ao ocorrer@'a.  Note que @code{factlim} comuta controle de
simplifica@value{cedilha}c@~ao do resultado de @code{gamma} de um argumento inteiro tamb@'em.

@end defvr

@c NEED EXAMPLES HERE
@deffn {Fun@value{cedilha}@~ao} intopois (@var{a})
Converte @var{a} em um c@'odigo de Poisson.

@end deffn

@c NEED CROSS REFS HERE
@c NEED EXAMPLES HERE
@deffn {Fun@value{cedilha}@~ao} makefact (@var{expr})
Transforma inst@^ancias de fun@value{cedilha}@~oes binomiais, gama,
e beta em @var{expr} para factoriais.

Veja tamb@'em @code{makegamma}.

@end deffn

@c NEED CROSS REFS HERE
@c NEED EXAMPLES HERE
@deffn {Fun@value{cedilha}@~ao} makegamma (@var{expr})
Transforma inst@^ancias de fun@value{cedilha}@~oes binomiais, factorial,
e beta em @var{expr} para fun@value{cedilha}@~oes gama.

Veja tamb@'em @code{makefact}.

@end deffn

@c AREN'T THERE OTHER FUNCTIONS THAT DO ESSENTIALLY THE SAME THING ??
@deffn {Fun@value{cedilha}@~ao} numfactor (@var{expr})
Retorna o factor num@'erico multiplicando a express@~ao
@var{expr}, que pode ser um termo simples.

@c WHY IS content MENTIONED IN THIS CONTEXT ??
@code{content} retorna o m@'aximo divisor comum (mdc) de todos os termos em uma adi@value{cedilha}@~ao.

@example
(%i1) gamma (7/2);
                          15 sqrt(%pi)
(%o1)                     ------------
                               8
(%i2) numfactor (%);
                               15
(%o2)                          --
                               8
@end example

@end deffn

@c NEED EXAMPLES HERE
@deffn {Fun@value{cedilha}@~ao} outofpois (@var{a})
Converte @var{a} de um c@'odigo de Poisson para uma representa@value{cedilha}@~ao
geral.  Se @var{a} n@~ao for uma forma de Poisson, @code{outofpois} realiza a convers@~ao,
i.e., o valor de retorno @'e @code{outofpois (intopois (@var{a}))}.
Essa fun@value{cedilha}@~ao @'e desse modo um simplificador can@'onico
para adi@value{cedilha}@~oes e pot@^encias de termos de seno e co-seno de um tipo particular.

@end deffn

@c NEED MORE INFO HERE
@c NEED EXAMPLES HERE
@deffn {Fun@value{cedilha}@~ao} poisdiff (@var{a}, @var{b})
Deriva @var{a} com rela@value{cedilha}@~ao a @var{b}.  @var{b} deve ocorrer somente
nos argumentos trigonom@'etricos ou somente nos coeficientes.

@end deffn

@c LOOKING AT THE CODE IN src/pois3.lisp, THIS FCN SEEMS TO COMPUTE THE EXPONENT BY MULTIPLYING IN A LOOP
@c DUNNO HOW WE WANT TO EXPLAIN THAT
@c REPHRASE WITHOUT USING THE TERM "FUNCTIONALLY IDENTICAL"
@deffn {Fun@value{cedilha}@~ao} poisexpt (@var{a}, @var{b})
Funcionalmente identica a @code{intopois (@var{a}^@var{b})}.
@var{b} deve ser um inteiro positico.

@end deffn

@c WHAT IS THIS ABOUT ??
@deffn {Fun@value{cedilha}@~ao} poisint (@var{a}, @var{b})
Integra em um senso restrito similarmente (para
@code{poisdiff}).  Termos n@~ao peri@'odicos em @var{b} s@~ao diminu@'{@dotless{i}}dos se @var{b} estiver em argumentos
trigonom@'etricos.

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} poislim
Valor por omiss@~ao: 5

@code{poislim} determina o dom@'{@dotless{i}}nio dos coeficientes nos
argumentos de fun@value{cedilha}@~oes trigonom@'etricas.  O valor inicial de 5
corresponde ao intervalo [-2^(5-1)+1,2^(5-1)], ou [-15,16], mas isso
pode ser alterado para [-2^(n-1)+1, 2^(n-1)].

@end defvr

@c UMM, WHAT IS THIS ABOUT EXACTLY ?? EXAMPLES NEEDED
@deffn {Fun@value{cedilha}@~ao} poismap (@var{series}, @var{sinfn}, @var{cosfn})
mapear@'a as fun@value{cedilha}@~oes @var{sinfn} sobre os
termos de seno e @var{cosfn} ssobre os termos de co-seno das s@'eries de Poisson dadas.
@var{sinfn} e @var{cosfn} s@~ao fun@value{cedilha}@~oes de dois argumentos que s@~ao um coeficiente
e uma parte trigonom@'etrica de um termo em s@'eries respectivamente.

@end deffn

@c REPHRASE WITHOUT USING THE TERM "FUNCTIONALLY IDENTICAL"
@deffn {Fun@value{cedilha}@~ao} poisplus (@var{a}, @var{b})
@'E funcionalmente identica a @code{intopois (a + b)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} poissimp (@var{a})
Converte @var{a} em s@'eries de Poisson para @var{a} em representa@value{cedilha}@~ao
geral.

@end deffn

@c MORE INFO NEEDED HERE
@defvr {S@'{@dotless{i}}mbolo especial} poisson
O s@'{@dotless{i}}mbolo @code{/P/} segue o r@'otulo de linha de uma express@~ao contendo s@'eries de
Poisson.

@end defvr

@deffn {Fun@value{cedilha}@~ao} poissubst (@var{a}, @var{b}, @var{c})
Substitue @var{a} por @var{b} em @var{c}.  @var{c} @'e uma s@'erie de Poisson.

(1) Quando @var{B} @'e uma vari@'avel @var{u}, @var{v}, @var{w}, @var{x}, @var{y}, ou @var{z},
ent@~ao @var{a} deve ser uma
express@~ao linear nessas vari@'aveis (e.g., @code{6*u + 4*v}).

(2) Quando @var{b} for outra que n@~ao essas vari@'aveis, ent@~ao @var{a} deve tamb@'em ser
livre dessas vari@'aveis, e al@'em disso, livre de senos ou co-senos.

@code{poissubst (@var{a}, @var{b}, @var{c}, @var{d}, @var{n})} @'e um tipo especial d substitui@value{cedilha}@~ao que
opera sobre @var{a} e @var{b} como no tipo (1) acima, mas onde @var{d} @'e uma s@'erie de
Poisson, expande @code{cos(@var{d})} e @code{sin(@var{d})} para a ordem @var{n} como provendo o
resultado da substitui@value{cedilha}@~ao @code{@var{a} + @var{d}} por @var{b} em @var{c}.  A id@'eia @'e que @var{d} @'e uma
expans@~ao em termos de um pequeno par@^ametro.  Por exemplo,
@code{poissubst (u, v, cos(v), %e, 3)} retorna @code{cos(u)*(1 - %e^2/2) - sin(u)*(%e - %e^3/6)}.

@end deffn

@c REPHRASE WITHOUT USING THE TERM "FUNCTIONALLY IDENTICAL"
@deffn {Fun@value{cedilha}@~ao} poistimes (@var{a}, @var{b})
@'E funcionalmente id@^entica a @code{intopois (@var{a}*@var{b})}.

@end deffn

@c HOW DOES THIS WORK ?? NEED MORE INFO AND EXAMPLES
@deffn {Fun@value{cedilha}@~ao} poistrim ()
@'e um nome de fun@value{cedilha}@~ao reservado que (se o utilizador tiver definido
uma fun@value{cedilha}@~ao com esse nome) @'e aplicada durante multiplica@value{cedilha}@~ao de Poisson.  Isso @'e uma fun@value{cedilha}@~ao
predicada de 6 argumentos que s@~ao os coeficientes de @var{u}, @var{v}, ..., @var{z}
em um termo.  Termos para os quais @code{poistrim} for @code{true} (para os coeficientes
daquele termo) s@~ao eliminados durante a multiplica@value{cedilha}@~ao.

@end deffn

@deffn {Fun@value{cedilha}@~ao} printpois (@var{a})
Mostra uma s@'erie de Poisson em um formato leg@'{@dotless{i}}vel.  Em comum
com @code{outofpois}, essa fun@value{cedilha}@~ao converter@'a @var{a} em um c@'odigo de Poisson primeiro, se
necess@'ario.

@end deffn

@c NEED INFO HERE ABOUT THE SUBSCRIPTED FORM psi[n](x)
@c I (rtoy) don't think there is a plain psi(x) function anymore.
@c @deffn {Fun@value{cedilha}@~ao} psi (@var{x})
@c @deffnx {Fun@value{cedilha}@~ao} psi [@var{n}](@var{x})
@deffn {Fun@value{cedilha}@~ao} psi [@var{n}](@var{x})

A derivada de @code{log (gamma (@var{x}))} de ordem @code{@var{n}+1}.
Dessa forma, @code{psi[0](@var{x})} @'e a primeira derivada,
@code{psi[1](@var{x})} @'e a segunda derivada, etc.

Maxima n@~ao sabe como, em geral, calcular um valor num@'erico de
@code{psi}, mas Maxima pode calcular alguns valores exatos para argumentos racionais.
Muitas vari@'aveis controlam qual intervalo de argumentos racionais @code{psi} ir@'a
retornar um valor exato, se poss@'{@dotless{i}}vel.  Veja @code{maxpsiposint},
@code{maxpsinegint}, @code{maxpsifracnum}, e @code{maxpsifracdenom}.
Isto @'e, @var{x} deve localizar-se entre @code{maxpsinegint} e
@code{maxpsiposint}.  Se o valor absoluto da parte facion@'aria de
@var{x} for racional e tiver um numerador menor que @code{maxpsifracnum}
e tiver um denominador menor que @code{maxpsifracdenom}, @code{psi}
ir@'a retornar um valor exato.

A fun@value{cedilha}@~ao @code{bfpsi} no pacote @code{bffac} pode calcular
valores num@'ericos.
 
 @end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} maxpsiposint
Valor por omiss@~ao: 20

@code{maxpsiposint} @'e o maior valor positivo para o qual
@code{psi[n](x)} ir@'a tentar calcular um valor exato.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} maxpsinegint
Valor por omiss@~ao: -10

@code{maxpsinegint} @'e o valor mais negativo para o qual
@code{psi[n](x)} ir@'a tentar calcular um valor exato.  Isto @'e, se
@var{x} for menor que @code{maxnegint}, @code{psi[n](@var{x})} n@~ao ir@'a
retornar resposta simplificada, mesmo se isso for poss@'{@dotless{i}}vel.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} maxpsifracnum
Valor por omiss@~ao: 4

Tomemos @var{x} como sendo um n@'umero racional menor que a unidade e da forma @code{p/q}.
Se @code{p} for menor que @code{maxpsifracnum}, ent@~ao
@code{psi[@var{n}](@var{x})} n@~ao ir@'a tentar retornar um valor
simplificado.

@end defvr

@deffn {Fun@value{cedilha}@~ao} specint (exp(- s*@var{t}) * @var{expr}, @var{t})

Calcula a transformada de Laplace de @var{expr} com rala@value{cedilha}@~ao @`a vari@'avel @var{t}.
O integrando @var{expr} pode conter fun@value{cedilha}@~oes especiais.

Se @code{specint} n@~ao puder calcular a integral, o valore de retorno pode
conter v@'arios s@'{@dotless{i}}mbolos do Lisp, incluindo
@code{other-defint-to-follow-negtest},
@code{other-lt-exponential-to-follow},
@code{product-of-y-with-nofract-indices}, etc.; isso @'e um erro.  
@c REPORTED AS SOURCEFORGE BUG # 1162505

@code{demo(hypgeo)} mostra muitos exemplos de transformadas de Laplace calculados por @code{specint}.

Exemplos:
@c ===beg===
@c assume (p > 0, a > 0);
@c specint (t^(1/2) * exp(-a*t/4) * exp(-p*t), t);
@c specint (t^(1/2) * bessel_j(1, 2 * a^(1/2) * t^(1/2)) * exp(-p*t), t);
@c ===end===

@example
(%i1) assume (p > 0, a > 0);
(%o1)                    [p > 0, a > 0]
(%i2) specint (t^(1/2) * exp(-a*t/4) * exp(-p*t), t);
                           sqrt(%pi)
(%o2)                     ------------
                                 a 3/2
                          2 (p + -)
                                 4
(%i3) specint (t^(1/2) * bessel_j(1, 2 * a^(1/2) * t^(1/2)) * exp(-p*t), t);
                                   - a/p
                         sqrt(a) %e
(%o3)                    ---------------
                                2
                               p
@end example

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} maxpsifracdenom
Valor por omiss@~ao: 4

Tomemos @var{x} como sendo um n@'umero racional menor que a unidade e da forma @code{p/q}.
Se @code{q} for maior que @code{maxpsifracdeonm}, ent@~ao
@code{psi[@var{n}](@var{x})} n@~ao ir@'a tentar retornar um valor
simplificado.


@end defvr
