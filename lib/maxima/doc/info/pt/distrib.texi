@c Language: Portuguese
@c /distrib.texi/1.3/Mon Jan  1 07:18:27 2007//
@menu
* Introdu@value{cedilha}@~ao a distrib::
* Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes cont@'{@dotless{i}}nuas::
* Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes discretas::
@end menu

@node Introdu@value{cedilha}@~ao a distrib, Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes cont@'{@dotless{i}}nuas, distrib, distrib
@section Introdu@value{cedilha}@~ao a distrib


Pacote @code{distrib} cont@'em um conjunto de fun@,{c}@~oes para fazer c@'alculos 
envolvendo probabilidades de modelos de uma @'unica vari@'avel estat@'{@dotless{i}}stica e de 
ambos os tipos discreta e cont@'{@dotless{i}}nua. 

O que segue @'e um curto resumo de defini@,{c}oes b@'asicas
relacionadas @`a teoria das probabilidades.

Seja @math{f(x)} a @var{fun@,{c}@~ao densidade de probabilidade} absoluta 
de uma vari@'avel aleat@'oria cont@'{@dotless{i}}nua @math{X}. A @var{fun@,{c}@~ao 
distribui@,{c}@~ao de probabilidade} @'e definida como
@ifhtml
@example
                       x
                      /
                      [
               F(x) = I     f(u) du
                      ]
                      /
                       minf
@end example
@end ifhtml
@ifinfo
@example
                       x
                      /
                      [
               F(x) = I     f(u) du
                      ]
                      /
                       minf
@end example
@end ifinfo
@tex
$$F\left(x\right)=\int_{ -\infty }^{x}{f\left(u\right)\;du}$$
@end tex
que @'e igual @`a probabilidade @var{Pr(X <= x)}.

O valor @var{m@'edio} @'e um par@^ametro de localiza@,{c}@~ao e est@'a definido como
@ifhtml
@example
                     inf
                    /
                    [
           E[X]  =  I   x f(x) dx
                    ]
                    /
                     minf
@end example
@end ifhtml
@ifinfo
@example
                     inf
                    /
                    [
           E[X]  =  I   x f(x) dx
                    ]
                    /
                     minf
@end example
@end ifinfo
@tex
$$E\left[X\right]=\int_{ -\infty }^{\infty }{x\,f\left(x\right)\;dx}$$
@end tex

A @var{vari@^ancia} @'e uma medida de varia@,{c}@~ao,
@ifhtml
@example
                 inf
                /
                [                    2
         V[X] = I     f(x) (x - E[X])  dx
                ]
                /
                 minf
@end example
@end ifhtml
@ifinfo
@example
                 inf
                /
                [                    2
         V[X] = I     f(x) (x - E[X])  dx
                ]
                /
                 minf
@end example
@end ifinfo
@tex
$$V\left[X\right]=\int_{ -\infty }^{\infty }{f\left(x\right)\,\left(x
 -E\left[X\right]\right)^2\;dx}$$
@end tex
que @'e um n@'umero real positivo. A ra@'{@dotless{i}}z quadrada da vari@^ancia @'e o
@var{desvio padr@~ao}, @math{D[X]=sqrt(V[X])}, e esse @var{desvio padr@~ao}
@'e outra medida de varia@,{c}@~ao.

O @var{coeficiente de assimetria} @'e uma medida de n@~ao simetria,
@ifhtml
@example
                 inf
                /
            1   [                    3
  SK[X] = ----- I     f(x) (x - E[X])  dx
              3 ]
          D[X]  /
                 minf
@end example
@end ifhtml
@ifinfo
@example
                 inf
                /
            1   [                    3
  SK[X] = ----- I     f(x) (x - E[X])  dx
              3 ]
          D[X]  /
                 minf
@end example
@end ifinfo
@tex
$$SK\left[X\right]={{\int_{ -\infty }^{\infty }{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^3\;dx}}\over{D\left[X\right]^3}}$$
@end tex

E o @var{coeficiente de curtose} mede o grau de achatamento de uma distribui@,{c}@~ao,
@ifhtml
@example
                 inf
                /
            1   [                    4
  KU[X] = ----- I     f(x) (x - E[X])  dx - 3
              4 ]
          D[X]  /
                 minf
@end example
@end ifhtml
@ifinfo
@example
                 inf
                /
            1   [                    4
  KU[X] = ----- I     f(x) (x - E[X])  dx - 3
              4 ]
          D[X]  /
                 minf
@end example
@end ifinfo
@tex
$$KU\left[X\right]={{\int_{ -\infty }^{\infty }{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^4\;dx}}\over{D\left[X\right]^4}}-3$$
@end tex
Se @math{X} for gaussiana, @math{KU[X]=0}. De facto, ambos assimetria e curtose s@~ao
par@^ametros de ajuste usados para medir a n@~ao gaussianidade de uma distribui@,{c}@~ao.

Se a vari@'avel aleat@'oria @math{X} for discreta, a fun@,{c}@~ao densidade
de probabilidade, ou simplesmente @var{probabilidade}, @math{f(x)} toma valores
positivos dentro de certos conjuntos cont@'aveis de n@'umeros @math{x_i},
e zero em caso contr@'ario. Nesse caso, a fun@,{c}@~ao
distribui@,{c}@~ao de probabilidade @'e
@ifhtml
@example
                       ====
                       \
                F(x) =  >    f(x )
                       /        i
                       ====
                      x <= x
                       i
@end example
@end ifhtml
@ifinfo
@example
                       ====
                       \
                F(x) =  >    f(x )
                       /        i
                       ====
                      x <= x
                       i
@end example
@end ifinfo
@tex
$$F\left(x\right)=\sum_{x_{i}\leq x}{f\left(x_{i}\right)}$$
@end tex

A m@'edia, vari@^ancia, desvio padr@~ao, coeficiente de assimetria e coeficiente de curtose tomam a forma
@ifhtml
@example
                       ====
                       \
                E[X] =  >  x  f(x ) ,
                       /    i    i
                       ====
                        x 
                         i
@end example
@end ifhtml
@ifinfo
@example
                       ====
                       \
                E[X] =  >  x  f(x ) ,
                       /    i    i
                       ====
                        x 
                         i
@end example
@end ifinfo
@tex
$$E\left[X\right]=\sum_{x_{i}}{x_{i}f\left(x_{i}\right)},$$
@end tex

@ifhtml
@example
                ====
                \                     2
        V[X] =   >    f(x ) (x - E[X])  ,
                /        i    i
                ====
                 x
                  i
@end example
@end ifhtml
@ifinfo
@example
                ====
                \                     2
        V[X] =   >    f(x ) (x - E[X])  ,
                /        i    i
                ====
                 x
                  i
@end example
@end ifinfo
@tex
$$V\left[X\right]=\sum_{x_{i}}{f\left(x_{i}\right)\left(x_{i}-E\left[X\right]\right)^2},$$
@end tex

@ifhtml
@example
               D[X] = sqrt(V[X]),
@end example
@end ifhtml
@ifinfo
@example
               D[X] = sqrt(V[X]),
@end example
@end ifinfo
@tex
$$D\left[X\right]=\sqrt{V\left[X\right]},$$
@end tex

@ifhtml
@example
                     ====
              1      \                     3
  SK[X] =  -------    >    f(x ) (x - E[X])  
           D[X]^3    /        i    i
                     ====
                      x
                       i
@end example
@end ifhtml
@ifinfo
@example
                     ====
              1      \                     3
  SK[X] =  -------    >    f(x ) (x - E[X])  
           D[X]^3    /        i    i
                     ====
                      x
                       i
@end example
@end ifinfo
@tex
$$SK\left[X\right]={{\sum_{x_{i}}{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^3\;dx}}\over{D\left[X\right]^3}}$$
@end tex
and
@ifhtml
@example
                     ====
              1      \                     4
  KU[X] =  -------    >    f(x ) (x - E[X])   - 3 ,
           D[X]^4    /        i    i
                     ====
                      x
                       i
@end example
@end ifhtml
@ifinfo
@example
                     ====
              1      \                     4
  KU[X] =  -------    >    f(x ) (x - E[X])   - 3 ,
           D[X]^4    /        i    i
                     ====
                      x
                       i
@end example
@end ifinfo
@tex
$$KU\left[X\right]={{\sum_{x_{i}}{f\left(x\right)\,
 \left(x-E\left[X\right]\right)^4\;dx}}\over{D\left[X\right]^4}}-3,$$
@end tex
respectively.

O Pacote @code{distrib} inclui fun@,{c}@~oes para simula@,{c}@~ao de
vari@'aveis estat@'{@dotless{i}}sticas pseudo-aleat@'orias. Algumas dessas fun@,{c}@~oes
fazem uso de vari@'aveis opcionais que indicam o algoritmo a ser usado.
O m@'etodo inverso gen@'erico (baseado no facto que se
@var{u} for um n@'umero aleat@'orio uniforme no intervalo @math{(0,1)},
ent@~ao @var{F^(-1)(u)} @'e uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria
com distribui@,{c}@~ao @math{F}) est@'a implementada para a maioria dos casos;
isso @'e um m@'etodo sub@'optimo em termos de cronometragem, mas @'util para
fazer compara@,{c}@~oes com outros algoritmos. Nesse exemplo, a
@code{perandom_formance} dos algoritmos @code{ahrens_cheng} e
@code{inverse} em simular  vari@'aveis chi-quadradas (letra grega "chi") 
s@~ao comparadas por meio de seus histogramas:

@example
(%i1) load(distrib)$
(%i2) load(descriptive)$
(%i3) showtime: true$
Evaluation took 0.00 seconds (0.00 elapsed) using 32 bytes.
(%i4) random_chi2_algorithm: 'ahrens_cheng$ histogram(random_chi2(10,500))$
Evaluation took 0.00 seconds (0.00 elapsed) using 40 bytes.
Evaluation took 0.69 seconds (0.71 elapsed) using 5.694 MB.
(%i6) random_chi2_algorithm: 'inverse$ histogram(random_chi2(10,500))$
Evaluation took 0.00 seconds (0.00 elapsed) using 32 bytes.
Evaluation took 10.15 seconds (10.17 elapsed) using 322.098 MB.
@end example

Com o objectivo de fazer compara@,{c}@~oes visuais entre algoritmos para uma
vari@'avel estat@'{@dotless{i}}stica discreta, a fun@,{c}@~ao @code{barsplot} do pacote
@code{descriptive} pode ser usada.

Note que algum trabalho resta para ser realizado, uma vez que essas fun@,{c}@~oes
de simula@,{c}@~ao n@~ao foram ainda verificadas pelos mais rigorosamente
melhores dos testes de ajuste.

Por favor, consulte um manual introdut@'orio sobre probabilidade e estat@'{@dotless{i}}stica
para maiores informa@,{c}@~oes sobre todo esse material matem@'atico.

Existe uma conven@,{c}@~ao de nome no pacote @code{distrib}. Todo nome de
fun@,{c}@~ao tem duas partes, a primeira faz refer@^encia @`a fun@,{c}@~ao
ou ao par@^ametro que queremos calcular,
@example
Fun@value{cedilha}@~oes:
   fun@,{c}@~ao densidade de probabilidade            (pdf_*)
   fun@,{c}@~ao distribui@,{c}@~ao de probabilidade       (cdf_*)
   Quartil                    (quantile_*)
   M@'edia                        (mean_*)
   Vari@^ancia                    (var_*)
   Desvio padr@~ao          (std_*)
   Coeficiente de assimetria        (skewness_*)
   Coeficiente de curtose        (kurtosis_*)
   Vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria              (random_*)
@end example

A segunda parte @'e uma refer@^encia expl@'{@dotless{i}}cita ao modelo probabil@'{@dotless{i}}stico,
@example
Distribu@'{@dotless{i}}@,{c}@~oes cont@'{@dotless{i}}nuas:
   Normal              (*normal)
   Student             (*student_t)
   Chi^2               (*chi2)
   F                   (*f)
   Exponencial         (*exp)
   Lognormal           (*lognormal)
   Gama               (*gamma)
   Beta                (*beta)
   cont@'{@dotless{i}}nua uniforme  (*continuous_uniform)
   Log@'{@dotless{i}}stica            (*logistic)
   Pareto              (*pareto)
   Weibull             (*weibull)
   Rayleigh            (*rayleigh)
   Laplace             (*laplace)
   Cauchy              (*cauchy)
   Gumbel              (*gumbel)

Distribui@,{c}@~oes discretas:
   Binomial             (*binomial)
   Poisson              (*poisson)
   Bernoulli            (*bernoulli)
   Geom@'etrica            (*geometric)
   discreta uniforme     (*discrete_uniform)
   hipergeom@'etrica       (*hypergeometric)
   Binomial Negativa    (*negative_binomial)
@end example

Por exemplo, @code{pdf_student_t(x,n)} @'e a fun@,{c}@~ao densidade de
probabilidade da distribui@,{c}@~ao de Student com @var{n} graus de liberdade,
@code{std_pareto(a,b)} @'e o desvio padr@~ao da distribui@,{c}@~ao de
Pareto com par@^ametros @var{a} e @var{b} e @code{kurtosis_poisson(m)}
@'e o coeficiente de curtose da distribui@,{c}@~ao de Poisson com m@'edia @var{m}.


Para poder usar o pacote @code{distrib} precisa primeiro carreg@'a-lo
escrevendo
@example
(%i1) load(distrib)$
@end example

Para coment@'arios, melhorias ou sugest@~oes, por favor contacte o autor em
@var{'mario AT edu DOT xunta DOT es'}.

@node Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes cont@'{@dotless{i}}nuas, Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes discretas, Introdu@value{cedilha}@~ao a distrib, distrib
@section Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes cont@'{@dotless{i}}nuas

@deffn {Fun@,{c}@~ao} pdf_normal (@var{x},@var{m},@var{s})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade
de uma  vari@'avel aleat@'oria @math{Normal(m,s)}, com @math{s>0}. Para fazer
uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_normal (@var{x},@var{m},@var{s})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma  vari@'avel aleat@'oria @math{Normal(m,s)}, com @math{s>0}. Essa
fun@,{c}@~ao @'e definida em termos de fun@,{c}@~oes de erro internas do
Maxima,
@code{erf}.

@c ===beg===
@c load (distrib)$
@c assume(s>0)$ cdf_normal(x,m,s);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) assume(s>0)$ cdf_normal(x,m,s);
                             x - m
                       erf(---------)
                           sqrt(2) s    1
(%o3)                  -------------- + -
                             2          2
@end example

Veja tamb@'em @code{erf}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_normal (@var{q},@var{m},@var{s})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Normal(m,s)}, com
@math{s>0}; em outras palavras, isso @'e o inverso de @code{cdf_normal}. O argumento
@var{q} deve ser um elemento de @math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_normal (@var{m},@var{s})
Retorna a m@'edia de uma  vari@'avel aleat@'oria @math{Normal(m,s)}, com
@math{s>0}, a saber @var{m}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_normal (@var{m},@var{s})
Retorna a vari@^ancia de uma  vari@'avel aleat@'oria @math{Normal(m,s)}, com
@math{s>0}, a saber @var{s^2}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_normal (@var{m},@var{s})
Retorna o desvio padr@~ao de uma  vari@'avel aleat@'oria @math{Normal(m,s)},
com @math{s>0}, a saber @var{s}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_normal (@var{m},@var{s})
Retorna o coeficiente de assimetria de uma  vari@'avel aleat@'oria @math{Normal(m,s)},
com @math{s>0}, que @'e sempre igual  a 0. Para fazer uso dessa fun@,{c}@~ao,escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_normal (@var{m},@var{s})
Retorna o coeficiente de curtose de uma  vari@'avel aleat@'oria @math{Normal(m,s)},
com @math{s>0}, que @'e sempre igual  a 0. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_normal_algorithm
Valor por omiss@~ao: @code{box_mueller}

Esse @'e o algoritmo seleccionado para simular vari@'aveis aleat@'orias normais.
O algoritmos implementados s@~ao @code{box_mueller} e @code{inverse}:
@itemize @bullet
@item
@code{box_mueller}, Baseado no algoritmo descrito em Knuth, D.E. (1981)
@var{Seminumerical Algorithms. The Art of Computer Programming.} Addison-Wesley.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.
@end itemize

Veja tamb@'em @code{random_normal}.
@end defvr


@deffn {Fun@,{c}@~ao} random_normal (@var{m},@var{s})
@deffnx {Fun@,{c}@~ao} random_normal (@var{m},@var{s},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Normal(m,s)},
com @math{s>0}. Chamando @code{random_normal} com um terceiro argumento
@var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Existem dois algoritmos implementados para essa fun@,{c}@~ao, e o algoritmo
a ser usado pode ser seleccionado fornecendo um certo valor para a vari@'avel global
@code{random_normal_algorithm}, cujo valor padr@~ao @'e
@code{box_mueller}.

Veja tamb@'em @code{random_normal_algorithm}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_student_t (@var{x},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria de Student @math{t(n)}, com @math{n>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_student_t (@var{x},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade de
uma vari@'avel aleat@'oria de Student @math{t(n)}, com @math{n>0}. Essa fun@,{c}@~ao
n@~ao tem uma forma definitiva e @'e calculada numericamente
se a
vari@'avel global
@code{numer} for igual a @code{true},  de outra froma @code{cdf_student_t} retorna uma
express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_student_t(1/2, 7/3);
@c %,numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_student_t(1/2, 7/3);
                                     1  7
(%o2)                  cdf_student_t(-, -)
                                     2  3
(%i3) %,numer;
(%o3)                   .6698450596140417
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_student_t (@var{q},@var{n})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria de Student @math{t(n)},
com @math{n>0}; em outras palavras, @code{quantile_student_t} @'e o inverso de
@code{cdf_student_t}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_student_t (@var{n})
Retorna a m@'edia de uma vari@'avel aleat@'oria de Student @math{t(n)}, com
@math{n>0}, que @'e sempre igual a 0. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_student_t (@var{n})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria de Student @math{t(n)}, com @math{n>2}.

@c ===beg===
@c load (distrib)$
@c assume(n>2)$  var_student_t(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) assume(n>2)$  var_student_t(n);
                                n
(%o3)                         -----
                              n - 2
@end example
@end deffn


@deffn {Fun@,{c}@~ao} std_student_t (@var{n})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria de Student @math{t(n)},
com @math{n>2}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_student_t (@var{n})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria de Student @math{t(n)},
com @math{n>3}, que @'e sempre igual a 0. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_student_t (@var{n})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria de Student @math{t(n)},
com @math{n>4}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_student_t_algorithm
Valor por omiss@~ao: @code{ratio}

Esse @'e o  algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas pseudo-aleat@'orias
de Student. Algor@'{@dotless{i}}tmos implementados s@~ao @code{inverse} e @code{ratio}:
@itemize @bullet
@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.


@item
@code{ratio}, baseado no facto que se @var{Z} for uma vari@'avel aleat@'oria normal @math{N(0,1)} e
@math{S^2} for uma vari@'avel aleat@'oria chi quadrada com @var{n} graus de liberdade,
@math{Chi^2(n)}, ent@~ao
@ifhtml
@example
                           Z
                 X = -------------
                     /   2  \ 1/2
                     |  S   |
                     | ---  |
                     \  n   /
@end example
@end ifhtml
@ifinfo
@example
                           Z
                 X = -------------
                     /   2  \ 1/2
                     |  S   |
                     | ---  |
                     \  n   /
@end example
@end ifinfo
@tex
$$X={{Z}\over{\sqrt{{S^2}\over{n}}}}$$
@end tex
@'e uma vari@'avel aleat@'oria de Student com @var{n} graus de liberdade, @math{t(n)}.
@end itemize

Veja tamb@'em @code{random_student_t}.
@end defvr


@deffn {Fun@,{c}@~ao} random_student_t (@var{n})
@deffnx {Fun@,{c}@~ao} random_student_t (@var{n},@var{m})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria de Student @math{t(n)},
com @math{n>0}. Chamando @code{random_student_t} com um segundo argumento
@var{m}, uma amostra aleat@'oria de tamanho @var{m} ser@'a simulada.

Existem dois algoritmos implementados para essa fun@,{c}@~ao, se pode
seleccionar o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel
global @code{random_student_t_algorithm}, cujo valor padr@~ao @'e @code{ratio}.

Veja tamb@'em @code{random_student_t_algorithm}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_chi2 (@var{x},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria Chi-quadrada @math{Chi^2(n)}, com @math{n>0}.

A  vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)},
portanto quando Maxima n@~ao tiver informa@,{c}@~ao para pegar o resultado, uma
forma nomial baseada na fun@,{c}@~ao de densidade densidade de probabilidade da
fun@,{c}@~ao  gama @'e
retornada.

@c ===beg===
@c load (distrib)$
@c pdf_chi2(x,n);
@c assume(x>0, n>0)$  pdf_chi2(x,n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_chi2(x,n);
                                    n
(%o2)                  pdf_gamma(x, -, 2)
                                    2
(%i3) assume(x>0, n>0)$  pdf_chi2(x,n);
                         n/2 - 1   - x/2
                        x        %e
(%o4)                   ----------------
                          n/2       n
                         2    gamma(-)
                                    2
@end example
@end deffn


@deffn {Fun@,{c}@~ao} cdf_chi2 (@var{x},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria Chi-quadrada @math{Chi^2(n)}, com @math{n>0}.

Essa fun@,{c}@~ao n@~ao possui uma forma fechada e @'e calculada numericamante
se a vari@'avel global @code{numer} for igual a @code{true},  de outra forma essa
fun@,{c}@~ao retorna uma express@~ao nominal baseada na 
distribui@,{c}@~ao gama, uma vez
que a vari@'avel aleat@'oria @math{Chi^2(n)}
@'e equivalente a    @'e equivalente a @math{Gamma(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c cdf_chi2(3,4);
@c cdf_chi2(3,4),numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_chi2(3,4);
(%o2)                  cdf_gamma(3, 2, 2)
(%i3) cdf_chi2(3,4),numer;
(%o3)                   .4421745996289249
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_chi2 (@var{q},@var{n})
Retorna o @var{q}-quantilede uma vari@'avel aleat@'oria Chi-quadrada @math{Chi^2(n)},
com @math{n>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_chi2}. O argumento @var{q} deve ser um elemento
de
@math{[0,1]}.

This fun@,{c}@~ao n@~ao possui uma forma fechada e @'e calculada numericamante se
a vari@'avel global @code{numer} for igual a @code{true},  de outra forma essa
fun@,{c}@~ao retorna uma express@~ao nominal baseada no quantil da fun@,{c}@~ao
gama, uma vez que a vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)}.

@c ===beg===
@c load (distrib)$
@c quantile_chi2(0.99,9);
@c quantile_chi2(0.99,n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_chi2(0.99,9);
(%o2)                   21.66599433346194
(%i3) quantile_chi2(0.99,n);
                                        n
(%o3)              quantile_gamma(0.99, -, 2)
                                        2
@end example
@end deffn


@deffn {Fun@,{c}@~ao} mean_chi2 (@var{n})
Retorna a m@'edia de uma vari@'avel aleat@'oria Chi-quadrada @math{Chi^2(n)}, com @math{n>0}.

A vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na m@'edia da fun@,{c}@~ao gama @'e
retornada.

@c ===beg===
@c load (distrib)$
@c mean_chi2(n);
@c assume(n>0)$ mean_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_chi2(n);
                                   n
(%o2)                   mean_gamma(-, 2)
                                   2
(%i3) assume(n>0)$ mean_chi2(n);
(%o4)                           n
@end example
@end deffn


@deffn {Fun@,{c}@~ao} var_chi2 (@var{n})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria Chi-quadrada @math{Chi^2(n)}, com @math{n>0}.

A vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na vari@^ancia da fun@,{c}@~ao gama
@'e retornada.

@c ===beg===
@c load (distrib)$
@c var_chi2(n);
@c assume(n>0)$ var_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_chi2(n);
                                   n
(%o2)                    var_gamma(-, 2)
                                   2
(%i3) assume(n>0)$ var_chi2(n);
(%o4)                          2 n
@end example
@end deffn


@deffn {Fun@,{c}@~ao} std_chi2 (@var{n})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria Chi-quadrada
@math{Chi^2(n)}, com @math{n>0}.

A vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no desvio padr@~ao da fun@,{c}@~ao
gama @'e retornada.

@c ===beg===
@c load (distrib)$
@c std_chi2(n);
@c assume(n>0)$ std_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_chi2(n);
                                   n
(%o2)                    std_gamma(-, 2)
                                   2
(%i3) assume(n>0)$ std_chi2(n);
(%o4)                    sqrt(2) sqrt(n)
@end example
@end deffn


@deffn {Fun@,{c}@~ao} skewness_chi2 (@var{n})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria Chi-quadrada
@math{Chi^2(n)}, com @math{n>0}.

A vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de assimetria da
fun@,{c}@~ao gama @'e
retornada.

@c ===beg===
@c load (distrib)$
@c skewness_chi2(n);
@c assume(n>0)$ skewness_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_chi2(n);
                                     n
(%o2)                 skewness_gamma(-, 2)
                                     2
(%i3) assume(n>0)$ skewness_chi2(n);
                            2 sqrt(2)
(%o4)                       ---------
                             sqrt(n)
@end example
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_chi2 (@var{n})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria Chi-quadrada
@math{Chi^2(n)}, com @math{n>0}.

A vari@'avel aleat@'oria @math{Chi^2(n)} @'e equivalente a @math{Gamma(n/2,2)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de curtose da fun@,{c}@~ao gama @'e retornada.

@c ===beg===
@c load (distrib)$
@c kurtosis_chi2(n);
@c assume(n>0)$ kurtosis_chi2(n);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_chi2(n);
                                     n
(%o2)                 kurtosis_gamma(-, 2)
                                     2
(%i3) assume(n>0)$ kurtosis_chi2(n);
                               12
(%o4)                          --
                               n
@end example
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_chi2_algorithm
Valor por omiss@~ao: @code{ahrens_cheng}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}stica pseudo-aleat@'orias
Chi-quadradas. Os algoritmos implementados s@~ao @code{ahrens_cheng} e @code{inverse}:
@itemize @bullet

@item
@code{ahrens_cheng}, baseado na simula@,{c}@~ao aleat@'oria de vari@'aveis gama.
Veja @code{random_gamma_algorithm} para mais detalhes.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_chi2}.
@end defvr


@deffn {Fun@,{c}@~ao} random_chi2 (@var{n})
@deffnx {Fun@,{c}@~ao} random_chi2 (@var{n},@var{m})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria Chi-square @math{Chi^2(n)},
com @math{n>0}. Chamando @code{random_chi2} com um segundo argumento @var{m},
uma amostra aleat@'oria de tamanho @var{m} ser@'a simulada.

Existem dois algoritmos implementados para essa fun@,{c}@~ao, se pode seleccionar o
algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global
@code{random_chi2_algorithm}, cujo valor padr@~ao @'e
@code{ahrens_cheng}.

Veja tamb@'em @code{random_chi2_algorithm}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_f (@var{x},@var{m},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria F, @math{F(m,n)}, com @math{m,n>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_f (@var{x},@var{m},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade de
uma vari@'avel aleat@'oria F, @math{F(m,n)}, com @math{m,n>0}. Essa fun@,{c}@~ao
n@~ao possui uma forma definitiva e @'e calculada numericamente se
a
vari@'avel global
@code{numer} for igual a @code{true},  de outra forma retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_f(2,3,9/4);
@c %,numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_f(2,3,9/4);
                                     9
(%o2)                    cdf_f(2, 3, -)
                                     4
(%i3) %,numer;
(%o3)                   0.66756728179008
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_f (@var{q},@var{m},@var{n})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria F, @math{F(m,n)}, com @math{m,n>0};
em outras palavras, essa fun@,{c}@~ao @'e o inverso de @code{cdf_f}. O argumento @var{q} deve ser um elemento de @math{[0,1]}.

Essa fun@,{c}@~ao n@~ao possui uma forma fechada e @'e calculada numericamante se a
vari@'avel global @code{numer} for igual a @code{true},  de outra forma essa fun@,{c}@~ao
retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c quantile_f(2/5,sqrt(3),5);
@c %,numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_f(2/5,sqrt(3),5);
                               2
(%o2)               quantile_f(-, sqrt(3), 5)
                               5
(%i3) %,numer;
(%o3)                   0.518947838573693
@end example
@end deffn


@deffn {Fun@,{c}@~ao} mean_f (@var{m},@var{n})
Retorna a m@'edia de uma vari@'avel aleat@'oria F, @math{F(m,n)}, com @math{m>0, n>2}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_f (@var{m},@var{n})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria F, @math{F(m,n)}, com @math{m>0, n>4}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_f (@var{m},@var{n})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria F, @math{F(m,n)}, com @math{m>0, n>4}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_f (@var{m},@var{n})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria F, @math{F(m,n)},
com @math{m>0, n>6}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_f (@var{m},@var{n})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria F, @math{F(m,n)},
com @math{m>0, n>8}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_f_algorithm
Valor por omiss@~ao: @code{inverse}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas
pseudo-aleat@'orias F. Os algoritmos implementados s@~ao @code{ratio}
e @code{inverse}:
@itemize @bullet

@item
@code{ratio}, baseado no facto de que se @var{X} for uma vari@'avel aleat@'oria
@math{Chi^2(m)} e @math{Y} for uma vari@'avel aleat@'oria @math{Chi^2(n)},
ent@~ao
@ifhtml
@example
                        n X
                    F = ---
                        m Y
@end example
@end ifhtml
@ifinfo
@example
                        n X
                    F = ---
                        m Y
@end example
@end ifinfo
@tex
$$F={{n X}\over{m Y}}$$
@end tex
@'e uma vari@'avel aleat@'oria F com @var{m} e @var{n} graus de liberdade, @math{F(m,n)}.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_f}.
@end defvr


@deffn {Fun@,{c}@~ao} random_f (@var{m},@var{n})
@deffnx {Fun@,{c}@~ao} random_f (@var{m},@var{n},@var{k})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria F, @math{F(m,n)},
com @math{m,n>0}. Chamando @code{random_f} com um terceiro argumento
@var{k}, uma amostra aleat@'oria de tamanho @var{k} ser@'a simulada.

Existem dois algoritmos implementados para essa fun@,{c}@~ao, se pode seleccionar
o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global
@code{random_f_algorithm}, cujo valor padr@~ao @'e @code{inverse}.

Veja tamb@'em @code{random_f_algorithm}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} pdf_exp (@var{x},@var{m})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade
vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a
@math{Weibull(1,1/m)}, embora quando Maxima n@~ao tiver informa@,{c}@~ao
dispon@'{@dotless{i}}vel para pegar o resultado, uma forma nominal baseada na fun@,{c}@~ao
de densidade de probabilidade de Weibull @'eretornada.

@c ===beg===
@c load (distrib)$
@c pdf_exp(x,m);
@c assume(x>0,m>0)$  pdf_exp(x,m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_exp(x,m);
                                        1
(%o2)                 pdf_weibull(x, 1, -)
                                        m
(%i3) assume(x>0,m>0)$  pdf_exp(x,m);
                                - m x
(%o4)                       m %e
@end example
@end deffn


@deffn {Fun@,{c}@~ao} cdf_exp (@var{x},@var{m})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na distribui@,{c}@~ao de
Weibull @'e
retornada.

@c ===beg===
@c load (distrib)$
@c cdf_exp(x,m);
@c assume(x>0,m>0)$  cdf_exp(x,m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_exp(x,m);
                                        1
(%o2)                 cdf_weibull(x, 1, -)
                                        m
(%i3) assume(x>0,m>0)$  cdf_exp(x,m);
                                 - m x
(%o4)                      1 - %e
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_exp (@var{q},@var{m})
Retorna o @var{q}-quantil vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0};
em outras palavras, essa fun@,{c}@~ao @'e inversa da fun@,{c}@~ao @code{cdf_exp}.
O argumento @var{q} deve ser um elemento de @math{[0,1]}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no qualtil de Weibull @'e
retornada.

@c ===beg===
@c load (distrib)$
@c quantile_exp(0.56,5);
@c quantile_exp(0.56,m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_exp(0.56,5);
(%o2)                   .1641961104139661
(%i3) quantile_exp(0.56,m);
                                            1
(%o3)             quantile_weibull(0.56, 1, -)
                                            m
@end example
@end deffn


@deffn {Fun@,{c}@~ao} mean_exp (@var{m})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na m@'edia de Weibull @'e
reornada.

@c ===beg===
@c load (distrib)$
@c mean_exp(m);
@c assume(m>0)$  mean_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_exp(m);
                                       1
(%o2)                  mean_weibull(1, -)
                                       m
(%i3) assume(m>0)$  mean_exp(m);
                                1
(%o4)                           -
                                m
@end example
@end deffn


@deffn {Fun@,{c}@~ao} var_exp (@var{m})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na vari@^ancia de Weibull
@'e retornada.

@c ===beg===
@c load (distrib)$
@c var_exp(m);
@c assume(m>0)$  var_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_exp(m);
                                       1
(%o2)                   var_weibull(1, -)
                                       m
(%i3) assume(m>0)$  var_exp(m);
                               1
(%o4)                          --
                                2
                               m
@end example
@end deffn


@deffn {Fun@,{c}@~ao} std_exp (@var{m})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no desvio padr@~ao de
Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c std_exp(m);
@c assume(m>0)$  std_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_exp(m);
                                       1
(%o2)                   std_weibull(1, -)
                                       m
(%i3) assume(m>0)$  std_exp(m);
                                1
(%o4)                           -
                                m
@end example
@end deffn


@deffn {Fun@,{c}@~ao} skewness_exp (@var{m})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de assimetria
de Weibull
@'e retornada.

@c ===beg===
@c load (distrib)$
@c skewness_exp(m);
@c assume(m>0)$  skewness_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_exp(m);
                                         1
(%o2)                skewness_weibull(1, -)
                                         m
(%i3) assume(m>0)$  skewness_exp(m);
(%o4)                           2
@end example
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_exp (@var{m})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Exponential(m)}, com @math{m>0}.

A vari@'avel aleat@'oria @math{Exponential(m)} @'e equivalente a @math{Weibull(1,1/m)}, embora
quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado, uma forma nominal
baseada no coeficiente de curtose de Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c kurtosis_exp(m);
@c assume(m>0)$  kurtosis_exp(m);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_exp(m);
                                         1
(%o2)                kurtosis_weibull(1, -)
                                         m
(%i3) assume(m>0)$  kurtosis_exp(m);
(%o4)                           6
@end example
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_exp_algorithm
Valor por omiss@~ao: @code{inverse}

Esse @'e o algoritmo seleccionado para simular vari@'aveis exponenciais estat@'{@dotless{i}}stica
pseudo-aleat@'orias. Os algoritmos implementados s@~ao @code{inverse},
@code{ahrens_cheng} e @code{ahrens_dieter}
@itemize @bullet

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@item
@code{ahrens_cheng}, baseado no facto de que a vari@'avel aleat@'oria @math{Exp(m)}
@'e equivalente a @math{Gamma(1,1/m)}. Veja @code{random_gamma_algorithm}
para maiores detalhes.

@item
@code{ahrens_dieter}, baseado no algoritmo descrito em Ahrens, J.H. e Dieter, U. (1972)
@var{Computer methods for sampling from the exponential and normal distributions.}
Comm, ACM, 15, Oct.,  873-882.

@end itemize

Veja tamb@'em @code{random_exp}.
@end defvr


@deffn {Fun@,{c}@~ao} random_exp (@var{m})
@deffnx {Fun@,{c}@~ao} random_exp (@var{m},@var{k})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Exponential(m)},
com @math{m>0}. Chamando @code{random_exp} com um segundo argumento
@var{k}, uma amostra aleat@'oria de tamanho @var{k} ser@'a simulada.

Existem tr@^es algoritmos implementados para essa fun@,{c}@~ao, se pode
seleccionar o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global
@code{random_exp_algorithm}, cujo valor padr@~ao @'e @code{inverse}.

Veja tamb@'em @code{random_exp_algorithm}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_lognormal (@var{x},@var{m},@var{s})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Lognormal(m,s)}, com @math{s>0}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_lognormal (@var{x},@var{m},@var{s})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Lognormal(m,s)}, com @math{s>0}. Essa
fun@,{c}@~ao @'e definida em termos de fun@,{c}@~oes @code{erf}de erro
internas do Maxima.

@c ===beg===
@c load (distrib)$
@c assume(x>0, s>0)$  cdf_lognormal(x,m,s);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) assume(x>0, s>0)$  cdf_lognormal(x,m,s);
                           log(x) - m
                       erf(----------)
                           sqrt(2) s     1
(%o3)                  --------------- + -
                              2          2
@end example

Veja tamb@'em @code{erf}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_lognormal (@var{q},@var{m},@var{s})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Lognormal(m,s)},
com @math{s>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_lognormal}. O argumento @var{q} deve ser um elemento de @math{[0,1]}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_lognormal (@var{m},@var{s})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Lognormal(m,s)}, com @math{s>0}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_lognormal (@var{m},@var{s})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Lognormal(m,s)},
com @math{s>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_lognormal (@var{m},@var{s})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Lognormal(m,s)},
com @math{s>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_lognormal (@var{m},@var{s})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Lognormal(m,s)},
com @math{s>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_lognormal (@var{m},@var{s})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Lognormal(m,s)},
com @math{s>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_lognormal (@var{m},@var{s})
@deffnx {Fun@,{c}@~ao} random_lognormal (@var{m},@var{s},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Lognormal(m,s)},
com @math{s>0}. Chamando @code{random_lognormal} com um terceiro argumento
@var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Vari@'aveis Log-normal s@~ao simuladas por meio de vari@'aveis estat@'{@dotless{i}}sticas normais
pseudo-aleat@'orias. Existem dois algoritmos implementados para essa fun@,{c}@~ao, se
pode seleccionar o algoritmo a ser usado fornecendo um certo valor
@`a vari@'avel global
@code{random_normal_algorithm}, cujo valor padr@~ao @'e @code{box_mueller}.

Veja tamb@'em @code{random_normal_algorithm}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_gamma (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Gamma(a,b)}, com @math{a,b>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_gamma (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade de
uma vari@'avel aleat@'oria @math{Gamma(a,b)}, com @math{a,b>0}. 

Essa fun@,{c}@~ao n@~ao possui uma forma fechada e @'e calculada numericamante se
a vari@'avel global @code{numer} for igual a @code{true},  de outra forma essa fun@,{c}@~ao
retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_gamma(3,5,21);
@c %,numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_gamma(3,5,21);
(%o2)                  cdf_gamma(3, 5, 21)
(%i3) %,numer;
(%o3)                 4.402663157135039E-7
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_gamma (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Gamma(a,b)},
com @math{a,b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da
fun@,{c}@~ao @code{cdf_gamma}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_gamma (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Gamma(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_gamma (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Gamma(a,b)}, com
@math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_gamma (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Gamma(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_gamma (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Gamma(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_gamma (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Gamma(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_gamma_algorithm
Valor por omiss@~ao: @code{ahrens_cheng}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}stica gama
pseudo-aleat@'orias. Os algoritmos implementados s@~ao @code{ahrens_cheng}
e @code{inverse}
@itemize @bullet

@item
@code{ahrens_cheng}, essa @'e uma combina@,{c}@~ao de dois processos, dependendo
do valor do par@^ametro @var{a}:

For @math{a>=1}, Cheng, R.C.H. e Feast, G.M. (1979). @var{Some simple gamma variate
generators}. Appl. Stat., 28, 3, 290-295.

For @math{0<a<1}, Ahrens, J.H. e Dieter, U. (1974). @var{Computer methods for sampling
from gamma, beta, poisson and binomial cdf_tributions}. Computing, 12, 223-246.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_gamma}.
@end defvr


@deffn {Fun@,{c}@~ao} random_gamma (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_gamma (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Gamma(a,b)},
com @math{a,b>0}. Chamando @code{random_gamma} com um terceiro argumento
@var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Existem dois algoritmos implementados para essa fun@,{c}@~ao, se pode seleccionar
o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global @code{random_gamma_algorithm}, cujo valor padr@~ao @'e
@code{ahrens_cheng}.

Veja tamb@'em @code{random_gamma_algorithm}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_beta (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma vari@'avel
aleat@'oria @math{Beta(a,b)}, com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} cdf_beta (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade de
uma vari@'avel aleat@'oria @math{Beta(a,b)}, com @math{a,b>0}. 

Essa fun@,{c}@~ao n@~ao possui uma forma fechada e @'e calculada numericamante se a
vari@'avel global @code{numer} for igual a @code{true},  de outra forma essa fun@,{c}@~ao
retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_beta(1/3,15,2);
@c %,numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_beta(1/3,15,2);
                                 1
(%o2)                   cdf_beta(-, 15, 2)
                                 3
(%i3) %,numer;
(%o3)                 7.666089131388224E-7
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_beta (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Beta(a,b)}, com
@math{a,b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_beta}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para
fazer uso dessa
fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_beta (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Beta(a,b)}, com @math{a,b>0}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_beta (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Beta(a,b)}, com @math{a,b>0}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_beta (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Beta(a,b)}, com @math{a,b>0}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_beta (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Beta(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_beta (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Beta(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_beta_algorithm
Valor por omiss@~ao: @code{cheng}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas beta
pseudo-aleat@'orias. Os algoritmos implementados s@~ao @code{cheng},
@code{inverse} e @code{ratio}
@itemize @bullet

@item
@code{cheng}, esse @'e o algoritmo definido em Cheng, R.C.H.  (1978). 
@var{Generating Beta Variates with Nonintegral Shape Parameters}.
Communications of the ACM, 21:317-322

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@item
@code{ratio}, baseado no facto de que se @var{X} for uma vari@'avel aleat@'oria
@math{Gamma(a,1)} e @var{Y} for @math{Gamma(b,1)}, ent@~ao a raz@~ao @math{X/(X+Y)}
est@'a distribu@'{@dotless{i}}da como @math{Beta(a,b)}.

@end itemize

Veja tamb@'em @code{random_beta}.
@end defvr


@deffn {Fun@,{c}@~ao} random_beta (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_beta (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Beta(a,b)},
com @math{a,b>0}. Chamando @code{random_beta} com um terceiro argumento @var{n},
uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Existem tr@^es algoritmos implementados para essa fun@,{c}@~ao, se pode seleccionar
o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global
@code{random_beta_algorithm}, cujo valor padr@~ao @'e @code{cheng}.

Veja tamb@'em @code{random_beta_algorithm}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} pdf_continuous_uniform (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade
de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)}, com @math{a<b}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_continuous_uniform (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)}, com @math{a<b}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_continuous_uniform (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_continuous_uniform}. O argumento @var{q} deve
ser um elemento
de @math{[0,1]}.
Para
fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_continuous_uniform (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_continuous_uniform (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_continuous_uniform (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_continuous_uniform (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_continuous_uniform (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_continuous_uniform (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_continuous_uniform (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Continuous Uniform(a,b)},
com @math{a<b}. Chamando @code{random_continuous_uniform} com um terceiro
argumento @var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Essa @'e uma aplica@,{c}@~ao directa da fun@,{c}@~ao @code{random} interna do Maxima.

Veja tamb@'em @code{random}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_logistic (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de
uma vari@'avel aleat@'oria @math{Logistic(a,b)} , com @math{b>0}. Para fazer
uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_logistic (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Logistic(a,b)}, com @math{b>0}. Para fazer
uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_logistic (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Logistic(a,b)} , com
@math{b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_logistic}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}.
Para fazer uso
dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} meanlog (@var{a},@var{b})
Retorna a m@'edia de uma @math{Logistic(a,b)} vari@'avel aleat@'oria , com @math{b>0}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_logistic (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Logistic(a,b)} , com @math{b>0}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_logistic (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Logistic(a,b)} ,
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_logistic (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Logistic(a,b)} ,
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_logistic (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Logistic(a,b)} ,
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_logistic (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_logistic (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Logistic(a,b)}, com @math{b>0}.
Chamando @code{random_logistic} com um terceiro argumento @var{n}, uma
amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_pareto (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Pareto(a,b)}, com @math{a,b>0}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_pareto (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Pareto(a,b)}, com @math{a,b>0}. Para fazer
uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_pareto (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantile de uma vari@'avel aleat@'oria @math{Pareto(a,b)},
com @math{a,b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da
fun@,{c}@~ao @code{cdf_pareto}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para
fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_pareto (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Pareto(a,b)}, com
@math{a>1,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_pareto (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Pareto(a,b)},
com @math{a>2,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_pareto (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Pareto(a,b)},
com @math{a>2,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} skewness_pareto (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria
@math{Pareto(a,b)}, com @math{a>3,b>0}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_pareto (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Pareto(a,b)},
com @math{a>4,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_pareto (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_pareto (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Pareto(a,b)}, com
@math{a>0,b>0}. Chamando @code{random_pareto} com um terceiro
argumento @var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_weibull (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Weibull(a,b)}, com @math{a,b>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_weibull (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade de uma
vari@'avel aleat@'oria @math{Weibull(a,b)}, com @math{a,b>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_weibull (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Weibull(a,b)},
com @math{a,b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da
fun@,{c}@~ao @code{cdf_weibull}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_weibull (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Weibull(a,b)}, com
@math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_weibull (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Weibull(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn

@deffn {Fun@,{c}@~ao} std_weibull (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Weibull(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} skewness_weibull (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Weibull(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_weibull (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Weibull(a,b)},
com @math{a,b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_weibull (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_weibull (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Weibull(a,b)},
com @math{a,b>0}. Chamando @code{random_weibull} com um terceiro argumento
@var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} pdf_rayleigh (@var{x},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na fun@,{c}@~ao densidade de probabilidade de Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c pdf_rayleigh(x,b);
@c assume(x>0,b>0)$ pdf_rayleigh(x,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_rayleigh(x,b);
                                        1
(%o2)                 pdf_weibull(x, 2, -)
                                        b
(%i3) assume(x>0,b>0)$ pdf_rayleigh(x,b);
                                    2  2
                           2     - b  x
(%o4)                   2 b  x %e
@end example
@end deffn


@deffn {Fun@,{c}@~ao} cdf_rayleigh (@var{x},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o
resultado, uma forma nominal baseada na distribui@,{c}@~ao de Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c cdf_rayleigh(x,b);
@c assume(x>0,b>0)$ cdf_rayleigh(x,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_rayleigh(x,b);
                                        1
(%o2)                 cdf_weibull(x, 2, -)
                                        b
(%i3) assume(x>0,b>0)$ cdf_rayleigh(x,b);
                                   2  2
                                - b  x
(%o4)                     1 - %e
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_rayleigh (@var{q},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com
@math{b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_rayleigh}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no quantil de Weibull @'e
retornada.

@c ===beg===
@c load (distrib)$
@c quantile_rayleigh(0.99,b);
@c assume(x>0,b>0)$ quantile_rayleigh(0.99,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) quantile_rayleigh(0.99,b);
                                            1
(%o2)             quantile_weibull(0.99, 2, -)
                                            b
(%i3) assume(x>0,b>0)$ quantile_rayleigh(0.99,b);
                        2.145966026289347
(%o4)                   -----------------
                                b
@end example
@end deffn


@deffn {Fun@,{c}@~ao} mean_rayleigh (@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na meia de Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c mean_rayleigh(b);
@c assume(b>0)$ mean_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_rayleigh(b);
                                       1
(%o2)                  mean_weibull(2, -)
                                       b
(%i3) assume(b>0)$ mean_rayleigh(b);
                            sqrt(%pi)
(%o4)                       ---------
                               2 b
@end example
@end deffn


@deffn {Fun@,{c}@~ao} var_rayleigh (@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na vari@^ancia de Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c var_rayleigh(b);
@c assume(b>0)$ var_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_rayleigh(b);
                                       1
(%o2)                   var_weibull(2, -)
                                       b
(%i3) assume(b>0)$ var_rayleigh(b);
                                 %pi
                             1 - ---
                                  4
(%o4)                        -------
                                2
                               b
@end example
@end deffn


@deffn {Fun@,{c}@~ao} std_rayleigh (@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na Weibull desvio padr@~ao @'e retornada.

@c ===beg===
@c load (distrib)$
@c std_rayleigh(b);
@c assume(b>0)$ std_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_rayleigh(b);
                                       1
(%o2)                   std_weibull(2, -)
                                       b
(%i3) assume(b>0)$ std_rayleigh(b);
                                   %pi
                          sqrt(1 - ---)
                                    4
(%o4)                     -------------
                                b
@end example
@end deffn


@deffn {Fun@,{c}@~ao} skewness_rayleigh (@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de assimetria de Weibull  @'e retornada.

@c ===beg===
@c load (distrib)$
@c skewness_rayleigh(b);
@c assume(b>0)$ skewness_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_rayleigh(b);
                                         1
(%o2)                skewness_weibull(2, -)
                                         b
(%i3) assume(b>0)$ skewness_rayleigh(b);
                         3/2
                      %pi      3 sqrt(%pi)
                      ------ - -----------
                        4           4
(%o4)                 --------------------
                               %pi 3/2
                          (1 - ---)
                                4
@end example
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_rayleigh (@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.

A vari@'avel aleat@'oria @math{Rayleigh(b)} @'e equivalente a @math{Weibull(2,1/b)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de curtose de Weibull @'e retornada.

@c ===beg===
@c load (distrib)$
@c kurtosis_rayleigh(b);
@c assume(b>0)$ kurtosis_rayleigh(b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_rayleigh(b);
                                         1
(%o2)                kurtosis_weibull(2, -)
                                         b
(%i3) assume(b>0)$ kurtosis_rayleigh(b);
                                  2
                             3 %pi
                         2 - ------
                               16
(%o4)                    ---------- - 3
                              %pi 2
                         (1 - ---)
                               4
@end example
@end deffn


@deffn {Fun@,{c}@~ao} random_rayleigh (@var{b})
@deffnx {Fun@,{c}@~ao} random_rayleigh (@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Rayleigh(b)}, com @math{b>0}.
Chamando @code{random_rayleigh} com um segundo argumento @var{n}, uma amostra aleat@'oria
de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} pdf_laplace (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Laplace(a,b)}, com @math{b>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_laplace (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Laplace(a,b)}, com @math{b>0}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_laplace (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Laplace(a,b)}, com
@math{b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_laplace}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_laplace (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Laplace(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_laplace (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Laplace(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_laplace (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Laplace(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_laplace (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Laplace(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_laplace (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Laplace(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_laplace (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_laplace (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Laplace(a,b)}, com @math{b>0}.
Chamando @code{random_laplace} com um terceiro argumento @var{n}, uma
amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} pdf_cauchy (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma
vari@'avel aleat@'oria @math{Cauchy(a,b)}, com @math{b>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_cauchy (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Cauchy(a,b)}, com @math{b>0}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_cauchy (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Cauchy(a,b)}, com
@math{b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_cauchy}. O argumento @var{q} deve ser um elemento de @math{[0,1]}. Para
fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_cauchy (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_cauchy (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo aleat@'oria @math{Cauchy(a,b)}, com @math{b>0}.
Chamando @code{random_cauchy} com um terceiro argumento @var{n}, uma amostra
aleat@'oria de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn



@deffn {Fun@,{c}@~ao} pdf_gumbel (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao densidade de probabilidade de uma vari@'avel
aleat@'oria @math{Gumbel(a,b)}, com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_gumbel (@var{x},@var{a},@var{b})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade de uma
vari@'avel aleat@'oria @math{Gumbel(a,b)}, com @math{b>0}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_gumbel (@var{q},@var{a},@var{b})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Gumbel(a,b)}, com
@math{b>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao
@code{cdf_gumbel}. O argumento @var{q} deve ser um elemento de @math{[0,1]}. Para
fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_gumbel (@var{a},@var{b})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Gumbel(a,b)}, com @math{b>0}.

@c ===beg===
@c load (distrib)$
@c assume(b>0)$  mean_gumbel(a,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) assume(b>0)$  mean_gumbel(a,b);
(%o3)                     %gamma b + a
@end example
onde o s@'{@dotless{i}}mbolol @code{%gamma} representa a constante de Euler-Mascheroni.
Veja tamb@'em @code{%gamma}.
@end deffn


@deffn {Fun@,{c}@~ao} var_gumbel (@var{a},@var{b})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Gumbel(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_gumbel (@var{a},@var{b})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Gumbel(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_gumbel (@var{a},@var{b})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Gumbel(a,b)}, com @math{b>0}.

@c ===beg===
@c load (distrib)$
@c assume(b>0)$ skewness_gumbel(a,b);
@c numer:true$ skewness_gumbel(a,b);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) assume(b>0)$ skewness_gumbel(a,b);
                       12 sqrt(6) zeta(3)
(%o3)                  ------------------
                                 3
                              %pi
(%i4) numer:true$ skewness_gumbel(a,b);
(%o5)                   1.139547099404649
@end example
onde @code{zeta} representa a fun@,{c}@~ao zeta de Riemann.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_gumbel (@var{a},@var{b})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Gumbel(a,b)},
com @math{b>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_gumbel (@var{a},@var{b})
@deffnx {Fun@,{c}@~ao} random_gumbel (@var{a},@var{b},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Gumbel(a,b)},
com @math{b>0}. Chamando @code{random_gumbel} com um terceiro argumento @var{n},
uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Somente o m@'etodo inverso gen@'erico est@'a implementado. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@node Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes discretas,  , Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes cont@'{@dotless{i}}nuas, distrib
@section Defini@value{cedilha}@~oes para distribui@value{cedilha}@~oes discretas


@deffn {Fun@,{c}@~ao} pdf_binomial (@var{x},@var{n},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma @math{Binomial(n,p)}
vari@'avel aleat@'oria, com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_binomial (@var{x},@var{n},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma @math{Binomial(n,p)} vari@'avel aleat@'oria, com @math{0<p<1} e @math{n} um inteiro positivo.

@code{cdf_binomial} @'e calculada num@'ericamente se a vari@'avel global @code{numer}
for igual a @code{true},  de outra forma @code{cdf_binomial} retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_binomial(5,7,1/6);
@c cdf_binomial(5,7,1/6), numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_binomial(5,7,1/6);
                                         1
(%o2)                 cdf_binomial(5, 7, -)
                                         6
(%i3) cdf_binomial(5,7,1/6), numer;
(%o3)                   .9998713991769548
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_binomial (@var{q},@var{n},@var{p})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo; em outras palavras, essa
fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao @code{cdf_binomial}. O argumento
@var{q} deve ser um elemento de @math{[0,1]}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_binomial (@var{n},@var{p})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Binomial(n,p)}, com
@math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_binomial (@var{n},@var{p})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_binomial (@var{n},@var{p})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_binomial (@var{n},@var{p})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria 
@math{Binomial(n,p)}, com @math{0<p<1} e @math{n} um inteiro positivo. Para
fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_binomial (@var{n},@var{p})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_binomial_algorithm
Valor por omiss@~ao: @code{kachit}

Esse @'e o algoritmo seleccionado para simular rvari@'aveis estat@'{@dotless{i}}sticas pseudo-aleat@'orias
binomiais. Os algoritmos implementados s@~ao @code{kachit}, @code{bernoulli} e @code{inverse}:
@itemize @bullet

@item
@code{kachit}, baseado no algoritmo descrito em Kachitvichyanukul, V. and
Schmeiser, B.W. (1988) @var{Binomial Random Variate Generation}. Communications of the ACM, 31, Feb., 216.

@item
@code{bernoulli}, baseado na simula@,{c}@~ao testes de Bernoulli.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_binomial}.
@end defvr


@deffn {Fun@,{c}@~ao} random_binomial (@var{n},@var{p})
@deffnx {Fun@,{c}@~ao} random_binomial (@var{n},@var{p},@var{m})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Chamando @code{random_binomial}
com um terceiro argumento @var{m}, uma amostra aleat@'oria de tamanho @var{m} ser@'a
simulada.

Existem tr@^es algoritmos implementado para essa fun@,{c}@~ao, se pode
seleccionar o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel
global @code{random_binomial_algorithm}, cujo valor padr@~ao @'e @code{kachit}.

Veja tamb@'em @code{random_binomial_algorithm}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_poisson (@var{x},@var{m})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma
vari@'avel aleat@'oria @math{Poisson(m)}, com @math{m>0}. Para fazer
uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_poisson (@var{x},@var{m})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de
probabilidade de uma vari@'avel aleat@'oria @math{Poisson(m)}, com @math{m>0}.

Essa fun@,{c}@~ao @'e calculada num@'ericamente se a vari@'avel global
@code{numer} for igual a @code{true},  de outra forma essa fun@,{c}@~ao
retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_poisson(3,5);
@c cdf_poisson(3,5), numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_poisson(3,5);
(%o2)                   cdf_poisson(3, 5)
(%i3) cdf_poisson(3,5), numer;
(%o3)                   .2650259152973617
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_poisson (@var{q},@var{m})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Poisson(m)},
com @math{m>0}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da
fun@,{c}@~ao @code{cdf_poisson}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_poisson (@var{m})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Poisson(m)},
com @math{m>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_poisson (@var{m})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Poisson(m)},
com  @math{m>0}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_poisson (@var{m})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Poisson(m)},
com @math{m>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_poisson (@var{m})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Poisson(m)},
com @math{m>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_poisson (@var{m})
Retorna o coeficiente de curtose de uma Poisson vari@'avel aleat@'oria  @math{Poi(m)},
com @math{m>0}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_poisson_algorithm
Valor por omiss@~ao: @code{ahrens_dieter}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas
pseudo-aleat@'orias de Poisson.Os algoritmos implementados s@~ao @code{ahrens_dieter} e @code{inverse}:
@itemize @bullet

@item
@code{ahrens_dieter}, baseado no algoritmo descrito em Ahrens, J.H. and
Dieter, U. (1982) @var{Computer Generation of Poisson Deviates From Modified Normal Distributions}.
ACM Trans. Math. Software, 8, 2, June,163-179.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_poisson}.
@end defvr


@deffn {Fun@,{c}@~ao} random_poisson (@var{m})
@deffnx {Fun@,{c}@~ao} random_poisson (@var{m},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Poisson(m)}, com @math{m>0}.
Chamando @code{random_poisson} com um segundo argumento @var{n}, uma amostra
aleat@'oria de tamanho @var{n} ser@'a simulada.

Existem dois algoritmos implementado para essa fun@,{c}@~ao, se pode seleccionar o
algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global 
@code{random_poisson_algorithm}, cujo valor padr@~ao @'e
@code{ahrens_dieter}.

Veja tamb@'em @code{random_poisson_algorithm}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_bernoulli (@var{x},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma
vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.

A vari@'avel aleat@'oria @math{Bernoulli(p)} @'e equivalente a @math{Binomial(1,p)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o
resultado, uma forma nominal baseada na fun@,{c}@~ao binomial de
probabilidade @'e retornada.

@c ===beg===
@c load (distrib)$
@c pdf_bernoulli(1,p);
@c assume(0<p,p<1)$ pdf_bernoulli(1,p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) pdf_bernoulli(1,p);
(%o2)                 pdf_binomial(1, 1, p)
(%i3) assume(0<p,p<1)$ pdf_bernoulli(1,p);
(%o4)                           p
@end example
@end deffn


@deffn {Fun@,{c}@~ao} cdf_bernoulli (@var{x},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de
probabilidade de uma vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.
Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_bernoulli (@var{q},@var{p})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Bernoulli(p)},
com @math{0<p<1}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da
fun@,{c}@~ao @code{cdf_bernoulli}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_bernoulli (@var{p})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.

A vari@'avel aleat@'oria @math{Bernoulli(p)} @'e equivalente a @math{Binomial(1,p)}, embora
quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado, uma forma
nominal baseada na m@'edia binomial @'e retornada.

@c ===beg===
@c load (distrib)$
@c mean_bernoulli(p);
@c assume(0<p,p<1)$ mean_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) mean_bernoulli(p);
(%o2)                  mean_binomial(1, p)
(%i3) assume(0<p,p<1)$ mean_bernoulli(p);
(%o4)                           p
@end example
@end deffn


@deffn {Fun@,{c}@~ao} var_bernoulli (@var{p})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.

A vari@'avel aleat@'oria @math{Bernoulli(p)} @'e equivalente a @math{Binomial(1,p)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada na vari@^ancia binomial @'e retornada.

@c ===beg===
@c load (distrib)$
@c var_bernoulli(p);
@c assume(0<p,p<1)$ var_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) var_bernoulli(p);
(%o2)                  var_binomial(1, p)
(%i3) assume(0<p,p<1)$ var_bernoulli(p);
(%o4)                       (1 - p) p
@end example
@end deffn


@deffn {Fun@,{c}@~ao} std_bernoulli (@var{p})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.

A vari@'avel aleat@'oria @math{Bernoulli(p)} @'e equivalente a
@math{Binomial(1,p)}, embora quando Maxima n@~ao tiver informa@,{c}@~ao
dispon@'{@dotless{i}}vel para pegar o resultado, uma forma nominal baseada no desvio
padr@~ao binomial @'e retornada.

@c ===beg===
@c load (distrib)$
@c std_bernoulli(p);
@c assume(0<p,p<1)$ std_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) std_bernoulli(p);
(%o2)                  std_binomial(1, p)
(%i3) assume(0<p,p<1)$ std_bernoulli(p);
(%o4)                  sqrt(1 - p) sqrt(p)
@end example
@end deffn


@deffn {Fun@,{c}@~ao} skewness_bernoulli (@var{p})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.

A vari@'avel aleat@'oria @math{Bernoulli(p)} @'e equivalente a @math{Binomial(1,p)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de assimetria binomial @'e retornada.

@c ===beg===
@c load (distrib)$
@c skewness_bernoulli(p);
@c assume(0<p,p<1)$ skewness_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) skewness_bernoulli(p);
(%o2)                skewness_binomial(1, p)
(%i3) assume(0<p,p<1)$ skewness_bernoulli(p);
                             1 - 2 p
(%o4)                  -------------------
                       sqrt(1 - p) sqrt(p)
@end example
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_bernoulli (@var{p})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Bernoulli(p)}, com @math{0<p<1}.

A vari@'avel aleat@'oria @math{Bernoulli(p)} @'e equivalente a @math{Binomial(1,p)},
embora quando Maxima n@~ao tiver informa@,{c}@~ao dispon@'{@dotless{i}}vel para pegar o resultado,
uma forma nominal baseada no coeficiente de curtose binomial @'e retornada.

@c ===beg===
@c load (distrib)$
@c kurtosis_bernoulli(p);
@c assume(0<p,p<1)$ kurtosis_bernoulli(p);
@c ===end===
@example
(%i1) load (distrib)$
(%i2) kurtosis_bernoulli(p);
(%o2)                kurtosis_binomial(1, p)
(%i3) assume(0<p,p<1)$ kurtosis_bernoulli(p);
                         1 - 6 (1 - p) p
(%o4)                    ---------------
                            (1 - p) p
@end example
@end deffn


@deffn {Fun@,{c}@~ao} random_bernoulli (@var{p})
@deffnx {Fun@,{c}@~ao} random_bernoulli (@var{p},@var{n})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Bernoulli(p)},
com @math{0<p<1}. Chamando @code{random_bernoulli} com um segundo
argumento @var{n}, uma amostra aleat@'oria de tamanho @var{n} ser@'a simulada.

Essa @'e uma aplica@,{c}@~ao directa da fun@,{c}@~ao @code{random} built-in fun@,{c}@~ao do Maxima.

Veja tamb@'em @code{random}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_geometric (@var{x},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma vari@'avel
aleat@'oria @math{Geometric(p)}, com @math{0<p<1}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_geometric (@var{x},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Geometric(p)}, com @math{0<p<1}. Para fazer
uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_geometric (@var{q},@var{p})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Geometric(p)},
com @math{0<p<1}; em outras palavras, essa fun@,{c}@~ao @'e a inversa da
fun@,{c}@~ao @code{cdf_geometric}. O argumento @var{q} deve ser um elemento de
@math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_geometric (@var{p})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Geometric(p)},
com @math{0<p<1}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_geometric (@var{p})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Geometric(p)},
com @math{0<p<1}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_geometric (@var{p})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Geometric(p)},
com @math{0<p<1}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_geometric (@var{p})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Geometric(p)},
com @math{0<p<1}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_geometric (@var{p})
Retorna o coeficiente de curtose de uma geometric vari@'avel aleat@'oria  @math{Geo(p)},
com @math{0<p<1}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_geometric_algorithm
Valor por omiss@~ao: @code{bernoulli}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas pseudo-aleat@'orias
geom@'etricas. Algor@'{@dotless{i}}tmos implementados s@~ao @code{bernoulli}, @code{devroye} e @code{inverse}:
@itemize @bullet

@item
@code{bernoulli}, baseado na simula@,{c}@~ao de testes de Bernoulli.

@item
@code{devroye}, baseado no algoritmo descrito em Devroye, L. (1986)
@var{Non-Uniform Random Variate Generation.} Springer Verlag, p. 480.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_geometric}.
@end defvr


@deffn {Fun@,{c}@~ao} random_geometric (@var{p})
@deffnx {Fun@,{c}@~ao} random_geometric (@var{p},@var{n})
Retorna um @math{Geometric(p)} vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria, com @math{0<p<1}.
Chamando @code{random_geometric} com um segundo argumento @var{n}, uma amostra aleat@'oria
de tamanho @var{n} ser@'a simulada.

Existem tr@^es algoritmos implementados para essa fun@,{c}@~ao, se
pode seleccionar o algoritmo a ser usado fornecendo um certo valor @`a
vari@'avel global @code{random_geometric_algorithm}, cujo valor padr@~ao @'e
@code{bernoulli}.

Veja tamb@'em @code{random_geometric_algorithm}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_discrete_uniform (@var{x},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma vari@'avel
aleat@'oria @math{Discrete Uniform(n)}, com @math{n} a strictly positive integer. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_discrete_uniform (@var{x},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)}, com @math{n} inteiro
estritamente positivo. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_discrete_uniform (@var{q},@var{n})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo; em outras palavras, essa
fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao @code{cdf_discrete_uniform}. O
argumento @var{q} deve ser um elemento de @math{[0,1]}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_discrete_uniform (@var{n})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_discrete_uniform (@var{n})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_discrete_uniform (@var{n})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_discrete_uniform (@var{n})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_discrete_uniform (@var{n})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} random_discrete_uniform (@var{n})
@deffnx {Fun@,{c}@~ao} random_discrete_uniform (@var{n},@var{m})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Discrete Uniform(n)},
com @math{n} um inteiro estritamente positivo. Chamando @code{random_discrete_uniform}
com um segundo argumento @var{m}, uma amostra aleat@'oria de
tamanho @var{m} ser@'a simulada.

Isso @'e uma aplica@,{c}@~ao directa da fun@,{c}@~ao @code{random} built-in fun@,{c}@~ao do Maxima.

Veja tamb@'em @code{random}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_hypergeometric (@var{x},@var{n1},@var{n2},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma
vari@'avel aleat@'oria @math{Hypergeometric(n1,n2,n)}, com @var{n1}, @var{n2}
e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_hypergeometric (@var{x},@var{n1},@var{n2},@var{n})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de
probabilidade de uma vari@'avel aleat@'oria @math{Hypergeometric(n1,n2,n)},
com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}. Para
fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} quantile_hypergeometric (@var{q},@var{n1},@var{n2},@var{n})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Hypergeometric(n1,n2,n)},
com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}; em outras
palavras, essa fun@,{c}@~ao @'e a inversa da fun@,{c}@~ao @code{cdf_hypergeometric}.
O argumento @var{q} deve ser um elemento de @math{[0,1]}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_hypergeometric (@var{n1},@var{n2},@var{n})
Retorna a m@'edia de uma vari@'avel aleat@'oria discreta univorme
@math{Hyp(n1,n2,n)}, com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos
e @math{n<=n1+n2}. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_hypergeometric (@var{n1},@var{n2},@var{n})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria hipergeom@'etrica
@math{Hyp(n1,n2,n)}, com @var{n1}, @var{n2} e @var{n} inteiros
n@~ao negativos e @math{n<=n1+n2}. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_hypergeometric (@var{n1},@var{n2},@var{n})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Hypergeometric(n1,n2,n)},
com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente
@code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_hypergeometric (@var{n1},@var{n2},@var{n})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Hypergeometric(n1,n2,n)},
com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_hypergeometric (@var{n1},@var{n2},@var{n})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Hypergeometric(n1,n2,n)},
com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn

@defvr {Vari@'avel de op@,{c}@~ao} random_hypergeometric_algorithm
Valor por omiss@~ao: @code{kachit}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas pseudo
aleat@'orias hipergeom@'etricas.Os algoritmos implementados s@~ao @code{kachit} e @code{inverse}:
@itemize @bullet

@item
@code{kachit}, baseado no algoritmo descrito em Kachitvichyanukul, V., Schmeiser, B.W. (1985)
@var{Computer generation of hypergeometric vari@'aveis estat@'{@dotless{i}}stica pseudo-aleat@'orias.} Journal
of Statistical Computation and Simulation 22, 127-145.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_hypergeometric}.
@end defvr


@deffn {Fun@,{c}@~ao} random_hypergeometric (@var{n1},@var{n2},@var{n})
@deffnx {Fun@,{c}@~ao} random_hypergeometric (@var{n1},@var{n2},@var{n},@var{m})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Hypergeometric(n1,n2,n)},
com @var{n1}, @var{n2} e @var{n} inteiros n@~ao negativos e @math{n<=n1+n2}. Chamando
@code{random_hypergeometric} com um quarto argumento @var{m}, uma amostra
aleat@'oria de tamanho @var{m} ser@'a simulada.

Existem dois algoritmos implementados para essa fun@,{c}@~ao, se pode seleccionar o
algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global @code{random_hypergeometric_algorithm},
cujo valor padr@~ao @'e @code{kachit}.

Veja tamb@'em @code{random_hypergeometric_algorithm}. Para fazer uso
dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} pdf_negative_binomial (@var{x},@var{n},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao de probabilidade de uma vari@'avel
aleat@'oria @math{Negative Binomial(n,p)}, com @math{0<p<1} e @math{n} um inteiro
positivo. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} cdf_negative_binomial (@var{x},@var{n},@var{p})
Retorna o valor em @var{x} da fun@,{c}@~ao distribui@,{c}@~ao de probabilidade
de uma @math{Negative Binomial(n,p)} vari@'avel aleat@'oria, com @math{0<p<1} e @math{n} um inteiro positivo.

Essa fun@,{c}@~ao @'e calculada num@'ericamente se a vari@'avel global @code{numer} for
igual a @code{true},  de outra forma essa fun@,{c}@~ao retorna uma express@~ao nominal.

@c ===beg===
@c load (distrib)$
@c cdf_negative_binomial(3,4,1/8);
@c cdf_negative_binomial(3,4,1/8), numer;
@c ===end===
@example
(%i1) load (distrib)$
(%i2) cdf_negative_binomial(3,4,1/8);
                                             1
(%o2)            cdf_negative_binomial(3, 4, -)
                                             8
(%i3) cdf_negative_binomial(3,4,1/8), numer;
(%o3)                  .006238937377929698
@end example
@end deffn


@deffn {Fun@,{c}@~ao} quantile_negative_binomial (@var{q},@var{n},@var{p})
Retorna o @var{q}-quantil de uma vari@'avel aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo; em outras palavras, essa fun@,{c}@~ao
@'e a inversa da fun@,{c}@~ao @code{cdf_negative_binomial}. O argumento @var{q} deve ser
um elemento de @math{[0,1]}. Para fazer uso dessa fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} mean_negative_binomial (@var{n},@var{p})
Retorna a m@'edia de uma vari@'avel aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} var_negative_binomial (@var{n},@var{p})
Retorna a vari@^ancia de uma vari@'avel aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} std_negative_binomial (@var{n},@var{p})
Retorna o desvio padr@~ao de uma vari@'avel aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao,
escreva primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} skewness_negative_binomial (@var{n},@var{p})
Retorna o coeficiente de assimetria de uma vari@'avel aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@deffn {Fun@,{c}@~ao} kurtosis_negative_binomial (@var{n},@var{p})
Retorna o coeficiente de curtose de uma vari@'avel aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Para fazer uso dessa fun@,{c}@~ao, escreva
primeiramente @code{load(distrib)}.
@end deffn


@defvr {Vari@'avel de op@,{c}@~ao} random_negative_binomial_algorithm
Valor por omiss@~ao: @code{bernoulli}

Esse @'e o algoritmo seleccionado para simular vari@'aveis estat@'{@dotless{i}}sticas pseuso-aleat@'orias
binomiais negativas. Os algoritmos implementados s@~ao @code{devroye}, @code{bernoulli}
e @code{inverse}:
@itemize @bullet

@item
@code{devroye}, baseado no algoritmo descrito em Devroye, L. (1986)
@var{Non-Uniform Random Variate Generation}. Springer Verlag, p. 480.

@item
@code{bernoulli}, baseado na simula@,{c}@~ao de testes de Bernoulli.

@item
@code{inverse}, baseado no m@'etodo inverso gen@'erico.

@end itemize

Veja tamb@'em @code{random_negative_binomial}.
@end defvr


@deffn {Fun@,{c}@~ao} random_negative_binomial (@var{n},@var{p})
@deffnx {Fun@,{c}@~ao} random_negative_binomial (@var{n},@var{p},@var{m})
Retorna uma vari@'avel estat@'{@dotless{i}}stica pseudo-aleat@'oria @math{Negative Binomial(n,p)},
com @math{0<p<1} e @math{n} um inteiro positivo. Chamando @code{random_negative_binomial}
com um terceiro argumento @var{m}, uma amostra aleat@'oria de tamanho
@var{m} ser@'a simulada.

Existem tr@^es algoritmos implementados para essa fun@,{c}@~ao, se pode
seleccionar o algoritmo a ser usado fornecendo um certo valor @`a vari@'avel global
@code{random_negative_binomial_algorithm}, cujo valor padr@~ao @'e @code{bernoulli}.

Veja tamb@'em @code{random_negative_binomial_algorithm}. Para fazer uso dessa
fun@,{c}@~ao, escreva primeiramente @code{load(distrib)}.
@end deffn
