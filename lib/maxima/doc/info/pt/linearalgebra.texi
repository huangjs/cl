@c /linearalgebra.texi/1.11/Fri Jan  5 17:01:04 2007//
@menu
* Introdu@value{cedilha}@~ao a linearalgebra::
* Defini@value{cedilha}@~oes para linearalgebra::
@end menu

@node Introdu@value{cedilha}@~ao a linearalgebra, Defini@value{cedilha}@~oes para linearalgebra, linearalgebra, linearalgebra
@section Introdu@value{cedilha}@~ao a linearalgebra

@code{linearalgebra} @'e uma colec@,{c}@~ao de fun@value{cedilha}@~oes para @'algebra linear.

Exemplo:

@c ===beg===
@c load (linearalgebra)$
@c M : matrix ([1, 2], [1, 2]);
@c nullspace (M);
@c columnspace (M);
@c ptriangularize (M - z*ident(2), z);
@c M : matrix ([1, 2, 3], [4, 5, 6], [7, 8, 9]) - z*ident(3);
@c MM : ptriangularize (M, z);
@c algebraic : true;
@c tellrat (MM [3, 3]);
@c MM : ratsimp (MM);
@c nullspace (MM);
@c M : matrix ([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]);
@c columnspace (M);
@c apply ('orthogonal_complement, args (nullspace (transpose (M))));
@c ===end===
@example
(%i1) load (linearalgebra);
Warning - you are redefining the Maxima function require_list
Warning - you are redefining the Maxima function matrix_size
Warning - you are redefining the Maxima function rank
(%o1) /usr/local/share/maxima/5.9.2/share/linearalgebra/linearalgebra.mac
(%i2) M : matrix ([1, 2], [1, 2]);
                            [ 1  2 ]
(%o2)                       [      ]
                            [ 1  2 ]
(%i3) nullspace (M);
                               [  1  ]
                               [     ]
(%o3)                     span([   1 ])
                               [ - - ]
                               [   2 ]
(%i4) columnspace (M);
                                [ 1 ]
(%o4)                      span([   ])
                                [ 1 ]
(%i5) ptriangularize (M - z*ident(2), z);
                         [ 1   2 - z   ]
(%o5)                    [             ]
                         [           2 ]
                         [ 0  3 z - z  ]
(%i6) M : matrix ([1, 2, 3], [4, 5, 6], [7, 8, 9]) - z*ident(3);
                     [ 1 - z    2      3   ]
                     [                     ]
(%o6)                [   4    5 - z    6   ]
                     [                     ]
                     [   7      8    9 - z ]
(%i7) MM : ptriangularize (M, z);
              [ 4  5 - z            6            ]
              [                                  ]
              [                2                 ]
              [     66        z    102 z   132   ]
              [ 0   --      - -- + ----- + ---   ]
(%o7)         [     49        7     49     49    ]
              [                                  ]
              [               3        2         ]
              [           49 z    245 z    147 z ]
              [ 0    0    ----- - ------ - ----- ]
              [            264      88      44   ]
(%i8) algebraic : true;
(%o8)                         true
(%i9) tellrat (MM [3, 3]);
                         3       2
(%o9)                  [z  - 15 z  - 18 z]
(%i10) MM : ratsimp (MM);
               [ 4  5 - z           6           ]
               [                                ]
               [                2               ]
(%o10)         [     66      7 z  - 102 z - 132 ]
               [ 0   --    - ------------------ ]
               [     49              49         ]
               [                                ]
               [ 0    0             0           ]
(%i11) nullspace (MM);
                        [        1         ]
                        [                  ]
                        [   2              ]
                        [  z  - 14 z - 16  ]
                        [  --------------  ]
(%o11)             span([        8         ])
                        [                  ]
                        [    2             ]
                        [   z  - 18 z - 12 ]
                        [ - -------------- ]
                        [         12       ]
(%i12) M : matrix ([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]);
                       [ 1   2   3   4  ]
                       [                ]
                       [ 5   6   7   8  ]
(%o12)                 [                ]
                       [ 9   10  11  12 ]
                       [                ]
                       [ 13  14  15  16 ]
(%i13) columnspace (M);
                           [ 1  ]  [ 2  ]
                           [    ]  [    ]
                           [ 5  ]  [ 6  ]
(%o13)                span([    ], [    ])
                           [ 9  ]  [ 10 ]
                           [    ]  [    ]
                           [ 13 ]  [ 14 ]
(%i14) apply ('orthogonal_complement, args (nullspace (transpose (M))));
                           [ 0 ]  [  1  ]
                           [   ]  [     ]
                           [ 1 ]  [  0  ]
(%o14)                span([   ], [     ])
                           [ 2 ]  [ - 1 ]
                           [   ]  [     ]
                           [ 3 ]  [ - 2 ]
@end example

@node Defini@value{cedilha}@~oes para linearalgebra,  , Introdu@value{cedilha}@~ao a linearalgebra, linearalgebra
@section Defini@value{cedilha}@~oes para linearalgebra

@deffn {Fun@value{cedilha}@~ao} addmatrices (@var{f}, @var{M_1}, ..., @var{M_n})

@c REWORD -- THE RESULT IS NOT GENERALLY THE SUM OF M_1, ..., M_N
Usando a fun@value{cedilha}@~ao @var{f} como a fun@value{cedilha}@~ao de adi@value{cedilha}@~ao, retorne a adi@value{cedilha}@~ao das
matrizes @var{M_1}, ..., @var{M_n}. A fun@value{cedilha}@~ao @var{f} deve aceitar qualquer n@'umero de
argumentos (uma fun@value{cedilha}@~ao en@'aria do Maxima).

Exemplos:

@c ===beg===
@c m1 : matrix([1,2],[3,4])$
@c m2 : matrix([7,8],[9,10])$
@c addmatrices('max,m1,m2);
@c addmatrices('max,m1,m2,5*m1);
@c ===end===
@example
(%i1) m1 : matrix([1,2],[3,4])$
(%i2) m2 : matrix([7,8],[9,10])$
(%i3) addmatrices('max,m1,m2);
(%o3) matrix([7,8],[9,10])
(%i4) addmatrices('max,m1,m2,5*m1);
(%o4) matrix([7,10],[15,20])
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} blockmatrixp (@var{M})

Retorna @code{true} se e somente se @var{M} for uma matriz e toda entrada de
@var{M} tamb@'em for uma matriz.

@end deffn

@deffn {Fun@value{cedilha}@~ao} columnop (@var{M}, @var{i}, @var{j}, @var{theta})

Se @var{M} for uma matriz, retorna a matriz que resulta de fazer a  
opera@value{cedilha}@~ao de coluna @code{C_i <- C_i - @var{theta} * C_j}. Se @var{M} n@~ao tiver uma linha
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} columnswap (@var{M}, @var{i}, @var{j})

Se @var{M} for uma matriz, troca as colunas @var{i} e @var{j}.  Se @var{M} n@~ao tiver uma coluna
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} columnspace (@var{M})

Se @var{M} for uma matriz, retorna @code{span (v_1, ..., v_n)}, onde o conjunto
@code{@{v_1, ..., v_n@}} @'e uma base para o espa@value{cedilha}o coluna de @var{M}.  A diferen@value{cedilha}a entre o maior elemento e o menor elemento do 
conjunto vazio @'e @code{@{0@}}. Dessa forma, quando o espa@value{cedilha}o coluna tiver somente 
um membro, retorna @code{span ()}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} copy (@var{e})

Retorna uma c@'opia da express@~ao @var{e} do Maxima. Embora @var{e} possa ser qualquer
express@~ao do Maxima, Afun@value{cedilha}@~ao @code{copy} @'e mais @'util quando @var{e} for ou
uma lista ou uma matriz; considere:
@c ===beg===
load (linearalgebra);
m : [1,[2,3]]$
mm : m$
mm[2][1] : x$
m;
mm;
@c ===end===
@example 
(%i1) load("linearalgebra")$
(%i2) m : [1,[2,3]]$
(%i3) mm : m$
(%i4) mm[2][1] : x$
(%i5) m;
(%o5) [1,[x,3]]
(%i6) mm;
(%o6) [1,[x,3]]
@end example
Vamos tentar a mesma experi@^encia, mas dessa vez tomemos @var{mm} como sendo uma c@'opia de @var{m}
@c ===beg===
m : [1,[2,3]]$
mm : copy(m)$
mm[2][1] : x$
m;
mm;
@c ===end===
@example
(%i7) m : [1,[2,3]]$
(%i8) mm : copy(m)$
(%i9) mm[2][1] : x$
(%i10) m;
(%o10) [1,[2,3]]
(%i11) mm;
(%o11) [1,[x,3]]
@end example
Dessa vez, a atribui@value{cedilha}@~ao a @var{mm} n@~ao muda o valor de @var{m}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} cholesky (@var{M})
@deffnx {Fun@value{cedilha}@~ao} cholesky (@var{M}, @var{corpo})

Retorna factoriza@value{cedilha}@~ao de Cholesky da matriz hermitiana (or autoadjunta) 
@var{M}. O valor padr@~ao para o segundo argumento @'e @code{generalring}. Para uma descri@value{cedilha}@~ao dos
poss@'{@dotless{i}}veis valores para @var{corpo}, veja @code{lu_factor}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} ctranspose (@var{M})

Retorna a matriz transposta conjugada complexa da matriz @var{M}. A fun@value{cedilha}@~ao
@code{ctranspose} usa @code{matrix_element_transpose} para transpor cada elemento da matriz.

@end deffn

@deffn {Fun@value{cedilha}@~ao} diag_matrix (@var{d_1}, @var{d_2},...,@var{d_n})

Retorna uma matriz diagonal matriz com entradas de diagonal @var{d_1}, @var{d_2},...,@var{d_n}.
Quando as entradas de diagonal forem matrizes, as entradas zero da matriz retornada
ser@~ao todas matrizes de tamanho apropriado; por exemplo:
@c ===beg===
@c load(linearalgebra)$
@c diag_matrix(diag_matrix(1,2),diag_matrix(3,4));
@c diag_matrix(p,q);
@c ===end===
@example
(%i1) load(linearalgebra)$

(%i2) diag_matrix(diag_matrix(1,2),diag_matrix(3,4));

                            [ [ 1  0 ]  [ 0  0 ] ]
                            [ [      ]  [      ] ]
                            [ [ 0  2 ]  [ 0  0 ] ]
(%o2)                       [                    ]
                            [ [ 0  0 ]  [ 3  0 ] ]
                            [ [      ]  [      ] ]
                            [ [ 0  0 ]  [ 0  4 ] ]
(%i3) diag_matrix(p,q);

                                   [ p  0 ]
(%o3)                              [      ]
                                   [ 0  q ]
@end example
@end deffn

@deffn {Fun@value{cedilha}@~ao} dotproduct (@var{u}, @var{v})

Retorna o produto do ponto (produto escalar) dos vectores @var{u} e @var{v}.  Isso @'e o mesmo
que @code{conjugate (transpose (@var{u})) . @var{v}}.  Os argumentos @var{u} e @var{v} devem ser
vectores coluna.

@end deffn

@deffn {Fun@value{cedilha}@~ao} eigens_by_jacobi (@var{A})
@deffnx {Fun@value{cedilha}@~ao} eigens_by_jacobi (@var{A}, @var{tipo_corpo})

Calculam os autovalores e autovectores de @var{A} pelo m@'etodo de rota@value{cedilha}@~oes de Jacobi.
@var{A} deve ser uma matriz sim@'etrica (mas essa matriz sim@'etrica precisa n@~ao ser nem definida positiva e nem semidefinida positiva).
@var{tipo_corpo} indica o corpo computacional, pode ser ou @code{floatfield} ou @code{bigfloatfield}.
Se @var{tipo_corpo} n@~ao for especificado, o padr@~ao @'e @code{floatfield}.

Os elementos de @var{A} devem ser n@'umeros ou express@~oes que avaliam para n@'umeros
via @code{float} ou @code{bfloat} (dependendo do valor de @var{tipo_corpo}).

Exemplos:
@c ===beg===
@c load (linearalgebra);
@c S : matrix ([1/sqrt(2), 1/sqrt(2)], [- 1/sqrt(2), 1/sqrt(2)]);
@c L : matrix ([sqrt(3), 0], [0, sqrt(5)]);
@c M : S . L . transpose (S);
@c eigens_by_jacobi (M);
@c float ([[sqrt(3), sqrt(5)], S]);
@c eigens_by_jacobi (M, bigfloatfield);
@c ===end===

@example
(%i1) load (linearalgebra);
(%o1) /home/robert/tmp/maxima-head/maxima/share/linearalgebra/li\
nearalgebra.mac
(%i2) S : matrix ([1/sqrt(2), 1/sqrt(2)], [- 1/sqrt(2), 1/sqrt(2)]);
                     [     1         1    ]
                     [  -------   ------- ]
                     [  sqrt(2)   sqrt(2) ]
(%o2)                [                    ]
                     [      1        1    ]
                     [ - -------  ------- ]
                     [   sqrt(2)  sqrt(2) ]
(%i3) L : matrix ([sqrt(3), 0], [0, sqrt(5)]);
                      [ sqrt(3)     0    ]
(%o3)                 [                  ]
                      [    0     sqrt(5) ]
(%i4) M : S . L . transpose (S);
            [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
            [ ------- + -------  ------- - ------- ]
            [    2         2        2         2    ]
(%o4)       [                                      ]
            [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
            [ ------- - -------  ------- + ------- ]
            [    2         2        2         2    ]
(%i5) eigens_by_jacobi (M);
The largest percent change was 0.1454972243679
The largest percent change was 0.0
number of sweeps: 2
number of rotations: 1
(%o5) [[1.732050807568877, 2.23606797749979], 
                        [  0.70710678118655   0.70710678118655 ]
                        [                                      ]]
                        [ - 0.70710678118655  0.70710678118655 ]
(%i6) float ([[sqrt(3), sqrt(5)], S]);
(%o6) [[1.732050807568877, 2.23606797749979], 
                        [  0.70710678118655   0.70710678118655 ]
                        [                                      ]]
                        [ - 0.70710678118655  0.70710678118655 ]
(%i7) eigens_by_jacobi (M, bigfloatfield);
The largest percent change was 1.454972243679028b-1
The largest percent change was 0.0b0
number of sweeps: 2
number of rotations: 1
(%o7) [[1.732050807568877b0, 2.23606797749979b0], 
                [  7.071067811865475b-1   7.071067811865475b-1 ]
                [                                              ]]
                [ - 7.071067811865475b-1  7.071067811865475b-1 ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} get_lu_factors (@var{x}) 

Quando @code{@var{x} = lu_factor (@var{A})}, ent@~ao @code{get_lu_factors} retorna uma lista da 
forma @code{[P, L, U]}, onde @var{P} @'e uma matriz de permuta@value{cedilha}@~ao, @var{L} @'e triangular baixa com
a diagonal preenchida com a unidade, e @var{U} @'e triangular alta, e @code{@var{A} = @var{P} @var{L} @var{U}}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} hankel (@var{col})
@deffnx {Fun@value{cedilha}@~ao} hankel (@var{col}, @var{lin})

Retorna uma matriz de Hankel @var{H}. A primeira coluna de @var{H} @'e @var{col};
excepto para a primeira entrada, a @'ultima linha de @var{H} @'e @var{lin}. O
valor padr@~ao para @var{lin} @'e o vector nulo com o mesmo comprimento que @var{col}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} hessian (@var{f},@var{vars})

Retorna a matriz hessiana de @var{f} com rela@value{cedilha}@~ao @`as vari@'aveis na lista
@var{vars}.  As entradas @var{i},@var{j} da matriz hessiana s@~ao
@var{diff(f vars[i],1,vars[j],1)}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} hilbert_matrix (@var{n})

Retorna the @var{n} by @var{n} matriz de Hilbert. Quando @var{n} n@~ao for um inteiro
positivo, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} identfor (@var{M})
@deffnx {Fun@value{cedilha}@~ao} identfor (@var{M}, @var{corpo})

Retorna uma matriz identidade que tem o mesmo tamanho que a matriz
@var{M}.  As entradas de diagonal da matriz identidade s@~ao a 
identidade multiplicativa do corpo @var{corpo}; o padr@~ao para
@var{corpo} @'e @var{generalring}.

O primeiro argumento @var{M} pode ser uma  matriz quadrada ou um 
n@~ao matriz. Quando @var{M} for uma matriz, cada entrada de @var{M} pode ser uma
matriz quadrada -- dessa forma @var{M} pode ser uma matriz de bloco do Maxima. A
matriz pode ser de bloco para qualquer (finita) quantidade de n@'{@dotless{i}}veis.

Veja tamb@'em @code{zerofor}

@end deffn

@deffn {Fun@value{cedilha}@~ao} invert_by_lu (@var{M}, @var{(rng generalring)})

Inverte a matriz @var{M} atrav@'es de factoriza@value{cedilha}@~ao linear alta (LU).  A factoriza@value{cedilha}@~ao LU
@'e conclu@'{@dotless{i}}da usando o anel @var{rng}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} kronecker_product (@var{A}, @var{B})

Retorna o produto de Kronecker das matrizes @var{A} e @var{B}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} listp (@var{e}, @var{p})
@deffnx {Fun@value{cedilha}@~ao} listp (@var{e})

Recebendo um argumento opcional @var{p}, retorna @code{true} se @var{e} for 
uma lista do Maxima e @var{p} avalia para @code{true} para elemento da lista.
Quando @code{listp} n@~ao recebe o argumento opcional, retorna @code{true} se @var{e} for 
uma lista do Maxima.  em todos os outros casos, retorna @code{false}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} locate_matrix_entry (@var{M}, @var{r_1}, @var{c_1}, @var{r_2}, @var{c_2}, @var{f}, @var{rel})

O primeiro argumento deve ser uma matriz; os argumentos que v@~ao de
@var{r_1} at@'e @var{c_2} determinam um sub-matriz de @var{M} que consiste de
linhas que v@~ao de @var{r_1} at@'e @var{r_2} e colunas que v@~ao de @var{c_1} at@'e @var{c_2}. 

Encontra uma entrada na sub-matriz @var{M} que satisfaz alguma propriedade. 
Existem tr@^es casos:

(1) @code{@var{rel} = 'bool} e @var{f} um predicado: 

Examina a sub-matriz da esquerda para a direita e de cima para baixo,
e retorna o @'{@dotless{i}}ndice da primeira entrada que satisfizer o 
predicado @var{f}. Se nenhuma entrada da matriz satisfizer o predicado @var{f}, retorna @code{false}.

(2) @code{@var{rel} = 'max} e @var{f} avaliar para um n@'umero real:

Examina a sub-matriz procurando por uma entrada que maximize @var{f}.
Retorna retorna o @'{@dotless{i}}ndice da entrada maximizada.

(3) @code{@var{rel} = 'min} e @var{f} avaliar para um n@'umero real:

Examina a sub-matriz procurando por uma entrada que minimize @var{f}. 
Retorna o @'{@dotless{i}}ndice de uma entrada minimizada.

@end deffn

@deffn {Fun@value{cedilha}@~ao} lu_backsub (@var{M}, @var{b})

Quando @code{@var{M} = lu_factor (@var{A}, @var{corpo})},
ent@~ao @code{lu_backsub (@var{M}, @var{b})} resolve o sistema
linear @code{@var{A} @var{x} = @var{b}}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} lu_factor (@var{M}, @var{corpo})

Retorna uma lista da forma @code{[@var{LU}, @var{perm}, @var{corpo}]}, 
ou da forma @code{[@var{LU}, @var{perm}, @var{cmp}, @var{baixo-cnd} @var{alto-cnd}]}, onde

  (1) A matriz @var{LU} cont@'ea factoriza@value{cedilha}@~ao de @var{M} na forma enpacotada. Forma
      empacotada significa tr@^es coisas: Primeiro, as linhas de @var{LU} s@~ao permutadas confirme a 
      lista @var{perm}.  Se, por exemplo, @var{perm} for a lista list @code{[3,2,1]}, a primeira linha actual 
      da factoriza@value{cedilha}@~ao @var{LU} ser@'a a terceira linha da matriz @var{LU}. Segundo,
      o factor triangular baixo de m @'e a parte triangular baixa de @var{LU} com as
      entradas de diagonal todas substitu@'{@dotless{i}}das pela unidade. Terceiro, o factor triangular alto de 
      @var{M} @'e a parte triangular alta de @var{LU}.  

  (2) Quando o corpo for ou @code{floatfield} ou @code{complexfield},
      os n@'umeros @var{baixo-cnd} e @var{alto-cnd} ser@~ao associados baixo e alto para o 
      n@'umero condicional de norma infinita de @var{M}.  Para todos os corpos (fields), o n@'umero condicional de norma infinita 
      n@~ao pode ser estimado; para tais corpos, @code{lu_factor} retorna uma lista com dois itens.
      Ambos o baixo e o alto associado  podem diferir de seus verdadeiros valores de 
      factores arbitr@'ariamente grandes. (Veja tamb@'em @code{mat_cond}.)
   
  O argumento @var{M} deve ser a matriz quadrada.

  O argumento opcional @var{cmp} deve ser um s@'{@dotless{i}}mbolo que determine um anel ou corpo. Os corpos e an@'eis 
  predefinidos s@~ao:

    (a) @code{generalring} -- o anel de express@~oes do Maxima,
    (b) @code{floatfield} --  o corpo dos n@'umeros em ponto flutuante do tipo de precis@~ao dupla,
    (c) @code{complexfield} --  o corpo dos n@'umeros complexos em ponto flutuante do 
        tipo de precis@~ao dupla,
    (d) @code{crering}  -- o anel das express@~oes racionais can@'onicas (CRE) do Maxima,
    (e) @code{rationalfield} -- o corpo dos n@'umeros racionais,
    (f) @code{runningerror} -- rastro de todos os erros de arredondamento de n@'umeros em ponto flutuante,
     (g) @code{noncommutingring} -- o anel de express@~oes do Maxima onde multiplica@value{cedilha}@~ao for o
        operador ponto n@~ao comutativo.       

Quando o corpo for @code{floatfield}, @code{complexfield}, ou
@code{runningerror}, o algoritmo usa pivotagem parcial; para todos
os outros corpos, linhas s@~ao comutadas somente quando necess@'ario para evitar um piv@^o
nulo.

A adi@value{cedilha}@~ao aritm@'etica em ponto flutuante n@~ao @'e associativa, ent@~ao o significado
de 'corpo' difere da defini@value{cedilha}@~ao matem@'atica.

Um membro do corpo @code{runningerror} @'e uma lista do M@'axima de dois membros
da forma @code{[x,n]},onde @var{x} @'e um n@'umero em onto flutuante e
@code{n} @'e um inteiro. A diferen@value{cedilha}a relativa entre o valor de
'verdadeiro' de @code{x} e @code{x} @'e aproximadamente associado pelo @'epsilon da
m@'aquina vezes @code{n}. O erro de execu@value{cedilha}@~ao associado arrasta alguns termos
da ordem do quadrado do @'epsilon da m@'aquina.

N@~ao existe interface de utilizador definida um novo anel. Um utilizador que estiver
familiazrizado com o Lisp Comum est@'a apto para definir um novo corpo.  Para fazer
isso, um utilizador deve definir fun@value{cedilha}@~oes para as opera@value{cedilha}@~oes aritm@'eticas e
fun@value{cedilha}@~oes para convers@~ao para a representa@value{cedilha}@~ao de corpo do M@'axima e
vice-versa. Adicionalmente, para corpos ordenados (onde a pivotagem parcial ser@'a
usada), um udu@'ario deve definir fun@value{cedilha}@~oes para m@'odulo e para
comparar membros do corpo.  Ap@'os isso tudo que resta @'e definir uma
estrutura de Lisp Comum @code{mring}.  O ficheiro @code{mring} tem muitos
exemplos.
 
Para calcular a factoriza@value{cedilha}@~ao, a primeira tarefa @'e converter cada entrada de
matriz para um elemento do corpo indicado. Quando a cnvers@~ao n@~ao for
poss@'{@dotless{i}}vel, a factoriza@value{cedilha}@~ao encerra com uma mensagem de erro. Elementos do
corpo n@~ao precisam ser express@~oes do Maxima.  Elementos do
@code{complexfield}, por exemplo, s@~ao n@'umeros complexos do Lisp Comum. Dessa forma
ap@'os calcular a factoriza@value{cedilha}@~ao, como entradas da matriz devem ser
convertidas para express@~oes do Maxima.

Veja tamb@'em  @code{get_lu_factors}.

Exemplos:
@c ===beg===
@c load (linearalgebra);
@c w[i,j] := random (1.0) + %i * random (1.0);
@c showtime : true$
@c M : genmatrix (w, 100, 100)$
@c lu_factor (M, complexfield)$
@c lu_factor (M, generalring)$
@c showtime : false$
@c M : matrix ([1 - z, 3], [3, 8 - z]);
@c lu_factor (M, generalring);
@c get_lu_factors (%);
@c %[1] . %[2] . %[3];
@c ===end===
@example
(%i1) load (linearalgebra);
Warning - you are redefining the Maxima function require_list
Warning - you are redefining the Maxima function matrix_size
Warning - you are redefining the Maxima function rank
(%o1) /usr/local/share/maxima/5.9.2/share/linearalgebra/linearalgebra.mac
(%i2) w[i,j] := random (1.0) + %i * random (1.0);
(%o2)          w     := random(1.) + %i random(1.)
                i, j
(%i3) showtime : true$
Evaluation took 0.00 seconds (0.00 elapsed)
(%i4) M : genmatrix (w, 100, 100)$
Evaluation took 7.40 seconds (8.23 elapsed)
(%i5) lu_factor (M, complexfield)$
Evaluation took 28.71 seconds (35.00 elapsed)
(%i6) lu_factor (M, generalring)$
Evaluation took 109.24 seconds (152.10 elapsed)
(%i7) showtime : false$

(%i8) M : matrix ([1 - z, 3], [3, 8 - z]); 
                        [ 1 - z    3   ]
(%o8)                   [              ]
                        [   3    8 - z ]
(%i9) lu_factor (M, generalring);
               [ 1 - z         3        ]
               [                        ]
(%o9)         [[   3            9       ], [1, 2]]
               [ -----  - z - ----- + 8 ]
               [ 1 - z        1 - z     ]
(%i10) get_lu_factors (%);
                  [   1    0 ]  [ 1 - z         3        ]
        [ 1  0 ]  [          ]  [                        ]
(%o10) [[      ], [   3      ], [                9       ]]
        [ 0  1 ]  [ -----  1 ]  [   0    - z - ----- + 8 ]
                  [ 1 - z    ]  [              1 - z     ]
(%i11) %[1] . %[2] . %[3];
                        [ 1 - z    3   ]
(%o11)                  [              ]
                        [   3    8 - z ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} mat_cond (@var{M}, 1)
@deffnx {Fun@value{cedilha}@~ao} mat_cond (@var{M}, inf)

Retorna o n@'umero condiciona da norma de ordem @var{p} da matriz
@var{m}. Os valores permitidos para @var{p} s@~ao 1 e @var{inf}.  Essa
fun@value{cedilha}@~ao utiliza a factoriza@value{cedilha}@~ao linear alta para inverter a matriz @var{m}. Dessa forma
o tempode execu@value{cedilha}@~ao para @code{mat_cond} @'e proporcional ao cubo do
tamanho da matriz; @code{lu_factor} determina as associa@value{cedilha}@~aoes baixa e alta
para o n@'umero de condi@value{cedilha}@~ao de norma infinita em tempo proporcional ao
quadrado do tamanho da matriz.

@end deffn

@deffn {Fun@value{cedilha}@~ao} mat_norm (@var{M}, 1)
@deffnx {Fun@value{cedilha}@~ao} mat_norm (@var{M}, inf)
@deffnx {Fun@value{cedilha}@~ao} mat_norm (@var{M}, frobenius)

Retorna a matriz de norma @var{p} da matriz @var{M}.  Os valores permitidos para @var{p} s@~ao
1, @code{inf}, e @code{frobenius} (a norma da matriz de Frobenius). A matriz @var{M} pode ser
uma matriz n@~ao de bloco.

@end deffn

@deffn {Fun@value{cedilha}@~ao} matrixp (@var{e}, @var{p})
@deffnx {Fun@value{cedilha}@~ao} matrixp (@var{e})

Fornecendo um argumento opcional @var{p}, @code{matrixp} retorna @code{true} se @var{e} for
uma matriz e @var{p} avaliar para @code{true} para todo elemento da matriz.
Quando a @code{matrixp} n@~ao for fornecido umargumento opcional, retorna @code{true} 
se @code{e} for uma matriz.  em todos os outros casos, retorna @code{false}.

Veja tamb@'em @code{blockmatrixp}

@end deffn

@deffn {Fun@value{cedilha}@~ao} matrix_size (@var{M})

Retorna uma lista com dois elementos que fornecem o n@'umero de linhas e colunas, respectivamente
da matriz @var{M}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} mat_fullunblocker (@var{M})

Se @var{M} for uma matriz de bloco, expande todos os blocos da matriz em todos os n@'{@dotless{i}}veis. Se @var{M} for uma matriz,
retorna @var{M}; de outra forma, emite uma mensagem de erro. 

@c precisa de exemplo aqui

@end deffn

@deffn {Fun@value{cedilha}@~ao} mat_trace (@var{M})

Retorna o tra@value{cedilha}o da matriz @var{M}. Se @var{M} n@~ao for uma matriz, retorna uma
forma substantiva. Quando @var{M} for uma matriz de bloco, @code{mat_trace(M)} retorna
o mesmo valor retornado por @code{mat_trace(mat_unblocker(m))}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} mat_unblocker (@var{M})

Se @var{M} for uma matriz de bloco, @code{mat_unbloker} desfaz o bloco de @var{M} um n@'{@dotless{i}}vel. Se @var{M} for uma matriz, 
@code{mat_unblocker (M)} retorna @var{M}; de outra forma, emite uma mensagem de erro.

Dessa forma se cada entrada de @var{M} for matriz, @code{mat_unblocker (M)} retorna uma 
matriz "desblocada", mas se cada entrada de @var{M} for uma matriz de bloco, @code{mat_unblocker (M)} 
retorna uma matriz de bloco com um n@'{@dotless{i}}vel de bloco a menos.

Se usar matrizes de bloco, muito provavelmente ir@'a querer escolher @code{matrix_element_mult} para 
@code{"."} e @code{matrix_element_transpose} para @code{'transpose}. Veja tamb@'em @code{mat_fullunblocker}.

Exemplo:

@c ===beg===
@c load (linearalgebra);
@c A : matrix ([1, 2], [3, 4]);
@c B : matrix ([7, 8], [9, 10]);
@c matrix ([A, B]);
@c mat_unblocker (%);
@c ===end===
@example
(%i1) load (linearalgebra);
Warning - you are redefining the Maxima function require_list
Warning - you are redefining the Maxima function matrix_size
Warning - you are redefining the Maxima function rank
(%o1) /usr/local/share/maxima/5.9.2/share/linearalgebra/linearalgebra.mac
(%i2) A : matrix ([1, 2], [3, 4]);
                            [ 1  2 ]
(%o2)                       [      ]
                            [ 3  4 ]
(%i3) B : matrix ([7, 8], [9, 10]);
                            [ 7  8  ]
(%o3)                       [       ]
                            [ 9  10 ]
(%i4) matrix ([A, B]);
                     [ [ 1  2 ]  [ 7  8  ] ]
(%o4)                [ [      ]  [       ] ]
                     [ [ 3  4 ]  [ 9  10 ] ]
(%i5) mat_unblocker (%);
                         [ 1  2  7  8  ]
(%o5)                    [             ]
                         [ 3  4  9  10 ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} nonnegintegerp (@var{n})

Retorna @code{true} se e somente se @code{@var{n} >= 0} e @var{n} for um inteiro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} nullspace (@var{M})

Se @var{M} for uma matriz, retorna @code{span (v_1, ..., v_n)}, onde o conjunto @code{@{v_1, ..., v_n@}}
@'e uma base para o espa@value{cedilha}o nulo de @var{M}.  A diferen@value{cedilha}a entre o maior elemento e o menor elemento do conjunto vazio @'e  @code{@{0@}}.  
Dessa forma, quando o espa@value{cedilha}o nulo tiver somente um membro, retorna @code{span ()}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} nullity (@var{M})

Se @var{M} for uma matriz, retorna a dimens@~ao do espa@value{cedilha}o nulo de @var{M}.

@end deffn

@deffn {Fun@value{cedilha}@~ao} orthogonal_complement (@var{v_1}, ..., @var{v_n})

Retorna @code{span (u_1, ..., u_m)}, onde o conjunto @code{@{u_1, ..., u_m@}} @'e uma 
base para o complemento ortogonal do conjunto @code{(v_1, ..., v_n)}.

Cada vector no intervalo de @var{v_1} at@'e @var{v_n} deve ser um vector coluna.

@end deffn

@deffn {Fun@value{cedilha}@~ao} polynomialp (@var{p}, @var{L}, @var{coeffp}, @var{exponp})
@deffnx {Fun@value{cedilha}@~ao} polynomialp (@var{p}, @var{L}, @var{coeffp})
@deffnx {Fun@value{cedilha}@~ao} polynomialp (@var{p}, @var{L})

Retorna @code{true} se @var{p} for um polin@'omio nas vari@'aveis da lista @var{L},
O predicado @var{coeffp} deve avaliar para @code{true} para cada
coeficiente, e o predicado @var{exponp} deve avaliar para @code{true} para todos os 
expoentes das vari@'aveis na lista @var{L}. Se quiser usar um valor
personalizado para @var{exponp}, dever@'a fornecer @var{coeffp} com um valor mesmo se quiser
o valor padr@~ao para @var{coeffp}.

@c WORK THE FOLLOWING INTO THE PRECEDING
@code{polynomialp (@var{p}, @var{L}, @var{coeffp})} @'e equivalente a
@code{polynomialp (@var{p}, @var{L}, @var{coeffp}, 'nonnegintegerp)}.

@code{polynomialp (@var{p}, @var{L})} @'e equivalente a
@code{polynomialp (@var{p}, L@var{,} 'constantp, 'nonnegintegerp)}.

O polin@'omio n@~ao precisa ser expandido:

@c ===beg===
@c load (linearalgebra);
@c polynomialp ((x + 1)*(x + 2), [x]);
@c polynomialp ((x + 1)*(x + 2)^a, [x]);
@c ===end===
@example
(%i1) load (linearalgebra);
Warning - you are redefining the Maxima function require_list
Warning - you are redefining the Maxima function matrix_size
Warning - you are redefining the Maxima function rank
(%o1) /usr/local/share/maxima/5.9.2/share/linearalgebra/linearalgebra.mac
(%i2) polynomialp ((x + 1)*(x + 2), [x]);
(%o2)                         true
(%i3) polynomialp ((x + 1)*(x + 2)^a, [x]);
(%o3)                         false
@end example

Um exemplo usando um valor personalizado para @code{coeffp} e para @code{exponp}:

@c ===beg===
@c load (linearalgebra);
@c polynomialp ((x + 1)*(x + 2)^(3/2), [x], numberp, numberp);
@c polynomialp ((x^(1/2) + 1)*(x + 2)^(3/2), [x], numberp, numberp);
@c ===end===
@example
(%i1) load (linearalgebra);
Warning - you are redefining the Maxima function require_list
Warning - you are redefining the Maxima function matrix_size
Warning - you are redefining the Maxima function rank
(%o1) /usr/local/share/maxima/5.9.2/share/linearalgebra/linearalgebra.mac
(%i2) polynomialp ((x + 1)*(x + 2)^(3/2), [x], numberp, numberp);
(%o2)                         true
(%i3) polynomialp ((x^(1/2) + 1)*(x + 2)^(3/2), [x], numberp, numberp);
(%o3)                         true
@end example

Polin@'omios com duas vari@'aveis:

@c ===beg===
@c load (linearalgebra);
@c polynomialp (x^2 + 5*x*y + y^2, [x]);
@c polynomialp (x^2 + 5*x*y + y^2, [x, y]);
@c ===end===
@example
(%i1) load (linearalgebra);
Warning - you are redefining the Maxima function require_list
Warning - you are redefining the Maxima function matrix_size
Warning - you are redefining the Maxima function rank
(%o1) /usr/local/share/maxima/5.9.2/share/linearalgebra/linearalgebra.mac
(%i2) polynomialp (x^2 + 5*x*y + y^2, [x]);
(%o2)                         false
(%i3) polynomialp (x^2 + 5*x*y + y^2, [x, y]);
(%o3)                         true
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} polytocompanion (@var{p}, @var{x})

Se @var{p} for um polin@'omio em @var{x}, retorna a atriz companheira de @var{p}. Para
um polin@'omio m@^onico @var{p} de grau @var{n},
temos @code{@var{p} = (-1)^@var{n} charpoly (polytocompanion (@var{p}, @var{x}))}.

Quando @var{p} n@~ao for um polin@'omio em @var{x}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} ptriangularize (@var{M}, @var{v})

Se @var{M} for uma matriz onde cada entrada dessa matriz for um polin@'omio em @var{v}, retorna 
a matriz @var{M2} tal que

(1) @var{M2} @'e triangular alta,

(2) @code{@var{M2} = @var{E_n} ... @var{E_1} @var{M}},
onde os elemetnos de @var{E_1} a @var{E_n} s@~ao matrizes elementares 
cujas entrada s@~ao polin@'omios em @var{v},

(3) @code{|det (@var{M})| = |det (@var{M2})|},

Nota: Essa fun@value{cedilha}@~ao n@~ao verifica se toda entrada @'e um polin@'omio em @var{v}.  

@end deffn

@deffn {Fun@value{cedilha}@~ao} rowop (@var{M}, @var{i}, @var{j}, @var{theta})

Se @var{M} for uma matriz, retorna a matriz que resulta de se fazer a  
opera@value{cedilha}@~ao de linha @code{R_i <- R_i - theta * R_j}. Se @var{M} n@~ao tiver uma linha
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} rank (@var{M})

Retorna o ranque daquela matriz @var{M}. O rank @'e a dimens@~ao do
espa@value{cedilha}o coluna. Exemplo:
@c ===beg===
@c load (linearalgebra)$
@c rank(matrix([1,2],[2,4]));
@c rank(matrix([1,b],[c,d]));
@c ===end===
@example
(%i1) load (linearalgebra)$
WARNING: DEFUN/DEFMACRO: redefining function $COPY in
         /share/maxima/5.11.0/share/linearalgebra/linalg-utilities.lisp,
         was defined in
         /maxima-5.11.0/src/binary-clisp/comm2.fas
(%i2) rank(matrix([1,2],[2,4]));
(%o2)                                  1
(%i3) rank(matrix([1,b],[c,d]));
Proviso:  @{d - b c # 0@}
(%o3)                                  2
@end example

@end deffn


@deffn {Fun@value{cedilha}@~ao} rowswap (@var{M}, @var{i}, @var{j})

Se @var{M} for uma matriz, permuta as linha @var{i} e @var{j}. Se @var{M} n@~ao tiver uma linha
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~ao} toeplitz (@var{col})
@deffnx {Fun@value{cedilha}@~ao} toeplitz (@var{col}, @var{lin})

Retorna uma matriz de Toeplitz @var{T}. a primeira coluna de @var{T} @'e @var{col};
excepto para a primeira entrada, a primeira linha de @var{T} @'e @var{lin}. O
padr@~ao para @var{lin} @'e o conjugado complexo de @var{col}. Exemplo:
@c ===beg===
@c load(linearalgebra)$
@c toeplitz([1,2,3],[x,y,z]);
@c toeplitz([1,1+%i]);
@c ==end===
@example
(%i1) load(linearalgebra)$

(%i2)  toeplitz([1,2,3],[x,y,z]);

                                  [ 1  y  z ]
                                  [         ]
(%o2)                             [ 2  1  y ]
                                  [         ]
                                  [ 3  2  1 ]
(%i3)  toeplitz([1,1+%i]);

                              [   1     1 - %I ]
(%o3)                         [                ]
                              [ %I + 1    1    ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~ao} vandermonde_matrix ([@var{x_1}, ..., @var{x_n}])

Retorna uma matriz @var{n} por @var{n} cuja @var{i}-@'esima linha @'e 
@code{[1, @var{x_i}, @var{x_i}^2, ... @var{x_i}^(@var{n}-1)]}. 

@end deffn

@deffn {Fun@value{cedilha}@~ao} zerofor (@var{M})
@deffnx {Fun@value{cedilha}@~ao}  zerofor (@var{M}, @var{fld})

Retorna uma matriz zero que tem o mesmo tamanho da matriz
@var{M}.  Toda entrada da matriz zero @'e a
identidade aditiva do anel @var{fld}; o valor padr@~ao para
@var{fld} @'e @var{generalring}.

O primeiro argumento @var{M} pode ser uma matriz quadrada ou uma
n@~ao matriz. Quando @var{M} for uma matriz, cada entrada de @var{M} pode ser uma
matriz quadrada -- dessa forma @var{M} pode ser uma matriz de bloco do Maxima. A
matriz pode ser de bloco para qualquer n@'{@dotless{i}}vel (finito).

Veja tamb@'em @code{identfor}

@end deffn

@deffn {Fun@value{cedilha}@~ao} zeromatrixp (@var{M})

Se @var{M} n@~ao for uma matriz de bloco, retorna @code{true} se @code{is (equal (@var{e}, 0))} 
for verdadeiro para cada elemento @var{e} da matriz @var{M}.  Se @var{M} for uma matriz de bloco, retorna
@code{true} se @code{zeromatrixp} avaliar para @code{true} para cada elemento de @var{e}.

@end deffn
