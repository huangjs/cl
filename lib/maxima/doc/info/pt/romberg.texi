@c /romberg.texi/1.1/Mon Jan  8 01:45:16 2007//
@menu
* Defini@value{cedilha}@~oes para romberg::
@end menu

@node Defini@value{cedilha}@~oes para romberg, , Top, Top
@section Defini@value{cedilha}@~oes para romberg

@deffn {Fun@value{cedilha}@~ao} romberg (@var{expr}, @var{x}, @var{a}, @var{b})
@deffnx {Fun@value{cedilha}@~ao} romberg (@var{F}, @var{a}, @var{b})

Calcula uma integra@value{cedilha}@~ao num@'erica pelo m@'etodo de Romberg.

@code{romberg(@var{expr}, @var{x}, @var{a}, @var{b})}
retorna uma estimativa da integral @code{integrate(@var{expr}, @var{x}, @var{a}, @var{b})}.
@var{expr} deve ser uma express@~ao que avalie para um valor em ponto flutuante
quando @var{x} estiver associado a um valor em ponto flutuante.

@code{romberg(@var{F}, @var{a}, @var{b})}
retorna uma estimativa da integral @code{integrate(@var{F}(x), x, @var{a}, @var{b})}
onde @code{x} representa o n@~ao nomeado, isolado argumeno de @var{F};
o actual argumento n@~ao @'e chamado @code{x}.
@var{F} deve ser uma fun@value{cedilha}@~ao do Maxima ou do Lisp que retorne um valor em ponto flutuante
quando o argumento for um n@'umero em ponto flutuante.
@var{F} pode nomear uma fun@value{cedilha}@~ao traduzida ou compilada do Maxima.

A precis@~ao de @code{romberg} @'e governada pelas vari@'aveis globais
@code{rombergabs} e @code{rombergtol}.
@code{romberg} termina com sucesso quando
a diferen@value{cedilha}a absoluta entre duas aproxima@value{cedilha}@~oes sucessivas for menor que @code{rombergabs},
ou a diferen@value{cedilha}a relativa em aproxima@value{cedilha}@~oes sucessivas for menor que @code{rombergtol}.
Dessa forma quando @code{rombergabs} for 0.0 (o padr@~ao)
somente o erro relativo tem algum efeito sobre @code{romberg}.

@code{romberg} divide ao meio o tamanho do passo no m@'aximo @code{rombergit} vezes antes de interromper;
o n@'umero m@'aximo de avalia@value{cedilha}@~oes de fun@value{cedilha}@~ao @'e portanto @code{2^rombergit}.
Se o crit@'erio de erro estabelecido por @code{rombergabs} e por @code{rombergtol}
n@~ao for satisfeito, @code{romberg} mostra uma mensagem de erro.
@code{romberg} sempre faz ao menos @code{rombergmin} itera@value{cedilha}@~oes;
isso @'e uma inten@value{cedilha}@~ao eur@'{@dotless{i}}sstica de previnir encerramentos esp@'urios quando o integrando for oscilat@'orio.

@code{romberg} repetidamente avalia o integrando ap@'os associar a vari@'avel
de integra@value{cedilha}@~ao a um valor espec@'{@dotless{i}}fico (e n@~ao antes).
Essa pol@'{@dotless{i}}tica de avalia@value{cedilha}@~ao torna poss@'{@dotless{i}}vel aninhar chamadas a @code{romberg},
para calcular integrais multidimensionais.
Todavia, os c@'alculos de erro n@~ao tomam os erros de integra@value{cedilha}@~oes aninhadas
em considera@value{cedilha}@~ao, ent@~ao erros podem ser subestimados.
Tamb@'em, m@'etodos imaginados especialmente para problemas multidimensionais podem retornar
a mesma precis@~ao com poucas avalia@value{cedilha}@~oes de fun@value{cedilha}@~ao.

@code{load(romberg)} torna essa fun@value{cedilha}@~ao dispon@'{@dotless{i}}vel para uso.

Veja tamb@'em @code{QUADPACK}, uma colec@,{c}@~ao de fun@value{cedilha}@~oes de integra@value{cedilha}@~ao num@'erica.

Exemplos:

Uma integra@value{cedilha}@~ao unidimensonal.
@c ===beg===
@c load (romberg);
@c f(x) := 1/((x - 1)^2 + 1/100) + 1/((x - 2)^2 + 1/1000) + 1/((x - 3)^2 + 1/200);
@c rombergtol : 1e-6;
@c rombergit : 15;
@c estimate : romberg (f(x), x, -5, 5);
@c exact : integrate (f(x), x, -5, 5);
@c abs (estimate - exact) / exact, numer;
@c ===end===

@example
(%i1) load (romberg);
(%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
(%i2) f(x) := 1/((x - 1)^2 + 1/100) + 1/((x - 2)^2 + 1/1000) + 1/((x - 3)^2 + 1/200);
                    1                 1                1
(%o2) f(x) := -------------- + --------------- + --------------
                     2    1           2    1            2    1
              (x - 1)  + ---   (x - 2)  + ----   (x - 3)  + ---
                         100              1000              200
(%i3) rombergtol : 1e-6;
(%o3)                 9.9999999999999995E-7
(%i4) rombergit : 15;
(%o4)                          15
(%i5) estimate : romberg (f(x), x, -5, 5);
(%o5)                   173.6730736617464
(%i6) exact : integrate (f(x), x, -5, 5);
(%o6) 10 sqrt(10) atan(70 sqrt(10))
 + 10 sqrt(10) atan(30 sqrt(10)) + 10 sqrt(2) atan(80 sqrt(2))
 + 10 sqrt(2) atan(20 sqrt(2)) + 10 atan(60) + 10 atan(40)
(%i7) abs (estimate - exact) / exact, numer;
(%o7)                7.5527060865060088E-11
@end example

Uma integra@value{cedilha}@~ao bidimensional, implementada com chamadas aninhadas a @code{romberg}.
@c ===beg===
@c load (romberg);
@c g(x, y) := x*y / (x + y);
@c rombergtol : 1e-6;
@c estimate : romberg (romberg (g(x, y), y, 0, x/2), x, 1, 3);
@c assume (x > 0);
@c integrate (integrate (g(x, y), y, 0, x/2), x, 1, 3);
@c exact : radcan (%);
@c abs (estimate - exact) / exact, numer;
@c ===end===

@example
(%i1) load (romberg);
(%o1)    /usr/share/maxima/5.11.0/share/numeric/romberg.lisp
(%i2) g(x, y) := x*y / (x + y);
                                    x y
(%o2)                   g(x, y) := -----
                                   x + y
(%i3) rombergtol : 1e-6;
(%o3)                 9.9999999999999995E-7
(%i4) estimate : romberg (romberg (g(x, y), y, 0, x/2), x, 1, 3);
(%o4)                   0.81930239628356
(%i5) assume (x > 0);
(%o5)                        [x > 0]
(%i6) integrate (integrate (g(x, y), y, 0, x/2), x, 1, 3);
                                          3
                                    2 log(-) - 1
                    9                     2        9
(%o6)       - 9 log(-) + 9 log(3) + ------------ + -
                    2                    6         2
(%i7) exact : radcan (%);
                    26 log(3) - 26 log(2) - 13
(%o7)             - --------------------------
                                3
(%i8) abs (estimate - exact) / exact, numer;
(%o8)                1.3711979871851024E-10
@end example

@end deffn

@defvr {Vari@'avel de op@value{cedilha}@~ao} rombergabs
Valor por omiss@~ao: 0.0

A precis@~ao de @code{romberg} @'e governada pelas vari@'avies globais
@code{rombergabs} e @code{rombergtol}.
@code{romberg} termina com sucesso quando
a diferen@value{cedilha}a absoluta entre duas aproxima@value{cedilha}@~oes sucessivas for menor que @code{rombergabs},
ou a diferen@value{cedilha}a relativa em aproxima@value{cedilha}@~oes sucessivas for menor que @code{rombergtol}.
Dessa forma quando @code{rombergabs} for 0.0 (o padr@~ao)
somente o erro relativo tem algum efeito sobre @code{romberg}.

Veja tamb@'em @code{rombergit} e @code{rombergmin}.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} rombergit
Valor por omiss@~ao: 11

@code{romberg} divide ao meio o tamanho do passo no m@'aximo @code{rombergit} vezes antes de interromper;
o n@'umero m@'aximo de avalia@value{cedilha}@~oes de fun@value{cedilha}@~ao @'e portanto @code{2^rombergit}.
Se o crit@'erio de erro estabelecido por @code{rombergabs} e por @code{rombergtol}
n@~ao for satisfeito, @code{romberg} mostra uma mensagem de erro.
@code{romberg} sempre faz ao menos @code{rombergmin} itera@value{cedilha}@~oes;
isso @'e uma inten@value{cedilha}@~ao eur@'{@dotless{i}}sstica de previnir encerramentos esp@'urios quando o integrando for oscilat@'orio.

Veja tamb@'em @code{rombergabs} e @code{rombergtol}.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} rombergmin
Valor por omiss@~ao: 0

@code{romberg} sempre faz ao menos @code{rombergmin} itera@value{cedilha}@~oes;
isso @'e uma inten@value{cedilha}@~ao eur@'{@dotless{i}}sstica para prevenir termina@value{cedilha}@~oes esp@'urias quando o integrando for.

Veja tamb@'em @code{rombergit}, @code{rombergabs}, e @code{rombergtol}.

@end defvr

@defvr {Vari@'avel de op@value{cedilha}@~ao} rombergtol
Valor por omiss@~ao: 1e-4

A precis@~ao de @code{romberg} @'e governada pelas vari@'aveis globais
@code{rombergabs} e @code{rombergtol}.
@code{romberg} termina com sucesso quando
a diferen@value{cedilha}a absoluta entre duas aproxima@value{cedilha}@~oes sucessivas for menor que @code{rombergabs},
ou a diferen@value{cedilha}a relativa em aproxima@value{cedilha}@~oes sucessivas for menor que @code{rombergtol}.
Dessa forma quando @code{rombergabs} for 0.0 (o padr@~ao)
somente o erro relativo tem algum efeito sobre @code{romberg}.

Veja tamb@'em @code{rombergit} e @code{rombergmin}.

@end defvr

