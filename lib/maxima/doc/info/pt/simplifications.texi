@c /simplifications.texi/1.3/Sat Jul  8 08:16:05 2006//
@menu
* Introdu@value{cedilha}@~ao a simplification::
* Defini@value{cedilha}@~oes para simplification::
@end menu

@node Introdu@value{cedilha}@~ao a simplification, Defini@value{cedilha}@~oes para simplification, simplification, simplification
@section Introdu@value{cedilha}@~ao a simplification

O direct@'orio @code{maxima/share/simplification} cont@'em muitos scripts
que implementam regras de simplifica@value{cedilha}@~ao e fun@value{cedilha}@~oes,
e tamb@'em algumas fun@value{cedilha}@~oes n@~ao relacionadas a simplifica@value{cedilha}@~ao.

@node Defini@value{cedilha}@~oes para simplification,  , Introdu@value{cedilha}@~ao a simplification, simplification
@section Defini@value{cedilha}@~oes para simplification

@c Adapted from absimp.usg ----------------------

@c @defvr {Add-on package} (WITH HYPHEN) CONFUSES DESCRIBE (CAN'T FIND END OF ITEM)
@c SAME WITH OTHER "ADD-ON PACKAGES" HERE (FACEXP, INEQ)
@subsection Package absimp

O pacote @code{absimp} cont@'em regras de compara@value{cedilha}@~ao de sequ@^encias decaractere que
extendem as regras internas de simplifica@value{cedilha}@~ao para as fun@value{cedilha}@~oes @code{abs} e
@code{signum}.
@code{absimp} respeita as rela@value{cedilha}@~oes
estabelecidas com a fun@value{cedilha}@~ao interna @code{assume} e por meio de declara@value{cedilha}@~oes tais
como @code{modedeclare (m, even, n, odd)}  para inteiros paes ou @'{@dotless{i}}mpares.

@code{absimp} define as fun@value{cedilha}@~oes @code{unitramp} e @code{unitstep}
em termos de @code{abs} e @code{signum}.

@code{load (absimp)} torna esse pacote dispon@'{@dotless{i}}vel para uso.
@code{demo (absimp)} faz uma demonstra@value{cedilha}@~ao desse pacote.

Exemplos:

@c ===beg===
@c load (absimp)$
@c (abs (x))^2;
@c diff (abs (x), x);
@c cosh (abs (x));
@c ===end===
@example
(%i1) load (absimp)$
(%i2) (abs (x))^2;
                                       2
(%o2)                                 x
(%i3) diff (abs (x), x);
                                      x
(%o3)                               ------
                                    abs(x)
(%i4) cosh (abs (x));
(%o4)                               cosh(x)
@end example

@c disol.usg: "disolate" already in doc/info/Expressions.texi

@c elim.usg: "eliminate" already in doc/info/Polynomials.texi

@c Adapted from facexp.usg ----------------------
@c ALL OF THE TEXT IN FACEXP.USG IS VERY VAGUE.
@c I HAVE NO IDEA WHAT THESE FUNCTIONS DO.
@c ALL OF THESE ITEMS NEED TO BE HEAVILY REVISED
@c (ASSUMING THIS PACKAGE IS SOMETHING WE WANT TO INVEST TIME IN)
@subsection Package facexp

@c THIS IS VERY VAGUE. JUST WHAT DOES THIS DO?
O pacote @code{facexp} cont@'em muitas fun@value{cedilha}@~oes relacionadas a simplifica@value{cedilha}@~oes que
fornecem ao utilizador a habilidade de estruturar express@~oes por meio de expans@~ao
controlada.   Essa capacidade @'e especialmente @'util quando a express@~ao
cont@'em vari@'aveis que possuem significado f@'{@dotless{i}}sico, porque @'e muitas vezes verdadeiro
que a forma mais econ@^omica de uma tal express@~ao pode ser obtida por meio de
uma expans@~ao completa da express@~ao com rela@value{cedilha}@~ao a essas vari@'aveis, e ent@~ao
factorizar seus coeficientes.  Apesar de ser verdadeiro que esse procedimento @'e
f@'acil de realizar usando as fun@value{cedilha}@~oes padr@~ao do Maxima, ajustes
adicionais podem se desej@'aveis, e esses toques finais podem ser
mais dif@'{@dotless{i}}ceis de aplicar.

A fun@value{cedilha}@~ao @code{facsum}  e suas formas relacionadas
fornecem um meio conveniente de controlar a estrutura de express@~oes
por esse caminho.  Outra fun@value{cedilha}@~ao, @code{collectterms}, pode ser usada para adicionar duas ou
mais express@~oes que j@'a tenham sido simplificadas para essa forma, sem
resimplificar a express@~ao completa novamente.  Essa fun@value{cedilha}@~ao pode ser
@'util quando express@~oes forem muito grandes.

@c CAN'T FIND ANY SUCH FILE "DIAGEVAL".
@c THERE ARE COMMENTED-OUT DEFNS OF FACTENEXPAND, FACEXPTEN, AND FACTORFACEXPTEN
@c IN FACEXP (AND NOWHERE ELSE).
@c COMMENTING OUT THIS TEXT FOR NOW.
@c Note:  @code{factenexpand}, @code{facexpten}, and @code{factorfacexpten}  are available  only
@c after loading @code{diageval}. They are special functions used for  tensor
@c manipulation.

@code{load (facexp)} torna dispon;ivel para uso esse pacote.
@code{demo (facexp)} faz uma demonstra@value{cedilha}@~ao desse pacote.

@c THIS IS VERY VAGUE. JUST WHAT DOES THIS DO?
@c SOME EXAMPLES WOULD HELP HERE
@deffn {Fun@value{cedilha}@~ao} facsum (@var{expr}, @var{arg_1}, ..., @var{arg_n})
Retorna uma forma de @var{expr}  que depende dos
argumentos @var{arg_1}, ..., @var{arg_n}.
Os argumentos podem ser quaisquer formas adequadas para @code{ratvars}, ou eles podem ser
listas  de tais formas.  Se os argumentos n@~ao forem listas, ent@~ao a forma
retornada @'e completamente expandida com rela@value{cedilha}@~ao aos argumentos,  e os
coeficientes dos argumentos foram factorizados.  Esses coeficientes s@~ao
livres dos argumentos, excepto talvez no sentido n@~ao racional.

Se quaisquer dos argumentos forem listas, ent@~ao todas as tais listas s@~ao combinadas
em uma lista simples,   e em lugar de chamar @code{factor}   sobre os
coeficientes  dos  argumentos,  @code{facsum}  chama a si mesma sobre esses
coeficientes, usando  essa nova lista simples que foi constru@'{@dotless{i}}da como o novo
argumento listo  para essa chamada recursiva.  Esse processo pode ser repetido para um
quantidade arbitr@'aria de repeti@value{cedilha}@~oes por atrav@'es do aninhamento dos elementos desejados nas listas.

@'E poss@'{@dotless{i}}vel que algu@'em possa querer usar @code{facsum} com rela@value{cedilha}@~ao a subexpress@~oes
mais complicadas,  tal como  @code{log (x + y)}.  Tais argumentos s@~ao
tamb@'em permitidos.   Sem especifica@value{cedilha}@~ao de vari@'avel,  por exemplo
@code{facsum (@var{expr})}, o resultado retornado @'e o mesmo que o que @'e retornado por meio de
@code{ratsimp (@var{expr})}.

Ocasionalmente o utilizador pode querer obter quaisquer das formas abaixo
para express@~oes que s@~ao especificadas somente por meio de seus operadores l@'{@dotless{i}}deres.
Por exemplo, algu@'em pode querer usar @code{facsum} com rela@value{cedilha}@~ao a todos os @code{log}'s.  Nessa
situa@value{cedilha}@~ao, algu@'em pode incluir no meio dos argumentos ou o c@'odigo
dos @code{log}'s eespec@'{@dotless{i}}ficos que devem ser tratados po esse caminho ou alternativamente a
express@~ao  @code{operator (log)} ou a express@~ao @code{'operator (log)}.   Se algu@'em quiser usar
@code{facsum} na express@~ao @var{expr} com rela@value{cedilha}@~ao aos operadores @var{op_1}, ..., @var{op_n},
pode-se avaliar @code{facsum (@var{expr}, operator (@var{op_1}, ..., @var{op_n}))}.
A forma @code{operator} pode tamb@'em aparecer dentro de uma lista de argumentos.

Adicionalmente,  a escolha de comutadores @code{facsum_combine}  e
@code{nextlayerfactor} pode afectar o ressultado de @code{facsum}.
@end deffn

@defvr {Vari@'avel global} nextlayerfactor
Valor por omiss@~ao: @code{false}

Quando @code{nextlayerfactor} for @code{true}, chamadas recursivas a @code{facsum}
s@~ao aplicdas aos factores da forma factorizada dos
coeficientes dos argumentos.

Quando @code{nextlayerfactor} for @code{false}, @code{facsum} @'e aplicada a
cada coeficiente como um todo mesmo se chamadas recursivas a @code{facsum} acontecerem.

A inclus@~ao do @'atomo
@code{nextlayerfactor} na lista argumento de @code{facsum}  tem o efieto de
@code{nextlayerfactor: true}, mas para o pr@'oximo n@'{@dotless{i}}vel da express@~ao @i{somente}.
Uma vez que @code{nextlayerfactor} @'e sempre associado ou a @code{true} ou a  @code{false}, @code{nextlayerfactor}
deve ser apresentada com ap@'ostrofo simples mesmo que @code{nextlayerfactor} apare@value{cedilha}a na lista de argumento de @code{facsum}.
@end defvr

@defvr {Vari@'avel global} facsum_combine
Valor por omiss@~ao: @code{true}

@code{facsum_combine} controla a forma do resultado final retornada por meio de
@code{facsum}  quando seu argumento @'e um quociente de polin@'omios.   Se
@code{facsum_combine} for @code{false}  ent@~ao a forma ser@'a retornada como um somat@'orio
completametne expandido como descrito acima,  mas se @code{true},  ent@~ao a express@~ao
retornada @'e uma raz@~ao de polin@'omios, com cada polin@'omio na forma
descrita acima.

A escolha de @code{true} desse comutador @'e @'util quando se
deseja para @code{facsum} ambos o dumerador e o denominador de uma express@~ao
racional,  mas n@~ao se deseja que o denominador seja multiplicado
de forma completa pelos termos do numerador.
@end defvr

@deffn {Fun@value{cedilha}@~ao} factorfacsum (@var{expr}, @var{arg_1}, ... @var{arg_n})
Retorna uma forma de @var{expr}  que @'e
obtida por meio de chamada a @code{facsum} sobre os factores de @var{expr} com @var{arg_1}, ... @var{arg_n} como
argumentos.  Se qualqeur dos factores de @var{expr} estiver elevado a um expoente, ambos
o factor e o expoente ir@~ao ser processados por esse meio.
@end deffn

@deffn {Fun@value{cedilha}@~ao} collectterms (@var{expr}, @var{arg_1}, ..., @var{arg_n})
Se muitas express@~oes tiverem sido
simplificadas com @code{facsum}, @code{factorfacsum},  @code{factenexpand},  @code{facexpten} ou
com @code{factorfacexpten},  e elas est@~ao para serem adicionadas umas @`as outras, pode ser
desej@'avel combin@'a-las usando a fun@value{cedilha}@~ao @code{collecterms}.
@code{collecterms} pode pegar como argumentos todos os argumentos que podem ser
fornecidos para essas outras fun@value{cedilha}@~oes associadas com excess@~ao de
@code{nextlayerfactor}, que n@~ao tem efeito sobre @code{collectterms}.  A vantagem
de @code{collectterms}  est@'a em que @code{collectterms} retorna uma forma similar a @code{facsum}, mas
uma vez que @code{collectterms} est@'a adicionando forma que j@'a tenham sido processadas por @code{facsum},
@code{collectterms} n@~ao precisa repetir aquele esfor@value{cedilha}o.   Essa capacidade @'e
especialmente @'util quando a express@~ao a ser somada for muito grande.
@end deffn

@c Adapted from functs.usg ----------------------

@c conjugate already described in doc/info/Matrices.texi
@subsection Pacote functs

@deffn {Fun@value{cedilha}@~ao} rempart (@var{expr}, @var{n})
Remove a parte @var{n} da express@~ao @var{expr}.

Se @var{n} @'e uma lsita da forma @code{[@var{l}, @var{m}]}
ent@~ao as partes de @var{l} at@'e @var{m} s@~ao removidas.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} wronskian ([@var{f_1}, ..., @var{f_n}], @var{x})
Retorna a matriz Wronskiana das fun@value{cedilha}@~oes @var{f_1}, ..., @var{f_n} na vari@'avel @var{x}.

@var{f_1}, ..., @var{f_n} pode ser o nome de fun@value{cedilha}@~oes definidas pelo utilizador,
ou express@~oes na vari@'avel @var{x}.

O determinante da matriz Wronskiana @'e o determinante Wronskiano do conjunto de fun@value{cedilha}@~oes.
As fun@value{cedilha}@~oes s@~ao linearmente independentes entre si se seu determinante for igual a zero.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@c adjoint already described in doc/info/Matrices.texi

@deffn {Fun@value{cedilha}@~ao} tracematrix (@var{M})
Retorna o tra@value{cedilha}o (somat@'orio dos elementos da diagonal principal) da matriz @var{M}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} rational (@code{z})
Multiplica o numerador e o denominador de @var{z} pelo complexo conjugado do denominador,
racionando dessa forma o denominador complexo.
Retorna a forma de express@~ao racional can@'onica (CRE) se fornecida uma CRE, caso contr@'ario retorna a forma geral.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} logand (@code{x},@code{y})
Retorna o "e" l@'ogico (bit-wise) dos argumento x e do argumento y.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} logor (@code{x},@code{y})
Retorna o "ou" l@'ogico (bit-wise) dos argumento x e do argumento y.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} logxor (@code{x},@code{y})
Retorna "ou-exclusivo" l@'ogico (bit-wise) dos argumento x e do argumento y.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@c uprobe calls ?uprobe and assumes file is a list => obsolete, not common lisp

@c kronecker superseded by kron_delta in src/nset.lisp

@deffn {Fun@value{cedilha}@~ao} nonzeroandfreeof (@var{x}, @var{expr})
Retorna @code{true} se @var{expr} for diferente de zero e @code{freeof (@var{x}, @var{expr})} retorna @code{true}.
Retorna @code{false} de outra forma.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} linear (@var{expr}, @var{x})
Quando @var{expr} for uma express@~ao linear na vari@'avel @var{x},
@code{linear} retorna @code{@var{a}*@var{x} + @var{b}} onde @var{a} @'e diferente de zero,
e @var{a} e @var{b} s@~ao livres de @var{x}.
De outra forma, @code{linear} retorna @var{expr}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} gcdivide (@var{p}, @var{q})
Quando @code{takegcd} for @code{true},
@code{gcdivide} divide os polin@'omios @var{p} e @var{q} por seu maior divisor comum (MDC)
e retorna a raz@~ao dos resultados.

Quando @code{takegcd} for @code{false},
@code{gcdivide} retorna a raz@~ao @code{@var{p}/@var{q}}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@c lcm already described in doc/info/Number.texi

@deffn {Fun@value{cedilha}@~ao} arithmetic (@var{a}, @var{d}, @var{n})
Retorna o @var{n}-@'esiomo termo da s@'erie aritm@'etica
@code{@var{a}, @var{a} + @var{d}, @var{a} + 2*@var{d}, ..., @var{a} + (@var{n} - 1)*@var{d}}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} geometric (@var{a}, @var{r}, @var{n})
Retorna o @var{n}-@'esimo termo da s@'erie geom@'etrica
@code{@var{a}, @var{a}*@var{r}, @var{a}*@var{r}^2, ..., @var{a}*@var{r}^(@var{n} - 1)}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} harmonic (@var{a}, @var{b}, @var{c}, @var{n})
Retorna o @var{n}-@'esimo termo da s@'erie harm@^onica
@code{@var{a}/@var{b}, @var{a}/(@var{b} + @var{c}), @var{a}/(@var{b} + 2*@var{c}), ..., @var{a}/(@var{b} + (@var{n} - 1)*@var{c})}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} arithsum (@var{a}, @var{d}, @var{n})
Retorna a soma dos elementos da s@'erie aritm@'etica de 1 a @var{n}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} geosum (@var{a}, @var{r}, @var{n})
Retorna a soma dos elementos da s@'erie geom@'etrica de 1 a @var{n}.  Se @var{n} for
infinito (@code{inf}) ent@~ao a soma ser@'a finita se e somente se o valor absoluto
de @var{r} for menor que 1.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} gaussprob (@var{x})
Retorna a fun@value{cedilha}@~ao de probalilidade de Gauss
@code{%e^(-@var{x}^2/2) / sqrt(2*%pi)}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} gd (@var{x})
Retorna a fun@value{cedilha}@~ao de Gudermann
@code{2 * atan(%e^@var{x} - %pi/2)}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} agd (@var{x})
Retorna o inverso da fun@value{cedilha}@~ao de Gudermann
@code{log (tan (%pi/4 + x/2)))}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} vers (@var{x})
Retorna o @i{sinus versus} @code{1 - cos (x)}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} covers (@var{x})
Retorna o @i{sinus versus} do complemento @code{1 - sin (@var{x})}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} exsec (@var{x})
Retorna a parte externa da secante @code{sec (@var{x}) - 1}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@deffn {Fun@value{cedilha}@~ao} hav (@var{x})
Retorna o semi-@i{sinus versus} @code{(1 - cos(x))/2}.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@c REDUNDANT WITH BINOMIAL COEFFICIENT; CUT IT ??
@deffn {Fun@value{cedilha}@~ao} combination (@var{n}, @var{r})
Retorna o n@'umero de combina@value{cedilha}@~oes de @var{n} objectos
tomados em grupos de @var{r} elementos.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@c REDUNDANT WITH PERMUTATIONS FUNCTION IN NSET; CUT IT ??
@deffn {Fun@value{cedilha}@~ao} permutation (@var{n}, @var{r})
Retorna o n@'umero de permuta@value{cedilha}@~oes de @var{r} objectos
seleccionados de um conjunto de @var{n} objectos.

Para usar essa fun@value{cedilha}@~ao escreva primeiramente @code{load(functs)}.
@end deffn

@c Adapted from ineq.usg ----------------------
@c THIS PACKAGE IS INTERESTING BUT THIS TEXT NEEDS WORK AND EXAMPLES
@subsection Package ineq

O pacote @code{ineq} cont@'em regras de simplifica@value{cedilha}@~ao
para desigualdades.

Sess@~ao exemplo:

@c ===beg===
@c load(ineq)$
@c a>=4;  /* uma desigualdade exemplo */
@c (b>c)+%; /* adiciona uma segunda e estrita desigualdade */
@c 7*(x<y); /* multiplica por um n@'umero positivo */
@c -2*(x>=3*z); /* multiplica por um n@'umero negativo */
@c (1+a^2)*(1/(1+a^2)<=1); /* Maxima sabe que 1+a^2 > 0 */
@c assume(x>0)$ x*(2<3); /* assumindo x>0 */
@c a>=b; /* outra desigualdade */
@c 3+%; /* adiciona alguma coisa @`a desigualdade imediatamente acima */
@c %-3; /* retirando essa alguma coisa */
@c a>=c-b; /* ainda outra desigualdade */
@c b+%; /* adiciona b a ambos os lados da desigualdade */
@c %-c; /* subtrai c de ambos os lados */
@c -%;  /* multiplica por by -1 */
@c (z-1)^2>-2*z; /* determining truth of assertion */
@c expand(%)+2*z; /* expand this and add 2*z to both sides */
@c %,pred;
@c ===end===
@example
(%i1) load(ineq)$
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
Warning: Putting rules on '+' or '*' is inefficient, and may not work.
(%i2) a>=4;  /* uma desigualdade exemplo */
(%o2)                               a >= 4
(%i3) (b>c)+%; /* adiciona uma segunda e estrita desigualdade */
(%o3)                            b + a > c + 4
(%i4) 7*(x<y); /* multiplica por um n@'umero positivo */
(%o4)                              7 x < 7 y
(%i5) -2*(x>=3*z); /* multiplica por um n@'umero negativo */
(%o5)                           - 2 x <= - 6 z
(%i6) (1+a^2)*(1/(1+a^2)<=1); /* Maxima sabe que 1+a^2 > 0 */
                                        2
(%o6)                             1 <= a  + 1
(%i7) assume(x>0)$ x*(2<3); /* assumindo x>0 */
(%o7)                              2 x < 3 x
(%i8) a>=b; /* outa desigualdade */
(%o8)                               a >= b
(%i9) 3+%; /* adiciona alguma coisa @`a desigualdade imediatamente acima */
(%o9)                           a + 3 >= b + 3
(%i10) %-3; /* retirando essa alguma coisa */
(%o10)                              a >= b
(%i11) a>=c-b; /* ainda outra desigualdade */
(%o11)                            a >= c - b
(%i12) b+%; /* adiciona b a ambos os lados da desigualdade */
(%o12)                            b + a >= c
(%i13) %-c; /* subtrai c de ambos os lados */
(%o13)                         - c + b + a >= 0
(%i14) -%;  /* multiplica por -1 */
(%o14)                          c - b - a <= 0
(%i15) (z-1)^2>-2*z; /* determinando a verdade de uma assertiva */
                                      2
(%o15)                         (z - 1)  > - 2 z
(%i16) expand(%)+2*z; /* expandindo essa assertiva e adicionado 2*z a ambos os lados */
                                   2
(%o16)                            z  + 1 > 0
(%i17) %,pred;
(%o17)                               true
@end example

Seja cuidadoso com o uso dos par@^entesis
em torno de desigualdades: quando o utilizador digita @code{(A > B) + (C = 5)} o
resltado @'e @code{A + C > B + 5}, mas @code{A > B + C = 5} @'e um erro de sintaxe,
e @code{(A > B + C) = 5} @'e alguma coisa completametne diferente.

Fa@value{cedilha}a @code{disprule (all)} para ver uma lista completa
das defini@value{cedilha}@~oes de regras.

O utilizador ser@'a questionado se o Maxima for
incapaz de decidir o sinal de uma quantidade multiplicando uma desigualdade.

O mais comum recurso estranho @'e ilustrado por:

@c ===beg===
@c eq: a > b;
@c 2*eq;
@c % - eq;
@c ===end===
@example
(%i1) eq: a > b;
(%o1)                                a > b
(%i2) 2*eq;
(%o2)                              2 (a > b)
(%i3) % - eq;
(%o3)                                a > b
@end example

Outro problema @'e 0 vezes uma desigualdade; o padr@~ao para isso
acontecer @'e 0 ter sido colocado @`a esquerda sozinho. Contudo, se
digitar @code{X*@var{some_inequality}} e Maxima perguntar sobre o sinal
de @code{X} e responder @code{zero} (ou @code{z}), o programa retorna
@code{X*@var{some_inequality}} e n@~ao utiliza a
informa@value{cedilha}@~ao que @code{X} @'e 0. Pode usar @code{ev (%, x:
0)} em casos semelhantes a esse; a base de dados ir@'a somente ser usada
para prop@'ositos de compara@value{cedilha}@~ao em decis@~oes, e n@~ao
para o prop@'osito de avalia@value{cedilha}@~ao de @code{X}.

O utilizador pode notar uma resposta lenta quando esse pacote @'e
disponibilizado para uso, como o simplificador @'e for@value{cedilha}ado
a examinar mais regras do precisaria sem esse pacote, ent@~ao pode
desejar remover essas regras ap@'os fazer uso delas. Fa@value{cedilha}a
@code{kill (rules)} para eliminar todas as regras (incluindo qualquer
regra que possa ter definido); ou pode ser mais selectivo
eliminando somente algumas delas; ou use @code{remrule} sobre uma regra
espec@'{@dotless{i}}fica.

Note que se disponibilizar esse pacote para ser usado, ap@'os definir
suas pr@'oprias regras, ir@'a sobrescrever as suas regras que possuirem
nomes identicos a nomes contidos nas regras do pacote. As regras no
pacote s@~ao: @code{*rule1}, ..., @code{*rule8}, @code{+rule1}, ...,
@code{+rule18}, e deve colocar o nome de regra entre aspas duplas
ao referir-se a eles, como em @code{remrule ("+", "+rule1")} para
especificamente remover a primeira regra sobre @code{"+"} ou
@code{disprule ("*rule2")} para mostrar a defini@value{cedilha}@~ao da
segunda regra multiplicativa.

@c lrats.usg: "lratsubst" and "fullratsubst" already in doc/info/Polynomials.texi

@c Adapted from rducon.usg ----------------------
@c THIS IS AN INTERESTING FUNCTION BUT THIS TEXT NEEDS WORK AND EXAMPLES
@subsection Package rducon

@deffn {Fun@value{cedilha}@~ao} reduce_consts (@var{expr})
Substitui subexpress@~oes constantes de @var{expr} com
constru@'{@dotless{i}}da com @'atomos constantes, gravando a defini@value{cedilha}@~ao de todas essas
constantes constru@'{@dotless{i}}das na lista de equa@value{cedilha}@~oes @code{const_eqns}, e
retornando a express@~ao modificada @var{expr}.  Essas partes de @var{expr} s@~ao constantes que
retornam @code{true} quando operadas por meio da fun@value{cedilha}@~ao @code{constantp}.  Consequ@^entemente,
antes de usar @code{reduce_consts}, se pode fazer

@example
declare ([@var{objecto que vai receber a propriedade constante}], constant)$
@end example

para escolher a base de dados das quantidades constantes ocorrendo em suas
express@~oes.

Se est@'a a planear gerar sa@'{@dotless{i}}das em Fortran ap@'os esses
c@'alculos simb@'olicos, uma das primeiras sec@value{cedilha}@~oes de
c@'odigo pode ser o c@'alculo de todas as constantes.  Para gerar esse
segmento de c@'odigo, fa@value{cedilha}a

@example
map ('fortran, const_eqns)$
@end example

Variables como @code{const_eqns} que afectam @code{reduce_consts} s@~ao:

@code{const_prefix} (valor padr@~ao: @code{xx}) @'e a sequ@^encia de caracteres usada para prefixar todos
os s@'{@dotless{i}}mbolos gerados por @code{reduce_consts} para representar subexpress@~oes constantes.

@code{const_counter} (valor padr@~ao: 1) @'e o @'{@dotless{i}}ndice inteiro usado para gerar s@'{@dotless{i}}mbolos
@'unicos para representar cada subexpress@~ao constante emcontrada por @code{reduce_consts}.

@code{load (rducon)} torna essa fun@value{cedilha}@~ao dispon@'{@dotless{i}}vel para uso.
@code{demo (rducon)} faz uma demonstra@value{cedilha}@~ao dessa fun@value{cedilha}@~ao.
@end deffn

@c rncomb.usg: "rncombine" already in doc/info/Miscellaneous.texi

@c Adapted from scifac.usg ----------------------
@subsection Pacote scifac

@deffn {Fun@value{cedilha}@~ao} gcfac (@var{expr})
@code{gcfac} fun@value{cedilha}@~ao de factoriza@value{cedilha}@~ao que tenta aplicar a mesma heur@'{@dotless{i}}stica que
cient@'{@dotless{i}}stas aplicam em tentativas de fazer express@~oes extremamente simples.  @code{gcfac} est@'a limitada
a factoriza@value{cedilha}@~oes monomiais.  Para um somat@'orio, @code{gcfac} faz o seguinte:

@enumerate
@item
Factores sobre os inteiros.
@item
Coloca em evid@^encia o maior expoente de termos ocorrendo como
coeficientes, independentemente da complexidade dos termos.
@item
Usa (1) e (2) em factoriza@value{cedilha}@~oes de pares de termos adjascentes.
@item
Repetidamente e recursivamente aplica essas t@'ecnicas at@'e que
a express@~ao n@~ao mais mude.
@end enumerate

O item (3) n@~ao necess@'ariamente faz uma tarefa @'optima factoriza@value{cedilha}@~ao
par a par devido @`a dificuldade combinat@'oria natural de encontrar
qual de todas dos poss@'{@dotless{i}}veis rearranjos de pares retorna o mais
compacto resultado de factoriza@value{cedilha}@~ao de um par.

@code{load (scifac)} torna essa fun@value{cedilha}@~ao dispon@'{@dotless{i}}vel para uso.
@code{demo (scifac)} faz uma demonstra@value{cedilha}@~ao dessa fun@value{cedilha}@~ao.
@end deffn

@c Adapted from sqdnst.usg ----------------------
@c THIS FUNCTION IS INTERESTING BUT THIS TEXT NEEDS WORK. HOW DEEPLY CAN SQRT BE NESTED ??
@subsection Pacote sqdnst

@deffn {Fun@value{cedilha}@~ao} sqrtdenest (@var{expr})
Desaninha @code{sqrt} de simples, num@'erico, bin@^omios de ra@'{@dotless{i}}zes irracionais de n@'umeros racionais , onde for poss@'{@dotless{i}}vel.  E.g.

@c ===beg===
@c load (sqdnst)$
@c sqrt(sqrt(3)/2+1)/sqrt(11*sqrt(2)-12);
@c sqrtdenest(%);
@c ===end===
@example
(%i1) load (sqdnst)$
(%i2) sqrt(sqrt(3)/2+1)/sqrt(11*sqrt(2)-12);
                                    sqrt(3)
                               sqrt(------- + 1)
                                       2
(%o2)                        ---------------------
                             sqrt(11 sqrt(2) - 12)
(%i3) sqrtdenest(%);
                                  sqrt(3)   1
                                  ------- + -
                                     2      2
(%o3)                            -------------
                                    1/4    3/4
                                 3 2    - 2
@end example

Algumas vezes isso ajuda na hora de aplicar @code{sqrtdenest} mais que uma vez, sobre coisas como
@code{(19601-13860 sqrt(2))^(7/4)}.

@code{load (sqdnst)} Torna essa fun@value{cedilha}@~ao dispon@'{@dotless{i}}vel para uso.
@end deffn

@c stopex.usg: "expandwrt", "expandwrt_denom", and "expandwrt_factored" already in doc/info/Simplification.texi
