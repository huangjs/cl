@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /Constants.texi/1.19/Sat Jun  2 00:12:34 2007/-ko/
@menu
* Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para Constantes::
@end menu

@node Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para Constantes,  , Constantes, Constantes
@section Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para Constantes

@defvr {Constante} %e
@ifinfo
@vrindex e
@vrindex Constante de Euler
@vrindex Base do logar@'{i}tmo natural
@end ifinfo
@code{%e} representa a base do logar@'{i}tmo natural, tamb@'{e}m conhecido como constante de Euler.
O valor num@'erico de @code{%e} @'{e} um n@'{u}mero em ponto flutuante de precis@~{a}o dupla 2.718281828459045d0.

@end defvr

@defvr {Constante} %i
@ifinfo
@vrindex i
@vrindex Unidade imagin@'{a}ria
@end ifinfo
@code{%i} representa a unidade imagin@'{a}ria, @math{sqrt(- 1)}.

@end defvr

@defvr {Constante} false
@code{false} representa a constante Booleana falso.
Maxima implementa @code{false} atrav@'{e}s do valor @code{NIL} no Lisp.

@end defvr

@defvr {Constante} inf
@ifinfo
@vrindex Infinito positivo real
@end ifinfo
@code{inf} representa o infinito positivo real.

@end defvr

@defvr {Constante}  infinity
@ifinfo
@vrindex Infinito Complexo
@end ifinfo
@code{infinity} representa o infinito complexo.

@end defvr

@defvr {Constante} minf
@ifinfo
@vrindex Menos infinito
@vrindex Infinito negativo
@end ifinfo
@code{minf} representa o menos infinito (i.e., negativo) real.

@end defvr

@defvr {Constante} %phi
@ifinfo
@vrindex phi
@vrindex N@'{u}mero @'{a}ureo
@end ifinfo

@code{%phi} representa o ent@~{a}o chamado @i{n@'{u}mero @'{a}ureo},
@math{(1 + sqrt(5))/2}.
O valor num@'{e}rico de @code{%phi} @'{e} o n@'{u}mero em ponto flutuante de de dupla precis@~{a}o 1.618033988749895d0.

@code{fibtophi} expressa n@'{u}meros de Fibonacci @code{fib(n)} em termos de @code{%phi}.

Por padr@~{a}o, Maxima n@~{a}o conhece as propriedade alg@'{e}bricas de @code{%phi}.
Ap@'{o}s avaliar @code{tellrat(%phi^2 - %phi - 1)} e @code{algebraic: true},
@code{ratsimp} pode simplificar algumas express@~{a}oes contendo @code{%phi}.

Exemplos:

@code{fibtophi} expresses Fibonacci numbers @code{fib(n)} in terms of @code{%phi}.

@c ===beg===
@c fibtophi (fib (n));
@c fib (n-1) + fib (n) - fib (n+1);
@c fibtophi (%);
@c ratsimp (%);
@c ===end===
@example
(%i1) fibtophi (fib (n));
                           n             n
                       %phi  - (1 - %phi)
(%o1)                  -------------------
                           2 %phi - 1
(%i2) fib (n-1) + fib (n) - fib (n+1);
(%o2)          - fib(n + 1) + fib(n) + fib(n - 1)
(%i3) fibtophi (%);
            n + 1             n + 1       n             n
        %phi      - (1 - %phi)        %phi  - (1 - %phi)
(%o3) - --------------------------- + -------------------
                2 %phi - 1                2 %phi - 1
                                          n - 1             n - 1
                                      %phi      - (1 - %phi)
                                    + ---------------------------
                                              2 %phi - 1
(%i4) ratsimp (%);
(%o4)                           0
@end example

Por padr@~{a}o, Maxima n@~{a}o conhece as propriedade alg@'{e}bricas de @code{%phi}.
Ap@'{o}s avaliar @code{tellrat(%phi^2 - %phi - 1)} e @code{algebraic: true},
@code{ratsimp} pode simplificar algumas express@~{a}oes contendo @code{%phi}.

@c ===beg===
@c e : expand ((%phi^2 - %phi - 1) * (A + 1));
@c ratsimp (e);
@c tellrat (%phi^2 - %phi - 1);
@c algebraic : true;
@c ratsimp (e);
@c ===end===
@example
(%i1) e : expand ((%phi^2 - %phi - 1) * (A + 1));
                 2                      2
(%o1)        %phi  A - %phi A - A + %phi  - %phi - 1
(%i2) ratsimp (e);
                  2                     2
(%o2)        (%phi  - %phi - 1) A + %phi  - %phi - 1
(%i3) tellrat (%phi^2 - %phi - 1);
                            2
(%o3)                  [%phi  - %phi - 1]
(%i4) algebraic : true;
(%o4)                         true
(%i5) ratsimp (e);
(%o5)                           0
@end example

@end defvr

@defvr {Constante} %pi
@ifinfo
@vrindex pi
@end ifinfo
@code{%pi} representa a raz@~{a}o do per@'{i}metro de um c@'{i}rculo para seu di@^{a}metro.
O valor num@'{e}rico de @code{%pi} @'{e} o n;umero em ponto flutuante de dupla precis@~{a}o 3.141592653589793d0.

@end defvr

@defvr {Constante} true
@code{true} representa a constante Booleana verdadeiro.
Maxima implementa @code{true} atrav@'{e}s do valor @code{T} no Lisp.

@end defvr
