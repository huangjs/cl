@c Language: Brazilian Portuguese, Encoding: iso-8859-1
@c /linearalgebra.texi/1.13/Sat Jun  2 00:13:24 2007//
@menu
* Introdu@value{cedilha}@~{a}o a linearalgebra::
* Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para linearalgebra::
@end menu

@node Introdu@value{cedilha}@~{a}o a linearalgebra, Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para linearalgebra, linearalgebra, linearalgebra
@section Introdu@value{cedilha}@~{a}o a linearalgebra

@code{linearalgebra} @'{e} uma cole@value{cedilha}@~{a}o de fun@value{cedilha}@~{o}es para @'{a}lgebra linear.

Exemplo:

@c ===beg===
@c M : matrix ([1, 2], [1, 2]);
@c nullspace (M);
@c columnspace (M);
@c ptriangularize (M - z*ident(2), z);
@c M : matrix ([1, 2, 3], [4, 5, 6], [7, 8, 9]) - z*ident(3);
@c MM : ptriangularize (M, z);
@c algebraic : true;
@c tellrat (MM [3, 3]);
@c MM : ratsimp (MM);
@c nullspace (MM);
@c M : matrix ([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]);
@c columnspace (M);
@c apply ('orthogonal_complement, args (nullspace (transpose (M))));
@c ===end===
@example
(%i1) M : matrix ([1, 2], [1, 2]);
                            [ 1  2 ]
(%o1)                       [      ]
                            [ 1  2 ]
(%i2) nullspace (M);
                               [  1  ]
                               [     ]
(%o2)                     span([   1 ])
                               [ - - ]
                               [   2 ]
(%i3) columnspace (M);
                                [ 1 ]
(%o3)                      span([   ])
                                [ 1 ]
(%i4) ptriangularize (M - z*ident(2), z);
                         [ 1   2 - z   ]
(%o4)                    [             ]
                         [           2 ]
                         [ 0  3 z - z  ]
(%i5) M : matrix ([1, 2, 3], [4, 5, 6], [7, 8, 9]) - z*ident(3);
                     [ 1 - z    2      3   ]
                     [                     ]
(%o5)                [   4    5 - z    6   ]
                     [                     ]
                     [   7      8    9 - z ]
(%i6) MM : ptriangularize (M, z);
              [ 4  5 - z            6            ]
              [                                  ]
              [                2                 ]
              [     66        z    102 z   132   ]
              [ 0   --      - -- + ----- + ---   ]
(%o6)         [     49        7     49     49    ]
              [                                  ]
              [               3        2         ]
              [           49 z    245 z    147 z ]
              [ 0    0    ----- - ------ - ----- ]
              [            264      88      44   ]
(%i7) algebraic : true;
(%o7)                         true
(%i8) tellrat (MM [3, 3]);
                         3       2
(%o8)                  [z  - 15 z  - 18 z]
(%i9) MM : ratsimp (MM);
               [ 4  5 - z           6           ]
               [                                ]
               [                2               ]
(%o9)         [     66      7 z  - 102 z - 132 ]
               [ 0   --    - ------------------ ]
               [     49              49         ]
               [                                ]
               [ 0    0             0           ]
(%i10) nullspace (MM);
                        [        1         ]
                        [                  ]
                        [   2              ]
                        [  z  - 14 z - 16  ]
                        [  --------------  ]
(%o10)             span([        8         ])
                        [                  ]
                        [    2             ]
                        [   z  - 18 z - 12 ]
                        [ - -------------- ]
                        [         12       ]
(%i11) M : matrix ([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]);
                       [ 1   2   3   4  ]
                       [                ]
                       [ 5   6   7   8  ]
(%o11)                 [                ]
                       [ 9   10  11  12 ]
                       [                ]
                       [ 13  14  15  16 ]
(%i12) columnspace (M);
                           [ 1  ]  [ 2  ]
                           [    ]  [    ]
                           [ 5  ]  [ 6  ]
(%o12)                span([    ], [    ])
                           [ 9  ]  [ 10 ]
                           [    ]  [    ]
                           [ 13 ]  [ 14 ]
(%i13) apply ('orthogonal_complement, args (nullspace (transpose (M))));
                           [ 0 ]  [  1  ]
                           [   ]  [     ]
                           [ 1 ]  [  0  ]
(%o13)                span([   ], [     ])
                           [ 2 ]  [ - 1 ]
                           [   ]  [     ]
                           [ 3 ]  [ - 2 ]
@end example

@node Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para linearalgebra,  , Introdu@value{cedilha}@~{a}o a linearalgebra, linearalgebra
@section Fun@value{cedilha}@~{o}es e Vari@'{a}veis Definidas para linearalgebra

@deffn {Fun@value{cedilha}@~{a}o} addmatrices (@var{f}, @var{M_1}, ..., @var{M_n})

@c REWORD -- THE RESULT IS NOT GENERALLY THE SUM OF M_1, ..., M_N
Usando a fun@value{cedilha}@~{a}o @var{f} como a fun@value{cedilha}@~{a}o de adi@value{cedilha}@~{a}o, retorne a adi@value{cedilha}@~{a}o das
matrizes @var{M_1}, ..., @var{M_n}. A fun@value{cedilha}@~{a}o @var{f} deve aceitar qualquer n@'{u}mero de
argumentos (uma fun@value{cedilha}@~{a}o en@'{a}ria do Maxima).

Exemplos:

@c ===beg===
@c m1 : matrix([1,2],[3,4])$
@c m2 : matrix([7,8],[9,10])$
@c addmatrices('max,m1,m2);
@c addmatrices('max,m1,m2,5*m1);
@c ===end===
@example
(%i1) m1 : matrix([1,2],[3,4])$
(%i2) m2 : matrix([7,8],[9,10])$
(%i3) addmatrices('max,m1,m2);
(%o3) matrix([7,8],[9,10])
(%i4) addmatrices('max,m1,m2,5*m1);
(%o4) matrix([7,10],[15,20])
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} blockmatrixp (@var{M})

Retorna @code{true} se e somente se @var{M} for uma matriz e toda entrada de
@var{M} tamb@'{e}m for uma matriz.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} columnop (@var{M}, @var{i}, @var{j}, @var{theta})

Se @var{M} for uma matriz, retorna a matriz que resulta de fazer a  
opera@value{cedilha}@~{a}o de coluna @code{C_i <- C_i - @var{theta} * C_j}. Se @var{M} n@~{a}o tiver uma linha
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} columnswap (@var{M}, @var{i}, @var{j})

Se @var{M} for uma matriz, troca as colunas @var{i} e @var{j}.  Se @var{M} n@~{a}o tiver uma coluna
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} columnspace (@var{M})

Se @var{M} for uma matriz, retorna @code{span (v_1, ..., v_n)}, onde o conjunto
@code{@{v_1, ..., v_n@}} @'{e} uma base para o espa@value{cedilha}o coluna de @var{M}.  A diferen@value{cedilha}a entre o maior elemento e o menor elemento do 
conjunto vazio @'{e} @code{@{0@}}. Dessa forma, quando o espa@value{cedilha}o coluna tiver somente 
um membro, retorna @code{span ()}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} copy (@var{e})

Retorna uma c@'{o}pia da express@~{a}o @var{e} do Maxima. Embora @var{e} possa ser qualquer
express@~{a}o do Maxima, A fun@value{cedilha}@~{a}o @code{copy} @'{e} mais @'{u}til quando @var{e} for ou
uma lista ou uma matriz; considere:
@c ===beg===
@c m : [1,[2,3]]$
@c mm : m$
@c mm[2][1] : x$
@c m;
@c mm;
@c ===end===
@example 
(%i1) m : [1,[2,3]]$
(%i2) mm : m$
(%i3) mm[2][1] : x$
(%i4) m;
(%o4)                      [1,[x,3]]
(%i5) mm;
(%o5)                      [1,[x,3]]
@end example
Vamos tentar a mesma experi@^{e}ncia, mas dessa vez tomemos @var{mm} como sendo uma c@'{o}pia de @var{m}
@c ===beg===
@c m : [1,[2,3]]$
@c mm : copy(m)$
@c mm[2][1] : x$
@c m;
@c mm;
@c ===end===
@example
(%i6) m : [1,[2,3]]$
(%i7) mm : copy(m)$
(%i8) mm[2][1] : x$
(%i9) m;
(%o9)                     [1,[2,3]]
(%i10) mm;
(%o10)                    [1,[x,3]]
@end example
Dessa vez, a atribui@value{cedilha}@~{a}o a @var{mm} n@~{a}o muda o valor de @var{m}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} cholesky (@var{M})
@deffnx {Fun@value{cedilha}@~{a}o} cholesky (@var{M}, @var{campo})

Retorna fatoriza@value{cedilha}@~{a}o de Cholesky da matriz hermitiana (or autoadjunta) 
@var{M}. O valor padr@~{a}o para o segundo argumento @'{e} @code{generalring}. Para uma descri@value{cedilha}@~{a}o dos
poss@'{i}veis valores para @var{campo}, veja @code{lu_factor}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} ctranspose (@var{M})

Retorna a matriz transposta conjugada complexa da matriz @var{M}. A fun@value{cedilha}@~{a}o
@code{ctranspose} usa @code{matrix_element_transpose} para transpor cada elemento da matriz.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} diag_matrix (@var{d_1}, @var{d_2},...,@var{d_n})

Retorna uma matriz diagonal matriz com entradas de diagonal @var{d_1}, @var{d_2},...,@var{d_n}.
Quando as entradas de diagonal forem matrizes, as entradas zero da matriz retornada
ser@~{a}o todas matrizes de tamanho apropriado; por exemplo:
@c ===beg===
@c diag_matrix(diag_matrix(1,2),diag_matrix(3,4));
@c diag_matrix(p,q);
@c ===end===
@example
(%i1) diag_matrix(diag_matrix(1,2),diag_matrix(3,4));

                            [ [ 1  0 ]  [ 0  0 ] ]
                            [ [      ]  [      ] ]
                            [ [ 0  2 ]  [ 0  0 ] ]
(%o1)                       [                    ]
                            [ [ 0  0 ]  [ 3  0 ] ]
                            [ [      ]  [      ] ]
                            [ [ 0  0 ]  [ 0  4 ] ]
(%i2) diag_matrix(p,q);

                                   [ p  0 ]
(%o2)                              [      ]
                                   [ 0  q ]
@end example
@end deffn

@deffn {Fun@value{cedilha}@~{a}o} dotproduct (@var{u}, @var{v})

Retorna o produto do ponto (produto escalar) dos vetores @var{u} e @var{v}.  Isso @'{e} o mesmo
que @code{conjugate (transpose (@var{u})) . @var{v}}.  Os argumentos @var{u} e @var{v} devem ser
vetores coluna.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} eigens_by_jacobi (@var{A})
@deffnx {Fun@value{cedilha}@~{a}o} eigens_by_jacobi (@var{A}, @var{tipo_corpo})

Calculam os autovalores e autovetores de @var{A} pelo m@'{e}todo de rota@value{cedilha}@~{o}es de Jacobi.
@var{A} deve ser uma matriz sim@'{e}trica (mas essa matriz sim@'{e}trica precisa n@~{a}o ser nem definida positiva e nem semidefinida positiva).
@var{tipo_corpo} indica o corpo computacional, pode ser ou @code{floatfield} ou @code{bigfloatfield}.
Se @var{tipo_corpo} n@~{a}o for especificado, o padr@~{a}o @'{e} @code{floatfield}.

Os elementos de @var{A} devem ser n@'{u}meros ou express@~{o}es que avaliam para n@'{u}meros
via @code{float} ou @code{bfloat} (dependendo do valor de @var{tipo_corpo}).

Exemplos:
@c ===beg===
@c S : matrix ([1/sqrt(2), 1/sqrt(2)], [- 1/sqrt(2), 1/sqrt(2)]);
@c L : matrix ([sqrt(3), 0], [0, sqrt(5)]);
@c M : S . L . transpose (S);
@c eigens_by_jacobi (M);
@c float ([[sqrt(3), sqrt(5)], S]);
@c eigens_by_jacobi (M, bigfloatfield);
@c ===end===

@example
(%i1) S : matrix ([1/sqrt(2), 1/sqrt(2)], [- 1/sqrt(2), 1/sqrt(2)]);                     [     1         1    ]
                     [     1         1    ]
                     [  -------   ------- ]
                     [  sqrt(2)   sqrt(2) ]
(%o1)                [                    ]
                     [      1        1    ]
                     [ - -------  ------- ]
                     [   sqrt(2)  sqrt(2) ]
(%i2) L : matrix ([sqrt(3), 0], [0, sqrt(5)]);
                      [ sqrt(3)     0    ]
(%o2)                 [                  ]
                      [    0     sqrt(5) ]
(%i3) M : S . L . transpose (S);
            [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
            [ ------- + -------  ------- - ------- ]
            [    2         2        2         2    ]
(%o3)       [                                      ]
            [ sqrt(5)   sqrt(3)  sqrt(5)   sqrt(3) ]
            [ ------- - -------  ------- + ------- ]
            [    2         2        2         2    ]
(%i4) eigens_by_jacobi (M);
The largest percent change was 0.1454972243679
The largest percent change was 0.0
number of sweeps: 2
number of rotations: 1
(%o4) [[1.732050807568877, 2.23606797749979], 
                        [  0.70710678118655   0.70710678118655 ]
                        [                                      ]]
                        [ - 0.70710678118655  0.70710678118655 ]
(%i5) float ([[sqrt(3), sqrt(5)], S]);
(%o5) [[1.732050807568877, 2.23606797749979], 
                        [  0.70710678118655   0.70710678118655 ]
                        [                                      ]]
                        [ - 0.70710678118655  0.70710678118655 ]
(%i6) eigens_by_jacobi (M, bigfloatfield);
The largest percent change was 1.454972243679028b-1
The largest percent change was 0.0b0
number of sweeps: 2
number of rotations: 1
(%o6) [[1.732050807568877b0, 2.23606797749979b0], 
                [  7.071067811865475b-1   7.071067811865475b-1 ]
                [                                              ]]
                [ - 7.071067811865475b-1  7.071067811865475b-1 ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} get_lu_factors (@var{x}) 

Quando @code{@var{x} = lu_factor (@var{A})}, ent@~{a}o @code{get_lu_factors} retorna uma lista da 
forma @code{[P, L, U]}, onde @var{P} @'{e} uma matriz de permuta@value{cedilha}@~{a}o, @var{L} @'{e} triangular baixa com
a diagonal preenchida com a unidade, e @var{U} @'{e} triangular alta, e @code{@var{A} = @var{P} @var{L} @var{U}}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} hankel (@var{col})
@deffnx {Fun@value{cedilha}@~{a}o} hankel (@var{col}, @var{lin})

Retorna uma matriz de Hankel @var{H}. A primeira coluna de @var{H} @'{e} @var{col};
exceto para a primeira entrada, a @'{u}ltima linha de @var{H} @'{e} @var{lin}. O
valor padr@~{a}o para @var{lin} @'{e} o vetor nulo com o mesmo comprimento que @var{col}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} hessian (@var{f},@var{vars})

Retorna a matriz hessiana de @var{f} com rela@value{cedilha}@~{a}o @`as vari@'{a}veis na lista
@var{vars}.  As entradas @var{i},@var{j} da matriz hessiana s@~{a}o
@var{diff(f vars[i],1,vars[j],1)}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} hilbert_matrix (@var{n})

Retorna the @var{n} by @var{n} matriz de Hilbert. Quando @var{n} n@~{a}o for um inteiro
positivo, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} identfor (@var{M})
@deffnx {Fun@value{cedilha}@~{a}o} identfor (@var{M}, @var{corpo})

Retorna uma matriz identidade que tem o mesmo tamanho que a matriz
@var{M}.  As entradas de diagonal da matriz identidade s@~{a}o a 
identidade multiplicativa do corpo @var{corpo}; o padr@~{a}o para
@var{corpo} @'{e} @var{generalring}.

O primeiro argumento @var{M} pode ser uma  matriz quadrada ou um 
n@~{a}o matriz. Quando @var{M} for uma matriz, cada entrada de @var{M} pode ser uma
matriz quadrada -- dessa forma @var{M} pode ser uma matriz de bloco do Maxima. A
matriz pode ser de bloco para qualquer (finita) quantidade de n@'{i}veis.

Veja tamb@'{e}m @code{zerofor}

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} invert_by_lu (@var{M}, @var{(rng generalring)})

Inverte a matriz @var{M} atrav@'{e}s de fatoriza@value{cedilha}@~{a}o linear alta (LU).  A fatoriza@value{cedilha}@~{a}o LU
@'{e} conclu@'{i}da usando o anel @var{rng}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} kronecker_product (@var{A}, @var{B})

Retorna o produto de Kronecker das matrizes @var{A} e @var{B}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} listp (@var{e}, @var{p})
@deffnx {Fun@value{cedilha}@~{a}o} listp (@var{e})

Recebendo um argumento opcional @var{p}, retorna @code{true} se @var{e} for 
uma lista do Maxima e @var{p} avalia para @code{true} para elemento da lista.
Quando @code{listp} n@~{a}o recebe o argumento opcional, retorna @code{true} se @var{e} for 
uma lista do Maxima.  em todos os outros casos, retorna @code{false}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} locate_matrix_entry (@var{M}, @var{r_1}, @var{c_1}, @var{r_2}, @var{c_2}, @var{f}, @var{rel})

O primeiro argumento deve ser uma matriz; os argumentos que v@~{a}o de
@var{r_1} at@'{e} @var{c_2} determinam um sub-matriz de @var{M} que consiste de
linhas que v@~{a}o de @var{r_1} at@'{e} @var{r_2} e colunas que v@~{a}o de @var{c_1} at@'{e} @var{c_2}. 

Encontra uma entrada na sub-matriz @var{M} que satisfaz alguma propriedade. 
Existem tr@^{e}s casos:

(1) @code{@var{rel} = 'bool} e @var{f} um predicado: 

Examina a sub-matriz da esquerda para a direita e de cima para baixo,
e retorna o @'{i}ndice da primeria entrada que satisfizer o 
predicado @var{f}. Se nenhuma entrada da matriz satisfizer o predicado @var{f}, retorna @code{false}.

(2) @code{@var{rel} = 'max} e @var{f} avaliar para um n@'{u}mero real:

Examina a sub-matriz procurando por uma entrada que maximize @var{f}.
Retorna retorna o @'{i}ndice da entrada maximizada.

(3) @code{@var{rel} = 'min} e @var{f} avaliar para um n@'{u}mero real:

Examina a sub-matriz procurando por uma entrada que minimize @var{f}. 
Retorna o @'{i}ndice de uma entrada minimizada.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} lu_backsub (@var{M}, @var{b})

Quando @code{@var{M} = lu_factor (@var{A}, @var{corpo})},
ent@~{a}o @code{lu_backsub (@var{M}, @var{b})} resolve o sistema
linear @code{@var{A} @var{x} = @var{b}}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} lu_factor (@var{M}, @var{corpo})

Retorna uma lista da forma @code{[@var{LU}, @var{perm}, @var{corpo}]}, 
ou da forma @code{[@var{LU}, @var{perm}, @var{cmp}, @var{baixo-cnd} @var{alto-cnd}]}, onde

  (1) A matriz @var{LU} cont@'{e}a fatoriza@value{cedilha}@~{a}o de @var{M} na forma enpacotada. Forma
      empacotada significa tr@^{e}s coisas: Primeiro, as linhas de @var{LU} s@~{a}o permutadas confirme a 
      lista @var{perm}.  Se, por exemplo, @var{perm} for a lista list @code{[3,2,1]}, a primeira linha atual 
      da fatoriza@value{cedilha}@~{a}o @var{LU} ser@'{a} a terceira linha da matriz @var{LU}. Segundo,
      o fator triangular baixo de m @'{e} a parte triangular baixa de @var{LU} com as
      entradas de diagonal todas substitu@'{i}das pela unidade. Terceiro, o fator triangular alto de 
      @var{M} @'{e} a parte triangular alta de @var{LU}.  

  (2) Quando o corpo for ou @code{floatfield} ou @code{complexfield},
      os n@'{u}meros @var{baixo-cnd} e @var{alto-cnd} ser@~{a}o associados baixo e alto para o 
      n@'{u}mero condicional de norma infinita de @var{M}.  Para todos os corpos (fields), o n@'{u}mero condicional de norma infinita 
      n@~{a}o pode ser estimado; para tais corpos, @code{lu_factor} retorna uma lista com dois itens.
      Ambos o baixo e o alto associado  podem diferir de seus verdadeiros valores de 
      fatores arbitr@'{a}riamente grandes. (Veja tamb@'{e}m @code{mat_cond}.)
   
  O argumento @var{M} deve ser a matriz quadrada.

  O argumento opcional @var{cmp} deve ser um s@'{i}mbolo que determine um anel ou corpo. Os corpos e an@'{e}is 
  predefinidos s@~{a}o:

    (a) @code{generalring} -- o anel de express@~{o}es do Maxima,
    (b) @code{floatfield} --  o corpo dos n@'{u}meros em ponto flutuante do tipo de precis@~{a}o dupla,
    (c) @code{complexfield} --  o corpo dos n@'{u}meros complexos em ponto flutuante do 
        tipo de precis@~{a}o dupla,
    (d) @code{crering}  -- o anel das express@~{o}es racionais can@^{o}nicas (CRE) do Maxima,
    (e) @code{rationalfield} -- o corpo dos n@'{u}meros racionais,
    (f) @code{runningerror} -- rastro de todos os erros de arredondamento de n@'{u}meros em ponto flutuante,
    (g) @code{noncommutingring} -- o anel de express@~{o}es do Maxima onde multiplica@value{cedilha}@~{a}o for o
        operador ponto n@~{a}o comutativo.       

Quando o corpo for @code{floatfield}, @code{complexfield}, ou
@code{runningerror}, o algor@'{i}tmo usa pivotagem parcial; para todos
os outros corpos, linhas s@~{a}o comutadas somente quando necess@'{a}rio para evitar um piv@^{o}
nulo.

A adi@value{cedilha}@~{a}o aritm@'{e}tica em ponto flutuante n@~{a}o @'{e} associativa, ent@~{a}o o significado
de 'corpo' difere da defini@value{cedilha}@~{a}o matem@'{a}tica.

Um membro do corpo @code{runningerror} @'{e} uma lista do M@'{a}xima de dois membros
da forma @code{[x,n]},onde @var{x} @'{e} um n@'{u}mero em onto flutuante e
@code{n} @'{e} um inteiro. A diferen@value{cedilha}a relativa entre o valor de
'verdadeiro' de @code{x} e @code{x} @'{e} aproximadamente associado pelo @'{e}psilon da
m@'{a}quina vezes @code{n}. O erro de execu@value{cedilha}@~{a}o associado arrasta alguns termos
da ordem do quadrado do @'{e}psilon da m@'{a}quina.

N@~{a}o existe interface de usu@'{a}rio definida um novo anel. Um usu@'{a}rio que estiver
familiazrizado com o Lisp Comum est@'{a} apto para definir um novo corpo.  Para fazer
isso, um usu@'{a}rio deve definir fun@value{cedilha}@~{o}es para as opera@value{cedilha}@~{o}es aritm@'{e}ticas e
fun@value{cedilha}@~{o}es para convers@~{a}o para a representa@value{cedilha}@~{a}o de corpo do M@'{a}xima e
vice-versa. Adicionalmente, para corpos ordenados (onde a pivotagem parcial ser@'{a}
usada), um udu@'{a}rio deve definir fun@value{cedilha}@~{o}es para m@'{o}dulo e para
comparar membros do corpo.  Ap@'{o}s isso tudo que resta @'{e} definir uma
estrutura de Lisp Comum @code{mring}.  O arquivo @code{mring} tem muitos
exemplos.
 
Para calcular a fatoriza@value{cedilha}@~{a}o, a primeira tarefa @'{e} converter cada entrada de
matriz para um elemento do corpo indicado. Quando a cnvers@~{a}o n@~{a}o for
poss@'{i}vel, a fatoriza@value{cedilha}@~{a}o encerra com uma mensagem de erro. Elementos do
corpo n@~{a}o precisam ser express@~{o}es do Maxima.  Elementos do
@code{complexfield}, por exemplo, s@~{a}o n@'{u}meros complexos do Lisp Comum. Dessa forma
ap@'{o}s calcular a fatoriza@value{cedilha}@~{a}o, como entradas da matriz devem ser
convertidas para express@~{o}es do Maxima.

Veja tamb@'{e}m  @code{get_lu_factors}.

Exemplos:
@c ===beg===
@c w[i,j] := random (1.0) + %i * random (1.0);
@c showtime : true$
@c M : genmatrix (w, 100, 100)$
@c lu_factor (M, complexfield)$
@c lu_factor (M, generalring)$
@c showtime : false$
@c M : matrix ([1 - z, 3], [3, 8 - z]);
@c lu_factor (M, generalring);
@c get_lu_factors (%);
@c %[1] . %[2] . %[3];
@c ===end===
@example
(%i1) w[i,j] := random (1.0) + %i * random (1.0);
(%o1)          w     := random(1.) + %i random(1.)
                i, j
(%i2) showtime : true$
Evaluation took 0.00 seconds (0.00 elapsed)
(%i3) M : genmatrix (w, 100, 100)$
Evaluation took 7.40 seconds (8.23 elapsed)
(%i4) lu_factor (M, complexfield)$
Evaluation took 28.71 seconds (35.00 elapsed)
(%i5) lu_factor (M, generalring)$
Evaluation took 109.24 seconds (152.10 elapsed)
(%i6) showtime : false$

(%i7) M : matrix ([1 - z, 3], [3, 8 - z]); 
                        [ 1 - z    3   ]
(%o7)                   [              ]
                        [   3    8 - z ]
(%i8) lu_factor (M, generalring);
          [ 1 - z         3        ]
          [                        ]
(%o8)    [[   3            9       ], [1, 2], generalring]
          [ -----  - z - ----- + 8 ]
          [ 1 - z        1 - z     ]
(%i9) get_lu_factors (%);
                  [   1    0 ]  [ 1 - z         3        ]
        [ 1  0 ]  [          ]  [                        ]
(%o9) [[      ], [   3      ], [                9       ]]
        [ 0  1 ]  [ -----  1 ]  [   0    - z - ----- + 8 ]
                  [ 1 - z    ]  [              1 - z     ]
(%i10) %[1] . %[2] . %[3];
                        [ 1 - z    3   ]
(%o10)                  [              ]
                        [   3    8 - z ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} mat_cond (@var{M}, 1)
@deffnx {Fun@value{cedilha}@~{a}o} mat_cond (@var{M}, inf)

Retorna o n@'{u}mero condiciona da norma de ordem @var{p} da matriz
@var{m}. Os valores permitidos para @var{p} s@~{a}o 1 e @var{inf}.  Essa
fun@value{cedilha}@~{a}o utiliza a fatoriza@value{cedilha}@~{a}o linear alta para inverter a matriz @var{m}. Dessa forma
o tempode execu@value{cedilha}@~{a}o para @code{mat_cond} @'{e} proporcional ao cubo do
tamanho da matriz; @code{lu_factor} determina as associa@value{cedilha}@~{a}oes baixa e alta
para o n@'{u}mero de condi@value{cedilha}@~{a}o de norma infinita em tempo proporcional ao
quadrado do tamanho da matriz.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} mat_norm (@var{M}, 1)
@deffnx {Fun@value{cedilha}@~{a}o} mat_norm (@var{M}, inf)
@deffnx {Fun@value{cedilha}@~{a}o} mat_norm (@var{M}, frobenius)

Retorna a matriz de norma @var{p} da matriz @var{M}.  Os valores permitidos para @var{p} s@~{a}o
1, @code{inf}, e @code{frobenius} (a norma da matriz de Frobenius). A matriz @var{M} pode ser
uma matriz n@~{a}o de bloco.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} matrixp (@var{e}, @var{p})
@deffnx {Fun@value{cedilha}@~{a}o} matrixp (@var{e})

Fornecendo um argumento opcional @var{p}, @code{matrixp} retorna @code{true} se @var{e} for
uma matriz e @var{p} avaliar para @code{true} para todo elemento da matriz.
Quando a @code{matrixp} n@~{a}o for fornecido umargumento opcional, retorna @code{true} 
se @code{e} for uma matriz.  em todos os outros casos, retorna @code{false}.

Veja tamb@'{e}m @code{blockmatrixp}

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} matrix_size (@var{M})

Retorna uma lista com dois elementos que fornecem o n@'{u}mero de linhas e colunas, respectivamente
da matriz @var{M}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} mat_fullunblocker (@var{M})

Se @var{M} for uma matriz de bloco, expande todos os blocos da matriz em todos os n@'{i}veis. Se @var{M} for uma matriz,
retorna @var{M}; de outra forma, emite uma mensagem de erro. 

@c precisa de exemplo aqui

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} mat_trace (@var{M})

Retorna o tra@value{cedilha}o da matriz @var{M}. Se @var{M} n@~{a}o for uma matriz, retorna uma
forma substantiva. Quando @var{M} for uma matriz de bloco, @code{mat_trace(M)} retorna
o mesmo valor retornado por @code{mat_trace(mat_unblocker(m))}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} mat_unblocker (@var{M})

Se @var{M} for uma matriz de bloco, @code{mat_unbloker} desfaz o bloco de @var{M} um n@'{i}vel. Se @var{M} for uma matriz, 
@code{mat_unblocker (M)} retorna @var{M}; de outra forma, emite uma mensagem de erro.

Dessa forma se cada entrada de @var{M} for matriz, @code{mat_unblocker (M)} retorna uma 
matriz "desblocada", mas se cada entrada de @var{M} for uma matriz de bloco, @code{mat_unblocker (M)} 
retorna uma matriz de bloco com um n@'{i}vel de bloco a menos.

Se voc@^{e} usa matrizes de bloco, muito provavelmente voc@^{e} ir@'{a} querer escolher @code{matrix_element_mult} para 
@code{"."} e @code{matrix_element_transpose} para @code{'transpose}. Veja tamb@'{e}m @code{mat_fullunblocker}.

Exemplo:

@c ===beg===
@c A : matrix ([1, 2], [3, 4]);
@c B : matrix ([7, 8], [9, 10]);
@c matrix ([A, B]);
@c mat_unblocker (%);
@c ===end===
@example
(%i1) A : matrix ([1, 2], [3, 4]);
                            [ 1  2 ]
(%o1)                       [      ]
                            [ 3  4 ]
(%i2) B : matrix ([7, 8], [9, 10]);
                            [ 7  8  ]
(%o2)                       [       ]
                            [ 9  10 ]
(%i3) matrix ([A, B]);
                     [ [ 1  2 ]  [ 7  8  ] ]
(%o3)                [ [      ]  [       ] ]
                     [ [ 3  4 ]  [ 9  10 ] ]
(%i4) mat_unblocker (%);
                         [ 1  2  7  8  ]
(%o4)                    [             ]
                         [ 3  4  9  10 ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} nonnegintegerp (@var{n})

Retorna @code{true} se e somente se @code{@var{n} >= 0} e @var{n} for um inteiro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} nullspace (@var{M})

Se @var{M} for uma matriz, retorna @code{span (v_1, ..., v_n)}, onde o conjunto @code{@{v_1, ..., v_n@}}
@'{e} uma base para o espa@value{cedilha}o nulo de @var{M}.  A diferen@value{cedilha}a entre o maior elemento e o menor elemento do conjunto vazio @'{e}  @code{@{0@}}.  
Dessa forma, quando o espa@value{cedilha}o nulo tiver somente um membro, retorna @code{span ()}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} nullity (@var{M})

Se @var{M} for uma matriz, retorna a dimens@~{a}o do espa@value{cedilha}o nulo de @var{M}.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} orthogonal_complement (@var{v_1}, ..., @var{v_n})

Retorna @code{span (u_1, ..., u_m)}, onde o conjunto @code{@{u_1, ..., u_m@}} @'{e} uma 
base para o complemento ortogonal do conjunto @code{(v_1, ..., v_n)}.

Cada vetor no intervalo de @var{v_1} at@'{e} @var{v_n} deve ser um vetor coluna.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} polynomialp (@var{p}, @var{L}, @var{coeffp}, @var{exponp})
@deffnx {Fun@value{cedilha}@~{a}o} polynomialp (@var{p}, @var{L}, @var{coeffp})
@deffnx {Fun@value{cedilha}@~{a}o} polynomialp (@var{p}, @var{L})

Retorna @code{true} se @var{p} for um polin@^{o}mio nas vari@'{a}veis da lista @var{L},
O predicado @var{coeffp} deve avaliar para @code{true} para cada
coeficiente, e o predicado @var{exponp} deve avaliar para @code{true} para todos os 
expoentes das vari@'{a}veis na lista @var{L}. Se voc@^{e} quiser usar um valor
personalizado para @var{exponp}, voc@^{e} deve fornecer @var{coeffp} com um valor mesmo se voc@^{e} quiser
o valor padr@~{a}o para @var{coeffp}.

@c WORK THE FOLLOWING INTO THE PRECEDING
@code{polynomialp (@var{p}, @var{L}, @var{coeffp})} @'{e} equivalente a
@code{polynomialp (@var{p}, @var{L}, @var{coeffp}, 'nonnegintegerp)}.

@code{polynomialp (@var{p}, @var{L})} @'{e} equivalente a
@code{polynomialp (@var{p}, L@var{,} 'constantp, 'nonnegintegerp)}.

O polin@^{o}mio n@~{a}o precisa ser expandido:

@c ===beg===
@c polynomialp ((x + 1)*(x + 2), [x]);
@c polynomialp ((x + 1)*(x + 2)^a, [x]);
@c ===end===
@example
(%i1) polynomialp ((x + 1)*(x + 2), [x]);
(%o1)                         true
(%i2) polynomialp ((x + 1)*(x + 2)^a, [x]);
(%o2)                         false
@end example

Um exemplo usando um valor personalizado para @code{coeffp} e para @code{exponp}:

@c ===beg===
@c polynomialp ((x + 1)*(x + 2)^(3/2), [x], numberp, numberp);
@c polynomialp ((x^(1/2) + 1)*(x + 2)^(3/2), [x], numberp, numberp);
@c ===end===
@example
(%i1) polynomialp ((x + 1)*(x + 2)^(3/2), [x], numberp, numberp);
(%o1)                         true
(%i2) polynomialp ((x^(1/2) + 1)*(x + 2)^(3/2), [x], numberp, numberp);
(%o2)                         true
@end example

Polin@^{o}mios com duas vari@'{a}veis:

@c ===beg===
@c polynomialp (x^2 + 5*x*y + y^2, [x]);
@c polynomialp (x^2 + 5*x*y + y^2, [x, y]);
@c ===end===
@example
(%i1) polynomialp (x^2 + 5*x*y + y^2, [x]);
(%o1)                         false
(%i2) polynomialp (x^2 + 5*x*y + y^2, [x, y]);
(%o2)                         true
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} polytocompanion (@var{p}, @var{x})

Se @var{p} for um polin@^{o}mio em @var{x}, retorna a atriz companheira de @var{p}. Para
um polin@^{o}mio m@^{o}nico @var{p} de grau @var{n},
temos @code{@var{p} = (-1)^@var{n} charpoly (polytocompanion (@var{p}, @var{x}))}.

Quando @var{p} n@~{a}o for um polin@^{o}mio em @var{x}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} ptriangularize (@var{M}, @var{v})

Se @var{M} for uma matriz onde cada entrada dessa matriz for um polin@^{o}mio em @var{v}, retorna 
a matriz @var{M2} tal que

(1) @var{M2} @'{e} triangular alta,

(2) @code{@var{M2} = @var{E_n} ... @var{E_1} @var{M}},
onde os elemetnos de @var{E_1} a @var{E_n} s@~{a}o matrizes elementares 
cujas entrada s@~{a}o polin@^{o}mios em @var{v},

(3) @code{|det (@var{M})| = |det (@var{M2})|},

Nota: Essa fun@value{cedilha}@~{a}o n@~{a}o verifica se toda entrada @'{e} um polin@^{o}mio em @var{v}.  

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} rowop (@var{M}, @var{i}, @var{j}, @var{theta})

Se @var{M} for uma matriz, retorna a matriz que resulta de se fazer a  
opera@value{cedilha}@~{a}o de linha @code{R_i <- R_i - theta * R_j}. Se @var{M} n@~{a}o tiver uma linha
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} rank (@var{M})

Retorna o ranque daquela matriz @var{M}. O rank @'{e} a dimens@~{a}o do
espa@value{cedilha}o coluna. Exemplo:
@c ===beg===
@c rank(matrix([1,2],[2,4]));
@c rank(matrix([1,b],[c,d]));
@c ===end===
@example
(%i1) rank(matrix([1,2],[2,4]));
(%o1)                                  1
(%i2) rank(matrix([1,b],[c,d]));
 Proviso:  @{d - b c # 0@}
(%o2)                                  2
@end example

@end deffn


@deffn {Fun@value{cedilha}@~{a}o} rowswap (@var{M}, @var{i}, @var{j})

Se @var{M} for uma matriz, permuta as linha @var{i} e @var{j}. Se @var{M} n@~{a}o tiver uma linha
@var{i} ou @var{j}, emite uma mensagem de erro.

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} toeplitz (@var{col})
@deffnx {Fun@value{cedilha}@~{a}o} toeplitz (@var{col}, @var{lin})

Retorna uma matriz de Toeplitz @var{T}. a primeira coluna de @var{T} @'{e} @var{col};
exceto para a primeira entrada, a primeira linha de @var{T} @'{e} @var{lin}. O
padr@~{a}o para @var{lin} @'{e} o conjugado complexo de @var{col}. Exemplo:
@c ===beg===
@c toeplitz([1,2,3],[x,y,z]);
@c toeplitz([1,1+%i]);
@c ==end===
@example
(%i1)  toeplitz([1,2,3],[x,y,z]);

                                  [ 1  y  z ]
                                  [         ]
(%o1)                             [ 2  1  y ]
                                  [         ]
                                  [ 3  2  1 ]
(%i2)  toeplitz([1,1+%i]);

                              [   1     1 - %I ]
(%o2)                         [                ]
                              [ %I + 1    1    ]
@end example

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} vandermonde_matrix ([@var{x_1}, ..., @var{x_n}])

Retorna uma matriz @var{n} por @var{n} cuja @var{i}-@'{e}sima linha @'{e} 
@code{[1, @var{x_i}, @var{x_i}^2, ... @var{x_i}^(@var{n}-1)]}. 

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} zerofor (@var{M})
@deffnx {Fun@value{cedilha}@~{a}o}  zerofor (@var{M}, @var{fld})

Retorna uma matriz zero que tem o mesmo tamanho da matriz
@var{M}.  Toda entrada da matriz zero @'{e} a
identidade aditiva do anel @var{fld}; o valor padr@~{a}o para
@var{fld} @'{e} @var{generalring}.

O primeiro argumento @var{M} pode ser uma matriz quadrada ou uma
n@~{a}o matriz. Quando @var{M} for uma matriz, cada entrada de @var{M} pode ser uma
matriz quadrada -- dessa forma @var{M} pode ser uma matriz de bloco do Maxima. A
matriz pode ser de bloco para qualquer n@'{i}vel (finito).

Veja tamb@'{e}m @code{identfor}

@end deffn

@deffn {Fun@value{cedilha}@~{a}o} zeromatrixp (@var{M})

Se @var{M} n@~{a}o for uma matriz de bloco, retorna @code{true} se @code{is (equal (@var{e}, 0))} 
for verdadeiro para cada elemento @var{e} da matriz @var{M}.  Se @var{M} for uma matriz de bloco, retorna
@code{true} se @code{zeromatrixp} avaliar para @code{true} para cada elemento de @var{e}.

@end deffn
