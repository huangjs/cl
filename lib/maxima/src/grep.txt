airy.lisp:  (declare (type double-float z))
airy.lisp:    (declare (type double-float zmax))
airy.lisp:  (declare (type (complex double-float) z))
airy.lisp:    (declare (type double-float air aii)
airy.lisp:  (declare (type double-float z))
airy.lisp:    (declare (type double-float rz c))
airy.lisp:  (declare (type (complex double-float) z))
airy.lisp:    (declare (type double-float air aii)
airy.lisp:  (declare (type double-float z))
airy.lisp:    (declare (type double-float zmax))
airy.lisp:  (declare (type (complex double-float) z))
airy.lisp:    (declare (type double-float bir bii)
airy.lisp:  (declare (type double-float z))
airy.lisp:    (declare (type double-float zmax))
airy.lisp:        (declare (type double-float rz c))
airy.lisp:  (declare (type (complex double-float) z))
airy.lisp:    (declare (type double-float bir bii)
algfac.lisp:(declare-top (special anotype invc fctc))
askp.lisp:(declare-top(notype n))
bessel.lisp:  (declare (type integer n))
bessel.lisp:  (declare (type unsigned-byte n))
clmacs.lisp:    ;;declare the type and result of numerical operations
clmacs.lisp:    (declare (type (simple-array fixnum (11)) curs))
comm.lisp:(declare-top (notype i n largl lvrs count tim))
commac.lisp:  (declare (type string ar) (fixnum leng)
cpoly.lisp:     (declare (special my-type))
cpoly.lisp:  (declare (special my-type))
cpoly.lisp:  (declare (special my-type))
cpoly.lisp:  (declare (special my-type))
csimp2.lisp:;;(declare-top (notype sum))
csimp2.lisp:  (declare (type (complex double-float) z)
csimp2.lisp:    (declare (type (simple-array double-float (15)) c))
csimp2.lisp:;;(declare-top (notype a r))
db.lisp:(declare-top(notype lab))
ellipt.lisp:	(declare (type (double-float 0d0) x y)
ellipt.lisp:      (declare (type (complex double-float) x y z)
ellipt.lisp:      (declare (type (double-float 0d0) x y power4 sigma)
ellipt.lisp:    (declare (type (double-float 0d0) x)
ellipt.lisp:      (declare (type (double-float 0d0) xn)
ellipt.lisp:	 (declare (type double-float sn))
ellipt.lisp:    (declare (type (double-float 0d0) x y z)
ellipt.lisp:      (declare (type (double-float 0d0) xn yn zn)
laplac.lisp:(declare-top(notype exponent)) 
laplac.lisp:(declare-top(notype order)) 
laplac.lisp:(declare-top(notype k)) 
macsys.lisp:    (declare (type (simple-array #-64bit (unsigned-byte 32)
marray.lisp:;;; On the maxima level a declared array not of type HASH or FUNCTIONAL 
matrix.lisp:(declare-top(notype nn len))
maxmac.lisp:    #-nil ,@(if type `((declare (,type ,variable))))))
mdebug.lisp:  (declare (type (vector t) ar) (fixnum i))
mdebug.lisp:  (declare (fixnum start) (type string string))
mdebug.lisp:  (declare (type (vector #.(array-element-type "ab")) li))
mdebug.lisp:  (declare (fixnum i) (type (vector t) ar))
mlisp.lisp:      (declare (type (vector t) ar))
mlisp.lisp:				(declare (type (vector t) ar))
mstuff.lisp:(declare-top(notype n))
mtrace.lisp:  (declare (ignore type))
nparse.lisp:	       (declare (type (vector #.(array-element-type "a")) li))
nrat4.lisp:(declare-top(notype nargs))
nset.lisp:  (declare (type (simple-array fixnum *) p r))
nset.lisp:  (declare (type fixnum n))
numer.lisp:  (declare (ignore type-list))
numerical/f2cl-lib.lisp:  (declare (type (array * (*)) array))
numerical/f2cl-lib.lisp:    (declare (type fixnum offset)
numerical/f2cl-lib.lisp:  (declare (ignore type indices bounds))
numerical/f2cl-lib.lisp:      (declare (type integer4 ,step ,iteration_count))
numerical/f2cl-lib.lisp:  (declare (type integer4 x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type complex x))
numerical/f2cl-lib.lisp:  (declare (type (complex double-float) x))
numerical/f2cl-lib.lisp:  (declare (type single-float x y))
numerical/f2cl-lib.lisp:  (declare (type double-float x y))
numerical/f2cl-lib.lisp:  (declare (type integer4 x y))
numerical/f2cl-lib.lisp:  (declare (type (or integer4 single-float double-float) x y))
numerical/f2cl-lib.lisp:  (declare (type double-float x y))
numerical/f2cl-lib.lisp:  (declare (type integer4 x y))
numerical/f2cl-lib.lisp:  (declare (type (or integer4 single-float double-float) x y))
numerical/f2cl-lib.lisp:  (declare (type double-float x y))
numerical/f2cl-lib.lisp:  #-gcl(declare (type integer4 x y))
numerical/f2cl-lib.lisp:  (declare (type (complex double-float) c))
numerical/f2cl-lib.lisp:  (declare (type (complex double-float) c))
numerical/f2cl-lib.lisp:  (declare (type (double-float 0d0) x))
numerical/f2cl-lib.lisp:  (declare (type (or (single-float (0f0)) (member 0f0)) x))
numerical/f2cl-lib.lisp:  (declare (type (or (double-float (0d0)) (member 0d0)) x))
numerical/f2cl-lib.lisp:  (declare (type (or (single-float (0f0)) (member 0f0)) x))
numerical/f2cl-lib.lisp:  (declare (type (or (double-float (0d0)) (member 0d0)) x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type complex x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type complex x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type complex x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type complex x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type single-float x))
numerical/f2cl-lib.lisp:  (declare (type double-float x y))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:  (declare (type double-float x))
numerical/f2cl-lib.lisp:	     (declare (type integer4 ,do-var))
numerical/f2cl-lib.lisp:	     (declare (type integer4 ,do-var))
numerical/slatec/d9aimp.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/d9aimp.lisp:    (declare (type (double-float) theta ampl x))
numerical/slatec/d9aimp.lisp:      (declare (type (single-float) eta) (type (double-float) z sqrtx))
numerical/slatec/d9b0mp.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/d9b0mp.lisp:    (declare (type (double-float) theta ampl x))
numerical/slatec/d9b0mp.lisp:      (declare (type (single-float) eta) (type (double-float) z))
numerical/slatec/d9b1mp.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/d9b1mp.lisp:    (declare (type (double-float) theta ampl x))
numerical/slatec/d9b1mp.lisp:      (declare (type (single-float) eta) (type (double-float) z))
numerical/slatec/d9lgmc.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/d9lgmc.lisp:    (declare (type (double-float) x))
numerical/slatec/d9lgmc.lisp:      (declare (type (double-float) d9lgmc))
numerical/slatec/d9upak.lisp:  (declare (type (integer) n) (type (double-float) y x))
numerical/slatec/d9upak.lisp:    (declare (type (double-float) absx))
numerical/slatec/dai.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dai.lisp:    (declare (type (double-float) x))
numerical/slatec/dai.lisp:      (declare (type (double-float) dai xmaxt z xm theta))
numerical/slatec/daie.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/daie.lisp:    (declare (type (double-float) x))
numerical/slatec/daie.lisp:      (declare (type (single-float) eta sqrt$)
numerical/slatec/dasyik.lisp:  (declare (type (array double-float (65)) c)
numerical/slatec/dasyik.lisp:    (declare (type (array double-float (*)) y)
numerical/slatec/dasyik.lisp:        (declare (type (f2cl-lib:integer4) l kk k jn j)
numerical/slatec/dasyjy.lisp:  (declare (type (array double-float (26)) gama)
numerical/slatec/dasyjy.lisp:    (declare (type (array double-float (*)) wk y)
numerical/slatec/dasyjy.lisp:        (declare (type (array f2cl-lib:integer4 (5)) kmax)
numerical/slatec/dbesi.lisp:  (declare (type (f2cl-lib:integer4) inlim) (type (double-float) rttpi))
numerical/slatec/dbesi.lisp:    (declare (type (array double-float (*)) y)
numerical/slatec/dbesi.lisp:        (declare (type (f2cl-lib:integer4) ns nn kt km kk k i1 is in ialp i)
numerical/slatec/dbesi0.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesi0.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesi0.lisp:      (declare (type (double-float) dbesi0 y))
numerical/slatec/dbesi1.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesi1.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesi1.lisp:      (declare (type (double-float) dbesi1 y))
numerical/slatec/dbesj.lisp:  (declare (type (simple-array double-float (2)) fnulim)
numerical/slatec/dbesj.lisp:    (declare (type (array double-float (*)) y)
numerical/slatec/dbesj.lisp:      (declare (type (f2cl-lib:integer4) ns nn kt km kk k i2 i1 is in iflw
numerical/slatec/dbesj0.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesj0.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesj0.lisp:      (declare (type (double-float) dbesj0 y theta ampl))
numerical/slatec/dbesj1.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesj1.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesj1.lisp:      (declare (type (double-float) dbesj1 y theta ampl))
numerical/slatec/dbesk.lisp:  (declare (type (simple-array f2cl-lib:integer4 (2)) nulim))
numerical/slatec/dbesk.lisp:    (declare (type (simple-array double-float (*)) y)
numerical/slatec/dbesk.lisp:      (declare (type (integer) log$)
numerical/slatec/dbesk0.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesk0.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesk0.lisp:      (declare (type (double-float) dbesk0 y xmaxt))
numerical/slatec/dbesk1.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesk1.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesk1.lisp:      (declare (type (double-float) dbesk1 y xmaxt))
numerical/slatec/dbesy.lisp:  (declare (type (simple-array f2cl-lib:integer4 (2)) nulim))
numerical/slatec/dbesy.lisp:    (declare (type (simple-array double-float (*)) y)
numerical/slatec/dbesy.lisp:      (declare (type (integer) log$)
numerical/slatec/dbesy0.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesy0.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesy0.lisp:      (declare (type (double-float) dbesy0 y theta ampl))
numerical/slatec/dbesy1.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbesy1.lisp:    (declare (type (double-float) x))
numerical/slatec/dbesy1.lisp:      (declare (type (double-float) dbesy1 y theta ampl))
numerical/slatec/dbi.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbi.lisp:    (declare (type (double-float) x))
numerical/slatec/dbi.lisp:      (declare (type (single-float) eta) (type (double-float) dbi z xm theta))
numerical/slatec/dbie.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbie.lisp:    (declare (type (double-float) x))
numerical/slatec/dbie.lisp:      (declare (type (single-float) eta sqrt$)
numerical/slatec/dbsi0e.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbsi0e.lisp:    (declare (type (double-float) x))
numerical/slatec/dbsi0e.lisp:      (declare (type (single-float) eta sqrt$) (type (double-float) dbsi0e y))
numerical/slatec/dbsi1e.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbsi1e.lisp:    (declare (type (double-float) x))
numerical/slatec/dbsi1e.lisp:      (declare (type (single-float) eta sqrt$) (type (double-float) dbsi1e y))
numerical/slatec/dbsk0e.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbsk0e.lisp:    (declare (type (double-float) x))
numerical/slatec/dbsk0e.lisp:      (declare (type (single-float) eta sqrt$) (type (double-float) dbsk0e y))
numerical/slatec/dbsk1e.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dbsk1e.lisp:    (declare (type (double-float) x))
numerical/slatec/dbsk1e.lisp:      (declare (type (single-float) eta sqrt$) (type (double-float) dbsk1e y))
numerical/slatec/dbsknu.lisp:  (declare (type (simple-array double-float (8)) cc)
numerical/slatec/dbsknu.lisp:    (declare (type (simple-array double-float (*)) y)
numerical/slatec/dbsknu.lisp:      (declare (type (f2cl-lib:integer4) nn koded kk k j inu iflag i)
numerical/slatec/dbsynu.lisp:  (declare (type (simple-array double-float (8)) cc)
numerical/slatec/dbsynu.lisp:    (declare (type (simple-array double-float (*)) y)
numerical/slatec/dbsynu.lisp:      (declare (type (f2cl-lib:integer4) nn kk k j inu i)
numerical/slatec/dcsevl.lisp:  (declare (type f2cl-lib:logical first$) (type (double-float) onepl))
numerical/slatec/dcsevl.lisp:    (declare (type (integer) n)
numerical/slatec/dcsevl.lisp:      (declare (type (integer) i ni)
numerical/slatec/de1.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/de1.lisp:    (declare (type (double-float) x))
numerical/slatec/de1.lisp:      (declare (type (single-float) eta) (type (double-float) de1 xmaxt))
numerical/slatec/dei.lisp:  (declare (type (double-float) x))
numerical/slatec/dei.lisp:    (declare (type (double-float) dei))
numerical/slatec/derf.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/derf.lisp:    (declare (type (double-float) x))
numerical/slatec/derf.lisp:      (declare (type (double-float) derf y))
numerical/slatec/derfc.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/derfc.lisp:    (declare (type (double-float) x))
numerical/slatec/derfc.lisp:      (declare (type (single-float) eta) (type (double-float) derfc y txmax))
numerical/slatec/dgamlm.lisp:  (declare (type (double-float) xmax xmin))
numerical/slatec/dgamlm.lisp:    (declare (type (integer) i) (type (double-float) xold xln alnsml alnbig))
numerical/slatec/dgamln.lisp:  (declare (type (double-float) con)
numerical/slatec/dgamln.lisp:    (declare (type (f2cl-lib:integer4) ierr) (type (double-float) z))
numerical/slatec/dgamln.lisp:      (declare (type (double-float) dgamln zsq zp zmin zm zinc zdmy wdtol t1
numerical/slatec/dgamma.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dgamma.lisp:    (declare (type (double-float) x))
numerical/slatec/dgamma.lisp:      (declare (type (integer) n i) (type (double-float) dgamma y sinpiy))
numerical/slatec/dgtsl.lisp:  (declare (type (array double-float (*)) b e d c)
numerical/slatec/dgtsl.lisp:      (declare (type (f2cl-lib:integer4) nm2 nm1 kp1 kb k)
numerical/slatec/djairy.lisp:  (declare (type (simple-array double-float (24)) dak2)
numerical/slatec/djairy.lisp:    (declare (type (double-float) dai ai c rx x))
numerical/slatec/djairy.lisp:      (declare (type (f2cl-lib:integer4) j i)
numerical/slatec/dlngam.lisp:  (declare (type f2cl-lib:logical first$)
numerical/slatec/dlngam.lisp:    (declare (type (double-float) x))
numerical/slatec/dlngam.lisp:      (declare (type (integer) log$)
numerical/slatec/dqag.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqag.lisp:      (declare (type (f2cl-lib:integer4) l3 l2 l1 lvl))
numerical/slatec/dqage.lisp:  (declare (type (array f2cl-lib:integer4 (*)) iord)
numerical/slatec/dqage.lisp:      (declare (type (double-float) uflow resabs errsum erro12 error2 error1
numerical/slatec/dqagi.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqagi.lisp:      (declare (type (f2cl-lib:integer4) l3 l2 l1 lvl))
numerical/slatec/dqagie.lisp:  (declare (type (array f2cl-lib:integer4 (*)) iord)
numerical/slatec/dqagie.lisp:      (declare (type (array double-float (52)) rlist2)
numerical/slatec/dqagpe.lisp:  (declare (type (array f2cl-lib:integer4 (*)) ndin level iord)
numerical/slatec/dqagpe.lisp:      (declare (type (array double-float (52)) rlist2)
numerical/slatec/dqags.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqags.lisp:      (declare (type (f2cl-lib:integer4) l3 l2 l1 lvl))
numerical/slatec/dqagse.lisp:  (declare (type (array f2cl-lib:integer4 (*)) iord)
numerical/slatec/dqagse.lisp:      (declare (type (array double-float (52)) rlist2)
numerical/slatec/dqawc.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqawc.lisp:      (declare (type (f2cl-lib:integer4) l3 l2 l1 lvl))
numerical/slatec/dqawce.lisp:  (declare (type (array f2cl-lib:integer4 (*)) iord)
numerical/slatec/dqawce.lisp:      (declare (type (double-float) uflow errsum error2 erro12 error1 errmax
numerical/slatec/dqawf.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqawf.lisp:      (declare (type (f2cl-lib:integer4) l6 l5 l4 l3 l2 l1 lvl ll2 limit))
numerical/slatec/dqawfe.lisp:  (declare (type (double-float) pi$ p))
numerical/slatec/dqawfe.lisp:    (declare (type (array f2cl-lib:integer4 (*)) nnlog iord ierlst)
numerical/slatec/dqawfe.lisp:        (declare (type (array double-float (3)) res3la)
numerical/slatec/dqawo.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqawo.lisp:      (declare (type (f2cl-lib:integer4) momcom l4 l3 l2 l1 lvl limit))
numerical/slatec/dqawoe.lisp:  (declare (type (array f2cl-lib:integer4 (*)) nnlog iord)
numerical/slatec/dqawoe.lisp:      (declare (type (array double-float (52)) rlist2)
numerical/slatec/dqaws.lisp:  (declare (type (array double-float (*)) work)
numerical/slatec/dqaws.lisp:      (declare (type (f2cl-lib:integer4) l3 l2 l1 lvl))
numerical/slatec/dqawse.lisp:  (declare (type (array f2cl-lib:integer4 (*)) iord)
numerical/slatec/dqawse.lisp:      (declare (type (array double-float (25)) rj ri rh rg)
numerical/slatec/dqc25c.lisp:  (declare (type (array double-float (11)) x))
numerical/slatec/dqc25c.lisp:    (declare (type (f2cl-lib:integer4) neval krul)
numerical/slatec/dqc25c.lisp:      (declare (type (array double-float (25)) fval cheb24)
numerical/slatec/dqc25f.lisp:  (declare (type (array double-float (11)) x))
numerical/slatec/dqc25f.lisp:    (declare (type (array double-float (*)) chebmo)
numerical/slatec/dqc25f.lisp:        (declare (type (array double-float (28)) v)
numerical/slatec/dqc25s.lisp:  (declare (type (array double-float (11)) x))
numerical/slatec/dqc25s.lisp:    (declare (type (f2cl-lib:integer4) nev integr)
numerical/slatec/dqc25s.lisp:        (declare (type (array double-float (25)) fval cheb24)
numerical/slatec/dqcheb.lisp:  (declare (type (array double-float (*)) cheb12)
numerical/slatec/dqcheb.lisp:      (declare (type (array double-float (12)) v)
numerical/slatec/dqelg.lisp:  (declare (type (array double-float (*)) res3la)
numerical/slatec/dqelg.lisp:      (declare (type (double-float) error$ tol3 tol2 tol1 ss res oflow e3 e2
numerical/slatec/dqk15.lisp:  (declare (type (array double-float (8)) wgk xgk)
numerical/slatec/dqk15.lisp:    (declare (type (double-float) resasc resabs abserr result b a))
numerical/slatec/dqk15.lisp:      (declare (type (array double-float (7)) fv2 fv1)
numerical/slatec/dqk15i.lisp:  (declare (type (array double-float (8)) wgk xgk wg))
numerical/slatec/dqk15i.lisp:    (declare (type (f2cl-lib:integer4) inf)
numerical/slatec/dqk15i.lisp:      (declare (type (array double-float (7)) fv2 fv1)
numerical/slatec/dqk15w.lisp:  (declare (type (array double-float (4)) wg)
numerical/slatec/dqk15w.lisp:    (declare (type (f2cl-lib:integer4) kp)
numerical/slatec/dqk15w.lisp:      (declare (type (array double-float (7)) fv2 fv1)
numerical/slatec/dqk21.lisp:  (declare (type (array double-float (11)) wgk xgk)
numerical/slatec/dqk21.lisp:    (declare (type (double-float) resasc resabs abserr result b a))
numerical/slatec/dqk21.lisp:      (declare (type (array double-float (10)) fv2 fv1)
numerical/slatec/dqk31.lisp:  (declare (type (array double-float (16)) wgk xgk)
numerical/slatec/dqk31.lisp:    (declare (type (double-float) resasc resabs abserr result b a))
numerical/slatec/dqk31.lisp:      (declare (type (array double-float (15)) fv2 fv1)
numerical/slatec/dqk41.lisp:  (declare (type (array double-float (21)) wgk xgk)
numerical/slatec/dqk41.lisp:    (declare (type (double-float) resasc resabs abserr result b a))
numerical/slatec/dqk41.lisp:      (declare (type (array double-float (20)) fv2 fv1)
numerical/slatec/dqk51.lisp:  (declare (type (array double-float (26)) wgk xgk)
numerical/slatec/dqk51.lisp:    (declare (type (double-float) resasc resabs abserr result b a))
numerical/slatec/dqk51.lisp:      (declare (type (array double-float (25)) fv2 fv1)
numerical/slatec/dqk61.lisp:  (declare (type (array double-float (31)) wgk xgk)
numerical/slatec/dqk61.lisp:    (declare (type (double-float) resasc resabs abserr result b a))
numerical/slatec/dqk61.lisp:      (declare (type (array double-float (30)) fv2 fv1)
numerical/slatec/dqmomo.lisp:  (declare (type (f2cl-lib:integer4) integr)
numerical/slatec/dqmomo.lisp:      (declare (type (double-float) rbet ralf betp2 betp1 anm1 an alfp2 alfp1)
numerical/slatec/dqng.lisp:  (declare (type (array double-float (23)) w87b)
numerical/slatec/dqng.lisp:    (declare (type (f2cl-lib:integer4) ier neval)
numerical/slatec/dqng.lisp:      (declare (type (array double-float (21)) savfun)
numerical/slatec/dqpsrt.lisp:  (declare (type (array f2cl-lib:integer4 (*)) iord)
numerical/slatec/dqpsrt.lisp:      (declare (type (double-float) errmin errmax)
numerical/slatec/dqwgtc.lisp:  (declare (type (f2cl-lib:integer4) kp) (type (double-float) p4 p3 p2 c x))
numerical/slatec/dqwgtc.lisp:    (declare (type (double-float) dqwgtc))
numerical/slatec/dqwgtf.lisp:  (declare (type (f2cl-lib:integer4) integr)
numerical/slatec/dqwgtf.lisp:    (declare (type (double-float) dqwgtf omx))
numerical/slatec/dqwgts.lisp:  (declare (type (f2cl-lib:integer4) integr)
numerical/slatec/dqwgts.lisp:    (declare (type (double-float) dqwgts xma bmx))
numerical/slatec/dspenc.lisp:  (declare (type (integer) nspenc)
numerical/slatec/dspenc.lisp:    (declare (type (double-float) x))
numerical/slatec/dspenc.lisp:      (declare (type (double-float) dspenc aln))
numerical/slatec/dyairy.lisp:  (declare (type (simple-array double-float (21)) dbk1)
numerical/slatec/dyairy.lisp:    (declare (type (double-float) dbi bi c rx x))
numerical/slatec/dyairy.lisp:      (declare (type (f2cl-lib:integer4) j i)
numerical/slatec/initds.lisp:  (declare (type (single-float) eta)
numerical/slatec/initds.lisp:    (declare (type (single-float) err) (type (integer) ii i initds))
numerical/slatec/j4save.lisp:  (declare (type (simple-array f2cl-lib:integer4 (9)) iparam))
numerical/slatec/j4save.lisp:    (declare (type f2cl-lib:logical iset) (type (integer) ivalue iwhich))
numerical/slatec/j4save.lisp:      (declare (type (integer) j4save))
numerical/slatec/xercnt.lisp:  (declare (type (integer) kontrl level nerr)
numerical/slatec/xerhlt.lisp:  (declare (type (simple-array character (*)) messg))
numerical/slatec/xermsg.lisp:  (declare (type (integer) level nerr)
numerical/slatec/xermsg.lisp:    (declare (type (integer) lkntrl maxmes kdummy i kount lerr llevel mkntrl
numerical/slatec/xerprn.lisp:  (declare (type (simple-array character (2)) newlin))
numerical/slatec/xerprn.lisp:    (declare (type (f2cl-lib:integer4) nwrap npref)
numerical/slatec/xerprn.lisp:      (declare (type (integer) n i lpref lwrap lenmsg nextc lpiece idelta)
numerical/slatec/xersve.lisp:  (declare (type (integer 10 10) lentab))
numerical/slatec/xersve.lisp:    (declare (type (integer) nmsg kountx)
numerical/slatec/xersve.lisp:      (declare (type (integer) icount level nerr kflag)
numerical/slatec/xersve.lisp:        (declare (type (integer) nunit kunit iunit i)
numerical/slatec/xgetua.lisp:  (declare (type (integer) n)
numerical/slatec/xgetua.lisp:    (declare (type (integer) i f2cl-lib:index))
numerical/slatec/zabs.lisp:  (declare (type (double-float) zi zr))
numerical/slatec/zabs.lisp:    (declare (type (double-float) zabs s q v u))
numerical/slatec/zacai.lisp:  (declare (type (double-float) pi$))
numerical/slatec/zacai.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zacai.lisp:      (declare (type (simple-array double-float (2)) cyi cyr)
numerical/slatec/zacon.lisp:  (declare (type (double-float) coner zeror pi$))
numerical/slatec/zacon.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zacon.lisp:      (declare (type (simple-array double-float (2)) cyr cyi)
numerical/slatec/zairy.lisp:  (declare (type (double-float) conei coner zeroi zeror coef c2 c1 tth))
numerical/slatec/zairy.lisp:    (declare (type (f2cl-lib:integer4) ierr nz kode id)
numerical/slatec/zairy.lisp:      (declare (type (simple-array double-float (1)) cyr cyi)
numerical/slatec/zasyi.lisp:  (declare (type (double-float) conei coner zeroi zeror rtpi pi$))
numerical/slatec/zasyi.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zasyi.lisp:      (declare (type (double-float) tzr tzi s2r s2i str sti sqk sgn s rzr rzi
numerical/slatec/zbesh.lisp:  (declare (type (double-float) hpi))
numerical/slatec/zbesh.lisp:    (declare (type (simple-array double-float (*)) cyi cyr)
numerical/slatec/zbesh.lisp:      (declare (type (double-float) csgni csgnr sti atol rtol ascle bb zti znr
numerical/slatec/zbesi.lisp:  (declare (type (double-float) conei coner pi$))
numerical/slatec/zbesi.lisp:    (declare (type (simple-array double-float (*)) cyi cyr)
numerical/slatec/zbesi.lisp:      (declare (type (double-float) sti atol rtol ascle fn bb az znr zni tol
numerical/slatec/zbesj.lisp:  (declare (type (double-float) hpi))
numerical/slatec/zbesj.lisp:    (declare (type (simple-array double-float (*)) cyi cyr)
numerical/slatec/zbesj.lisp:      (declare (type (double-float) sti atol rtol ascle az fn bb znr zni tol
numerical/slatec/zbesk.lisp:  (declare (type (simple-array double-float (*)) cyi cyr)
numerical/slatec/zbesk.lisp:    (declare (type (double-float) bb ufl tol r1m5 rl fnul fn elim dig az arg
numerical/slatec/zbesy.lisp:  (declare (type (simple-array double-float (*)) cwrki cwrkr cyi cyr)
numerical/slatec/zbesy.lisp:    (declare (type (double-float) r1m5 tol bb aa atol rtol ascle tay str sti
numerical/slatec/zbinu.lisp:  (declare (type (double-float) zeroi zeror))
numerical/slatec/zbinu.lisp:    (declare (type (simple-array double-float (*)) cyi cyr)
numerical/slatec/zbinu.lisp:      (declare (type (simple-array double-float (2)) cwr cwi)
numerical/slatec/zbiry.lisp:  (declare (type (double-float) conei coner pi$ coef c2 c1 tth))
numerical/slatec/zbiry.lisp:    (declare (type (f2cl-lib:integer4) ierr kode id)
numerical/slatec/zbiry.lisp:      (declare (type (simple-array double-float (2)) cyr cyi)
numerical/slatec/zbknu.lisp:  (declare (type (simple-array double-float (8)) cc)
numerical/slatec/zbknu.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zbknu.lisp:      (declare (type (simple-array double-float (2)) cyi cyr)
numerical/slatec/zbuni.lisp:  (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zbuni.lisp:    (declare (type (simple-array double-float (3)) bry)
numerical/slatec/zbunk.lisp:  (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zbunk.lisp:    (declare (type (double-float) ay ax))
numerical/slatec/zdiv.lisp:  (declare (type (double-float) ci cr bi br ai ar))
numerical/slatec/zdiv.lisp:    (declare (type (double-float) cd cc cb ca bm))
numerical/slatec/zexp.lisp:  (declare (type (double-float) bi br ai ar))
numerical/slatec/zexp.lisp:    (declare (type (double-float) cb ca zm))
numerical/slatec/zkscl.lisp:  (declare (type (double-float) zeroi zeror))
numerical/slatec/zkscl.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zkscl.lisp:      (declare (type (simple-array double-float (2)) cyr cyi)
numerical/slatec/zlog.lisp:  (declare (type (double-float) dhpi dpi))
numerical/slatec/zlog.lisp:    (declare (type (f2cl-lib:integer4) ierr) (type (double-float) bi br ai ar))
numerical/slatec/zlog.lisp:      (declare (type (double-float) dtheta zm))
numerical/slatec/zmlri.lisp:  (declare (type (double-float) conei coner zeroi zeror))
numerical/slatec/zmlri.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zmlri.lisp:      (declare (type (double-float) tst tfnf sumr sumi str sti scle rzr rzi
numerical/slatec/zmlt.lisp:  (declare (type (double-float) ci cr bi br ai ar))
numerical/slatec/zmlt.lisp:    (declare (type (double-float) cb ca))
numerical/slatec/zrati.lisp:  (declare (type (double-float) rt2 conei coner czeroi czeror))
numerical/slatec/zrati.lisp:    (declare (type (simple-array double-float (*)) cyi cyr)
numerical/slatec/zrati.lisp:      (declare (type (double-float) t1r t1i ttr tti test1 test rzr rzi rho rap1
numerical/slatec/zs1s2.lisp:  (declare (type (double-float) zeroi zeror))
numerical/slatec/zs1s2.lisp:    (declare (type (f2cl-lib:integer4) iuf nz)
numerical/slatec/zs1s2.lisp:      (declare (type (double-float) s1dr s1di c1r c1i as2 as1 aln aa)
numerical/slatec/zseri.lisp:  (declare (type (double-float) conei coner zeroi zeror))
numerical/slatec/zseri.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zseri.lisp:      (declare (type (simple-array double-float (2)) wr wi)
numerical/slatec/zshch.lisp:  (declare (type (double-float) cchi cchr cshi cshr zi zr))
numerical/slatec/zshch.lisp:    (declare (type (double-float) sn sh cn ch))
numerical/slatec/zsqrt.lisp:  (declare (type (double-float) dpi drt))
numerical/slatec/zsqrt.lisp:    (declare (type (double-float) bi br ai ar))
numerical/slatec/zsqrt.lisp:      (declare (type (double-float) dtheta zm))
numerical/slatec/zuchk.lisp:  (declare (type (f2cl-lib:integer4) nz) (type (double-float) tol ascle yi yr))
numerical/slatec/zuchk.lisp:    (declare (type (double-float) wi wr st ss))
numerical/slatec/zunhj.lisp:  (declare (type (double-float) conei coner zeroi zeror thpi gpi hpi ex2 ex1)
numerical/slatec/zunhj.lisp:    (declare (type (f2cl-lib:integer4) ipmtr)
numerical/slatec/zunhj.lisp:      (declare (type (simple-array double-float (14)) upr upi drr dri crr cri)
numerical/slatec/zuni1.lisp:  (declare (type (double-float) coner zeroi zeror))
numerical/slatec/zuni1.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zuni1.lisp:      (declare (type (simple-array double-float (2)) cyi cyr)
numerical/slatec/zuni2.lisp:  (declare (type (simple-array double-float (4)) cipi cipr)
numerical/slatec/zuni2.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zuni2.lisp:      (declare (type (simple-array double-float (2)) cyi cyr)
numerical/slatec/zunik.lisp:  (declare (type (simple-array double-float (120)) c)
numerical/slatec/zunik.lisp:    (declare (type (simple-array double-float (*)) cwrki cwrkr)
numerical/slatec/zunik.lisp:      (declare (type (double-float) znr zni t2r t2i tr ti test str sti srr sri
numerical/slatec/zunk1.lisp:  (declare (type (double-float) pi$ coner zeroi zeror))
numerical/slatec/zunk1.lisp:    (declare (type (array double-float (*)) yi yr)
numerical/slatec/zunk1.lisp:        (declare (type (array double-float (2)) zeta2r zeta2i zeta1r zeta1i
numerical/slatec/zunk2.lisp:  (declare (type (simple-array double-float (4)) cipi cipr)
numerical/slatec/zunk2.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zunk2.lisp:      (declare (type (simple-array double-float (3)) cssr csrr bry)
numerical/slatec/zuoik.lisp:  (declare (type (double-float) aic zeroi zeror))
numerical/slatec/zuoik.lisp:    (declare (type (simple-array double-float (*)) yi yr)
numerical/slatec/zuoik.lisp:      (declare (type (integer) log$)
numerical/slatec/zwrsk.lisp:  (declare (type (simple-array double-float (*)) cwi cwr)
numerical/slatec/zwrsk.lisp:    (declare (type (double-float) str sti ract ptr pti c2r c2i c1r c1i ctr cti
plot.lisp:    (declare (type (cl:array double-float) rot))
plot.lisp:  (declare (type (vector double-float) pts))
plot.lisp:  (declare (type (cl:array double-float) pts)
plot.lisp:  (declare (type (cl:array double-float) pts))
plot.lisp:              (declare (type (cl:array double-float) pts))
plot.lisp:  (declare (type (cl:array (double-float))  points)
plot.lisp:    (declare (type (cl:array (mod 65000)) new)
plot.lisp:    (declare (type (cl:array double-float) tem))
plot.lisp:    (declare (type (cl:array double-float) ar))
rand-mt19937.lisp:  (declare (type (integer 1 #xffffffff) seed))
rand-mt19937.lisp:    (declare (type (simple-array (unsigned-byte 32) (627)) state))
rand-mt19937.lisp:      (declare (type (mod 625) k))
rand-mt19937.lisp:  (declare (type (array (unsigned-byte 32) (*)) key))
rand-mt19937.lisp:  (declare (type (or null integer
rand-mt19937.lisp:  (declare (type (simple-array (unsigned-byte 32) (627)) state)
rand-mt19937.lisp:    (declare (type (unsigned-byte 32) y))
rand-mt19937.lisp:      (declare (type (mod 628) kk))
rand-mt19937.lisp:      (declare (type (mod 628) kk))
rand-mt19937.lisp:  (declare (type random-state state)
rand-mt19937.lisp:    (declare (type (mod 628) k))
rand-mt19937.lisp:      (declare (type (unsigned-byte 32) y))
rand-mt19937.lisp:  (declare (type (integer 1) arg) (type random-state state))
rpart.lisp:(declare-top (notype (expanintexpt notype fixnum)))
server.lisp:  (declare (type (or integer string) host) (fixnum port) (type boolean bin))
simp.lisp:(declare-top(notype l1 l2 xn nargs i))
specfn.lisp:(declare-top(notype x))
suprv1.lisp:(declare-top (notype i n n1 n2 u1))
todd-coxeter.lisp:      (declare (fixnum nvars) (type (vector t) multiply-table))
todd-coxeter.lisp:		  (declare (type (vector (coset)) ta1 ta2))
todd-coxeter.lisp:		    (declare (type  (vector (coset)) ta))
ufact.lisp:(declare-top (special modulus coef-type))
