;; Object utils/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "utils/"
  :tables (list 
   (semanticdb-table "hjs-utils.asd"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1 22]) ("asdf:defsystem" code nil nil [24 652]))
    :file "hjs-utils.asd"
    :pointmax 653
    :unmatched-syntax 'nil
    )
   (semanticdb-table "extremum.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1 28]) ("define-condition" code nil nil [30 241]) ("comparator" function (:arguments ("test" "&optional" "key")) nil [243 592]) ("define-compiler-macro" code nil nil [645 890]) ("zero-length-p" function (:arguments ("sequence")) nil [1192 1415]) ("declaim" code nil nil [1417 1449]) ("with-check-length" function (:arguments ("sequence" "&body" "body")) nil [1638 1941]) ("extremum" function (:arguments ("sequence" "predicate" "&key" "key" "start" "end")) nil [2103 2528]) ("define-compiler-macro" code nil nil [2581 2979]) ("extremum-fastkey" function (:arguments ("sequence" "predicate" "&key" "key" "start" "end")) nil [3387 4331]) ("extrema" function (:arguments ("sequence" "predicate" "&key" "key" "start" "end")) nil [4583 5423]) ("define-condition" code nil nil [5427 6235]) ("n-most-extreme" function (:arguments ("n" "sequence" "predicate" "&key" "key" "start" "end")) nil [6237 7093]))
    :file "extremum.lisp"
    :pointmax 7094
    :unmatched-syntax 'nil
    )
   (semanticdb-table "read-delimited.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1 22]) ("defpackage" code nil nil [24 122]) ("in-package" code nil nil [124 161]) ("define-condition" code nil nil [862 1480]) ("%read-delimited-bounds-check" function (:arguments ("sequence" "start" "end")) nil [1541 1996]) ("%read-delimited-bounds-check-order" function (:arguments ("sequence" "start" "end")) nil [1998 2362]) ("%read-delimited-bounds-check-start" function (:arguments ("sequence" "start" "end")) nil [2364 2730]) ("%read-delimited-bounds-check-end" function (:arguments ("sequence" "start" "end")) nil [2732 3125]))
    :file "read-delimited.lisp"
    :pointmax 3126
    :unmatched-syntax 'nil
    )
   (semanticdb-table "memoize.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [982 1260]) ("in-package" code nil nil [1262 1292]) ("*memoized-functions*" variable (:default-value (quote nil)) nil [1294 1375]) ("make-memo" function (:arguments ("fn" "key" "test")) nil [1377 1780]) ("memoize-function" function (:arguments ("fn-name" "&key" "key" "test")) nil [1811 2831]) ("unmemoize-function" function (:arguments ("fn-name")) nil [2833 3182]) ("unmemoize-functions" function nil nil [3184 3391]) ("clear-memoized-function" function (:arguments ("fn-name")) nil [3393 3663]) ("clear-memoized-functions" function nil nil [3665 3821]) ("function-memoized-p" function (:arguments ("fn-name")) nil [3823 3969]) ("def-memoized-function" function (:arguments ("fnspec" "args" "&body" "bod")) nil [3971 5143]) ("memoized-labels" function (:arguments ("&rest" "&body" "bod")) nil [5248 7813]) ("pushnew" code nil nil [7850 7909]))
    :file "memoize.lisp"
    :pointmax 7910
    :unmatched-syntax 'nil
    )
   (semanticdb-table "cps.lisp"
    :major-mode 'lisp-mode
    :tags '(("declaim" code nil nil [1426 1487]) ("defpackage" code nil nil [1490 1530]) ("in-package" code nil nil [1532 1558]) ("@eval" function (:arguments ("k")) nil [1580 1641]) ("@eval*" function (:arguments ("k")) nil [1717 1787]) ("cps-lambda" function (:arguments ("&rest" "forms")) nil [1789 1877]) ("ret/cc" function (:arguments ("k")) nil [1879 1899]) ("let/cc" function (:arguments ("variable" "&rest" "forms")) nil [1901 1999]) ("defconstant" code nil nil [2001 2101]) ("@special-form-p" function (:arguments ("form")) nil [2103 2215]) ("cps-transform-forms" function (:arguments ("forms")) nil [2260 2352]) ("cps-transform-forms*" function (:arguments ("forms")) nil [2354 2437]) ("cps-transform-form" function (:arguments ("form")) nil [2439 4336]) ("@defun" function (:arguments ("name" "args" "&rest" "forms")) nil [4408 4737]) ("@progn" function (:arguments ("k" "forms")) nil [4757 5036]) ("@if" function (:arguments ("k" "condition" "then" "&optional" "else")) nil [5038 5264]) ("@let*" function (:arguments ("k" "variables" "values" "forms")) nil [5266 5563]) ("safe-symbol" function (:arguments ("symbol")) nil [5565 5655]) ("call/cc" function (:arguments ("k")) nil [5681 5725]))
    :file "cps.lisp"
    :pointmax 5727
    :unmatched-syntax 'nil
    )
   (semanticdb-table "expt-mod.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [61 89]) ("expt-mod" function (:arguments ("n" "exponent" "modulus")) nil [451 848]))
    :file "expt-mod.lisp"
    :pointmax 1206
    :unmatched-syntax 'nil
    )
   (semanticdb-table "lisp-unit.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [4308 4788]) ("in-package" code nil nil [4790 4822]) ("defparameter" code nil nil [4968 5002]) ("defparameter" code nil nil [5004 5044]) ("*test-count*" variable nil nil [5098 5121]) ("*pass-count*" variable nil nil [5122 5145]) ("*test-name*" variable nil nil [5192 5216]) ("defparameter" code nil nil [5380 5413]) ("define-test" function (:arguments ("name" "&body" "body")) nil [5574 5674]) ("assert-eq" function (:arguments ("expected" "form" "&rest" "extras")) nil [5695 5805]) ("assert-eql" function (:arguments ("expected" "form" "&rest" "extras")) nil [5807 5919]) ("assert-equal" function (:arguments ("expected" "form" "&rest" "extras")) nil [5921 6037]) ("assert-equalp" function (:arguments ("expected" "form" "&rest" "extras")) nil [6039 6157]) ("assert-error" function (:arguments ("condition" "form" "&rest" "extras")) nil [6159 6299]) ("assert-false" function (:arguments ("form" "&rest" "extras")) nil [6514 6604]) ("assert-equality" function (:arguments ("test" "expected" "form" "&rest" "extras")) nil [6607 6728]) ("assert-prints" function (:arguments ("output" "form" "&rest" "extras")) nil [6730 6869]) ("assert-true" function (:arguments ("form" "&rest" "extras")) nil [6871 6958]) ("expand-assert" function (:arguments ("type" "form" "body" "expected" "extras" "&key" "test")) nil [6961 7145]) ("expand-error-form" function (:arguments ("form")) nil [7149 7236]) ("expand-output-form" function (:arguments ("form")) nil [7238 7476]) ("expand-macro-form" function (:arguments ("form" "env")) nil [7478 7545]) ("expand-extras" function (:arguments ("extras")) nil [7547 7664]) ("run-all-tests" function (:arguments ("package" "&rest" "tests")) nil [7686 7889]) ("run-tests" function (:arguments ("&rest" "names")) nil [7891 8015]) ("get-test-thunks" function (:arguments ("names" "&optional" "package")) nil [8017 8147]) ("get-test-thunk" function (:arguments ("name" "package")) nil [8149 8372]) ("use-debugger" function (:arguments ("&optional" "flag")) nil [8374 8444]) ("with-test-listener" function (:arguments ("listener" "&body" "body")) nil [8469 8568]) ("get-test-code" function (:arguments ("name" "&optional" "package")) nil [8724 8881]) ("get-tests" function (:arguments ("&optional" "package")) nil [8883 9234]) ("remove-tests" function (:arguments ("names" "&optional" "package")) nil [9237 9478]) ("remove-all-tests" function (:arguments ("&optional" "package")) nil [9480 9627]) ("get-package-table" function (:arguments ("package" "&key" "create")) nil [9809 10034]) ("get-test-name" function (:arguments ("form")) nil [10036 10100]) ("store-test-code" function (:arguments ("name" "code" "&optional" "package")) nil [10102 10259]) ("internal-assert" function (:arguments ("type" "form" "code-thunk" "expected-thunk" "extras" "test")) nil [10285 10702]) ("record-result" function (:arguments ("passed" "type" "form" "expected" "actual" "extras")) nil [10704 10953]) ("default-listener" function (:arguments ("passed" "type" "name" "form" "expected" "actual" "extras" "test-count" "pass-count")) nil [10955 11215]) ("run-test-thunks" function (:arguments ("test-thunks")) nil [11778 12385]) ("run-test-thunk" function (:arguments ("*test-name*" "thunk")) nil [12387 13031]) ("use-debugger-p" function (:arguments ("e")) nil [13033 13165]) ("get-failure-message" function (:arguments ("type")) nil [13187 13531]) ("show-failure" function (:arguments ("type" "msg" "name" "form" "expected" "actual" "extras")) nil [13533 13727]) ("show-summary" function (:arguments ("name" "test-count" "pass-count" "&optional" "error-count")) nil [13729 13944]) ("collect-form-values" function (:arguments ("form" "values")) nil [13946 14164]) ("logically-equal" function (:arguments ("x" "y")) nil [14426 14479]) ("set-equal" function (:arguments ("l1" "l2" "&key" "test")) nil [14610 14760]))
    :file "lisp-unit.lisp"
    :pointmax 14763
    :unmatched-syntax 'nil
    )
   (semanticdb-table "with.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [1 22]) ("defpackage" code nil nil [24 238]) ("in-package" code nil nil [318 345]) ("editor:setup-indent" code nil nil [2010 2044]) ("bindinfo" type (:members ("vars" "vals" "decls" "assgn") :type "struct") nil [2559 2692]) ("expand-with" function (:arguments ("lst")) nil [2694 2823]) ("expand-with-bindings" function (:arguments ("bindings" "body")) nil [2825 3131]) ("expand-with-binding" function (:arguments ("binding-mode" "bindings" "body")) nil [3208 3449]) ("parse-with" function (:arguments ("lst")) nil [3563 3819]) ("parse-with-bindings" function (:arguments ("lst" "&aux" "conj" "mode" "vars" "assgn" "vals" "decls")) nil [3872 4293]) ("parse-with-body" function (:arguments ("lst")) nil [4295 4438]) ("compress-bindings" function (:arguments ("lst" "&aux" "new-bindings")) nil [4480 5677]) ("parse-with-binding" function (:arguments ("lst" "&aux" "conj" "mode" "vars" "eqtok" "vals" "decltok" "decls" "mode-eqtoks")) nil [5804 7062]) ("parse-with-decls" function (:arguments ("lst" "&aux" "decltok")) nil [7175 7567]) ("decl-terminating-kw-p" function (:arguments ("x")) nil [7569 7721]) ("type-declaration-kw-p" function (:arguments ("x")) nil [7723 7822]) ("declaration-kw-p" function (:arguments ("x")) nil [7824 7923]) ("conjunction-kw-p" function (:arguments ("x")) nil [7925 8023]) ("canonicalize-conjunction" function (:arguments ("x")) nil [8025 8149]) ("bindings-terminator-p" function (:arguments ("x")) nil [8151 8251]) ("defparameter" code nil nil [8253 8296]) ("kw-in-set-p" function (:arguments ("x" "&optional" "valid-eq-toks")) nil [8327 8447]) ("modeinfo" type (:members ("symbol" "expander" "parallelp" "eqtoks") :type "struct") nil [8555 8710]) ("defparameter" code nil nil [8712 8743]) ("symbol-name-equal" function (:arguments ("x" "y")) nil [8745 8987]) ("add-mode-entry" function (:arguments ("modename" "expanderfn" "parallelp" "eqtoks")) nil [8989 9125]) ("find-mode-entry" function (:arguments ("x")) nil [9126 9222]) ("mode-kw-p" function (:arguments ("x")) nil [9223 9274]) ("mode-symbol" function (:arguments ("x")) nil [9275 9377]) ("mode-expander" function (:arguments ("x")) nil [9378 9484]) ("mode-parallelp" function (:arguments ("x")) nil [9485 9593]) ("mode-eq-toks" function (:arguments ("x")) nil [9594 9697]) ("ensure-with-expander" function (:arguments ("modename" "fn" "parallelp" "&optional" "eqtoks")) nil [9699 10042]) ("ensure-with-expander-alias" function (:arguments ("dst" "src")) nil [10044 10263]) ("editor:setup-indent" code nil nil [10790 10837]) ("def-with-alias" function (:arguments ("dstmodename" "srcmodename")) nil [10839 10950]) ("canonical-bind-expander" function (:arguments ("type" "bindings" "bodyform")) nil [11063 11314]) ("canonical-with-expander" function (:arguments ("type" "bindings" "bodyform")) nil [11401 11661]) ("ensure-with-expander" code nil nil [11742 11779]) ("def-with-expander" code nil nil [11845 12142]) ("def-with-expander" code nil nil [12202 12335]) ("def-with-alias" code nil nil [12336 12362]) ("def-with-alias" code nil nil [12363 12391]) ("def-with-expander" code nil nil [12449 12624]) ("def-with-alias" code nil nil [12625 12659]) ("def-with-expander" code nil nil [12684 13098]) ("def-with-expander" code nil nil [13126 13551]) ("def-with-expander" code nil nil [13592 13728]) ("def-with-expander" code nil nil [13801 13957]) ("def-with-alias" code nil nil [13958 14005]) ("def-with-expander" code nil nil [14079 14238]) ("def-with-alias" code nil nil [14239 14286]) ("def-with-expander" code nil nil [14331 14626]) ("def-with-expander" code nil nil [14659 14804]) ("def-with-expander" code nil nil [14845 15002]))
    :file "with.lisp"
    :pointmax 15004
    :unmatched-syntax 'nil
    )
   (semanticdb-table "comparisons.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [1 532]) ("in-package" code nil nil [534 568]) ("less" function (:arguments ("y")) nil [589 612]) ("greater" function (:arguments ("y")) nil [613 639]) ("not-less" function (:arguments ("y")) nil [640 667]) ("not-greater" function (:arguments ("y")) nil [668 698]) ("lessp" function (:arguments ("y")) nil [721 745]) ("greaterp" function (:arguments ("y")) nil [746 773]) ("not-lessp" function (:arguments ("y")) nil [774 802]) ("not-greaterp" function (:arguments ("y")) nil [803 834]) ("less" function (:parent "number" :arguments ("x" "y")) nil [849 899]) ("greater" function (:parent "number" :arguments ("x" "y")) nil [901 954]) ("not-less" function (:parent "number" :arguments ("x" "y")) nil [956 1011]) ("not-greater" function (:parent "number" :arguments ("x" "y")) nil [1013 1071]) ("lessp" function (:parent "number" :arguments ("x" "y")) nil [1073 1124]) ("greaterp" function (:parent "number" :arguments ("x" "y")) nil [1126 1180]) ("not-lessp" function (:parent "number" :arguments ("x" "y")) nil [1182 1238]) ("not-greaterp" function (:parent "number" :arguments ("x" "y")) nil [1240 1299]) ("less" function (:parent "character" :arguments ("x" "y")) nil [1317 1377]) ("greater" function (:parent "character" :arguments ("x" "y")) nil [1379 1442]) ("not-less" function (:parent "character" :arguments ("x" "y")) nil [1444 1509]) ("not-greater" function (:parent "character" :arguments ("x" "y")) nil [1511 1579]) ("lessp" function (:parent "character" :arguments ("x" "y")) nil [1581 1647]) ("greaterp" function (:parent "character" :arguments ("x" "y")) nil [1649 1721]) ("not-lessp" function (:parent "character" :arguments ("x" "y")) nil [1723 1797]) ("not-greaterp" function (:parent "character" :arguments ("x" "y")) nil [1799 1879]) ("less" function (:parent "string" :arguments ("x" "y")) nil [1894 1950]) ("greater" function (:parent "string" :arguments ("x" "y")) nil [1952 2011]) ("not-less" function (:parent "string" :arguments ("x" "y")) nil [2013 2074]) ("not-greater" function (:parent "string" :arguments ("x" "y")) nil [2076 2140]) ("lessp" function (:parent "string" :arguments ("x" "y")) nil [2142 2204]) ("greaterp" function (:parent "string" :arguments ("x" "y")) nil [2206 2274]) ("not-lessp" function (:parent "string" :arguments ("x" "y")) nil [2276 2346]) ("not-greaterp" function (:parent "string" :arguments ("x" "y")) nil [2348 2424]) ("less" function (:parent "list" :arguments ("x" "y")) nil [2437 2639]) ("greater" function (:parent "list" :arguments ("x" "y")) nil [2641 2839]) ("not-less" function (:parent "list" :arguments ("x" "y")) nil [2841 3011]) ("not-greater" function (:parent "list" :arguments ("x" "y")) nil [3013 3187]) ("lessp" function (:parent "list" :arguments ("x" "y")) nil [3189 3395]) ("greaterp" function (:parent "list" :arguments ("x" "y")) nil [3397 3599]) ("not-lessp" function (:parent "list" :arguments ("x" "y")) nil [3601 3774]) ("not-greaterp" function (:parent "list" :arguments ("x" "y")) nil [3778 3955]))
    :file "comparisons.lisp"
    :pointmax 3956
    :unmatched-syntax 'nil
    )
   (semanticdb-table "binary-types.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [639 660]) ("defpackage" code nil nil [662 3231]) ("in-package" code nil nil [3233 3268]) ("*binary-write-byte*" variable (:default-value (function common-lisp:write-byte)) nil [3270 3383]) ("*binary-read-byte*" variable (:default-value (function common-lisp:read-byte)) nil [3384 3495]) ("make-pairs" function (:arguments ("list")) nil [3674 3817]) ("eval-when" code nil nil [3963 4228]) ("*endian*" variable (:user-visible-flag t) nil [4230 4370]) ("*binary-type-namespace*" variable (:default-value (make-hash-table :test (function eq))) nil [4555 4700]) ("find-binary-type" function (:arguments ("name" "&optional" "errorp")) nil [4702 4880]) ("find-binary-type-name" function (:arguments ("type")) nil [5243 5412]) ("sizeof" function nil nil [5602 5742]) ("sizeof" function nil nil [5744 5812]) ("sizeof" function (:parent "symbol" :arguments ("type")) nil [5816 5885]) ("read-binary" function (:arguments ("stream" "&key" "&allow-other-keys")) nil [5887 6012]) ("read-binary" function (:parent "symbol" :arguments ("type" "stream" "&rest" "key-args")) nil [6014 6139]) ("write-binary" function (:arguments ("stream" "object" "&key" "&allow-other-keys")) nil [6141 6266]) ("write-binary" function (:parent "symbol" :arguments ("type" "stream" "object" "&rest" "key-args")) nil [6268 6409]) ("binary-type" type (:typemodifiers (":documentation") :members (("name" variable (:default-value "(quote anonymous-binary-type)") nil nil) ("sizeof" variable nil nil nil)) :type "class") nil [6411 6666]) ("print-object" function (:parent "binary-type" :arguments ("object" "stream")) nil [6668 6836]) ("binary-integer" type (:superclasses "binary-type" :members (("endian" variable (:default-value "nil" :type "endianess") nil nil)) :type "class") nil [7026 7166]) ("print-object" function (:parent "binary-integer" :arguments ("type" "stream")) nil [7168 7487]) ("write-binary" function (:parent "binary-integer" :arguments ("type" "stream" "object" "&key" "&allow-other-keys")) nil [7573 8158]) ("binary-unsigned" type (:superclasses "binary-integer" :type "class") nil [8347 8393]) ("define-unsigned" function (:arguments ("name" "size" "&optional" "endian")) nil [8395 8725]) ("define-unsigned" code nil nil [8727 8749]) ("define-unsigned" code nil nil [8750 8773]) ("define-unsigned" code nil nil [8774 8797]) ("read-binary" function (:parent "binary-unsigned" :arguments ("type" "stream" "&key" "&allow-other-keys")) nil [8799 9450]) ("binary-signed" type (:superclasses "binary-integer" :type "class") nil [9649 9693]) ("define-signed" function (:arguments ("name" "size" "&optional" "endian")) nil [9695 10025]) ("define-signed" code nil nil [10027 10047]) ("define-signed" code nil nil [10048 10069]) ("define-signed" code nil nil [10070 10091]) ("read-binary" function (:parent "binary-signed" :arguments ("type" "stream" "&key" "&allow-other-keys")) nil [10093 10854]) ("binary-char8" type (:superclasses "binary-type" :type "class") nil [11121 11161]) ("setf" code nil nil [11163 11268]) ("deftype" code nil nil [11270 11299]) ("read-binary" function (:parent "binary-char8" :arguments ("type" "stream" "&key" "&allow-other-keys")) nil [11301 11429]) ("write-binary" function (:parent "binary-char8" :arguments ("type" "stream" "object" "&key" "&allow-other-keys")) nil [11431 11561]) ("sizeof" function (:parent "integer" :arguments ("type")) nil [11847 11887]) ("read-binary" function (:parent "integer" :arguments ("type" "stream" "&key" "&allow-other-keys")) nil [11889 12029]) ("*padding-byte*" variable nil nil [12031 12100]) ("write-binary" function (:parent "integer" :arguments ("type" "stream" "object" "&key" "&allow-other-keys")) nil [12102 12329]) ("read-binary-string" function (:arguments ("stream" "&key" "size" "terminators")) nil [12517 13491]) ("binary-string" type (:superclasses "binary-type" :members (("terminators" variable nil nil nil)) :type "class") nil [13666 13785]) ("define-binary-string" function (:arguments ("type-name" "size" "&key" "terminators")) nil [13787 14102]) ("define-null-terminated-string" function (:arguments ("type-name" "size")) nil [14104 14222]) ("define-fixed-size-nt-string" function (:arguments ("type-name" "size")) nil [14224 14352]) ("read-binary" function (:parent "binary-string" :arguments ("type" "stream" "&key" "&allow-other-keys")) nil [14354 14542]) ("write-binary" function (:parent "binary-string" :arguments ("type" "stream" "obj" "&key" "&allow-other-keys")) nil [14544 14946]) ("record-slot" type (:members ("name" "type" "map-write" "map-read" "map-read-delayed" "hidden-read-slot" "tags") :type "struct") nil [15431 15536]) ("make-load-form" function (:parent "record-slot" :arguments ("object" "&optional" "environment")) nil [15601 16008]) ("binary-record" type (:superclasses "binary-type" :members (("slots" variable nil nil nil) ("offset" variable nil nil nil)) :type "class") nil [16010 16183]) ("binary-class" type (:superclasses "binary-record" :members (("instance-class" variable (:type "standard-class") nil nil)) :type "class") nil [16185 16343]) ("binary-record-make-instance" function (:parent "binary-class" :arguments ("type")) nil [16345 16458]) ("binary-struct" type (:superclasses "binary-record" :members (("constructor" variable nil nil nil)) :type "class") nil [16460 16584]) ("binary-record-make-instance" function (:parent "binary-struct" :arguments ("type")) nil [16586 16691]) ("slot-offset" function (:arguments ("type" "slot-name")) nil [16693 17272]) ("binary-slot-tags" function (:arguments ("type" "slot-name")) nil [17274 17580]) ("binary-record-slot-names" function (:arguments ("type" "&key" "padding-slots-p" "match-tags")) nil [17582 18308]) ("binary-slot-type" function (:arguments ("type" "slot-name")) nil [18310 18616]) ("quoted-name-p" function (:arguments ("form")) nil [18618 18781]) ("parse-bt-spec" function (:arguments ("expr")) nil [18783 19547]) ("define-binary-class" function (:arguments ("type-name" "supers" "slots" "&rest" "class-options")) nil [19549 23997]) ("define-binary-struct" function (:arguments ("name-and-options" "dummy-options" "&rest" "doc-slot-descriptions")) nil [24002 26512]) ("read-binary-record" function (:arguments ("stream" "&key" "start" "stop" "&allow-other-keys")) nil [26514 27980]) ("read-binary" function (:parent "binary-record" :arguments ("type" "stream" "&key" "start" "stop" "&allow-other-keys")) nil [27984 28149]) ("write-binary-record" function (:arguments ("stream")) nil [28151 28265]) ("binary-slot-value" function (:arguments ("object" "slot-name")) nil [28267 29202]) ("write-binary" function (:parent "binary-record" :arguments ("type" "stream" "object" "&key" "start" "stop" "&allow-other-keys")) nil [29204 30351]) ("merge-binary-records" function (:arguments ("obj1" "obj2")) nil [30353 31056]) ("binary-record-alist" function (:arguments ("obj")) nil [31058 31469]) ("bitfield" type (:superclasses "binary-type" :members (("storage-type" variable (:type "t") nil nil) ("hash" variable (:default-value "(make-hash-table :test (function eq))" :type "hash-table") nil nil)) :type "class") nil [31629 31848]) ("bitfield-entry" type (:members ("value" "bytespec") :type "struct") nil [31850 31895]) ("define-bitfield" function (:arguments ("type-name" "storage-type" "spec")) nil [31897 33144]) ("define-enum" function (:arguments ("type-name" "storage-name" "&rest" "spec")) nil [33146 33389]) ("bitfield-compute-symbolic-value" function (:arguments ("type" "numeric-value")) nil [33391 34600]) ("enum-value" function (:arguments ("type" "symbolic-value")) nil [34602 34877]) ("enum-symbolic-value" function (:arguments ("type" "binary-value")) nil [34879 35085]) ("bitfield-compute-numeric-value" function (:arguments ("type" "symbolic-value")) nil [35087 36357]) ("read-binary" function (:parent "bitfield" :arguments ("type" "stream" "&key" "&allow-other-keys")) nil [36361 36618]) ("write-binary" function (:parent "bitfield" :arguments ("type" "stream" "symbolic-value" "&rest" "key-args")) nil [36622 36823]) ("with-binary-file" function (:arguments ("stream-var" "&body" "body")) nil [36839 38024]) ("with-binary-output-to-list" function (:arguments ("stream-var" "&body" "body")) nil [38026 39184]) ("with-binary-input-from-list" function (:arguments ("stream-var" "&body" "body")) nil [39186 39879]) ("with-binary-input-from-vector" function (:arguments ("stream-var" "&body" "body")) nil [39881 40505]) ("with-binary-output-to-vector" function (:arguments ("stream-var" "&body" "body")) nil [40507 42470]) ("split-bytes" function (:arguments ("bytes" "from-size" "to-size")) nil [42484 43263]) ("merge-bytes" function (:arguments ("bytes" "from-size" "to-size")) nil [43278 43967]))
    :file "binary-types.lisp"
    :pointmax 43968
    :unmatched-syntax 'nil
    )
   (semanticdb-table "clunit.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [3356 3385]) ("defconstant" code nil nil [3387 3436]) ("t-func" function nil nil [3437 3456]) ("nil-func" function nil nil [3457 3480]) ("test" type (:typemodifiers (":documentation") :members (("descr" variable nil nil nil) ("category" variable (:default-value "*not-categorized*") nil nil) ("test-fn" variable (:default-value "(function t-func)") nil nil) ("compare-fn" variable (:default-value "(function equal)") nil nil) ("input-fn" variable (:default-value "nil") nil nil) ("output-fn" variable (:default-value "nil") nil nil)) :type "class") nil [3482 4761]) ("print-object" function (:parent "test" :arguments ("tst" "str")) nil [4763 4918]) ("*all-tests*" variable nil nil [4920 5122]) ("clear-tests" function nil nil [5124 5209]) ("remove-test" function (:arguments ("test-name")) nil [5211 5415]) ("initialize-instance" function (:parent "test" :arguments ("tst" "&rest" "initargs")) nil [5417 5709]) ("run-unprotected" function (:parent "test" :arguments ("test")) nil [5711 6455]) ("run-protected" function (:parent "test" :arguments ("test")) nil [6457 6886]) ("test-or-tests" function (:arguments ("count")) nil [6888 7022]) ("*failed-tests*" variable nil nil [7024 7105]) ("failed-tests" function nil nil [7107 7212]) ("run-tests" function (:arguments ("tests")) nil [7215 8432]) ("filter-tests" function (:arguments ("category")) nil [8434 8642]) ("run-category" function (:arguments ("category")) nil [8644 8756]) ("run-all-tests" function nil nil [8758 8841]) ("form-to-fn" function (:arguments ("form")) nil [8843 9035]) ("deftest" function (:arguments ("description" "&key" "category" "test-fn" "input-fn" "output-fn" "input-form" "output-form" "compare-fn")) nil [9037 10403]) ("list-categories" function nil nil [10414 10616]) ("list-tests" function (:arguments ("&optional" "category")) nil [10618 10866]) ("run-named-test" function (:arguments ("name" "&optional" "protected")) nil [10868 11143]) ("export" code nil nil [11145 11331]) ("in-package" code nil nil [11333 11364]) ("use-package" code nil nil [11365 11395]) ("deftest" code nil nil [11454 11540]) ("deftest" code nil nil [11560 11676]) ("deftest" code nil nil [11697 11835]) ("deftest" code nil nil [11921 12128]) ("deftest" code nil nil [12180 12317]) ("deftest" code nil nil [12342 12671]) ("deftest" code nil nil [12692 12798]) ("deftest" code nil nil [12820 12915]) ("deftest" code nil nil [12946 13111]) ("deftest" code nil nil [13143 13340]) ("deftest" code nil nil [13363 13792]) ("deftest" code nil nil [13794 13979]) ("when" code nil nil [14000 14093]) ("asdf:defsystem" code nil nil [14095 14166]))
    :file "clunit.lisp"
    :pointmax 14167
    :unmatched-syntax 'nil
    )
   (semanticdb-table "collecting.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [942 1036]) ("in-package" code nil nil [1038 1071]) ("collecting" function (:arguments ("&body" "forms")) nil [1073 1926]) ("with-collectors" function (:arguments ("&rest" "&body" "forms")) nil [1928 2856]))
    :file "collecting.lisp"
    :pointmax 2857
    :unmatched-syntax 'nil
    )
   (semanticdb-table "collect.lisp"
    :major-mode 'lisp-mode
    :tags '(("defpackage" code nil nil [830 944]) ("in-package" code nil nil [946 976]) ("collect" function (:arguments ("kind" "exprs" "&body" "clauses")) nil [979 1069]) ("translate-collect" function (:arguments ("kind" "exprs" "clauses")) nil [1071 1665]) ("translate-collect-clauses" function (:arguments ("clauses" "body" "block")) nil [1667 2239]) ("translate-for" function (:arguments ("clauses" "body")) nil [2244 2461]) ("build-iterator*" function (:arguments ("block" "ve-list" "body")) nil [2464 3861]) ("make-collector-0" function (:arguments ("kind")) nil [3886 4014]) ("*initial-vector-collection-size*" variable (:default-value 10) nil [5578 5622]) ("init-array" function (:arguments ("s" "f")) nil [7564 7703]) ("finish-array" function (:arguments ("s" "f")) nil [7705 7858]) ("interval" type (:members (("from" variable nil nil nil) ("length" variable nil nil nil) ("step" variable nil nil nil)) :type "class") nil [8792 8968]) ("interval-elt" function (:parent "interval" :arguments ("i" "n")) nil [8970 9059]) ("exor" function (:arguments ("a" "b")) nil [9061 9124]) ("interval" function (:arguments ("&key" "from" "to" "down-to" "by")) nil [9126 9660]) ("iter" function (:arguments ("clauses" "&body" "body")) nil [10215 10293]) ("with-collection" function (:arguments ("fun-name" "kind" "&body" "body")) nil [10332 10840]))
    :file "collect.lisp"
    :pointmax 10842
    :unmatched-syntax 'nil
    )
   (semanticdb-table "lisp-unit-examples.lisp"
    :major-mode 'lisp-mode
    :tags '(("in-package" code nil nil [2875 2899]) ("define-test" code nil nil [2928 3121]) ("define-test" code nil nil [3135 3428]) ("define-test" code nil nil [3444 3584]) ("define-test" code nil nil [3600 3880]) ("define-test" code nil nil [3894 4068]) ("define-test" code nil nil [4097 4539]) ("define-test" code nil nil [4542 4938]) ("define-test" code nil nil [4940 5424]) ("define-test" code nil nil [5438 5677]) ("define-test" code nil nil [5691 5897]) ("define-test" code nil nil [5911 6213]) ("define-test" code nil nil [6215 6670]) ("define-test" code nil nil [6684 7404]) ("copy-array" function (:arguments ("a")) nil [7493 7742]) ("define-test" code nil nil [9580 9867]) ("define-test" code nil nil [9883 10136]) ("list->3tree" function (:arguments ("l")) nil [10200 10385]) ("define-test" code nil nil [10388 10945]) ("define-test" code nil nil [10947 11443]) ("make-bst" function (:arguments ("l")) nil [11496 11610]) ("define-test" code nil nil [11612 11877]) ("define-test" code nil nil [11892 12204]) ("define-test" code nil nil [12206 12482]) ("define-test" code nil nil [13034 13486]) ("define-test" code nil nil [13501 13835]) ("define-test" code nil nil [15714 16456]) ("define-test" code nil nil [16470 16610]) ("define-test" code nil nil [16624 16945]) ("define-test" code nil nil [16961 17210]) ("define-test" code nil nil [17465 18456]) ("map-stream-list" function (:arguments ("fn" "string")) nil [18503 18695]) ("subforms" function (:arguments ("l")) nil [18697 18819]) ("define-test" code nil nil [18821 19490]) ("extract-code-from-string" function (:arguments ("str")) nil [19514 19622]) ("define-test" code nil nil [19624 20026]) ("define-test" code nil nil [21707 21962]) ("define-test" code nil nil [21992 22440]) ("define-test" code nil nil [22442 22893]) ("segment-equals" function (:arguments ("results" "correct")) nil [22907 23221]) ("define-test" code nil nil [23224 24802]) ("poly1-2-5" function (:arguments ("x")) nil [24817 24862]) ("poly1-0-9" function (:arguments ("x")) nil [24864 24901]) ("epsilon-equals" function (:arguments ("returned" "correct")) nil [24903 24982]) ("define-test" code nil nil [24984 25224]) ("define-test" code nil nil [25238 25493]) ("define-test" code nil nil [25524 25846]) ("define-test" code nil nil [25862 26019]) ("define-test" code nil nil [26034 26547]) ("define-test" code nil nil [26565 26767]) ("define-test" code nil nil [26769 26892]) ("define-test" code nil nil [26907 27301]) ("define-test" code nil nil [27317 27506]) ("define-test" code nil nil [27521 27974]) ("define-test" code nil nil [27989 29010]) ("define-test" code nil nil [29025 29378]) ("define-test" code nil nil [29393 30272]) ("define-test" code nil nil [30469 30757]) ("define-test" code nil nil [30775 31172]) ("define-test" code nil nil [31190 31408]) ("define-test" code nil nil [31426 31820]) ("define-test" code nil nil [31838 32175]) ("define-test" code nil nil [32193 32787]) ("define-test" code nil nil [32805 33465]) ("define-test" code nil nil [33614 35220]) ("define-test" code nil nil [35249 35709]) ("define-test" code nil nil [35711 37325]) ("use-package" code nil nil [37328 37355]) ("use-package" code nil nil [37765 37792]))
    :file "lisp-unit-examples.lisp"
    :pointmax 38898
    :unmatched-syntax 'nil
    )
   (semanticdb-table "save-object-10.2.lisp"
    :major-mode 'lisp-mode
    :tags '(("eval-when" code nil nil [14882 14971]) ("in-package" code nil nil [14981 15038]) ("eval-when" code nil nil [15046 15908]) ("shadowing-import" code nil nil [18193 18447]) ("eval-when" code nil nil [18510 18829]) ("eval-when" code nil nil [21145 21498]) ("in-package" code nil nil [21670 21727]) ("unless" code nil nil [21795 21889]) ("eval-when" code nil nil [21897 22519]) ("or" code nil nil [22579 22622]) ("eval-when" code nil nil [22623 22689]) ("eval-when" code nil nil [22833 23071]) ("in-package" code nil nil [23081 23133]) ("export" code nil nil [23938 24119]) ("*db-input*" variable nil nil [24144 24234]) ("*list-hash-table*" variable nil nil [24236 24313]) ("eval-when" code nil nil [24373 24433]) ("*storage-list*" variable nil nil [25087 25114]) ("*use-file-encoded-format*" variable nil nil [25430 25475]) ("*use-symbol-long-form*" variable nil nil [25477 25570]) ("*minimum-storage-vector-length*" variable (:default-value 5) nil [25572 25653]) ("*save-symbol-plists*" variable nil nil [25655 25800]) ("*debug-instance-storage*" variable nil nil [26387 26537]) ("*debug-local-bindings*" variable nil nil [26539 26675]) ("*supress-standard-object*" variable (:default-value T) nil [26677 26716]) ("*save-contents-of-class-allocated-classes*" variable (:default-value T) nil [26718 26858]) ("*make-list-length-threshold*" variable (:default-value 10) nil [26860 27046]) ("*load-object-hash-table*" variable (:default-value (make-hash-table :size 50 :test (function eql))) nil [27047 27203]) ("*save-object-hash-table*" variable (:default-value (make-hash-table :size 50 :test (function eql))) nil [27205 27372]) ("*mode-for-set-object-var*" variable nil nil [27374 27489]) ("*mode-for-object-var*" variable (:default-value :save) nil [27491 27527]) ("*global-unsaveable-slotnames*" variable nil nil [27529 27574]) ("*save-object-system-date*" variable (:default-value "save-object-10.2 of June 2001") nil [27576 27645]) ("*unbound-slot-token*" variable (:default-value (quote %%\.us\.%)) nil [27647 27685]) ("*debug-htab-load*" variable (:default-value t) nil [27686 27714]) ("*debug-struct-save*" variable nil nil [27715 27747]) ("*classes-seen*" variable nil nil [27749 27776]) ("*class-vars*" variable nil nil [27777 27802]) ("*seen*" variable nil nil [27804 27880]) ("*vars*" variable nil nil [27881 27900]) ("*structs-seen*" variable nil nil [27901 27928]) ("*struct-vars*" variable nil nil [27929 27955]) ("*htabs-seen*" variable nil nil [27956 27981]) ("*htab-vars*" variable nil nil [27982 28006]) ("*arrays-seen*" variable nil nil [28008 28034]) ("*array-vars*" variable nil nil [28035 28060]) ("*vectors-seen*" variable nil nil [28061 28088]) ("*vector-vars*" variable nil nil [28089 28115]) ("*current-htab-size*" variable (:default-value 5000) nil [28117 28150]) ("*class-safety-p*" variable (:default-value T) nil [28152 28236]) ("*current-htab-rehash-size*" variable (:default-value 39) nil [28317 28355]) ("*current-htab-test*" variable (:default-value (function eql)) nil [28356 28390]) ("*pco-types*" variable (:default-value (quote (structure hash-table array-type-t class instance circular-list))) nil [28392 28608]) ("setf" code nil nil [28610 28715]) ("setf" code nil nil [28725 28756]) ("*global-instance-count*" variable nil nil [28805 28839]) ("*global-object-count*" variable nil nil [28841 28974]) ("*use-default-class-initargs*" variable nil nil [28976 29017]) ("*unsaveable-slot-token*" variable (:default-value (quote %\.uns\.%)) nil [29019 29060]) ("*unsaveable-slotname-hash-table*" variable (:default-value (make-hash-table)) nil [29062 29121]) ("*storage-vector*" variable nil nil [29187 29212]) ("*save-defstruct-includes*" variable nil nil [29214 29255]) ("*construct-pkg-if-not-found*" variable nil nil [29257 29301]) ("*vendor-set-slot-function*" variable nil nil [29856 29891]) ("or" code nil nil [31689 31704]) ("*vendor-defstruct-type-function*" variable nil nil [32006 32047]) ("*vendor-dependent-special-predicate*" variable nil nil [32048 32093]) ("*save-symbol-constants-by-name*" variable nil nil [32095 32139]) ("*save-symbol-constants-by-value*" variable (:default-value T) nil [32140 32198]) ("SYMBOL-SPECIAL-P" function (:arguments ("symbol")) nil [32899 33115]) ("*vendor-defstruct-name-function*" variable nil nil [34013 34054]) ("proclaim" code nil nil [34083 34124]) ("*vendor-defstruct-descriptor-function*" variable nil nil [34861 34976]) ("*vendor-defstruct-slot-descriptors-function*" variable nil nil [35945 36073]) ("*vendor-defstruct-predicate-function*" variable nil nil [37702 37748]) ("*vendor-data-table-access-function*" variable nil nil [40378 40530]) ("*vendor-defstruct-slot-desc-access-function*" variable nil nil [40815 40945]) ("*vendor-defstruct-desc-access-function*" variable nil nil [41686 41809]) ("*vendor-defstruct-slot-desc-index-table*" variable nil nil [42543 42990]) ("*vendor-dependent-defstruct-symbol-function*" variable nil nil [45300 45475]) ("or" code nil nil [46611 46639]) ("*vendor-defstruct-desc-index-table*" variable nil nil [47205 47561]) ("*cons-hash-table*" variable nil nil [52715 52819]) ("*dl-hash-table*" variable nil nil [52820 52928]) ("*list-hash-table*" variable nil nil [52929 53041]) ("*use-default-defstruct-options-in-save*" variable nil nil [53043 53098]) ("defparameter" code nil nil [53100 53170]) ("when" code nil nil [53172 53240]) ("eval-when" code nil nil [53324 53598]) ("or" code nil nil [53751 53771]) ("shadowing-import" code nil nil [53772 53837]) ("shadowing-import" code nil nil [53845 53897]) ("or" code nil nil [54076 54118]) ("when" code nil nil [54119 54201]) ("or" code nil nil [54236 54256]) ("%FILL-INSTANCE" function (:arguments ("i" "ordered-slot-values")) nil [55056 57041]) ("ASV" function (:arguments ("new-element")) nil [57043 57414]) ("WRITE-ASV-FORM" function (:arguments ("stream" "instance")) nil [57416 57685]) ("%WRITE-ASV-FORM" function (:arguments ("stream" "instance")) nil [57687 57962]) ("WRITE-ASV-FORMS" function (:arguments ("stream")) nil [57964 58154]) ("WITH-SAVED-OBJECTS-INTERNAL" function (:arguments ("so-var" "&rest" "body")) nil [58165 59299]) ("WITH-SAVED-OBJECTS-INTERNAL" function (:arguments ("so-var" "&rest" "body")) nil [59301 60006]) ("WRITE-LEX-ENV-PRELUDE" function (:arguments ("stream")) nil [60008 60238]) ("WRITE-LEX-ENV-APOTHEOSIS" function (:arguments ("stream")) nil [60240 60310]) ("WITH-SAVED-OBJECTS" function (:arguments ("svar" "&body" "body")) nil [60312 61136]) ("STREAM-DUMP-FORM" function (:arguments ("instance")) nil [61335 61534]) ("CONSTANT-DUMP-FORM" function (:arguments ("instance")) nil [61536 61675]) ("COMPLEX-DUMP-FORM" function (:arguments ("instance")) nil [61677 61858]) ("QUOTED-SYMBOL-DUMP-FORM" function (:arguments ("instance")) nil [61860 62011]) ("SIMPLE-LEX-DUMP-FORM" function (:arguments ("lst")) nil [62022 62080]) ("SIMPLE-LEX-DUMP-FORM" function (:arguments ("lst")) nil [62082 62132]) ("DOTTED-LIST-DUMP-FORM" function (:arguments ("instance")) nil [62282 62486]) ("DEFSTRUCT-INSTANCE-DUMP-FORM" function (:arguments ("instance")) nil [62488 62717]) ("REGULAR-FUNCTION-DUMP-FORM" function (:arguments ("instance")) nil [62719 62793]) ("LIST-DUMP-FORM" function (:arguments ("instance")) nil [63090 63241]) ("NEW-CACHE-OBJECT" function (:arguments ("object" "object-list" "var-list1" "var-list2" "dump-form")) nil [63252 63660]) ("HTAB-DUMP-FORM" function (:arguments ("htab")) nil [71854 72318]) ("PACKAGE-DUMP-FORM" function (:arguments ("package")) nil [72320 72485]) ("REPEATING-ELEMENT-LIST-DUMP-FORM" function (:arguments ("instance")) nil [72487 72727]) ("REC-LIST-DUMP-FORM" function (:arguments ("l")) nil [72729 72795]) ("%REC-LIST-DUMP-FORM" function (:arguments ("l")) nil [72797 73078]) ("CONS-DUMP-FORM" function (:arguments ("item")) nil [73080 73187]) ("PRINT-SLOTS" function (:arguments ("instance")) nil [73189 73434]) ("ARRAY-DUMP-FORM" function (:arguments ("array")) nil [73436 73916]) ("SIMPLE-ARRAY-DUMP-FORM" function (:arguments ("array")) nil [73918 74239]) ("VECTOR-DUMP-FORM" function (:arguments ("array")) nil [74241 74689]) ("READTABLE-DUMP-FORM" function (:arguments ("i")) nil [74691 74882]) ("GENERIC-FUNCTION-DUMP-FORM" function (:arguments ("instance")) nil [74884 75272]) ("METHOD-DUMP-FORM" function (:arguments ("instance")) nil [75274 75707]) ("SAFE-CLASS-DUMP-FORM" function (:arguments ("instance")) nil [75963 76310]) ("CLASS-DUMP-FORM" function (:arguments ("instance")) nil [76572 77102]) ("INSTANCE-DUMP-FORM" function (:arguments ("instance")) nil [77104 77717]) ("LONG-SYMBOL-DUMP-FORM" function (:arguments ("instance" "&optional" "package")) nil [77719 78196]) ("SYMBOL-DUMP-FORM" function (:arguments ("instance")) nil [78198 79009]) ("SIMPLE-QUOTED-LIST-DUMP-FORM" function (:arguments ("x")) nil [79011 79098]) ("ALL-NUMBERS-LIST-DUMP-FORM" function (:arguments ("instance")) nil [79269 79335]) ("QUOTED-LIST-DUMP-FORM" function (:arguments ("instance")) nil [79337 79496]) ("eval-when" code nil nil [90975 96466]) ("ALL-SLOTS" function (:arguments ("class-object")) nil [97729 97795]) ("SIMPLE-ARRAY-P" function (:arguments ("instance")) nil [99266 99378]) ("MAC-HANDLE-DUMP-FORM" function (:arguments ("instance")) nil [99386 99471]) ("BUILTIN-INSTANCE-P" function (:arguments ("instance")) nil [99473 100218]) ("MAKE-BUILTIN-INSTANCE" function (:arguments ("instance")) nil [100220 100312]) ("BUILTIN-INSTANCE-DUMP-FORM" function (:arguments ("instance")) nil [100314 100418]) ("INIT-LIST-HTABS" function (:arguments ("&optional" "test")) nil [100420 100875]) ("LOOKUP-LIST" function (:arguments ("x")) nil [100877 101285]) ("INDEX-LIST" function (:arguments ("x")) nil [101287 102115]) ("ANY-CONS-P" function (:arguments ("X")) nil [102117 102288]) ("STANDARD-STREAM-DUMP-FORM" function (:arguments ("instance")) nil [102290 102751]) ("STANDARD-STREAM-P" function (:arguments ("instance")) nil [102753 103183]) ("MAPAPPEND" function (:arguments ("fun" "&rest" "args")) nil [109360 109554]) ("QUOTEIT" function (:arguments ("l")) nil [109556 110049]) ("SAMESET" function (:arguments ("l1" "l2" "&key" "test")) nil [110051 110223]) ("MAPPLIST" function (:arguments ("fun" "x")) nil [110225 110382]) ("%TYPE-OF" function (:arguments ("x")) nil [110384 110848]) ("FLATTEN" function (:arguments ("l")) nil [111242 111439]) ("FLATTEN1" function (:arguments ("cells")) nil [111441 111641]) ("%FLATTEN" function (:arguments ("l")) nil [111643 111857]) ("%FLATTEN1" function (:arguments ("cells")) nil [111859 112076]) ("PAIR-UP" function (:arguments ("l")) nil [112078 112326]) ("GET-ORDERED-SLOT-VALUES" function (:arguments ("i")) nil [112328 112617]) ("MAKE-KEYWORD" function (:arguments ("thing")) nil [112619 112874]) ("MAKE-KEYWORD" function (:arguments ("x")) nil [112885 113002]) ("NEWSYM" function (:arguments ("symbol")) nil [113004 113384]) ("INSURE-LIST" function (:arguments ("X")) nil [113822 113933]) ("NASSOC" function (:arguments ("key" "list" "&key" "test")) nil [113935 114159]) ("MAKEVAR" function (:arguments ("&optional" "label")) nil [114161 114325]) ("PUSHSYM" function (:arguments ("list" "&optional" "label")) nil [114327 114474]) ("%INSURE-LIST" function (:arguments ("X")) nil [115218 115330]) ("ALLOCATE-VECTOR" function (:arguments ("dims" "&key" "element-type" "adjustable" "fill-pointer")) nil [115842 116206]) ("LIST-ARRAY" function (:arguments ("array")) nil [116208 116569]) ("%LIST-ARRAY" function (:arguments ("array")) nil [116571 116989]) ("or" code nil nil [116993 117020]) ("LIST-ARRAY-AUX" function (:arguments ("array" "level" "subscript-list" "&key" "dump-form-on-p")) nil [117021 117934]) ("or" code nil nil [117938 117965]) ("LIST-ARRAY-AUX" function (:arguments ("array" "level" "subscript-list" "&key" "dump-form-on-p")) nil [117966 119118]) ("CLEAR-GLOBAL-VARS-AND-HTABS" function nil nil [119120 119520]) ("%LOAD-HTAB" function (:arguments ("htab" "&optional" "lst")) nil [119570 119832]) ("SCALE-REHASH-THRESHOLD" function (:arguments ("num")) nil [119968 120044]) ("SCALE-REHASH-THRESHOLD" function (:arguments ("num")) nil [120056 120126]) ("or" code nil nil [120130 120148]) ("SCALE-REHASH-THRESHOLD" function (:arguments ("num")) nil [120149 120191]) ("MAKEHASH" function (:arguments ("h" "&key" "test" "size" "rehash-size" "rehash-threshold" "values")) nil [120193 120729]) ("GET-HTAB-VALUES" function (:arguments ("htab")) nil [120731 120946]) ("PRINT-HTAB" function (:arguments ("htab")) nil [120948 121081]) ("eval-when" code nil nil [121119 121286]) ("CREATE-HASH-TABLE" function (:arguments ("&key" "test" "size" "rehash-size" "rehash-threshold")) nil [121288 122096]) ("LOAD-HTAB" function (:arguments ("values" "&key" "test" "size" "rehash-size" "rehash-threshold")) nil [122098 122664]) ("GET-DEFSTRUCT-TYPE" function (:arguments ("structname")) nil [122699 122906]) ("GET-DEFSTRUCT-DESCRIPTOR" function (:arguments ("structname")) nil [123522 123722]) ("GET-DEFSTRUCT-SLOT-DESCRIPTORS" function (:arguments ("structname")) nil [123724 123936]) ("GET-DEFSTRUCT-SLOT-DESCRIPTOR" function (:arguments ("structname" "slotname")) nil [123938 124143]) ("GET-INDEX-FOR-DD-KWD" function (:arguments ("kwd")) nil [126422 126606]) ("GET-INDEX-FOR-SD-KWD" function (:arguments ("kwd")) nil [126608 126797]) ("SD-USE-DEFAULT" function (:arguments ("sd" "kwd" "&optional" "structname")) nil [126799 127161]) ("DD-USE-DEFAULT" function (:arguments ("dd" "kwd")) nil [127163 127558]) ("DEFSTRUCT-DESCRIPTOR-REF" function (:arguments ("desc" "kwd")) nil [127560 128224]) ("DEFSTRUCT-SLOT-DESCRIPTOR-REF" function (:arguments ("sd" "kwd" "&optional" "structname")) nil [128226 129109]) ("GET-DEFSTRUCT-SLOT-NAMES" function (:arguments ("struct")) nil [129119 129330]) ("GET-DEFSTRUCT-SLOT-NAMES" function (:arguments ("struct")) nil [129340 129661]) ("FILL-STRUCT" function (:arguments ("struct" "vals")) nil [129663 130019]) ("ALLOCATE-STRUCT" function (:arguments ("name")) nil [130021 130154]) ("FIND-STRUCTURE-OBJECT" function (:arguments ("name")) nil [130156 130301]) ("GET-NAME-FROM-OPTION-LIST" function (:arguments ("option-list")) nil [130303 130447]) ("CONSTRUCT-DEFSTRUCT-OPTION-LIST" function (:arguments ("name")) nil [130449 130641]) ("CONSTRUCT-DEFSTRUCT-SLOT-LIST" function (:arguments ("name")) nil [130643 131227]) ("MAKE-CANONICAL-DEFSTRUCT-SLOT-FORM" function (:arguments ("name" "value" "read-status" "type")) nil [131231 131441]) ("NO-OPTION-BUT-NAME-p" function (:arguments ("option-list")) nil [131443 131641]) ("ENSURE-DEFSTRUCT-CLASS-OBJECT" function (:arguments ("option-list" "doc-string" "slots")) nil [131643 131888]) ("MAKE-STRUCTURE-OBJECT" function (:arguments ("name" "&key" "type" "lisp-type" "copier" "predicate" "constructor" "slots" "conc-name" "named" "include" "documentation")) nil [131976 132565]) ("MAKE-DEFSTRUCT-PRINT-FUNCTION" function (:arguments ("name")) nil [132567 132713]) ("MAKE-DEFSTRUCT-COPIER" function (:arguments ("name")) nil [132715 132951]) ("MAKE-DEFSTRUCT-CONSTRUCTOR" function (:arguments ("name")) nil [132953 133199]) ("MAKE-DEFSTRUCT-PREDICATE" function (:arguments ("name")) nil [133201 133431]) ("MAKE-DEFSTRUCT-CONC-NAME" function (:arguments ("name")) nil [133433 133662]) ("MAKE-DEFSTRUCT-OPTION-LIST" function (:arguments ("&key" "name" "copier" "include" "predicate" "constructor" "conc-name")) nil [133749 134424]) ("MAKE-FUNCTION-PLACEHOLDER" function (:arguments ("name")) nil [134426 134567]) ("STRUCTURE-DUMP-FORM" function (:arguments ("instance")) nil [134569 134775]) ("DEFSTRUCT-OBJECT-DUMP-FORM" function (:arguments ("instance")) nil [134777 135300]) ("*ordered-slot-name-htab*" variable (:default-value (make-hash-table)) nil [135302 135353]) ("LOOKUP-ORDERED-SLOT-NAMES" function (:arguments ("i")) nil [135355 136263]) ("ALLOCATE-HTAB" function (:arguments ("htab" "&rest" "arglist")) nil [136733 137295]) ("GET-CLASS-DOCUMENTATION" function (:arguments ("c")) nil [137297 137369]) ("GET-AVAILABLE-TYPES" function (:arguments ("symbol")) nil [137371 137873]) ("or" code nil nil [139375 139389]) ("GET-DOCUMENTATION" function (:arguments ("object")) nil [139390 139463]) ("GET-DOCUMENTATION" function (:arguments ("object")) nil [139523 139718]) ("GET-INSTANCE-LABEL" function (:arguments ("instance")) nil [139729 139838]) ("GET-INSTANCE-LABEL" function (:arguments ("instance")) nil [139840 141032]) ("DO-VAR-TYPE-CELLS" function (:arguments ("vars" "insts")) nil [141034 141186]) ("MAKE-VAR-TYPE-CELLS" function (:arguments ("vars" "insts" "&optional" "plists" "samep")) nil [141188 141818]) ("MAKE-HTAB-PLIST" function (:arguments ("htab")) nil [141820 142091]) ("MAKE-HTAB-PLISTS" function (:arguments ("list-o-htabs")) nil [142093 142593]) ("MAKE-ILIST-VAR-TYPE-CELLS" function (:arguments ("to-be-saved-list")) nil [142595 142736]) ("MAKE-LIST-VAR-TYPE-CELLS" function (:arguments ("to-be-saved-list")) nil [142738 143421]) ("MAP-NONCIRCULAR-ELEMENTS-AND-COPY" function (:arguments ("function" "circ-list")) nil [145658 145863]) ("eval-when" code nil nil [147071 147611]) ("eval-when" code nil nil [147681 147801]) ("GET-DEFSTRUCT-NAME" function (:arguments ("instance")) nil [148809 149222]) ("HASH-TABLE-REHASH-SIZE" function (:arguments ("x")) nil [149231 149318]) ("HASH-TABLE-REHASH-THRESHOLD" function (:arguments ("x")) nil [149327 149424]) ("eval-when" code nil nil [149872 150248]) ("HASH-TABLE-REHASH-SIZE" function (:arguments ("x")) nil [150299 150413]) ("HASH-TABLE-REHASH-THRESHOLD" function (:arguments ("x")) nil [150425 150550]) ("UNBOUND-SLOT-TOKEN-P" function (:arguments ("x")) nil [150552 150650]) ("FILL-INSTANCE" function (:arguments ("classname" "vals")) nil [150652 150956]) ("or" code nil nil [151075 151089]) ("CLEAR-SAVE-OBJECT" function nil nil [162745 162848]) ("or" code nil nil [163518 163531]) ("BUILTIN-CLASS-p" function (:arguments ("X")) nil [163532 163983]) ("ADMISSIBLE-CONSTANT-P" function (:arguments ("X")) nil [163985 164209]) ("ALL-NUMBERS-LIST-P" function (:arguments ("X")) nil [164211 164279]) ("SIMPLE-LIST-P" function (:arguments ("X")) nil [164281 164503]) ("SIMPLE-QUOTED-LIST-P" function (:arguments ("X")) nil [164524 165066]) ("SAME-KEYWORDS-P" function (:arguments ("p1" "p2")) nil [165068 165206]) ("SAME-PLIST-VALUES-P" function (:arguments ("p1" "p2")) nil [165208 165490]) ("UNORDERED-PLIST-EQUAL" function (:arguments ("p1" "p2")) nil [165492 165688]) ("ALL-HTAB-PLISTS-SAMEP" function (:arguments ("htab-plist-list")) nil [165690 165947]) ("ARRAY-TYPE-T-P" function (:arguments ("X")) nil [165949 166093]) ("ALL-NULLS-P" function (:arguments ("X")) nil [166095 166138]) ("ALL-TS-P" function (:arguments ("X")) nil [166140 166209]) ("SIMPLE-LEX-LIST-P" function (:arguments ("X")) nil [166211 166512]) ("CONS-P" function (:arguments ("X")) nil [167269 167327]) ("eval-when" code nil nil [167335 167800]) ("UNSAVEABLE-SLOT-TOKEN-P" function (:arguments ("X")) nil [167802 167932]) ("CIRCULAR-CONS-P" function (:arguments ("X")) nil [167934 168072]) ("CIRCULAR-CONS-DUMP-FORM" function (:arguments ("instance")) nil [168074 168265]) ("SLOT-EXISTS-P-ANY" function (:arguments ("instance" "name")) nil [168267 168496]) ("STRIP-PACKAGE" function (:arguments ("x")) nil [168498 168668]) ("%CIRCULAR-LIST-P" function (:arguments ("X")) nil [168735 169075]) ("or" code nil nil [169828 169843]) ("IGNORE-ERRORS" function (:arguments ("&body" "body")) nil [169844 169900]) ("CIRCULAR-LIST-P" function (:arguments ("x")) nil [170029 170199]) ("or" code nil nil [170251 170276]) ("CIRCULAR-LIST-P" function (:arguments ("x")) nil [170277 170555]) ("or" code nil nil [170598 170619]) ("CIRCULAR-LIST-P" function (:arguments ("x")) nil [170620 170860]) ("CIRCULAR-LIST-DUMP-FORM" function (:arguments ("clist")) nil [170870 171014]) ("CIRCULAR-LIST-DUMP-FORM" function (:arguments ("clist")) nil [171024 171132]) ("CIRCULAR-DOTTED-LIST-DUMP-FORM" function (:arguments ("clist")) nil [171134 171276]) ("CIRCULAR-LIST-EQUAL" function (:arguments ("a" "b")) nil [171278 171457]) ("STREAM-P" function (:arguments ("x")) nil [171459 171569]) ("REPEATING-ELEMENT-LIST-P" function (:arguments ("instance")) nil [171571 171960]) ("SPECIAL-MARKER-P" function (:arguments ("X" "&optional" "label")) nil [171962 172147]) ("QUOTED-LIST-P" function (:arguments ("x")) nil [172149 172779]) ("CIRCULAR-DOTTED-LIST-P" function (:arguments ("X")) nil [172781 172938]) ("DOTTED-LIST-P" function (:arguments ("x")) nil [173540 173688]) ("%LIST-LENGTH" function (:arguments ("x")) nil [177020 178237]) ("%ENDP" function (:arguments ("element")) nil [178912 179695]) ("FIRSTN" function (:arguments ("n" "list")) nil [179697 179885]) ("GET-CIRCULAR-LIST-ELEMENTS" function (:arguments ("circular-list")) nil [179935 180318]) ("MAKE-CIRCULAR-LIST" function (:arguments ("elts")) nil [180320 180476]) ("MAKE-CIRCULAR-DOTTED-LIST" function (:arguments ("dl")) nil [180478 180770]) ("CIRCULAR-LIST-LENGTH" function (:arguments ("clist")) nil [181726 182092]) ("COLLECT-CIRC-ELEMENTS" function (:arguments ("clist")) nil [182094 182298]) ("LIST-TYPE" function (:arguments ("X")) nil [182300 182519]) ("MAKE-SYM" function (:arguments ("x")) nil [182521 182619]) ("GET-EVENS" function (:arguments ("l")) nil [182621 182788]) ("GET-ODDS" function (:arguments ("l")) nil [182790 182955]) ("SYM<" function (:arguments ("a" "b")) nil [182957 183105]) ("SYMF<" function (:arguments ("a" "b")) nil [183107 183272]) ("ALPHABETIZE-BY-KEYWORD" function (:arguments ("lst")) nil [183274 183617]) ("MAP-ARRAY" function (:arguments ("function" "array")) nil [183627 183949]) ("FILL-ARRAY" function (:arguments ("array" "l")) nil [184159 184472]) ("or" code nil nil [184508 184534]) ("FILL-ARRAY" function (:arguments ("array" "l")) nil [184535 185020]) ("FILL-ARRAY" function (:arguments ("array" "l")) nil [185029 185272]) ("FILL-ARRAY" function (:arguments ("array" "l")) nil [185282 185831]) ("*debug-array-operations*" variable (:default-value t) nil [185833 185868]) ("ARRAY-ELEMENTS-SAME-P" function (:arguments ("array")) nil [185871 186381]) ("format" code nil nil [188175 188222]) ("or" code nil nil [188226 188238]) ("COPY-INSTANCE" function (:parent "T" :arguments ("instance")) nil [188239 188707]) ("or" code nil nil [190059 190088]) ("*predicate-dump-forms*" variable nil nil [191164 191199]) ("HAS-PREDICATE-DUMP-FORM-P" function (:arguments ("instance")) nil [191307 191446]) ("GET-PREDICATE-DUMP-FORM" function (:arguments ("instance")) nil [191448 191608]) ("DEFINE-PREDICATE-DUMP-FORM" function (:arguments ("predicate" "dump-form")) nil [191610 191737]) ("ALL-SLOTS-AND-VALUES" function (:parent "T" :arguments ("instance")) nil [199587 200108]) ("or" code nil nil [200112 200159]) ("ALL-SLOTS-AND-VALUES" function (:parent "T" :arguments ("instance")) nil [200160 200594]) ("PRSLOT" function (:arguments ("key" "val" "&optional" "stream")) nil [200596 200805]) ("DEFAULT-SLOTS-AS-PLIST" function (:arguments ("i")) nil [200813 201056]) ("INSTANCE-DATA-AS-PLIST" function (:arguments ("i")) nil [201058 201321]) ("MAP-INSTANCE" function (:arguments ("function" "instance" "&key" "modify" "concat" "OPERATE-ON-UNBOUND-SLOTS")) nil [201323 202203]) ("GET-PLIST-KEYS" function (:arguments ("plist")) nil [202205 202258]) ("QUOTED-SYMBOL-P" function (:arguments ("X")) nil [202885 203033]) ("QUOTED-FORM-DUMP-FORM" function (:arguments ("instance")) nil [203204 203295]) ("GET-SLOT-VALUES" function (:arguments ("clos-instance")) nil [203297 204366]) ("INDEX-UNSAVEABLE-SLOT" function (:arguments ("class" "slot")) nil [204391 204504]) ("RETRIEVE-UNSAVEABLE-SLOTS" function (:arguments ("class")) nil [204506 204598]) ("GET-DEFSTRUCT-SLOT-OFFSET" function (:arguments ("struct" "slotname")) nil [204606 204999]) ("GET-DEFSTRUCT-SLOT-OFFSET" function (:arguments ("struct" "slotname")) nil [205007 205319]) ("GET-SD-NAMED" function (:arguments ("struct" "slotname")) nil [205395 205564]) ("GET-DEFSTRUCT-SLOT-ACCESSOR" function (:arguments ("struct" "slotname")) nil [205574 205833]) ("GET-DEFSTRUCT-SLOT-ACCESSOR" function (:arguments ("struct" "slotname")) nil [205843 206136]) ("GET-DEFSTRUCT-SLOT-VALUE" function (:arguments ("instance" "slotname")) nil [206138 206497]) ("SET-DEFSTRUCT-SLOT-VALUE" function (:arguments ("instance" "slotname" "newval")) nil [206499 206622]) ("GET-DEFSTRUCT-VALUES" function (:arguments ("instance")) nil [206624 206851]) ("WRITE-ATTRIBUTE-LINE" function (:arguments ("stream")) nil [207149 207324]) ("write-version-line" function (:arguments ("stream")) nil [207446 207766]) ("PCO-P" function (:arguments ("instance")) nil [208182 208370]) ("SIMPLEST-LIST-P" function (:arguments ("instance")) nil [208372 208664]) ("MAKE-DUMPABLE-FORM" function (:arguments ("object-instance")) nil [208666 208870]) ("SEQUENCEP" function (:arguments ("x")) nil [211309 211383]) ("%REVERSE" function (:arguments ("dl")) nil [211568 212088]) ("%BUTLAST" function (:arguments ("seq")) nil [212090 212475]) ("%ELT" function (:arguments ("seq" "i")) nil [212477 212869]) ("GET-ELTS" function (:arguments ("seq" "loseqs" "index")) nil [212871 213259]) ("%EVERY" function (:arguments ("predicate" "sequence")) nil [213261 214105]) ("%EVERY" function (:arguments ("predicate" "sequence" "&rest" "more-sequences")) nil [214116 214603]) ("%SOME" function (:arguments ("predicate" "sequence" "&rest" "more-sequences")) nil [214605 215174]) ("%LENGTH" function (:arguments ("lst")) nil [215304 215468]) ("or" code nil nil [216443 216475]) ("MAP-INTO" function (:arguments ("result-sequence" "function" "&rest" "sequences")) nil [216511 217773]) ("eval-when" code nil nil [217783 219160]) ("MAP-VECTOR" function (:arguments ("func" "v" "&key" "save" "modify")) nil [219214 219900]) ("or" code nil nil [221332 221362]) ("get-defstruct-constructor" function (:arguments ("name")) nil [221365 222120]) ("LOOKUP-OBJECT" function (:arguments ("X" "&key" "mode")) nil [222122 222416]) ("CACHE-OBJECT" function (:arguments ("x" "&key" "mode")) nil [222418 222783]) ("LOOKUP-OBJECT-OR-CACHE" function (:arguments ("x")) nil [222785 223023]) ("OBJECT-VAR" function (:arguments ("some-object" "&optional" "mode")) nil [223025 223482]) ("SET-OBJECT-VAR" function (:arguments ("object" "new-var")) nil [223484 223886]) ("defsetf" code nil nil [223888 223923]) ("%STRUCTURE-p" function (:arguments ("symbol")) nil [223925 224069]) ("GET-SYMBOL-DEFSTRUCT-SPEC" function (:arguments ("symbol")) nil [224071 224216]) ("or" code nil nil [224750 224759]) ("or" code nil nil [240251 240267]) ("or" code nil nil [240517 240533]) ("INSTANCE-NAME" function (:arguments ("instance")) nil [240534 240601]) ("*verbose*" variable nil nil [240676 240698]) ("*max-list-length-limit*" variable (:default-value 1000) nil [240700 240737]) ("setf" code nil nil [240745 240802]) ("*rep-so-far*" variable nil nil [240804 240829]) ("EDF" function (:arguments ("&rest" "elts")) nil [240831 241007]) ("EDF-DUMP-FORM" function (:arguments ("instance")) nil [241009 241139]) ("*list-datum-counter*" variable (:default-value -1) nil [241141 241173]) ("LONG-REPEATING-LIST-P" function (:arguments ("X")) nil [241175 241377]) ("FUNCTION-P" function (:arguments ("x")) nil [241379 241588]) ("CREATE-COMPILER-MACRO" function (:arguments ("name" "functional-argument-position")) nil [241711 242100]) ("MAKE-FLET" function (:arguments ("funarg" "new-name" "functional-argument-position" "args" "&aux" "body")) nil [242102 242433]) ("defconstant" code nil nil [242522 242548]) ("defconstant" code nil nil [242549 242577]) ("defconstant" code nil nil [242578 242610]) ("defconstant" code nil nil [242611 242648]) ("defconstant" code nil nil [242649 242684]) ("defconstant" code nil nil [242685 242712]) ("defconstant" code nil nil [242713 242738]) ("defconstant" code nil nil [242740 242766]) ("defconstant" code nil nil [242767 242796]) ("defconstant" code nil nil [242797 242825]) ("defconstant" code nil nil [242826 242861]) ("defconstant" code nil nil [242862 242891]) ("defconstant" code nil nil [242892 242931]) ("MEMO" function (:arguments ("fn" "name" "key" "test")) nil [242951 243276]) ("MEMOIZE" function (:arguments ("fn-name" "&key" "key" "test")) nil [243278 243425]) ("CLEAR-MEMOIZE" function (:arguments ("fn-name")) nil [243427 243534]) ("DEFINE-MEMO" function (:arguments ("fn" "args" "&body" "body")) nil [243536 243623]) ("MEMO" type (:members ("data" "count") :type "struct") nil [243649 243704]) ("GET-TABLE-ENTRY" function (:arguments ("object" "rec")) nil [243706 243782]) ("SET-TABLE-ENTRY" function (:arguments ("object" "rec" "value")) nil [243784 243879]) ("defsetf" code nil nil [243881 243922]) ("WRITE-OBJECT-TO-LIST" function (:arguments ("object")) nil [243924 244099]) ("WRITE-OBJECT-TO-FILE" function (:arguments ("object" "file")) nil [244101 244259]) ("FIND-MULTIPLE-REFERENCES" function (:arguments ("object" "table")) nil [244261 244745]) ("FIND-RECURSIVE-REFERENCES" function (:arguments ("object" "table")) nil [244747 245917]) ("%FUNCTIONP" function (:arguments ("X")) nil [245919 246006]) ("%%SAVE-OBJECT" function (:arguments ("object" "table")) nil [249077 249197]) ("%SAVE-OBJECT" function (:arguments ("object" "file" "table")) nil [249199 249452]) ("%SAVE-OBJECT-TO-LIST" function (:arguments ("object" "table")) nil [249454 249891]) ("SAVE-OBJECT-TO-STREAM" function (:arguments ("object" "stream" "table")) nil [249893 250368]) ("SAVE-ACTUAL-OBJECT" function (:arguments ("object" "stream" "table")) nil [250370 251967]) ("DEFSTRUCT-SLOT-BOUNDP" function (:arguments ("instance" "slotname")) nil [251969 252061]) ("HANDLE" type (:type "class") nil [252063 252088]) ("*wotf-debug*" variable (:default-value T) nil [252090 252113]) ("ALREADY-SAVED-P" function (:arguments ("entry")) nil [259344 259416]) ("MARK-AS-ALREADY-SAVED" function (:arguments ("object" "table" "entry")) nil [259418 259588]) ("PUSH-BACKWARD-REFERENCE" function (:arguments ("entry")) nil [259590 259763]) ("WRITE-BACKWARD-REFERENCE" function (:arguments ("entry" "stream")) nil [259765 259948]) ("MULTIPLE-REFERENCE-P" function (:arguments ("entry")) nil [259950 260013]) ("PUSH-ENTER-MULTIPLE-REFERENCE" function (:arguments ("entry")) nil [260015 260127]) ("WRITE-ENTER-MULTIPLE-REFERENCE" function (:arguments ("entry" "stream")) nil [260131 260253]) ("PUSH-ENTER-SINGLE-REFERENCE" function nil nil [260255 260331]) ("WRITE-ENTER-SINGLE-REFERENCE" function (:arguments ("stream")) nil [260333 260417]) ("PUSH-TABLE-SIZE" function (:arguments ("count")) nil [260419 260483]) ("WRITE-TABLE-SIZE" function (:arguments ("count" "stream")) nil [260485 260558]) ("PUSH-TAG" function (:arguments ("code")) nil [260560 260615]) ("WRITE-TAG" function (:arguments ("code" "stream")) nil [260617 260681]) ("PUSH-LENGTH" function (:arguments ("length")) nil [260683 260752]) ("WRITE-LENGTH" function (:arguments ("length" "stream")) nil [260754 260825]) ("PUSH-SIMPLE-OBJECT" function (:arguments ("object")) nil [260827 261192]) ("WRITE-SIMPLE-OBJECT" function (:arguments ("object" "stream")) nil [261194 261569]) ("PUSH-DATUM" function (:arguments ("object")) nil [261571 261632]) ("WRITE-DATUM" function (:arguments ("object" "stream")) nil [261634 261705]) ("READ-OBJECT-FROM-FILE" function (:arguments ("file")) nil [261707 261818]) ("READ-OBJECT-FROM-LIST" function (:arguments ("L")) nil [261820 261920]) ("%READ-OBJECT-FROM-LIST" function (:arguments ("lst")) nil [261922 262083]) ("READ-OBJECT-FROM-STREAM" function (:arguments ("stream")) nil [262085 262246]) ("CONS-LIST-OBJECT" function (:arguments ("table" "lst")) nil [262248 262809]) ("CONS-OBJECT" function (:arguments ("table" "stream")) nil [262811 263381]) ("READ-OBJECT-LIST-CONTENTS" function (:arguments ("table" "lst" "table-index")) nil [263383 265714]) ("READ-OBJECT-CONTENTS" function (:arguments ("table" "stream" "table-index")) nil [265716 268002]) ("READ-DATUM" function (:arguments ("stream")) nil [268004 268052]) ("READ-LIST-DATUM" function (:arguments ("lst")) nil [268054 268184]))
    :file "save-object-10.2.lisp"
    :pointmax 268195
    :unmatched-syntax 'nil
    )
   (semanticdb-table "screamer+.lisp"
    :major-mode 'lisp-mode
    :tags '(("defparameter" code nil nil [4592 4652]) ("defparameter" code nil nil [4662 4731]) ("defparameter" code nil nil [4832 4904]) ("defparameter" code nil nil [4914 4995]) ("defpackage" code nil nil [4998 7651]) ("in-package" code nil nil [7653 7675]) ("setq" code nil nil [7922 8012]) ("eval-when" code nil nil [8014 8102]) ("objectp" function (:arguments ("var")) nil [8558 8618]) ("variables-in" function (:arguments ("x" "&aux" "slots")) nil [8621 8984]) ("get-array-variables" function (:arguments ("array")) nil [9616 10109]) ("milometer" function (:arguments ("m" "maxima")) nil [10507 10936]) ("apply-substitution" function (:arguments ("x" "&aux" "retobj")) nil [11130 11662]) ("copy-slots" function (:arguments ("from" "to")) nil [11696 11866]) ("copy-cells" function (:arguments ("from" "to")) nil [11874 12268]) ("funcallgv" function (:arguments ("f" "&rest" "x")) nil [12374 13051]) ("in-package" code nil nil [13539 13562]) ("*screamer+-version*" variable (:default-value "0.1") nil [13623 13657]) ("*enumeration-limit*" variable (:default-value 100) nil [13864 13896]) ("setq-domains" function (:arguments ("vars" "vals" "&aux" "res")) nil [13914 14086]) ("variable+" type (:members ("nonnumber-type") :type "struct") nil [14174 14383]) ("make-variable" function (:arguments ("&optional" "name")) nil [14385 14592]) ("print-variable+" function (:arguments ("x" "stream" "print-level")) nil [14594 16512]) ("variable-type-known?" function (:parent "variable+" :arguments ("x")) nil [16514 16609]) ("variable-get-type" function (:parent "variable+" :arguments ("x")) nil [16611 16690]) ("carefully" function (:arguments ("&body" "forms")) nil [17262 17452]) ("carefully-evaluate" function (:arguments ("form")) nil [17454 17798]) ("objectp" function (:arguments ("var")) nil [18174 18240]) ("enumerated-domain-p" function (:arguments ("var")) nil [18310 18443]) ("enumerated-antidomain-p" function (:arguments ("var")) nil [18517 18662]) ("eqv" function (:arguments ("x" "y")) nil [18747 18784]) ("impliesv" function (:arguments ("p" "q")) nil [19321 19365]) ("make-equal" function (:arguments ("var" "value" "&optional" "retval")) nil [19770 20135]) ("ifv" function (:arguments ("condition" "exp1" "&optional" "exp2")) nil [20138 20772]) ("consv" function (:arguments ("x" "y")) nil [23857 25843]) ("funcross-product" function (:arguments ("f" "x" "y")) nil [25891 26033]) ("funcross-pair" function (:arguments ("f" "x" "y")) nil [26184 26270]) ("carv" function (:arguments ("el")) nil [26942 27998]) ("cdrv" function (:arguments ("el")) nil [28634 29389]) ("firstv" function (:arguments ("el")) nil [29617 29651]) ("secondv" function (:arguments ("el")) nil [29652 29689]) ("thirdv" function (:arguments ("el")) nil [29690 29726]) ("fourthv" function (:arguments ("el")) nil [29727 29764]) ("restv" function (:arguments ("el")) nil [29766 29799]) ("nthv" function (:arguments ("n" "el")) nil [30764 32961]) ("make-listv" function (:arguments ("n" "&key" "initial-element" "&aux" "acc")) nil [33599 34387]) ("arefv" function (:arguments ("array" "&rest" "subscripts")) nil [34986 35062]) ("generate-dimension" function (:arguments ("dims" "&aux" "acc")) nil [35245 35604]) ("make-arrayv" function (:arguments ("dimensions" "&key" "element-type")) nil [36416 37267]) ("appendv" function (:arguments ("x" "y" "&rest" "r")) nil [38279 41978]) ("mapcarv" function (:arguments ("f" "&rest" "el")) nil [42921 43712]) ("maplistv" function (:arguments ("f" "&rest" "el")) nil [44411 45064]) ("constraint-fn" function (:arguments ("f")) nil [45663 46181]) ("funcallinv" function (:arguments ("f" "inverse" "&rest" "el")) nil [47107 47728]) ("listv" function (:arguments ("&rest" "args")) nil [48134 48185]) ("listpv" function (:arguments ("el")) nil [48473 48515]) ("conspv" function (:arguments ("el")) nil [48516 48558]) ("symbolpv" function (:arguments ("el")) nil [48559 48604]) ("stringpv" function (:arguments ("el")) nil [48605 48651]) ("typepv" function (:arguments ("el" "type")) nil [49489 50568]) ("a-listv" function nil nil [50863 50906]) ("a-consv" function nil nil [50907 50950]) ("a-symbolv" function nil nil [50951 50998]) ("a-stringv" function nil nil [50999 51046]) ("a-typed-varv" function (:arguments ("type")) nil [51495 51601]) ("formatv" function (:arguments ("&rest" "args")) nil [52320 53097]) ("everyv" function (:arguments ("f" "v")) nil [53909 54382]) ("notanyv" function (:arguments ("f" "v")) nil [54883 55356]) ("somev" function (:arguments ("f" "v")) nil [55739 56251]) ("noteveryv" function (:arguments ("f" "v")) nil [56650 57149]) ("reifyv" function (:arguments ("b")) nil [57426 57793]) ("at-mostv" function (:arguments ("n" "f" "&rest" "x")) nil [58330 58400]) ("at-mostv-internal" function (:arguments ("n" "f" "&rest" "x")) nil [58404 60335]) ("at-leastv" function (:arguments ("n" "f" "&rest" "x")) nil [61018 61091]) ("at-leastv-internal" function (:arguments ("n" "f" "&rest" "x")) nil [61108 63166]) ("exactlyv" function (:arguments ("n" "f" "&rest" "x")) nil [63833 63902]) ("subseqv" function (:arguments ("x" "n" "&optional" "q")) nil [67139 68251]) ("lengthv" function (:arguments ("el" "&optional" "is-list")) nil [68628 69490]) ("all-different2" function (:arguments ("x" "xs")) nil [69568 69806]) ("all-differentv" function (:arguments ("x" "&rest" "xs")) nil [70166 70228]) ("a-set-ofv" function (:arguments ("test")) nil [70766 70889]) ("a-set-of-instancesv" function (:arguments ("cname")) nil [71223 71738]) ("count-occurrences" function (:arguments ("a" "x")) nil [71827 71955]) ("a-reorderingv" function (:arguments ("x")) nil [72075 72590]) ("members-ofv" function (:arguments ("x")) nil [72813 73242]) ("set-equalv" function (:arguments ("x" "y")) nil [73555 74277]) ("bag-equalv" function (:arguments ("x" "y")) nil [74655 76851]) ("a-subset-ofv" function (:arguments ("x")) nil [77197 77516]) ("a-subset-of" function (:arguments ("x")) nil [77576 77729]) ("a-partition-of" function (:arguments ("x")) nil [77793 78079]) ("subsetpv" function (:arguments ("x" "y")) nil [78370 78465]) ("intersectionv" function (:arguments ("x" "y")) nil [78760 79375]) ("unionv" function (:arguments ("x" "y")) nil [79659 80260]) ("make-instancev" function (:arguments ("&rest" "args")) nil [80901 81788]) ("classpv" function (:arguments ("obj" "name")) nil [82025 83014]) ("class-namev" function (:arguments ("obj")) nil [83382 83751]) ("class-ofv" function (:arguments ("obj")) nil [83997 84360]) ("slot-exists-pv" function (:arguments ("obj" "slotname")) nil [85061 86009]) ("reconcile" function (:arguments ("var1" "var2")) nil [86604 87270]) ("reconcile-objects" function (:arguments ("objvar1" "objvar2")) nil [87541 89067]) ("slot-values-equalv" function (:arguments ("val1" "val2")) nil [89130 89395]) ("bound-slots-equal" function (:arguments ("obj1" "obj2")) nil [91653 92028]) ("not-equalv" function (:arguments ("x" "y" "&key" "full-propagation")) nil [92542 93723]) ("setq" code nil nil [94057 94101]))
    :file "screamer+.lisp"
    :pointmax 94103
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sharpL.lisp"
    :major-mode 'lisp-mode
    :tags 'nil
    :file "sharpL.lisp"
    )
   (semanticdb-table "terminfo.lisp"
    :major-mode 'lisp-mode
    :tags '(("ext:file-comment" code nil nil [1416 1535]) ("in-package" code nil nil [1537 1568]) ("eval-when" code nil nil [1647 1792]) ("in-package" code nil nil [1794 1817]) ("export" code nil nil [1819 1903]) ("*terminfo-directories*" variable (:default-value (quote ("/usr/share/terminfo/" "/usr/share/misc/terminfo/"))) nil [1905 1995]) ("*terminfo*" variable nil nil [1997 2020]) ("eval-when" code nil nil [2022 2131]) ("flet" code nil nil [2133 2720]) ("declaim" code nil nil [2728 2778]) ("declaim" code nil nil [3206 3235]) ("capability" function (:arguments ("name" "&optional" "terminfo")) nil [3236 3323]) ("declaim" code nil nil [3331 3356]) ("define-compiler-macro" code nil nil [3358 3845]) ("defcap" function (:arguments ("name" "type" "index" "&optional" "docstring")) nil [3848 4692]) ("defcap" code nil nil [4694 4729]) ("defcap" code nil nil [4730 4766]) ("defcap" code nil nil [4767 4797]) ("defcap" code nil nil [4798 4837]) ("defcap" code nil nil [4838 4875]) ("defcap" code nil nil [4876 4911]) ("defcap" code nil nil [4912 4943]) ("defcap" code nil nil [4944 4972]) ("defcap" code nil nil [4973 5004]) ("defcap" code nil nil [5005 5039]) ("defcap" code nil nil [5040 5078]) ("defcap" code nil nil [5079 5111]) ("defcap" code nil nil [5112 5144]) ("defcap" code nil nil [5145 5181]) ("defcap" code nil nil [5182 5220]) ("defcap" code nil nil [5221 5252]) ("defcap" code nil nil [5253 5291]) ("defcap" code nil nil [5292 5332]) ("defcap" code nil nil [5333 5365]) ("defcap" code nil nil [5366 5407]) ("defcap" code nil nil [5408 5436]) ("defcap" code nil nil [5437 5471]) ("defcap" code nil nil [5472 5503]) ("defcap" code nil nil [5504 5535]) ("defcap" code nil nil [5536 5569]) ("defcap" code nil nil [5570 5601]) ("defcap" code nil nil [5602 5644]) ("defcap" code nil nil [5645 5675]) ("defcap" code nil nil [5676 5712]) ("defcap" code nil nil [5713 5757]) ("defcap" code nil nil [5758 5793]) ("defcap" code nil nil [5794 5835]) ("defcap" code nil nil [5836 5871]) ("defcap" code nil nil [5872 5907]) ("defcap" code nil nil [5908 5950]) ("defcap" code nil nil [5951 5986]) ("defcap" code nil nil [5987 6022]) ("defcap" code nil nil [6024 6050]) ("defcap" code nil nil [6051 6079]) ("defcap" code nil nil [6080 6104]) ("defcap" code nil nil [6105 6139]) ("defcap" code nil nil [6140 6178]) ("defcap" code nil nil [6179 6215]) ("defcap" code nil nil [6216 6251]) ("defcap" code nil nil [6252 6288]) ("defcap" code nil nil [6289 6318]) ("defcap" code nil nil [6319 6350]) ("defcap" code nil nil [6351 6382]) ("defcap" code nil nil [6383 6417]) ("defcap" code nil nil [6418 6453]) ("defcap" code nil nil [6454 6484]) ("defcap" code nil nil [6485 6514]) ("defcap" code nil nil [6515 6549]) ("defcap" code nil nil [6550 6585]) ("defcap" code nil nil [6586 6622]) ("defcap" code nil nil [6623 6659]) ("defcap" code nil nil [6660 6697]) ("defcap" code nil nil [6698 6732]) ("defcap" code nil nil [6733 6767]) ("defcap" code nil nil [6768 6803]) ("defcap" code nil nil [6804 6838]) ("defcap" code nil nil [6839 6874]) ("defcap" code nil nil [6875 6910]) ("defcap" code nil nil [6911 6951]) ("defcap" code nil nil [6952 6992]) ("defcap" code nil nil [6993 7023]) ("defcap" code nil nil [7024 7058]) ("defcap" code nil nil [7059 7086]) ("defcap" code nil nil [7087 7126]) ("defcap" code nil nil [7127 7161]) ("defcap" code nil nil [7163 7189]) ("defcap" code nil nil [7190 7212]) ("defcap" code nil nil [7213 7246]) ("defcap" code nil nil [7247 7285]) ("defcap" code nil nil [7286 7318]) ("defcap" code nil nil [7319 7349]) ("defcap" code nil nil [7350 7375]) ("defcap" code nil nil [7376 7401]) ("defcap" code nil nil [7402 7434]) ("defcap" code nil nil [7435 7470]) ("defcap" code nil nil [7471 7504]) ("defcap" code nil nil [7505 7535]) ("defcap" code nil nil [7536 7566]) ("defcap" code nil nil [7567 7602]) ("defcap" code nil nil [7603 7633]) ("defcap" code nil nil [7634 7671]) ("defcap" code nil nil [7672 7704]) ("defcap" code nil nil [7705 7736]) ("defcap" code nil nil [7737 7768]) ("defcap" code nil nil [7769 7797]) ("defcap" code nil nil [7798 7831]) ("defcap" code nil nil [7832 7867]) ("defcap" code nil nil [7868 7898]) ("defcap" code nil nil [7899 7933]) ("defcap" code nil nil [7934 7967]) ("defcap" code nil nil [7968 8009]) ("defcap" code nil nil [8010 8045]) ("defcap" code nil nil [8046 8080]) ("defcap" code nil nil [8081 8113]) ("defcap" code nil nil [8114 8150]) ("defcap" code nil nil [8151 8184]) ("defcap" code nil nil [8185 8221]) ("defcap" code nil nil [8222 8258]) ("defcap" code nil nil [8259 8298]) ("defcap" code nil nil [8299 8336]) ("defcap" code nil nil [8337 8375]) ("defcap" code nil nil [8376 8415]) ("defcap" code nil nil [8416 8446]) ("defcap" code nil nil [8447 8487]) ("defcap" code nil nil [8488 8526]) ("defcap" code nil nil [8527 8558]) ("defcap" code nil nil [8559 8594]) ("defcap" code nil nil [8595 8630]) ("defcap" code nil nil [8631 8668]) ("defcap" code nil nil [8669 8707]) ("defcap" code nil nil [8708 8739]) ("defcap" code nil nil [8740 8768]) ("defcap" code nil nil [8769 8804]) ("defcap" code nil nil [8805 8836]) ("defcap" code nil nil [8837 8868]) ("defcap" code nil nil [8869 8900]) ("defcap" code nil nil [8901 8929]) ("defcap" code nil nil [8930 8965]) ("defcap" code nil nil [8966 8996]) ("defcap" code nil nil [8997 9030]) ("defcap" code nil nil [9031 9063]) ("defcap" code nil nil [9064 9092]) ("defcap" code nil nil [9093 9121]) ("defcap" code nil nil [9122 9149]) ("defcap" code nil nil [9150 9175]) ("defcap" code nil nil [9176 9201]) ("defcap" code nil nil [9202 9229]) ("defcap" code nil nil [9230 9256]) ("defcap" code nil nil [9257 9283]) ("defcap" code nil nil [9284 9310]) ("defcap" code nil nil [9311 9336]) ("defcap" code nil nil [9337 9362]) ("defcap" code nil nil [9363 9389]) ("defcap" code nil nil [9390 9415]) ("defcap" code nil nil [9416 9441]) ("defcap" code nil nil [9442 9467]) ("defcap" code nil nil [9468 9493]) ("defcap" code nil nil [9494 9519]) ("defcap" code nil nil [9520 9545]) ("defcap" code nil nil [9546 9571]) ("defcap" code nil nil [9572 9597]) ("defcap" code nil nil [9598 9625]) ("defcap" code nil nil [9626 9651]) ("defcap" code nil nil [9652 9677]) ("defcap" code nil nil [9678 9705]) ("defcap" code nil nil [9706 9731]) ("defcap" code nil nil [9732 9760]) ("defcap" code nil nil [9761 9789]) ("defcap" code nil nil [9790 9818]) ("defcap" code nil nil [9819 9844]) ("defcap" code nil nil [9845 9870]) ("defcap" code nil nil [9871 9898]) ("defcap" code nil nil [9899 9924]) ("defcap" code nil nil [9925 9956]) ("defcap" code nil nil [9957 9987]) ("defcap" code nil nil [9988 10013]) ("defcap" code nil nil [10014 10039]) ("defcap" code nil nil [10040 10066]) ("defcap" code nil nil [10067 10092]) ("defcap" code nil nil [10093 10118]) ("defcap" code nil nil [10119 10144]) ("defcap" code nil nil [10145 10170]) ("defcap" code nil nil [10171 10196]) ("defcap" code nil nil [10197 10222]) ("defcap" code nil nil [10223 10248]) ("defcap" code nil nil [10249 10275]) ("defcap" code nil nil [10276 10304]) ("defcap" code nil nil [10305 10332]) ("defcap" code nil nil [10333 10360]) ("defcap" code nil nil [10361 10389]) ("defcap" code nil nil [10390 10418]) ("defcap" code nil nil [10419 10455]) ("defcap" code nil nil [10456 10492]) ("defcap" code nil nil [10493 10521]) ("defcap" code nil nil [10522 10552]) ("defcap" code nil nil [10553 10589]) ("defcap" code nil nil [10590 10626]) ("defcap" code nil nil [10627 10664]) ("defcap" code nil nil [10665 10696]) ("defcap" code nil nil [10697 10731]) ("defcap" code nil nil [10732 10760]) ("defcap" code nil nil [10761 10791]) ("defcap" code nil nil [10792 10821]) ("defcap" code nil nil [10822 10854]) ("defcap" code nil nil [10855 10883]) ("defcap" code nil nil [10884 10911]) ("defcap" code nil nil [10912 10943]) ("defcap" code nil nil [10944 10977]) ("defcap" code nil nil [10978 11011]) ("defcap" code nil nil [11012 11045]) ("defcap" code nil nil [11046 11076]) ("defcap" code nil nil [11077 11111]) ("defcap" code nil nil [11112 11143]) ("defcap" code nil nil [11144 11175]) ("defcap" code nil nil [11176 11210]) ("defcap" code nil nil [11211 11245]) ("defcap" code nil nil [11246 11280]) ("defcap" code nil nil [11281 11308]) ("defcap" code nil nil [11309 11339]) ("defcap" code nil nil [11340 11363]) ("defcap" code nil nil [11364 11398]) ("defcap" code nil nil [11399 11433]) ("defcap" code nil nil [11434 11466]) ("defcap" code nil nil [11467 11496]) ("defcap" code nil nil [11497 11523]) ("defcap" code nil nil [11524 11550]) ("defcap" code nil nil [11551 11577]) ("defcap" code nil nil [11578 11604]) ("defcap" code nil nil [11605 11631]) ("defcap" code nil nil [11632 11660]) ("defcap" code nil nil [11661 11693]) ("defcap" code nil nil [11694 11723]) ("defcap" code nil nil [11724 11753]) ("defcap" code nil nil [11754 11782]) ("defcap" code nil nil [11783 11817]) ("defcap" code nil nil [11818 11851]) ("defcap" code nil nil [11852 11885]) ("defcap" code nil nil [11886 11918]) ("defcap" code nil nil [11919 11952]) ("defcap" code nil nil [11953 11987]) ("defcap" code nil nil [11988 12015]) ("defcap" code nil nil [12016 12044]) ("defcap" code nil nil [12045 12074]) ("defcap" code nil nil [12075 12102]) ("defcap" code nil nil [12103 12133]) ("defcap" code nil nil [12134 12163]) ("defcap" code nil nil [12164 12195]) ("defcap" code nil nil [12196 12224]) ("defcap" code nil nil [12225 12255]) ("defcap" code nil nil [12256 12283]) ("defcap" code nil nil [12284 12313]) ("defcap" code nil nil [12314 12342]) ("defcap" code nil nil [12343 12371]) ("defcap" code nil nil [12372 12400]) ("defcap" code nil nil [12401 12429]) ("defcap" code nil nil [12430 12461]) ("defcap" code nil nil [12462 12490]) ("defcap" code nil nil [12491 12519]) ("defcap" code nil nil [12520 12548]) ("defcap" code nil nil [12549 12580]) ("defcap" code nil nil [12581 12613]) ("defcap" code nil nil [12614 12643]) ("defcap" code nil nil [12644 12672]) ("defcap" code nil nil [12673 12706]) ("defcap" code nil nil [12707 12738]) ("defcap" code nil nil [12739 12770]) ("defcap" code nil nil [12771 12802]) ("defcap" code nil nil [12803 12833]) ("defcap" code nil nil [12834 12862]) ("defcap" code nil nil [12863 12894]) ("defcap" code nil nil [12895 12923]) ("defcap" code nil nil [12924 12952]) ("defcap" code nil nil [12953 12984]) ("defcap" code nil nil [12985 13017]) ("defcap" code nil nil [13018 13047]) ("defcap" code nil nil [13048 13079]) ("defcap" code nil nil [13080 13107]) ("defcap" code nil nil [13108 13135]) ("defcap" code nil nil [13136 13166]) ("defcap" code nil nil [13167 13195]) ("defcap" code nil nil [13196 13224]) ("defcap" code nil nil [13225 13254]) ("defcap" code nil nil [13255 13284]) ("defcap" code nil nil [13285 13314]) ("defcap" code nil nil [13315 13344]) ("defcap" code nil nil [13345 13372]) ("defcap" code nil nil [13373 13402]) ("defcap" code nil nil [13403 13435]) ("defcap" code nil nil [13436 13465]) ("defcap" code nil nil [13466 13495]) ("defcap" code nil nil [13496 13528]) ("defcap" code nil nil [13529 13562]) ("defcap" code nil nil [13563 13593]) ("defcap" code nil nil [13594 13623]) ("defcap" code nil nil [13624 13656]) ("defcap" code nil nil [13657 13687]) ("defcap" code nil nil [13688 13718]) ("defcap" code nil nil [13719 13748]) ("defcap" code nil nil [13749 13781]) ("defcap" code nil nil [13782 13811]) ("defcap" code nil nil [13812 13845]) ("defcap" code nil nil [13846 13873]) ("defcap" code nil nil [13874 13901]) ("defcap" code nil nil [13902 13929]) ("defcap" code nil nil [13930 13957]) ("defcap" code nil nil [13958 13985]) ("defcap" code nil nil [13986 14013]) ("defcap" code nil nil [14014 14041]) ("defcap" code nil nil [14042 14069]) ("defcap" code nil nil [14070 14097]) ("defcap" code nil nil [14098 14125]) ("defcap" code nil nil [14126 14153]) ("defcap" code nil nil [14154 14181]) ("defcap" code nil nil [14182 14209]) ("defcap" code nil nil [14210 14237]) ("defcap" code nil nil [14238 14265]) ("defcap" code nil nil [14266 14293]) ("defcap" code nil nil [14294 14321]) ("defcap" code nil nil [14322 14349]) ("defcap" code nil nil [14350 14377]) ("defcap" code nil nil [14378 14405]) ("defcap" code nil nil [14406 14433]) ("defcap" code nil nil [14434 14461]) ("defcap" code nil nil [14462 14489]) ("defcap" code nil nil [14490 14517]) ("defcap" code nil nil [14518 14545]) ("defcap" code nil nil [14546 14573]) ("defcap" code nil nil [14574 14601]) ("defcap" code nil nil [14602 14629]) ("defcap" code nil nil [14630 14657]) ("defcap" code nil nil [14658 14685]) ("defcap" code nil nil [14686 14713]) ("defcap" code nil nil [14714 14741]) ("defcap" code nil nil [14742 14769]) ("defcap" code nil nil [14770 14797]) ("defcap" code nil nil [14798 14825]) ("defcap" code nil nil [14826 14853]) ("defcap" code nil nil [14854 14881]) ("defcap" code nil nil [14882 14909]) ("defcap" code nil nil [14910 14937]) ("defcap" code nil nil [14938 14965]) ("defcap" code nil nil [14966 14993]) ("defcap" code nil nil [14994 15021]) ("defcap" code nil nil [15022 15049]) ("defcap" code nil nil [15050 15077]) ("defcap" code nil nil [15078 15105]) ("defcap" code nil nil [15106 15133]) ("defcap" code nil nil [15134 15161]) ("defcap" code nil nil [15162 15189]) ("defcap" code nil nil [15190 15217]) ("defcap" code nil nil [15218 15245]) ("defcap" code nil nil [15246 15273]) ("defcap" code nil nil [15274 15301]) ("defcap" code nil nil [15302 15329]) ("defcap" code nil nil [15330 15357]) ("defcap" code nil nil [15358 15391]) ("defcap" code nil nil [15392 15427]) ("defcap" code nil nil [15428 15464]) ("defcap" code nil nil [15465 15497]) ("defcap" code nil nil [15498 15527]) ("defcap" code nil nil [15528 15561]) ("defcap" code nil nil [15562 15594]) ("defcap" code nil nil [15595 15628]) ("defcap" code nil nil [15629 15660]) ("defcap" code nil nil [15661 15687]) ("defcap" code nil nil [15688 15718]) ("defcap" code nil nil [15719 15749]) ("defcap" code nil nil [15750 15774]) ("defcap" code nil nil [15775 15800]) ("defcap" code nil nil [15801 15831]) ("defcap" code nil nil [15832 15863]) ("defcap" code nil nil [15864 15893]) ("defcap" code nil nil [15894 15919]) ("defcap" code nil nil [15920 15945]) ("defcap" code nil nil [15946 15971]) ("defcap" code nil nil [15972 15997]) ("defcap" code nil nil [15998 16023]) ("defcap" code nil nil [16024 16049]) ("defcap" code nil nil [16050 16075]) ("defcap" code nil nil [16076 16101]) ("defcap" code nil nil [16102 16127]) ("defcap" code nil nil [16128 16153]) ("defcap" code nil nil [16154 16183]) ("defcap" code nil nil [16184 16215]) ("defcap" code nil nil [16216 16252]) ("defcap" code nil nil [16253 16288]) ("defcap" code nil nil [16289 16323]) ("defcap" code nil nil [16324 16358]) ("defcap" code nil nil [16359 16393]) ("defcap" code nil nil [16394 16431]) ("defcap" code nil nil [16432 16469]) ("defcap" code nil nil [16470 16505]) ("defcap" code nil nil [16506 16541]) ("defcap" code nil nil [16542 16573]) ("defcap" code nil nil [16574 16615]) ("defcap" code nil nil [16616 16655]) ("defcap" code nil nil [16656 16694]) ("defcap" code nil nil [16695 16734]) ("defcap" code nil nil [16735 16771]) ("defcap" code nil nil [16772 16817]) ("defcap" code nil nil [16818 16858]) ("defcap" code nil nil [16859 16896]) ("defcap" code nil nil [16897 16937]) ("defcap" code nil nil [16938 16980]) ("defcap" code nil nil [16981 17018]) ("defcap" code nil nil [17019 17059]) ("defcap" code nil nil [17060 17097]) ("defcap" code nil nil [17098 17136]) ("defcap" code nil nil [17137 17172]) ("defcap" code nil nil [17173 17209]) ("defcap" code nil nil [17210 17249]) ("defcap" code nil nil [17250 17291]) ("defcap" code nil nil [17292 17328]) ("defcap" code nil nil [17329 17369]) ("defcap" code nil nil [17370 17400]) ("defcap" code nil nil [17401 17431]) ("defcap" code nil nil [17432 17463]) ("defcap" code nil nil [17464 17501]) ("defcap" code nil nil [17502 17530]) ("defcap" code nil nil [17531 17564]) ("defcap" code nil nil [17565 17600]) ("defcap" code nil nil [17601 17636]) ("defcap" code nil nil [17637 17673]) ("defcap" code nil nil [17674 17707]) ("defcap" code nil nil [17708 17743]) ("defcap" code nil nil [17744 17781]) ("defcap" code nil nil [17782 17824]) ("defcap" code nil nil [17825 17865]) ("defcap" code nil nil [17866 17907]) ("defcap" code nil nil [17908 17942]) ("defcap" code nil nil [17943 17982]) ("defcap" code nil nil [17983 18018]) ("defcap" code nil nil [18019 18057]) ("defcap" code nil nil [18058 18092]) ("defcap" code nil nil [18093 18130]) ("defcap" code nil nil [18131 18171]) ("defcap" code nil nil [18172 18214]) ("defcap" code nil nil [18215 18249]) ("defcap" code nil nil [18250 18281]) ("defcap" code nil nil [18282 18316]) ("defcap" code nil nil [18317 18346]) ("defcap" code nil nil [18347 18377]) ("defcap" code nil nil [18378 18411]) ("defcap" code nil nil [18412 18441]) ("defcap" code nil nil [18442 18478]) ("defcap" code nil nil [18479 18515]) ("defcap" code nil nil [18516 18545]) ("defcap" code nil nil [18546 18577]) ("defcap" code nil nil [18578 18611]) ("defcap" code nil nil [18612 18644]) ("defcap" code nil nil [18645 18677]) ("defcap" code nil nil [18678 18710]) ("defcap" code nil nil [18711 18743]) ("defcap" code nil nil [18744 18777]) ("defcap" code nil nil [18778 18811]) ("defcap" code nil nil [18812 18848]) ("defcap" code nil nil [18849 18886]) ("defcap" code nil nil [18887 18932]) ("defcap" code nil nil [18933 18964]) ("defcap" code nil nil [18965 19008]) ("defcap" code nil nil [19009 19049]) ("defcap" code nil nil [19050 19084]) ("defcap" code nil nil [19085 19120]) ("defcap" code nil nil [19121 19156]) ("defcap" code nil nil [19157 19198]) ("defcap" code nil nil [19199 19239]) ("defcap" code nil nil [19240 19279]) ("defcap" code nil nil [19280 19318]) ("defcap" code nil nil [19319 19354]) ("defcap" code nil nil [19355 19390]) ("defcap" code nil nil [19391 19427]) ("defcap" code nil nil [19428 19472]) ("defcap" code nil nil [19473 19511]) ("defcap" code nil nil [19512 19549]) ("defcap" code nil nil [19550 19589]) ("defcap" code nil nil [19590 19627]) ("defcap" code nil nil [19628 19670]) ("defcap" code nil nil [19671 19707]) ("defcap" code nil nil [19708 19742]) ("progn" code nil nil [19770 21019]) (":terminfo" package nil nil [34951 34970]))
    :file "terminfo.lisp"
    :pointmax 34971
    )
   (semanticdb-table "ulimyhmpqs.lisp"
    :major-mode 'lisp-mode
    :tags '(("div2" function (:arguments ("x")) nil [6402 6434]) ("div" function (:arguments ("a" "b")) nil [6493 6685]) ("expt2" function (:arguments ("i")) nil [6686 6718]) ("2*" function (:arguments ("i")) nil [6719 6748]) ("odd-up" function (:arguments ("i")) nil [6749 6785]) ("odd-down" function (:arguments ("i")) nil [6825 6868]) ("even-up" function (:arguments ("i")) nil [6869 6912]) ("even-down" function (:arguments ("i")) nil [6913 6953]) ("dfloat" function (:arguments ("x")) nil [6955 7003]) ("binoc" function (:arguments ("n" "k")) nil [7258 7463]) ("square?" function (:arguments ("x")) nil [8318 8433]) ("exptmod" function (:arguments ("base" "power" "modulo")) nil [8478 8658]) ("invmod" function (:arguments ("x" "m")) nil [9112 9372]) ("invmod!" function (:arguments ("x" "m")) nil [9374 9555]) ("divmod" function (:arguments ("a" "b" "modulo")) nil [9557 9652]) ("jacobisymbol" function (:arguments ("p" "q")) nil [9916 10294]) ("quadratic-residue?" function (:arguments ("n" "p")) nil [10519 10591]) ("sqrtmodprime" function (:arguments ("n" "p")) nil [10953 12151]) ("pprime?" function (:arguments ("p" "&optional" "trials")) nil [12554 12937]) ("nextpprime" function (:arguments ("p")) nil [12967 13053]) ("make-primes" function (:arguments ("n")) nil [13178 13610]) ("*nr-of-stored-primes*" variable (:default-value 100000) nil [13612 13649]) ("*stored-primes*" variable nil nil [13650 13674]) ("*max-stored-prime*" variable nil nil [13675 13702]) ("*max-divide-out*" variable nil nil [13703 13728]) ("unless" code nil nil [13744 14060]) ("with-all-stored-primes" function (:arguments ("p" "&rest" "body")) nil [14062 14317]) ("with-all-primes" function (:arguments ("p" "&rest" "body")) nil [14421 14788]) ("prime" function (:arguments ("i")) nil [14801 15095]) ("prime?" function (:arguments ("x")) nil [15344 16047]) ("pi_" function (:arguments ("n")) nil [16863 16968]) ("hard" function (:arguments ("d")) nil [17034 17151]) ("factor" type (:members ("prime" "sqrtnmodp" "log2p" "log10p" "1/amodp" "dp" "ep") :type "struct") nil [17576 18020]) ("fb-p" function (:arguments ("q")) nil [18060 18108]) ("fb-log10" function (:arguments ("q")) nil [18109 18162]) ("make-factor-base" function (:arguments ("n" "fb-size")) nil [18168 18733]) ("try-to-solve" function (:arguments ("ix-list")) nil [19491 20069]) ("power-breaker" function (:arguments ("x" "&optional" "max-factor")) nil [20440 21203]) ("multiple-cons" function (:arguments ("x" "nrofcopies" "xcopies")) nil [21362 21497]) ("multiple-append" function (:arguments ("x" "nrofcopies" "xcopies")) nil [21499 21640]) ("new-factor" function (:arguments ("f")) nil [21642 22480]) ("xor-merge" function (:arguments ("u" "v")) nil [22509 23022]) ("put-into-its-bucket" function (:arguments ("r")) nil [23061 23474]) ("*how-to-handle-new-relations*" variable (:default-value (quote continuous-elimination)) nil [25023 25085]) ("*count-x*" variable (:default-value 100) nil [25086 25108]) ("define-relation-handling" function (:arguments ("mode")) nil [25111 27771]) ("define-relation-handling" code nil nil [27774 27815]) ("h1" function (:arguments ("y")) nil [29439 29492]) ("ilog2" function (:arguments ("x")) nil [29493 29540]) ("2^i" function (:arguments ("i")) nil [29541 29571]) ("ilog2h1y" function (:arguments ("y")) nil [29572 29612]) ("yofh" function (:arguments ("h" "quadrant")) nil [29616 29810]) ("init-subsieve" function (:arguments ("y" "ystop" "quadrant")) nil [29821 30289]) ("init-sieve" function (:arguments ("a" "beta" "gamma")) nil [30293 30730]) ("sieve-for-ab" function (:arguments ("a" "b" "a-factors")) nil [30733 31896]) ("b-generator" function (:arguments ("a" "a-factors" "d")) nil [31927 34747]) ("fb-log-sum" function (:arguments ("i0" "i1")) nil [34788 34924]) ("topoff-index" function (:arguments ("log-sum")) nil [34926 35076]) ("topoff-bucket" function (:arguments ("log-sum")) nil [35077 35158]) ("make-topoff-n-cubes" function (:arguments ("dimension")) nil [35160 37029]) ("merge-cubes" function (:arguments ("a1" "a2")) nil [37032 37271]) ("make-cubes" function (:arguments ("a-list" "log-rest" "q" "qmax" "d")) nil [37273 38407]) ("make-cublets" function (:arguments ("a-list" "log-rest" "q" "qmax" "d")) nil [38410 39203]) ("a-generator" function nil nil [39502 41167]) ("defconstant" code nil nil [41419 41509]) ("minutes" function nil nil [41511 41591]) ("nice-time" function (:arguments ("mins")) nil [41593 42212]) ("concat" function (:arguments ("&rest" "strngs")) nil [42218 42282]) ("str$" function (:arguments ("x")) nil [42283 42324]) ("defconstant" code nil nil [42326 42358]) ("defconstant" code nil nil [42359 42459]) ("centered-title" function (:arguments ("x")) nil [42461 42791]) ("centered-report" function (:arguments ("x")) nil [42793 42895]) ("fb-picture" function (:arguments ("wid")) nil [42897 43445]) ("factors-of-n-report" function nil nil [43448 43577]) ("initial-report" function nil nil [43580 44619]) ("report" function nil nil [44622 45690]) ("report?" function nil nil [45692 45764]) ("report?sieving-time" function nil nil [45766 45878]) ("report?total-time" function nil nil [45880 46952]) ("m-opt" function (:arguments ("log10n")) nil [48063 48125]) ("b-opt" function (:arguments ("n")) nil [48127 48265]) ("factor-base-size" function (:arguments ("n")) nil [48267 48316]) ("a_ideal" function (:arguments ("n" "m")) nil [48318 48361]) ("qs" function (:arguments ("n" "&key" "m" "b" "delta-t" "omit-below" "slp-log2" "alfa" "report" "return")) nil [51290 53594]) ("factors" function (:arguments ("n" "&key" "report")) nil [54131 55066]) ("efactors" function (:arguments ("n" "&key" "report")) nil [55177 55509]))
    :file "ulimyhmpqs.lisp"
    :pointmax 55671
    :unmatched-syntax 'nil
    )
   (semanticdb-table "shelisp.lisp"
    :major-mode 'lisp-mode
    :tags '(("*shelisp-temp-directory*" variable (:default-value "/tmp/") nil [1286 1380]) ("*expr-escape-chars*" variable (:default-value "?") nil [1448 1594]) ("*expr-escape-escape-chars*" variable (:default-value "\\?") nil [1596 1769]) ("mixed-script" function (:arguments ("&rest" "strlist")) nil [2185 2556]) ("mixed-template" function (:arguments ("&rest" "strlist")) nil [2558 2888]) ("ls" function (:arguments ("&optional" "pattern" "&key" "options" "dir")) nil [7664 7955]) ("pwd" function nil nil [8256 8429]) ("md5sum" function (:arguments ("file")) nil [8431 8970]) ("dir-md5sum" function (:arguments ("dir" "&key" "verbose")) nil [8972 9762]) ("mktemp" function (:arguments ("pattern")) nil [9764 9992]) ("basename" function (:arguments ("path" "&optional" "termination")) nil [9994 10230]) ("dirname" function (:arguments ("path")) nil [10232 10318]) ("make-temp-file" function nil nil [10320 10483]) ("gs" function (:arguments ("ps" "&key" "result-type" "driver" "output-file" "crop" "resolution" "comment")) nil [10485 11818]) ("tex" function (:arguments ("tex" "&key" "output-file" "latex" "result-type")) nil [11820 13629]))
    :file "shelisp.lisp"
    :pointmax 13892
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
